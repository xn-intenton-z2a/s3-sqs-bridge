# .github/workflows/maintenance-issue-creator.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: Create Maintenance Issue
concurrency: agentic-lib-issue
run-name: "Create Maintenance Issue"

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Text to drive the issue creation (if "house choice", a currently random prompt will be selected). e.g. "Make an improvement to tests."'
        required: false
        type: string
        default: 'house choice'
  schedule:
    - cron: '0 5 */7 * *' # schedule-1
    #- cron: '0 5 * * *' # schedule-2
    #- cron: '0 */1 4-31/4 * *' # schedule-3
    #- cron: '0,27 */1 4-31/4 * *' # schedule-4

jobs:

  agentic-lib:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: agentic-lib
        id: agentic-lib
        shell: bash
        run: |
          maintenanceIssuesWipLimit=$(grep '^maintenanceIssuesWipLimit:' .github/agentic-lib.yml | awk '{print $2}')
          echo "maintenanceIssuesWipLimit=${maintenanceIssuesWipLimit}"
          echo "maintenanceIssuesWipLimit=${maintenanceIssuesWipLimit}" >> $GITHUB_OUTPUT
    outputs:
      maintenanceIssuesWipLimit: ${{ steps.agentic-lib.outputs.maintenanceIssuesWipLimit }}

  # If the prompt is "house choice", a random prompt will be selected from the prompt library otherwise the supplied title will be used.
  select-prompt:
    runs-on: ubuntu-latest
    outputs:
      prompt: ${{ steps.extract.outputs.prompt }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Select prompt from ./prompts
        id: select
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            let prompt = '${{ inputs.prompt }}';
            if (prompt === 'house choice') {
              const promptsDir = './prompts';
              // Get all items in the directory
              const items = fs.readdirSync(promptsDir);
              // Filter only the files (exclude directories)
              const files = items.filter(item => {
                const filePath = path.join(promptsDir, item);
                return fs.lstatSync(filePath).isFile();
              });
            
              if (files.length === 0) {
                core.setFailed('No prompt files found in the prompts directory.');
              } else {
                // Select a random file
                const randomFile = files[Math.floor(Math.random() * files.length)];
                const filePath = path.join(promptsDir, randomFile);
                prompt = fs.readFileSync(filePath, 'utf8');
              }
            }
              
            core.setOutput('prompt', prompt);
            core.info(`prompt: ${prompt}`);

  generate-maintenance-issue:
    needs:
      - select-prompt
    permissions:
      contents: write
      issues: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-completion-generate-maintenance-issue.yml@3.11.3'
    with:
      prompt: ${{ needs.select-prompt.outputs.prompt }}
      maintenanceIssuesWipLimit: '${{ needs.agentic-lib.outputs.maintenanceIssuesWipLimit }}'
      target: ${{ inputs.target || 'src/lib/main.js' }}
      testFile: ${{ inputs.testFile || 'tests/unit/main.test.js' }}
      readmeFile: 'README.md'
      missionFile: 'MISSION.md'
      contributingFile: 'CONTRIBUTING.md'
      dependenciesFile: 'package.json'
      buildScript: 'npm run build'
      testScript: 'npm test'
      issueSelectionLabel: 'maintenance'
      mainScript: ${{ vars.MAIN_SCRIPT || 'npm run start' }}
      model: ${{ vars.CHATGPT_API_MODEL || 'o3-mini' }}
      npmAuthOrganisation: '@xn-intenton-z2a'
    secrets:
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  create-issue:
    needs:
      - select-prompt
      - generate-maintenance-issue
    permissions:
      issues: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-create-issue.yml@3.11.3'
    with:
      issueTitle: ${{ needs.generate-maintenance-issue.outputs.issueTitle }}
      issueBody: ${{ needs.generate-maintenance-issue.outputs.issueDescription }}
      issueLabels: 'maintenance, automated'

  select-issue:
    permissions:
      issues: read
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-select-issue.yml@3.11.3'
    with:
      issueNumber: ''
      selectionLabel: 'automated'
    secrets:
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  stats:
    needs:
      - select-issue
      - create-issue
    if: ${{ always() }}
    permissions:
      contents: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-stats.yml@3.11.3'
    with:
      cache: 'npm'
      npmAuthOrganisation: '@xn-intenton-z2a'
      lastActivityName: ${{ github.workflow }}
      lastActivityBranchName: ${{ github.ref_name }}
      nextIssue: "[${{ needs.select-issue.outputs.issueNumber }}] ${{ needs.select-issue.outputs.issueTitle }} ${{ needs.select-issue.outputs.issueLabels }}"
      public: 'public'
      s3BucketUrl: 's3://agentic-lib-telemetry-bucket/events/'
      s3WebsiteBucketUrl: 's3://agentic-lib-public-website-stats-bucket/'
      iamActionsRoleArn: 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role'
      iamStatsBucketWriterRoleArn: 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role'
      iamPublicWebsiteStatsBucketWriterRoleArn: 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role'
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
