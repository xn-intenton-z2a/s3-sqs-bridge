# .github/workflows/discussion-to-seed-repository.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: discussions-bot
concurrency: discussions-bot
run-name: "discussions bot"

on:
  discussion:
    types:
      - created
      - edited
      - answered
      - unanswered
      - deleted
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
  discussion_comment:
    types:
      - created
      - edited
      - deleted
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
  workflow_dispatch:
    inputs:
      discussionBody:
        description: 'The body of the discussion'
        required: false
        type: string
        default: ''
  workflow_call:
    inputs:
      discussionBody:
        description: 'The body of the discussion'
        required: false
        type: string
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
  schedule:
    - cron: '20 8 */28 * *' # schedule-1
    #- cron: '20 8,16 * * *' # schedule-2
    #- cron: '20 */2 * * *' # schedule-3
    #- cron: '20 * * * *' # schedule-4

env:
  defaultDiscussionBody: 'Summarise the current state of the repository, activity since the last update and how we are tracking against the mission and recommends next steps.'
  gitUserEmail: 'action@github.com'
  gitUserName: 'GitHub Actions[bot]'
  npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
  s3BucketUrl: ${{ vars.s3BucketUrl || 's3://agentic-lib-telemetry-bucket/events/' }}
  s3WebsiteBucketUrl: ${{ vars.s3WebsiteBucketUrl || 's3://agentic-lib-public-website-stats-bucket/' }}
  iamActionsRoleArn: ${{ vars.iamActionsRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role' }}
  iamStatsBucketWriterRoleArn: ${{ vars.iamStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role' }}
  iamPublicWebsiteStatsBucketWriterRoleArn: ${{ vars.iamPublicWebsiteStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role' }}

jobs:
  agentic-lib:
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-agent-config.yml@6.1.0'
    with:
      configPath: ${{ vars.configPath || '.github/agents/agentic-lib.yml' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  process-discussion-post:
    needs:
      - agentic-lib
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ github.ref }}

      - name: discussion
        id: discussion
        uses: actions/github-script@v7
        env:
          discussionBody: ${{ inputs.discussionBody || env.defaultDiscussionBody }}
          userName: "${{ github.actor }} running workflow ${{ github.workflow }} using workflow event ${{ github.event_name }}"
          seedDiscussionFilepath: ${{ needs.agentic-lib.outputs.seedDiscussionFilepath }}
        with:
          script: |
            let authorAssociation; // discussion author_association
            let body = ''; // discussion body
            let state = ''; // discussion state
            let title = ''; // discussion title
            let url = ''; // discussion html_url

            let categoryName = ''; // discussion category name

            let userName = '' // discussion user name

            let labels = ''; // discussion labels.*

            let reactions = ''; // discussion reactions confused + eyes + heart + hooray + laugh + rocket

            if (context.eventName === 'discussion') {

              authorAssociation = context.payload.discussion.author_association;
              body = context.payload.discussion.body;
              state = context.payload.discussion.state;
              title = context.payload.discussion.title;
              url = context.payload.discussion.html_url;
              categoryName = context.payload.discussion.category.name;
              userName = context.payload.discussion.user.name || context.payload.discussion.user.login;
              labels = context.payload.discussion.labels.join(', ');
              reactions = Object.keys(context.payload.discussion.reactions)
                .map(key => `${key}: ${context.payload.discussion.reactions[key]}`)
                .join(', ');

            } else if (context.eventName === 'discussion_comment') {

              authorAssociation = context.payload.comment.author_association;
              body = context.payload.comment.body;
              state = context.payload.discussion.state;
              title = context.payload.discussion.title;
              url = context.payload.comment.html_url;
              categoryName = context.payload.discussion.category.name;
              userName = context.payload.comment.user.name || context.payload.comment.user.login;
              labels = context.payload.discussion.labels.join(', ');
              reactions = Object.keys(context.payload.discussion.reactions)
                .map(key => `${key}: ${context.payload.discussion.reactions[key]}`)
                .join(', ');

            } else {
              // If not triggered by a discussion or comment, use the discussion from inputs if available or the default.
              body = process.env.discussionBody;
              userName = process.env.userName;

              // If URL is not provided, try to get it from SEED_DISCUSSION.md
              if (!url) {
                try {
                  const fs = require('fs');
                  const seedDiscussionPath = process.env.seedDiscussionFilepath;
                  core.info(`Looking for SEED_DISCUSSION.md at ${seedDiscussionPath}`);

                  if (fs.existsSync(seedDiscussionPath)) {
                    const seedDiscussionContent = fs.readFileSync(seedDiscussionPath, 'utf8');

                    // Extract URL from the first line
                    const firstLine = seedDiscussionContent.split('\n')[0].trim();
                    if (firstLine.startsWith('http')) {
                      url = firstLine;
                      core.info(`Using URL from SEED_DISCUSSION.md: ${url}`);
                    } else { 
                        core.warning(`First line of SEED_DISCUSSION.md does not contain a valid URL: ${firstLine}`);
                    }
                  } else {
                    core.warning(`SEED_DISCUSSION.md file not found at ${seedDiscussionPath}`);
                  }
                } catch (error) {
                  core.warning(`Error reading SEED_DISCUSSION.md: ${error.message}`);
                }
              }
            }

            core.setOutput('authorAssociation', authorAssociation);
            core.setOutput('body', body);
            core.setOutput('state', state);
            core.setOutput('title', title);
            core.setOutput('url', url);
            core.setOutput('categoryName', categoryName);
            core.setOutput('userName', userName);
            core.setOutput('labels', labels);
            core.setOutput('reactions', reactions);

            core.info(`authorAssociation: ${authorAssociation}`);
            core.info(`body: ${body}`);
            core.info(`state: ${state}`);
            core.info(`title: ${title}`);
            core.info(`url: ${url}`);
            core.info(`categoryName: ${categoryName}`);
            core.info(`userName: ${userName}`);
            core.info(`labels: ${labels}`);
            core.info(`reactions: ${reactions}`);

    outputs:
      authorAssociation: ${{ steps.discussion.outputs.authorAssociation }}
      body: ${{ steps.discussion.outputs.body }}
      state: ${{ steps.discussion.outputs.state }}
      title: ${{ steps.discussion.outputs.title }}
      url: ${{ steps.discussion.outputs.url }}
      categoryName: ${{ steps.discussion.outputs.categoryName }}
      userName: ${{ steps.discussion.outputs.userName }}
      labels: ${{ steps.discussion.outputs.labels }}
      reactions: ${{ steps.discussion.outputs.reactions }}


  generate-response:
    needs:
      - process-discussion-post
      - agentic-lib
    permissions:
      contents: write
      packages: read
      discussions: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-completion-discussions.yml@6.1.0'
    with:
      promptFilepath: '.github/agents/agent-discussion-bot.md'
      agentConfigContent: ${{ needs.agentic-lib.outputs.config }}
      discussionBody: ${{ needs.process-discussion-post.outputs.body }}
      discussionState: ${{ needs.process-discussion-post.outputs.state }}
      discussionTitle: ${{ needs.process-discussion-post.outputs.title }}
      discussionUrl: ${{ needs.process-discussion-post.outputs.url }}
      discussionCategoryName: ${{ needs.process-discussion-post.outputs.categoryName }}
      discussionUserInformation: "${{ needs.process-discussion-post.outputs.userName }} ${{ needs.process-discussion-post.outputs.authorAssociation }}"
      discussionLabels: ${{ needs.process-discussion-post.outputs.labels }}
      discussionReactions: ${{ needs.process-discussion-post.outputs.reactions }}
      workflowPathGlob: '.github/workflows/agent-discussions-bot.yml'
      buildScript: ${{ needs.agentic-lib.outputs.buildScript }}
      testScript: ${{ needs.agentic-lib.outputs.testScript }}
      mainScript: ${{ needs.agentic-lib.outputs.mainScript }}
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
      model: ${{ vars.CHATGPT_API_MODEL || 'o4-mini' }}
      npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
      cache: 'npm'

    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  post-reply:
    name: Post reply comment
    needs:
      - process-discussion-post
      - generate-response
    if: ${{ needs.generate-response.outputs.action != 'nop' }}
    runs-on: ubuntu-latest
    permissions:
      discussions: write

    steps:
      - name: Post reply
        uses: actions/github-script@v7
        env:
          reply: ${{ needs.generate-response.outputs.reply }}
          url: ${{ needs.process-discussion-post.outputs.url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Grab the reply text and URL from the job outputs
            const reply = process.env.reply;
            const url = process.env.url;
            const body = process.env.reply;

            // Determine discussion number and ID
            let discussionNumber;
            let discussionId;

            if (context.eventName === 'discussion') {
              discussionNumber = context.payload.discussion.number;
              discussionId = context.payload.discussion.node_id;
            } else if (context.eventName === 'discussion_comment') {
              discussionNumber = context.payload.discussion.number;
              discussionId = context.payload.discussion.node_id;
            } else {
              // Extract discussion number from URL
              const parts = url.split('/');
              const lastPart = parts[parts.length - 1];
              // Handle URLs with comment anchors like "1220#discussioncomment-13030804"
              discussionNumber = parseInt(lastPart.split('#')[0], 10);

              if (isNaN(discussionNumber)) {
                core.setFailed(`Could not extract discussion number from URL: ${url}`);
                return;
              }

              // Fetch the discussion ID using the discussion number
              try {
                const { owner, repo } = context.repo;
                const query = `
                  query($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      discussion(number: $number) {
                        id
                      }
                    }
                  }
                `;

                const result = await github.graphql(query, {
                  owner,
                  repo,
                  number: discussionNumber
                });

                discussionId = result.repository.discussion.id;
                core.info(`Fetched discussion ID: ${discussionId} for discussion number: ${discussionNumber}`);
              } catch (error) {
                core.setFailed(`Error fetching discussion ID: ${error.message}`);
                return;
              }
            }

            const mutation = `
              mutation ($discussionId: ID!, $body: String!) {
                addDiscussionComment(input: {
                  discussionId: $discussionId,
                  body: $body
                }) {
                comment { 
                  id 
                  url 
                }
              }
            }`;

            const result = await github.graphql(mutation, {
              discussionId,
              body
            });

            core.info(`Comment posted.`);

  seed-repository:
    needs:
      - generate-response
    if: ${{ needs.generate-response.outputs.action == 'seed-repository' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-seed-repository.yml@6.1.0'
    with:
      mission: ${{ needs.generate-response.outputs.detail }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  mission-to-source:
    needs:
      - generate-response
      - seed-repository
    if: ${{ needs.generate-response.outputs.action == 'seed-repository' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-mission-to-source.yml@6.1.0'
    with:
      mission: ${{ needs.generate-response.outputs.detail }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  library-to-feature:
    needs:
      - generate-response
    if: ${{ needs.generate-response.outputs.action == 'seed-repository' || needs.generate-response.outputs.action == 'create-feature' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-library-to-feature.yml@6.1.0'
    with:
      feature: ${{ needs.generate-response.outputs.detail }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  #feature-to-issue:
  #  needs:
  #    - process-discussion-post
  #    - generate-response
  #  if: ${{ needs.generate-response.outputs.action == 'create-issue' }}
  #  permissions:
  #    contents: write
  #    pull-requests: write
  #    checks: write
  #    issues: write
  #    id-token: write
  #    pages: write
  #  uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-feature-to-issue.yml@6.1.0'
  #  with:
  #    featureName: ${{ needs.generate-response.outputs.detail }}
  #  secrets:
  #    PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #    CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  #ready-issue:
  #  needs:
  #    - feature-to-issue
  #    - process-discussion-post
  #  if: ${{ needs.generate-response.outputs.action == 'seed-repository' || needs.generate-response.outputs.action == 'create-feature' || needs.generate-response.outputs.action == 'create-issue' }}
  #  permissions:
  #    contents: write
  #    pull-requests: write
  #    checks: write
  #    issues: write
  #    id-token: write
  #    pages: write
  #  uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-issue-to-ready-issue.yml@6.1.0'
  #  secrets:
  #    PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #    CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  #issue-to-code:
  #  needs:
  #    - ready-issue
  #    - generate-response
  #  if: ${{ needs.generate-response.outputs.action == 'create-issue' }}
  #  permissions:
  #    contents: write
  #    pull-requests: write
  #    checks: write
  #    issues: write
  #    id-token: write
  #    pages: write
  #  uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-issue-to-code.yml@6.1.0'
  #  secrets:
  #    PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  #    CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  trace-discussion:
    needs:
      - process-discussion-post
      - generate-response
      - seed-repository
      - agentic-lib
    if: ${{ needs.generate-response.outputs.action == 'seed-repository' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ github.ref }}

      - name: trace-discussion
        id: trace-discussion
        uses: actions/github-script@v7
        env:
          discussionTitle: ${{ needs.process-discussion-post.outputs.title }}
          discussionBody: ${{ needs.process-discussion-post.outputs.body }}
          discussionUrl: ${{ needs.process-discussion-post.outputs.url }}
          seedDiscussionFilepath: ${{ needs.agentic-lib.outputs.seedDiscussionFilepath }}
        with:
          script: |
            const title = process.env.discussionTitle;
            const body = process.env.discussionBody;
            const url = process.env.discussionUrl;
            const seedDiscussionFilepath = process.env.seedDiscussionFilepath;

            core.info(`title: ${title}`);
            core.info(`body: ${body}`);
            core.info(`url: ${url}`);

            const fs = require('fs');
            const path = require('path');

            // Create trace file and the parent directory of seedDiscussionFilepath if it doesn't exist
            if (!fs.existsSync(path.dirname(seedDiscussionFilepath))) {
              fs.mkdirSync(path.dirname(seedDiscussionFilepath), { recursive: true });
            }
            const traceContent = `${url}\n\n# Discussion Seed Trace\n\nThis repository was seeded from a GitHub Discussion.\n\n- **Title**: ${title}\n- **URL**: ${url}\n- **Created at**: ${new Date().toISOString()}\n`;
            fs.writeFileSync(seedDiscussionFilepath, traceContent);

            core.info(`Trace file saved to ${seedDiscussionFilepath}`);

      - name: Commit changes
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git add  ${{ needs.agentic-lib.outputs.seedDiscussionFilepath }}
          git commit -m "Add discussion seed trace" || echo "No changes to commit"
          git push

  # TODO: Job to switch up to build mode when kicking off actity

  # TODO: Job to drop down to maintenance mode if the discussion topic is resolved.

  # TODO: Post as the Bot's app account.
