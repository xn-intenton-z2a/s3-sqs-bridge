# .github/workflows/discussion-to-seed-repository.yml
# force change
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: discussions-bot
concurrency: agentic-lib-bot
run-name: "discussions bot"

on:
  discussion:
    types:
      - created
      - edited
      - answered
      - unanswered
      - deleted
  discussion_comment:
    types:
      - created
      - edited
      - deleted
  workflow_dispatch:
    inputs:
      discussionBody:
        description: 'The body of the discussion'
        required: false
        type: string
        default: ''
  workflow_call:
    inputs:
      discussionBody:
        description: 'The body of the discussion'
        required: false
        type: string
        default: ''
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
  schedule:
    - cron: '4 8 */28 * *' # schedule-1
    #- cron: '4 8,16 * * *' # schedule-2
    #- cron: '4 */4 * * *' # schedule-3
    #- cron: '4 * * * *' # schedule-4

env:
  defaultDiscussionBody: 'Summarise the activity since the last update in terms of how we are tracking against the mission and recommends next steps in fewer than 100 words.'
  gitUserEmail: 'action@github.com'
  gitUserName: 'GitHub Actions[bot]'
  npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
  s3BucketUrl: ${{ vars.s3BucketUrl || 's3://agentic-lib-telemetry-bucket/events/' }}
  s3WebsiteBucketUrl: ${{ vars.s3WebsiteBucketUrl || 's3://agentic-lib-public-website-stats-bucket/' }}
  iamActionsRoleArn: ${{ vars.iamActionsRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role' }}
  iamStatsBucketWriterRoleArn: ${{ vars.iamStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role' }}
  iamPublicWebsiteStatsBucketWriterRoleArn: ${{ vars.iamPublicWebsiteStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role' }}

jobs:
  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check if CHATGPT_API_SECRET_KEY is available
        run: |
          if [ -z "${{ secrets.CHATGPT_API_SECRET_KEY }}" ]; then
            echo "::error::CHATGPT_API_SECRET_KEY is not available. Stopping workflow."
            exit 1
          fi
          echo "CHATGPT_API_SECRET_KEY is available."

  agentic-lib:
    needs:
      - check-secrets
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-agent-config.yml@6.9.9'
    with:
      configPath: ${{ vars.configPath || '.github/agents/agentic-lib.yml' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  process-discussion-post:
    needs:
      - check-secrets
      - agentic-lib
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours

      - name: discussion
        id: discussion
        uses: actions/github-script@v7
        env:
          discussionBody: ${{ inputs.discussionBody || env.defaultDiscussionBody }}
          userName: "${{ github.actor }} running workflow ${{ github.workflow }} using workflow event ${{ github.event_name }}"
          intentionFilepath: ${{ needs.agentic-lib.outputs.intentionFilepath }}
        with:
          script: |
            // Initialize variables with default values
            let authorAssociation = ''; // discussion author_association
            let body = ''; // discussion body
            let state = ''; // discussion state
            let title = ''; // discussion title
            let url = ''; // discussion html_url
            let categoryName = ''; // discussion category name
            let userName = ''; // discussion user name
            let labels = ''; // discussion labels.*
            let reactions = ''; // discussion reactions confused + eyes + heart + hooray + laugh + rocket

            if (context.eventName === 'discussion') {

              authorAssociation = context.payload.discussion.author_association;
              body = context.payload.discussion.body;
              state = context.payload.discussion.state;
              title = context.payload.discussion.title;
              url = context.payload.discussion.html_url;
              categoryName = context.payload.discussion.category.name;
              userName = context.payload.discussion.user.name || context.payload.discussion.user.login;
              labels = context.payload.discussion.labels.join(', ');
              reactions = Object.keys(context.payload.discussion.reactions)
                .map(key => `${key}: ${context.payload.discussion.reactions[key]}`)
                .join(', ');

            } else if (context.eventName === 'discussion_comment') {

              authorAssociation = context.payload.comment.author_association;
              body = context.payload.comment.body;
              state = context.payload.discussion.state;
              title = context.payload.discussion.title;
              url = context.payload.comment.html_url;
              categoryName = context.payload.discussion.category.name;
              userName = context.payload.comment.user.name || context.payload.comment.user.login;
              labels = context.payload.discussion.labels.join(', ');
              reactions = Object.keys(context.payload.discussion.reactions)
                .map(key => `${key}: ${context.payload.discussion.reactions[key]}`)
                .join(', ');

            } else {
              // If not triggered by a discussion or comment, use the discussion from inputs if available or the default.
              body = process.env.discussionBody;
              userName = process.env.userName;

              // If URL is not provided, try to get it from intentïon.md
              if (!url) {
                try {
                  const fs = require('fs');
                  const intentionFilepath = process.env.intentionFilepath;
                  core.info(`Looking for last */discussions/* in intentïon.md at ${intentionFilepath}`);

                  if (fs.existsSync(intentionFilepath)) {
                    const intentionFileContent = fs.readFileSync(intentionFilepath, 'utf8');
                    const lines = intentionFileContent.split('\n');

                    // Filter to lines matching ^*https://.*/discussions/*$ and extract the last matching line.
                    const discussionsUrlLines = lines.filter(line => line.match(/https:\/\/.*\/discussions\//));
                    if (discussionsUrlLines.length === 0) {
                      core.setFailed(`No matching GitHub Discussions URL found in intentïon.md at ${intentionFilepath}`);
                      return;
                    } else {
                      const lastUrlLine = discussionsUrlLines[discussionsUrlLines.length - 1];

                      // Extract URL by ignoring anything before the first https:// and up to the first non-url character.
                      const urlMatch = lastUrlLine.match(/https:\/\/[^ ]+/);
                      if (urlMatch) {
                        url = urlMatch[0];
                        core.info(`Using URL from intentïon.md at ${intentionFilepath}: ${url}`);
                      } else {
                        core.setFailed(`No matching GitHub Discussions URL found in selected line "${lastUrlLine}" in intentïon.md at ${intentionFilepath}`);
                        return;
                      }
                    }
                  } else {
                    core.setFailed(`intentïon.md file not found at ${intentionFilepath}`);
                    return;
                  }
                } catch (error) {
                  core.setFailed(`Error reading intentïon.md at ${intentionFilepath}: ${error.message}`);
                  return;
                }
              }
            }

            core.setOutput('authorAssociation', authorAssociation);
            core.setOutput('body', body);
            core.setOutput('state', state);
            core.setOutput('title', title);
            core.setOutput('url', url);
            core.setOutput('categoryName', categoryName);
            core.setOutput('userName', userName);
            core.setOutput('labels', labels);
            core.setOutput('reactions', reactions);

            core.info(`authorAssociation: ${authorAssociation}`);
            core.info(`body: ${body}`);
            core.info(`state: ${state}`);
            core.info(`title: ${title}`);
            core.info(`url: ${url}`);
            core.info(`categoryName: ${categoryName}`);
            core.info(`userName: ${userName}`);
            core.info(`labels: ${labels}`);
            core.info(`reactions: ${reactions}`);

    outputs:
      authorAssociation: ${{ steps.discussion.outputs.authorAssociation }}
      body: ${{ steps.discussion.outputs.body }}
      state: ${{ steps.discussion.outputs.state }}
      title: ${{ steps.discussion.outputs.title }}
      url: ${{ steps.discussion.outputs.url }}
      categoryName: ${{ steps.discussion.outputs.categoryName }}
      userName: ${{ steps.discussion.outputs.userName }}
      labels: ${{ steps.discussion.outputs.labels }}
      reactions: ${{ steps.discussion.outputs.reactions }}

  generate-response:
    needs:
      - process-discussion-post
      - agentic-lib
    if: ${{ !cancelled() && startsWith(needs.process-discussion-post.outputs.url, 'https') }}
    permissions:
      contents: write
      packages: read
      discussions: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-completion-discussions.yml@6.9.9'
    with:
      promptFilepath: '.github/agents/agent-discussion-bot.md'
      agentConfigContent: ${{ needs.agentic-lib.outputs.config }}
      discussionBody: ${{ needs.process-discussion-post.outputs.body }}
      discussionState: ${{ needs.process-discussion-post.outputs.state }}
      discussionTitle: ${{ needs.process-discussion-post.outputs.title }}
      discussionUrl: ${{ needs.process-discussion-post.outputs.url }}
      discussionCategoryName: ${{ needs.process-discussion-post.outputs.categoryName }}
      discussionUserInformation: "${{ needs.process-discussion-post.outputs.userName }} ${{ needs.process-discussion-post.outputs.authorAssociation }}"
      discussionLabels: ${{ needs.process-discussion-post.outputs.labels }}
      discussionReactions: ${{ needs.process-discussion-post.outputs.reactions }}
      workflowPathGlob: '.github/workflows/agent-discussions-bot.yml'
      allSourcePaths: ${{ needs.agentic-lib.outputs.allSourcePaths }}
      allTestsPaths: ${{ needs.agentic-lib.outputs.allTestsPaths }}
      buildScript: ${{ needs.agentic-lib.outputs.buildScript }}
      testScript: ${{ needs.agentic-lib.outputs.testScript }}
      mainScript: ${{ needs.agentic-lib.outputs.mainScript }}
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
      model: ${{ vars.CHATGPT_API_MODEL || 'o4-mini' }}
      npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
      cache: 'npm'

    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  post-reply:
    name: Post reply comment
    needs:
      - process-discussion-post
      - generate-response
    if: ${{ needs.generate-response.outputs.action != 'nop' && startsWith(needs.process-discussion-post.outputs.url, 'https') }}
    runs-on: ubuntu-latest
    permissions:
      discussions: write

    steps:
      - name: Post reply
        uses: actions/github-script@v7
        env:
          action: ${{ needs.generate-response.outputs.action }}
          detail: ${{ needs.generate-response.outputs.detail }}
          reply: ${{ needs.generate-response.outputs.reply }}
          url: ${{ needs.process-discussion-post.outputs.url }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Grab the reply text and URL from the job outputs
            const action = process.env.action;
            const detail = process.env.detail;
            const reply = process.env.reply;
            const url = process.env.url;
            let body = `${reply}\n\n[action: "${action}" with detail: "${detail}"]`;

            // Determine discussion number and ID
            let discussionNumber;
            let discussionId;

            if (context.eventName === 'discussion') {
              discussionNumber = context.payload.discussion.number;
              discussionId = context.payload.discussion.node_id;
            } else if (context.eventName === 'discussion_comment') {
              discussionNumber = context.payload.discussion.number;
              discussionId = context.payload.discussion.node_id;
            } else {
              // Extract discussion number from URL
              const parts = url.split('/');
              const lastPart = parts[parts.length - 1];
              // Handle URLs with comment anchors like "1220#discussioncomment-13030804"
              discussionNumber = parseInt(lastPart.split('#')[0], 10);

              if (isNaN(discussionNumber)) {
                core.setFailed(`Could not extract discussion number from URL: ${url}`);
                return;
              }

              // Fetch the discussion ID using the discussion number
              try {
                const { owner, repo } = context.repo;
                const query = `
                  query($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      discussion(number: $number) {
                        id
                      }
                    }
                  }
                `;

                const result = await github.graphql(query, {
                  owner,
                  repo,
                  number: discussionNumber
                });

                discussionId = result.repository.discussion.id;
                core.info(`Fetched discussion ID: ${discussionId} for discussion number: ${discussionNumber}`);
              } catch (error) {
                core.setFailed(`Error fetching discussion ID: ${error.message}`);
                return;
              }
            }

            const mutation = `
              mutation ($discussionId: ID!, $body: String!) {
                addDiscussionComment(input: {
                  discussionId: $discussionId,
                  body: $body
                }) {
                comment { 
                  id 
                  url 
                }
              }
            }`;

            const result = await github.graphql(mutation, {
              discussionId,
              body
            });

            core.info(`Comment posted.`);

  log-intention-activity-post-reply:
    needs:
      - process-discussion-post
      - generate-response
      - post-reply
      - agentic-lib
    if: ${{ !cancelled() && startsWith(needs.process-discussion-post.outputs.url, 'https') }}
    runs-on: ubuntu-latest
    env:
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours

      - name: log-intention-activity
        id: log-intention-activity
        uses: actions/github-script@v7
        env:
          action: ${{ needs.generate-response.outputs.action }}
          detail: ${{ needs.generate-response.outputs.detail }}
          reply: ${{ needs.generate-response.outputs.reply }}
          url: ${{ needs.process-discussion-post.outputs.url }}
          usage: ${{ needs.generate-response.outputs.usage }}
          outcome: ${{ needs.post-reply.result }}
          intentionFilepath: ${{ needs.agentic-lib.outputs.intentionFilepath }}
        with:
          script: |
            const action = process.env.action;
            const detail = process.env.detail;
            const reply = process.env.reply;
            const url = process.env.url;
            const usage = process.env.usage;
            const outcome = process.env.outcome;
            const intentionFilepath = process.env.intentionFilepath;

            const activity = `Reply Posted on "${url}" by the repository bot which took the action "${action}":
            
            ${reply}
            
            with the detail:
            
            "${detail}"
            
            and outcome "${outcome}"`;

            core.info(`Activity: ${activity}`);
            core.info(`Seed discussion filepath: ${intentionFilepath}`);

            const fs = require('fs');
            const path = require('path');

            // Create trace file and the parent directory of intentionFilepath if it doesn't exist
            if (!fs.existsSync(path.dirname(intentionFilepath))) {
              fs.mkdirSync(path.dirname(intentionFilepath), { recursive: true });
            }
            const isoDate = new Date().toISOString();
            let activityLogContent = `
            ## Discussions activity at ${isoDate}\n\n${activity}\n\nLLM API Usage:\n\n\`\`\`json\n${usage}\n\n\`\`\`\n---\n\n`;
            if (action == 'seed-repository') {
              activityLogContent = `# Activity Log\n\n${activityLogContent}`;
            }
            if (fs.existsSync(intentionFilepath)) {
              fs.appendFileSync(intentionFilepath, activityLogContent);
            } else {
              fs.writeFileSync(intentionFilepath, activityLogContent);
            }
            core.info(`Activity logged to ${intentionFilepath}`);

      - name: Commit changes
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git add  ${{ needs.agentic-lib.outputs.intentionFilepath }}
          git commit -m "Activity logged by agent-discussions-bot.yml" || echo "No changes to commit"
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours
          git push -v origin ${{ github.ref_name }}

  seed-repository:
    needs:
      - process-discussion-post
      - generate-response
    if: ${{ needs.generate-response.outputs.action == 'seed-repository' }}
    permissions:
      contents: write
      pull-requests: write
      packages: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-seed-repository.yml@6.9.9'
    with:
      mission: "${{ needs.generate-response.outputs.detail }} as mentioned in reply ${{ needs.generate-response.outputs.detail }}"
      feature: ''
      url: ${{ needs.process-discussion-post.outputs.url }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  log-intention-activity-seed-repository:
    needs:
      - process-discussion-post
      - generate-response
      - seed-repository
      - agentic-lib
    runs-on: ubuntu-latest
    env:
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours

      - name: log-intention-activity
        id: log-intention-activity
        uses: actions/github-script@v7
        env:
          action: ${{ needs.generate-response.outputs.action }}
          detail: ${{ needs.generate-response.outputs.detail }}
          reply: ${{ needs.generate-response.outputs.reply }}
          url: ${{ needs.process-discussion-post.outputs.url }}
          usage: ${{ needs.generate-response.outputs.usage }}
          outcome: ${{ needs.seed-repository.result }}
          intentionFilepath: ${{ needs.agentic-lib.outputs.intentionFilepath }}
        with:
          script: |
            const action = process.env.action;
            const detail = process.env.detail;
            const reply = process.env.reply;
            const url = process.env.url;
            const usage = process.env.usage;
            const outcome = process.env.outcome;
            const intentionFilepath = process.env.intentionFilepath;

            const activity = `When responding to a post on url ${url}, the repository bot took the action "${action}":
            
            ${reply}
            
            with the detail:
            
            "${detail}"
            
            and outcome "${outcome}"`;

            core.info(`Activity: ${activity}`);
            core.info(`Seed discussion filepath: ${intentionFilepath}`);

            const fs = require('fs');
            const path = require('path');

            // Create trace file and the parent directory of intentionFilepath if it doesn't exist
            if (!fs.existsSync(path.dirname(intentionFilepath))) {
              fs.mkdirSync(path.dirname(intentionFilepath), { recursive: true });
            }
            const isoDate = new Date().toISOString();
            let activityLogContent = `
            ## Seed repository activity at ${isoDate}\n\n${activity}\n\nLLM API Usage:\n\n\`\`\`json\n${usage}\n\n\`\`\`\n---\n\n`;
            if (action == 'seed-repository') {
              activityLogContent = `# Activity Log\n\n${activityLogContent}`;
            }
            if (fs.existsSync(intentionFilepath)) {
              fs.appendFileSync(intentionFilepath, activityLogContent);
            } else {
              fs.writeFileSync(intentionFilepath, activityLogContent);
            }
            core.info(`Activity logged to ${intentionFilepath}`);

      - name: Commit changes
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git add  ${{ needs.agentic-lib.outputs.intentionFilepath }}
          git commit -m "Activity logged by agent-discussions-bot.yml" || echo "No changes to commit"
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours
          git push -v origin ${{ github.ref_name }}

  create-feature:
    needs:
      - agentic-lib
      - generate-response
    if: ${{ needs.generate-response.outputs.action == 'create-feature' }}
    permissions:
      contents: write
      pull-requests: write
      packages: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/agent-seed-repository.yml@6.9.9'
    with:
      mission: ''
      feature: "${{ needs.generate-response.outputs.detail }} as mentioned in reply ${{ needs.generate-response.outputs.detail }}"
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  log-intention-activity-create-feature:
    needs:
      - generate-response
      - create-feature
      - agentic-lib
    runs-on: ubuntu-latest
    env:
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours

      - name: log-intention-activity
        id: log-intention-activity
        uses: actions/github-script@v7
        env:
          action: ${{ needs.generate-response.outputs.action }}
          detail: ${{ needs.generate-response.outputs.detail }}
          reply: ${{ needs.generate-response.outputs.reply }}
          usage: ${{ needs.generate-response.outputs.usage }}
          outcome: ${{ needs.create-feature.result }}
          intentionFilepath: ${{ needs.agentic-lib.outputs.intentionFilepath }}
        with:
          script: |
            const action = process.env.action;
            const detail = process.env.detail;
            const reply = process.env.reply;
            const usage = process.env.usage;
            const outcome = process.env.outcome;
            const intentionFilepath = process.env.intentionFilepath;

            const activity = `The repository bot took the following action "${action}":
            
            ${reply}
            
            with the detail:
            
            "${detail}"
            
            and outcome "${outcome}"`;

            core.info(`Activity: ${activity}`);
            core.info(`Seed discussion filepath: ${intentionFilepath}`);

            const fs = require('fs');
            const path = require('path');

            // Create trace file and the parent directory of intentionFilepath if it doesn't exist
            if (!fs.existsSync(path.dirname(intentionFilepath))) {
              fs.mkdirSync(path.dirname(intentionFilepath), { recursive: true });
            }
            const isoDate = new Date().toISOString();
            let activityLogContent = `
            ## Create feature activity at ${isoDate}\n\n${activity}\n\nLLM API Usage:\n\n\`\`\`json\n${usage}\n\n\`\`\`\n---\n\n`;
            if (action == 'seed-repository') {
              activityLogContent = `# Activity Log\n\n${activityLogContent}`;
            }
            if (fs.existsSync(intentionFilepath)) {
              fs.appendFileSync(intentionFilepath, activityLogContent);
            } else {
              fs.writeFileSync(intentionFilepath, activityLogContent);
            }
            core.info(`Activity logged to ${intentionFilepath}`);

      - name: Commit changes
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git add  ${{ needs.agentic-lib.outputs.intentionFilepath }}
          git commit -m "Activity logged by agent-discussions-bot.yml" || echo "No changes to commit"
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours
          git push -v origin ${{ github.ref_name }}

  declare-status-and-halt:
    needs:
      - process-discussion-post
      - generate-response
      - agentic-lib
    if: ${{ !cancelled() && (needs.generate-response.outputs.action == 'mission-complete' || needs.generate-response.outputs.action == 'stop') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours

      - name: Log the declaration in the seed discussion file (intentïon) file.
        run: |
          mkdir -p "$(dirname "${{ needs.agentic-lib.outputs.intentionFilepath }}")"
          if [ ! -f "${{ needs.agentic-lib.outputs.intentionFilepath }}" ]; then
            touch "${{ needs.agentic-lib.outputs.intentionFilepath }}"
          fi
          echo "" >> "${{ needs.agentic-lib.outputs.intentionFilepath }}"
          echo "${{ needs.generate-response.outputs.action }} at $(date)" >> "${{ needs.agentic-lib.outputs.intentionFilepath }}"
          echo "" >> "${{ needs.agentic-lib.outputs.intentionFilepath }}"
          echo "HALT" >> "${{ needs.agentic-lib.outputs.intentionFilepath }}"

      - name: Commit changes
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git add "${{ needs.agentic-lib.outputs.intentionFilepath }}"
          git commit -m "HALT with ${{ needs.generate-response.outputs.action }}"
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours
          git push -v origin ${{ github.ref_name }}
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
