LanguagePackage


 .NETAmazon.CDK
 Gogithub.com/aws/aws-cdk-go/awscdk/v2
 Javasoftware.amazon.awscdk
 Pythonaws_cdk
 TypeScriptaws-cdk-lib


AWS Cloud Development Kit Library
The AWS CDK construct library provides APIs to define your CDK application and add
CDK constructs to the application.
Usage
Upgrade from CDK 1.x
When upgrading from CDK 1.x, remove all dependencies to individual CDK packages
from your dependencies file and follow the rest of the sections.
Installation
To use this package, you need to declare this package and the constructs package as
dependencies.
According to the kind of project you are developing:
For projects that are CDK libraries in NPM, declare them both under the devDependencies and peerDependencies sections.
To make sure your library is compatible with the widest range of CDK versions: pick the minimum aws-cdk-lib version
that your library requires; declare a range dependency with a caret on that version in peerDependencies, and declare a
point version dependency on that version in devDependencies.
For example, let's say the minimum version your library needs is 2.38.0. Your package.json should look like this:
{
  "peerDependencies": {
    "aws-cdk-lib": "^2.38.0",
    "constructs": "^10.0.0"
  },
  "devDependencies": {
    /* Install the oldest version for testing so we don't accidentally use features from a newer version than we declare */
    "aws-cdk-lib": "2.38.0"
  }
}

Example not in your language?
For CDK apps, declare them under the dependencies section. Use a caret so you always get the latest version:
{
  "dependencies": {
    "aws-cdk-lib": "^2.38.0",
    "constructs": "^10.0.0"
  }
}

Example not in your language?
Use in your code
Classic import
You can use a classic import to get access to each service namespaces:
import { Stack, App, aws_s3 as s3 } from 'aws-cdk-lib';

const app = new App();
const stack = new Stack(app, 'TestStack');

new s3.Bucket(stack, 'TestBucket');

Example not in your language?
Barrel import
Alternatively, you can use "barrel" imports:
import { App, Stack } from 'aws-cdk-lib';
import { Bucket } from 'aws-cdk-lib/aws-s3';

const app = new App();
const stack = new Stack(app, 'TestStack');

new Bucket(stack, 'TestBucket');

Example not in your language?

Stacks and Stages
A Stack is the smallest physical unit of deployment, and maps directly onto
a CloudFormation Stack. You define a Stack by defining a subclass of Stack
-- let's call it MyStack -- and instantiating the constructs that make up
your application in MyStack's constructor. You then instantiate this stack
one or more times to define different instances of your application. For example,
you can instantiate it once using few and cheap EC2 instances for testing,
and once again using more and bigger EC2 instances for production.
When your application grows, you may decide that it makes more sense to split it
out across multiple Stack classes. This can happen for a number of reasons:

You could be starting to reach the maximum number of resources allowed in a single
stack (this is currently 500).
You could decide you want to separate out stateful resources and stateless resources
into separate stacks, so that it becomes easy to tear down and recreate the stacks
that don't have stateful resources.
There could be a single stack with resources (like a VPC) that are shared
between multiple instances of other stacks containing your applications.

As soon as your conceptual application starts to encompass multiple stacks,
it is convenient to wrap them in another construct that represents your
logical application. You can then treat that new unit the same way you used
to be able to treat a single stack: by instantiating it multiple times
for different instances of your application.
You can define a custom subclass of Stage, holding one or more
Stacks, to represent a single logical instance of your application.
As a final note: Stacks are not a unit of reuse. They describe physical
deployment layouts, and as such are best left to application builders to
organize their deployments with. If you want to vend a reusable construct,
define it as a subclasses of Construct: the consumers of your construct
will decide where to place it in their own stacks.
Stack Synthesizers
Each Stack has a synthesizer, an object that determines how and where
the Stack should be synthesized and deployed. The synthesizer controls
aspects like:

How does the stack reference assets? (Either through CloudFormation
parameters the CLI supplies, or because the Stack knows a predefined
location where assets will be uploaded).
What roles are used to deploy the stack? These can be bootstrapped
roles, roles created in some other way, or just the CLI's current
credentials.

The following synthesizers are available:

DefaultStackSynthesizer: recommended. Uses predefined asset locations and
roles created by the modern bootstrap template. Access control is done by
controlling who can assume the deploy role. This is the default stack
synthesizer in CDKv2.
LegacyStackSynthesizer: Uses CloudFormation parameters to communicate
asset locations, and the CLI's current permissions to deploy stacks. This
is the default stack synthesizer in CDKv1.
CliCredentialsStackSynthesizer: Uses predefined asset locations, and the
CLI's current permissions.

Each of these synthesizers takes configuration arguments. To configure
a stack with a synthesizer, pass it as one of its properties:
new MyStack(app, 'MyStack', {
  synthesizer: new DefaultStackSynthesizer({
    fileAssetsBucketName: 'amzn-s3-demo-bucket',
  }),
});

Example not in your language?
For more information on bootstrapping accounts and customizing synthesis,
see Bootstrapping in the CDK Developer Guide.
Nested Stacks
Nested stacks are stacks created as part of other stacks. You create a nested stack within another stack by using the NestedStack construct.
As your infrastructure grows, common patterns can emerge in which you declare the same components in multiple templates. You can separate out these common components and create dedicated templates for them. Then use the resource in your template to reference other templates, creating nested stacks.
For example, assume that you have a load balancer configuration that you use for most of your stacks. Instead of copying and pasting the same configurations into your templates, you can create a dedicated template for the load balancer. Then, you just use the resource to reference that template from within other templates.
The following example will define a single top-level stack that contains two nested stacks: each one with a single Amazon S3 bucket:
class MyNestedStack extends cfn.NestedStack {
  constructor(scope: Construct, id: string, props?: cfn.NestedStackProps) {
    super(scope, id, props);

    new s3.Bucket(this, 'NestedBucket');
  }
}

class MyParentStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    new MyNestedStack(this, 'Nested1');
    new MyNestedStack(this, 'Nested2');
  }
}

Example not in your language?
Resources references across nested/parent boundaries (even with multiple levels of nesting) will be wired by the AWS CDK
through CloudFormation parameters and outputs. When a resource from a parent stack is referenced by a nested stack,
a CloudFormation parameter will automatically be added to the nested stack and assigned from the parent; when a resource
from a nested stack is referenced by a parent stack, a CloudFormation output will be automatically be added to the
nested stack and referenced using Fn::GetAtt "Outputs.Xxx" from the parent.
Nested stacks also support the use of Docker image and file assets.
Accessing resources in a different stack
You can access resources in a different stack, as long as they are in the
same account and AWS Region (see next section for an exception).
The following example defines the stack stack1,
which defines an Amazon S3 bucket. Then it defines a second stack, stack2,
which takes the bucket from stack1 as a constructor property.
const prod = { account: '123456789012', region: 'us-east-1' };

const stack1 = new StackThatProvidesABucket(app, 'Stack1' , { env: prod });

// stack2 will take a property { bucket: IBucket }
const stack2 = new StackThatExpectsABucket(app, 'Stack2', {
  bucket: stack1.bucket,
  env: prod
});

Example not in your language?
If the AWS CDK determines that the resource is in the same account and
Region, but in a different stack, it automatically synthesizes AWS
CloudFormation
Exports
in the producing stack and an
Fn::ImportValue
in the consuming stack to transfer that information from one stack to the
other.
Accessing resources in a different stack and region

This feature is currently experimental

You can enable the Stack property crossRegionReferences
in order to access resources in a different stack and region. With this feature flag
enabled it is possible to do something like creating a CloudFront distribution in us-east-2 and
an ACM certificate in us-east-1.
const stack1 = new Stack(app, 'Stack1', {
  env: {
    region: 'us-east-1',
  },
  crossRegionReferences: true,
});
const cert = new acm.Certificate(stack1, 'Cert', {
  domainName: '*.example.com',
  validation: acm.CertificateValidation.fromDns(route53.PublicHostedZone.fromHostedZoneId(stack1, 'Zone', 'Z0329774B51CGXTDQV3X')),
});

const stack2 = new Stack(app, 'Stack2', {
  env: {
    region: 'us-east-2',
  },
  crossRegionReferences: true,
});
new cloudfront.Distribution(stack2, 'Distribution', {
  defaultBehavior: {
    origin: new origins.HttpOrigin('example.com'),
  },
  domainNames: ['dev.example.com'],
  certificate: cert,
});

Example not in your language?
When the AWS CDK determines that the resource is in a different stack and is in a different
region, it will "export" the value by creating a custom resource in the producing stack which
creates SSM Parameters in the consuming region for each exported value. The parameters will be
created with the name '/cdk/exports/${consumingStackName}/${export-name}'.
In order to "import" the exports into the consuming stack a SSM Dynamic reference
is used to reference the SSM parameter which was created.
In order to mimic strong references, a Custom Resource is also created in the consuming
stack which marks the SSM parameters as being "imported". When a parameter has been successfully
imported, the producing stack cannot update the value.

[!NOTE]
As a consequence of this feature being built on a Custom Resource, we are restricted to a
CloudFormation response body size limitation of 4096 bytes.
To prevent deployment errors related to the Custom Resource Provider response body being too
large, we recommend limiting the use of nested stacks and minimizing the length of stack names.
Doing this will prevent SSM parameter names from becoming too long which will reduce the size of the
response body.

See the adr
for more details on this feature.
Removing automatic cross-stack references
The automatic references created by CDK when you use resources across stacks
are convenient, but may block your deployments if you want to remove the
resources that are referenced in this way. You will see an error like:
Export Stack1:ExportsOutputFnGetAtt-****** cannot be deleted as it is in use by Stack1

Example not in your language?
Let's say there is a Bucket in the stack1, and the stack2 references its
bucket.bucketName. You now want to remove the bucket and run into the error above.
It's not safe to remove stack1.bucket while stack2 is still using it, so
unblocking yourself from this is a two-step process. This is how it works:
DEPLOYMENT 1: break the relationship

Make sure stack2 no longer references bucket.bucketName (maybe the consumer
stack now uses its own bucket, or it writes to an AWS DynamoDB table, or maybe you just
remove the Lambda Function altogether).
In the stack1 class, call this.exportValue(this.bucket.bucketName). This
will make sure the CloudFormation Export continues to exist while the relationship
between the two stacks is being broken.
Deploy (this will effectively only change the stack2, but it's safe to deploy both).

DEPLOYMENT 2: remove the resource

You are now free to remove the bucket resource from stack1.
Don't forget to remove the exportValue() call as well.
Deploy again (this time only the stack1 will be changed -- the bucket will be deleted).

Durations
To make specifications of time intervals unambiguous, a single class called
Duration is used throughout the AWS Construct Library by all constructs
that that take a time interval as a parameter (be it for a timeout, a
rate, or something else).
An instance of Duration is constructed by using one of the static factory
methods on it:
Duration.seconds(300)   // 5 minutes
Duration.minutes(5)     // 5 minutes
Duration.hours(1)       // 1 hour
Duration.days(7)        // 7 days
Duration.parse('PT5M')  // 5 minutes

Example not in your language?
Durations can be added or subtracted together:
Duration.minutes(1).plus(Duration.seconds(60)); // 2 minutes
Duration.minutes(5).minus(Duration.seconds(10)); // 290 secondes

Example not in your language?
Size (Digital Information Quantity)
To make specification of digital storage quantities unambiguous, a class called
Size is available.
An instance of Size is initialized through one of its static factory methods:
Size.kibibytes(200) // 200 KiB
Size.mebibytes(5)   // 5 MiB
Size.gibibytes(40)  // 40 GiB
Size.tebibytes(200) // 200 TiB
Size.pebibytes(3)   // 3 PiB

Example not in your language?
Instances of Size created with one of the units can be converted into others.
By default, conversion to a higher unit will fail if the conversion does not produce
a whole number. This can be overridden by unsetting integral property.
Size.mebibytes(2).toKibibytes()                                             // yields 2048
Size.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })  // yields 2

Example not in your language?
Secrets
To help avoid accidental storage of secrets as plain text, we use the SecretValue type to
represent secrets. Any construct that takes a value that should be a secret (such as
a password or an access key) will take a parameter of type SecretValue.
The best practice is to store secrets in AWS Secrets Manager and reference them using SecretValue.secretsManager:
const secret = SecretValue.secretsManager('secretId', {
  jsonField: 'password', // optional: key of a JSON field to retrieve (defaults to all content),
  versionId: 'id',       // optional: id of the version (default AWSCURRENT)
  versionStage: 'stage', // optional: version stage name (default AWSCURRENT)
});

Example not in your language?
Using AWS Secrets Manager is the recommended way to reference secrets in a CDK app.
SecretValue also supports the following secret sources:

SecretValue.unsafePlainText(secret): stores the secret as plain text in your app and the resulting template (not recommended).
SecretValue.secretsManager(secret): refers to a secret stored in Secrets Manager
SecretValue.ssmSecure(param, version): refers to a secret stored as a SecureString in the SSM
Parameter Store. If you don't specify the exact version, AWS CloudFormation uses the latest
version of the parameter.
SecretValue.cfnParameter(param): refers to a secret passed through a CloudFormation parameter (must have NoEcho: true).
SecretValue.cfnDynamicReference(dynref): refers to a secret described by a CloudFormation dynamic reference (used by ssmSecure and secretsManager).
SecretValue.resourceAttribute(attr): refers to a secret returned from a CloudFormation resource creation.

SecretValues should only be passed to constructs that accept properties of type
SecretValue. These constructs are written to ensure your secrets will not be
exposed where they shouldn't be. If you try to use a SecretValue in a
different location, an error about unsafe secret usage will be thrown at
synthesis time.
If you rotate the secret's value in Secrets Manager, you must also change at
least one property on the resource where you are using the secret, to force
CloudFormation to re-read the secret.
SecretValue.ssmSecure() is only supported for a limited set of resources.
Click here for a list of supported resources and properties.
ARN manipulation
Sometimes you will need to put together or pick apart Amazon Resource Names
(ARNs). The functions stack.formatArn() and stack.splitArn() exist for
this purpose.
formatArn() can be used to build an ARN from components. It will automatically
use the region and account of the stack you're calling it on:
declare const stack: Stack;

// Builds "arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction"
stack.formatArn({
  service: 'lambda',
  resource: 'function',
  arnFormat: ArnFormat.COLON_RESOURCE_NAME,
  resourceName: 'MyFunction'
});

Example not in your language?
splitArn() can be used to get a single component from an ARN. splitArn()
will correctly deal with both literal ARNs and deploy-time values (tokens),
but in case of a deploy-time value be aware that the result will be another
deploy-time value which cannot be inspected in the CDK application.
declare const stack: Stack;

// Extracts the function name out of an AWS Lambda Function ARN
const arnComponents = stack.splitArn(arn, ArnFormat.COLON_RESOURCE_NAME);
const functionName = arnComponents.resourceName;

Example not in your language?
Note that the format of the resource separator depends on the service and
may be any of the values supported by ArnFormat. When dealing with these
functions, it is important to know the format of the ARN you are dealing with.
For an exhaustive list of ARN formats used in AWS, see AWS ARNs and
Namespaces
in the AWS General Reference.
Dependencies
Construct Dependencies
Sometimes AWS resources depend on other resources, and the creation of one
resource must be completed before the next one can be started.
In general, CloudFormation will correctly infer the dependency relationship
between resources based on the property values that are used. In the cases where
it doesn't, the AWS Construct Library will add the dependency relationship for
you.
If you need to add an ordering dependency that is not automatically inferred,
you do so by adding a dependency relationship using
constructA.node.addDependency(constructB). This will add a dependency
relationship between all resources in the scope of constructA and all
resources in the scope of constructB.
If you want a single object to represent a set of constructs that are not
necessarily in the same scope, you can use a DependencyGroup. The
following creates a single object that represents a dependency on two
constructs, constructB and constructC:
// Declare the dependable object
const bAndC = new DependencyGroup();
bAndC.add(constructB);
bAndC.add(constructC);

// Take the dependency
constructA.node.addDependency(bAndC);

Example not in your language?
Stack Dependencies
Two different stack instances can have a dependency on one another. This
happens when an resource from one stack is referenced in another stack. In
that case, CDK records the cross-stack referencing of resources,
automatically produces the right CloudFormation primitives, and adds a
dependency between the two stacks. You can also manually add a dependency
between two stacks by using the stackA.addDependency(stackB) method.
A stack dependency has the following implications:

Cyclic dependencies are not allowed, so if stackA is using resources from
stackB, the reverse is not possible anymore.
Stacks with dependencies between them are treated specially by the CDK
toolkit:

If stackA depends on stackB, running cdk deploy stackA will also
automatically deploy stackB.
stackB's deployment will be performed before stackA's deployment.


CfnResource Dependencies
To make declaring dependencies between CfnResource objects easier, you can declare dependencies from one CfnResource object on another by using the cfnResource1.addDependency(cfnResource2) method. This method will work for resources both within the same stack and across stacks as it detects the relative location of the two resources and adds the dependency either to the resource or between the relevant stacks, as appropriate. If more complex logic is in needed, you can similarly remove, replace, or view dependencies between CfnResource objects with the CfnResource removeDependency, replaceDependency, and obtainDependencies methods, respectively.
Custom Resources
Custom Resources are CloudFormation resources that are implemented by arbitrary
user code. They can do arbitrary lookups or modifications during a
CloudFormation deployment.
Custom resources are backed by custom resource providers. Commonly, these are
Lambda Functions that are deployed in the same deployment as the one that
defines the custom resource itself, but they can also be backed by Lambda
Functions deployed previously, or code responding to SNS Topic events running on
EC2 instances in a completely different account. For more information on custom
resource providers, see the next section.
Once you have a provider, each definition of a CustomResource construct
represents one invocation. A single provider can be used for the implementation
of arbitrarily many custom resource definitions. A single definition looks like
this:
new CustomResource(this, 'MyMagicalResource', {
  resourceType: 'Custom::MyCustomResource', // must start with 'Custom::'

  // the resource properties
  properties: {
    Property1: 'foo',
    Property2: 'bar'
  },

  // the ARN of the provider (SNS/Lambda) which handles
  // CREATE, UPDATE or DELETE events for this resource type
  // see next section for details
  serviceToken: 'ARN'
});

Example not in your language?
Custom Resource Providers
Custom resources are backed by a custom resource provider which can be
implemented in one of the following ways. The following table compares the
various provider types (ordered from low-level to high-level):


ProviderCompute TypeError HandlingSubmit to CloudFormationMax TimeoutLanguageFootprint


sns.TopicSelf-managedManualManualUnlimitedAnyDepends
lambda.FunctionAWS LambdaManualManual15minAnySmall
core.CustomResourceProviderAWS LambdaAutoAuto15minNode.jsSmall
custom-resources.ProviderAWS LambdaAutoAutoUnlimited AsyncAnyLarge


Legend:

Compute type: which type of compute can be used to execute the handler.
Error Handling: whether errors thrown by handler code are automatically
trapped and a FAILED response is submitted to CloudFormation. If this is
"Manual", developers must take care of trapping errors. Otherwise, events
could cause stacks to hang.
Submit to CloudFormation: whether the framework takes care of submitting
SUCCESS/FAILED responses to CloudFormation through the event's response URL.
Max Timeout: maximum allows/possible timeout.
Language: which programming languages can be used to implement handlers.
Footprint: how many resources are used by the provider framework itself.

A NOTE ABOUT SINGLETONS
When defining resources for a custom resource provider, you will likely want to
define them as a stack singleton so that only a single instance of the
provider is created in your stack and which is used by all custom resources of
that type.
Here is a basic pattern for defining stack singletons in the CDK. The following
examples ensures that only a single SNS topic is defined:
function getOrCreate(scope: Construct): sns.Topic {
  const stack = Stack.of(scope);
  const uniqueid = 'GloballyUniqueIdForSingleton'; // For example, a UUID from `uuidgen`
  const existing = stack.node.tryFindChild(uniqueid);
  if (existing) {
    return existing as sns.Topic;
  }
  return new sns.Topic(stack, uniqueid);
}

Example not in your language?
Amazon SNS Topic
Every time a resource event occurs (CREATE/UPDATE/DELETE), an SNS notification
is sent to the SNS topic. Users must process these notifications (e.g. through a
fleet of worker hosts) and submit success/failure responses to the
CloudFormation service.

You only need to use this type of provider if your custom resource cannot run on AWS Lambda, for reasons other than the 15
minute timeout. If you are considering using this type of provider because you want to write a custom resource provider that may need
to wait for more than 15 minutes for the API calls to stabilize, have a look at the custom-resources module first.
Refer to the CloudFormation Custom Resource documentation for information on the contract your custom resource needs to adhere to.

Set serviceToken to topic.topicArn  in order to use this provider:
const topic = new sns.Topic(this, 'MyProvider');

new CustomResource(this, 'MyResource', {
  serviceToken: topic.topicArn
});

Example not in your language?
AWS Lambda Function
An AWS lambda function is called directly by CloudFormation for all resource
events. The handler must take care of explicitly submitting a success/failure
response to the CloudFormation service and handle various error cases.

We do not recommend you use this provider type. The CDK has wrappers around Lambda Functions that make them easier to work with.
If you do want to use this provider, refer to the CloudFormation Custom Resource documentation for information on the contract your custom resource needs to adhere to.

Set serviceToken to lambda.functionArn to use this provider:
const fn = new lambda.SingletonFunction(this, 'MyProvider', functionProps);

new CustomResource(this, 'MyResource', {
  serviceToken: fn.functionArn,
});

Example not in your language?
The core.CustomResourceProvider class
The class @aws-cdk/core.CustomResourceProvider offers a basic low-level
framework designed to implement simple and slim custom resource providers. It
currently only supports Node.js-based user handlers, represents permissions as raw
JSON blobs instead of iam.PolicyStatement objects, and it does not have
support for asynchronous waiting (handler cannot exceed the 15min lambda
timeout). The CustomResourceProviderRuntime supports runtime nodejs12.x,
nodejs14.x, nodejs16.x, nodejs18.x.

As an application builder, we do not recommend you use this provider type. This provider exists purely for custom resources that are part of the AWS Construct Library.
The custom-resources provider is more convenient to work with and more fully-featured.

The provider has a built-in singleton method which uses the resource type as a
stack-unique identifier and returns the service token:
const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
  description: "Lambda function created by the custom resource provider",
});

new CustomResource(this, 'MyResource', {
  resourceType: 'Custom::MyCustomResourceType',
  serviceToken: serviceToken
});

Example not in your language?
The directory (my-handler in the above example) must include an index.js file. It cannot import
external dependencies or files outside this directory. It must export an async
function named handler. This function accepts the CloudFormation resource
event object and returns an object with the following structure:
exports.handler = async function(event) {
  const id = event.PhysicalResourceId; // only for "Update" and "Delete"
  const props = event.ResourceProperties;
  const oldProps = event.OldResourceProperties; // only for "Update"s

  switch (event.RequestType) {
    case "Create":
      // ...

    case "Update":
      // ...

      // if an error is thrown, a FAILED response will be submitted to CFN
      throw new Error('Failed!');

    case "Delete":
      // ...
  }

  return {
    // (optional) the value resolved from `resource.ref`
    // defaults to "event.PhysicalResourceId" or "event.RequestId"
    PhysicalResourceId: "REF",

    // (optional) calling `resource.getAtt("Att1")` on the custom resource in the CDK app
    // will return the value "BAR".
    Data: {
      Att1: "BAR",
      Att2: "BAZ"
    },

    // (optional) user-visible message
    Reason: "User-visible message",

    // (optional) hides values from the console
    NoEcho: true
  };
}

Example not in your language?
Here is an complete example of a custom resource that summarizes two numbers:
sum-handler/index.js:
exports.handler = async (e) => {
  return {
    Data: {
      Result: e.ResourceProperties.lhs + e.ResourceProperties.rhs,
    },
  };
};

Example not in your language?
sum.ts:
import { Construct } from 'constructs';
import {
  CustomResource,
  CustomResourceProvider,
  CustomResourceProviderRuntime,
  Token,
} from 'aws-cdk-lib';

export interface SumProps {
  readonly lhs: number;
  readonly rhs: number;
}

export class Sum extends Construct {
  public readonly result: number;

  constructor(scope: Construct, id: string, props: SumProps) {
    super(scope, id);

    const resourceType = 'Custom::Sum';
    const serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, {
      codeDirectory: `${__dirname}/sum-handler`,
      runtime: CustomResourceProviderRuntime.NODEJS_18_X,
    });

    const resource = new CustomResource(this, 'Resource', {
      resourceType: resourceType,
      serviceToken: serviceToken,
      properties: {
        lhs: props.lhs,
        rhs: props.rhs
      }
    });

    this.result = Token.asNumber(resource.getAtt('Result'));
  }
}

Example not in your language?
Usage will look like this:
const sum = new Sum(this, 'MySum', { lhs: 40, rhs: 2 });
new CfnOutput(this, 'Result', { value: Token.asString(sum.result) });

Example not in your language?
To access the ARN of the provider's AWS Lambda function role, use the getOrCreateProvider()
built-in singleton method:
const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
});

const roleArn = provider.roleArn;

Example not in your language?
This role ARN can then be used in resource-based IAM policies.
To add IAM policy statements to this role, use addToRolePolicy():
const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
});
provider.addToRolePolicy({
  Effect: 'Allow',
  Action: 's3:GetObject',
  Resource: '*',
})

Example not in your language?
Note that addToRolePolicy() uses direct IAM JSON policy blobs, not a
iam.PolicyStatement object like you will see in the rest of the CDK.
The Custom Resource Provider Framework
The @aws-cdk/custom-resources module includes an advanced framework for
implementing custom resource providers.
Handlers are implemented as AWS Lambda functions, which means that they can be
implemented in any Lambda-supported runtime. Furthermore, this provider has an
asynchronous mode, which means that users can provide an isComplete lambda
function which is called periodically until the operation is complete. This
allows implementing providers that can take up to two hours to stabilize.
Set serviceToken to provider.serviceToken to use this type of provider:
const provider = new customresources.Provider(this, 'MyProvider', {
  onEventHandler,
  isCompleteHandler, // optional async waiter
});

new CustomResource(this, 'MyResource', {
  serviceToken: provider.serviceToken
});

Example not in your language?
See the documentation for more details.
AWS CloudFormation features
A CDK stack synthesizes to an AWS CloudFormation Template. This section
explains how this module allows users to access low-level CloudFormation
features when needed.
Stack Outputs
CloudFormation stack outputs and exports are created using
the CfnOutput class:
new CfnOutput(this, 'OutputName', {
  value: myBucket.bucketName,
  description: 'The name of an S3 bucket', // Optional
  exportName: 'TheAwesomeBucket', // Registers a CloudFormation export named "TheAwesomeBucket"
});

Example not in your language?
Parameters
CloudFormation templates support the use of Parameters to
customize a template. They enable CloudFormation users to input custom values to
a template each time a stack is created or updated. While the CDK design
philosophy favors using build-time parameterization, users may need to use
CloudFormation in a number of cases (for example, when migrating an existing
stack to the AWS CDK).
Template parameters can be added to a stack by using the CfnParameter class:
new CfnParameter(this, 'MyParameter', {
  type: 'Number',
  default: 1337,
  // See the API reference for more configuration props
});

Example not in your language?
The value of parameters can then be obtained using one of the value methods.
As parameters are only resolved at deployment time, the values obtained are
placeholder tokens for the real value (Token.isUnresolved() would return true
for those):
const param = new CfnParameter(this, 'ParameterName', { /* config */ });

// If the parameter is a String
param.valueAsString;

// If the parameter is a Number
param.valueAsNumber;

// If the parameter is a List
param.valueAsList;

Example not in your language?
Pseudo Parameters
CloudFormation supports a number of pseudo parameters,
which resolve to useful values at deployment time. CloudFormation pseudo
parameters can be obtained from static members of the Aws class.
It is generally recommended to access pseudo parameters from the scope's stack
instead, which guarantees the values produced are qualifying the designated
stack, which is essential in cases where resources are shared cross-stack:
// "this" is the current construct
const stack = Stack.of(this);

stack.account; // Returns the AWS::AccountId for this stack (or the literal value if known)
stack.region;  // Returns the AWS::Region for this stack (or the literal value if known)
stack.partition; // Returns the AWS::Partition for this stack (or the literal value if known)

Example not in your language?
Resource Options
CloudFormation resources can also specify resource
attributes. The CfnResource class allows
accessing those through the cfnOptions property:
const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });
// -or-
const rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;

// then
rawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });
rawBucket.cfnOptions.metadata = {
  metadataKey: 'MetadataValue',
};

Example not in your language?
Resource dependencies (the DependsOn attribute) is modified using the
cfnResource.addDependency method:
const resourceA = new CfnResource(this, 'ResourceA', resourceProps);
const resourceB = new CfnResource(this, 'ResourceB', resourceProps);

resourceB.addDependency(resourceA);

Example not in your language?
CreationPolicy
Some resources support a CreationPolicy to be specified as a CfnOption.
The creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only AWS CloudFormation resources that support creation policies are CfnAutoScalingGroup, CfnInstance, CfnWaitCondition and CfnFleet.
The CfnFleet resource from the aws-appstream module supports specifying startFleet as
a property of the creationPolicy on the resource options. Setting it to true will make AWS CloudFormation wait until the fleet is started before continuing with the creation of
resources that depend on the fleet resource.
const fleet = new appstream.CfnFleet(this, 'Fleet', {
  instanceType: 'stream.standard.small',
  name: 'Fleet',
  computeCapacity: {
    desiredInstances: 1,
  },
  imageName: 'AppStream-AmazonLinux2-09-21-2022',
});
fleet.cfnOptions.creationPolicy = {
  startFleet: true,
};

Example not in your language?
The properties passed to the level 2 constructs AutoScalingGroup and Instance from the
aws-ec2 module abstract what is passed into the CfnOption properties resourceSignal and
autoScalingCreationPolicy, but when using level 1 constructs you can specify these yourself.
The CfnWaitCondition resource from the aws-cloudformation module suppports the resourceSignal.
The format of the timeout is PT#H#M#S. In the example below AWS Cloudformation will wait for
3 success signals to occur within 15 minutes before the status of the resource will be set to
CREATE_COMPLETE.
declare const resource: CfnResource;

resource.cfnOptions.creationPolicy = {
  resourceSignal: {
    count: 3,
    timeout: 'PR15M',
  }
};

Example not in your language?
Intrinsic Functions and Condition Expressions
CloudFormation supports intrinsic functions. These functions
can be accessed from the Fn class, which provides type-safe methods for each
intrinsic function as well as condition expressions:
declare const myObjectOrArray: any;
declare const myArray: any;

// To use Fn::Base64
Fn.base64('SGVsbG8gQ0RLIQo=');

// To compose condition expressions:
const environmentParameter = new CfnParameter(this, 'Environment');
Fn.conditionAnd(
  // The "Environment" CloudFormation template parameter evaluates to "Production"
  Fn.conditionEquals('Production', environmentParameter),
  // The AWS::Region pseudo-parameter value is NOT equal to "us-east-1"
  Fn.conditionNot(Fn.conditionEquals('us-east-1', Aws.REGION)),
);

// To use Fn::ToJsonString
Fn.toJsonString(myObjectOrArray);

// To use Fn::Length
Fn.len(Fn.split(',', myArray));

Example not in your language?
When working with deploy-time values (those for which Token.isUnresolved
returns true), idiomatic conditionals from the programming language cannot be
used (the value will not be known until deployment time). When conditional logic
needs to be expressed with un-resolved values, it is necessary to use
CloudFormation conditions by means of the CfnCondition class:
const environmentParameter = new CfnParameter(this, 'Environment');
const isProd = new CfnCondition(this, 'IsProduction', {
  expression: Fn.conditionEquals('Production', environmentParameter),
});

// Configuration value that is a different string based on IsProduction
const stage = Fn.conditionIf(isProd.logicalId, 'Beta', 'Prod').toString();

// Make Bucket creation condition to IsProduction by accessing
// and overriding the CloudFormation resource
const bucket = new s3.Bucket(this, 'Bucket');
const cfnBucket = myBucket.node.defaultChild as s3.CfnBucket;
cfnBucket.cfnOptions.condition = isProd;

Example not in your language?
Mappings
CloudFormation mappings are created and queried using the
CfnMappings class:
const regionTable = new CfnMapping(this, 'RegionTable', {
  mapping: {
    'us-east-1': {
      regionName: 'US East (N. Virginia)',
      // ...
    },
    'us-east-2': {
      regionName: 'US East (Ohio)',
      // ...
    },
    // ...
  }
});

regionTable.findInMap(Aws.REGION, 'regionName')

Example not in your language?
This will yield the following template:
Mappings:
  RegionTable:
    us-east-1:
      regionName: US East (N. Virginia)
    us-east-2:
      regionName: US East (Ohio)

Example not in your language?
Mappings can also be synthesized "lazily"; lazy mappings will only render a "Mappings"
section in the synthesized CloudFormation template if some findInMap call is unable to
immediately return a concrete value due to one or both of the keys being unresolved tokens
(some value only available at deploy-time).
For example, the following code will not produce anything in the "Mappings" section. The
call to findInMap will be able to resolve the value during synthesis and simply return
'US East (Ohio)'.
const regionTable = new CfnMapping(this, 'RegionTable', {
  mapping: {
    'us-east-1': {
      regionName: 'US East (N. Virginia)',
    },
    'us-east-2': {
      regionName: 'US East (Ohio)',
    },
  },
  lazy: true,
});

regionTable.findInMap('us-east-2', 'regionName');

Example not in your language?
On the other hand, the following code will produce the "Mappings" section shown above,
since the top-level key is an unresolved token. The call to findInMap will return a token that resolves to
{ "Fn::FindInMap": [ "RegionTable", { "Ref": "AWS::Region" }, "regionName" ] }.
declare const regionTable: CfnMapping;

regionTable.findInMap(Aws.REGION, 'regionName');

Example not in your language?
An optional default value can also be passed to findInMap. If either key is not found in the map and the mapping is lazy, findInMap will return the default value and not render the mapping.
If the mapping is not lazy or either key is an unresolved token, the call to findInMap will return a token that resolves to
{ "Fn::FindInMap": [ "MapName", "TopLevelKey", "SecondLevelKey", { "DefaultValue": "DefaultValue" } ] }, and the mapping will be rendered.
Note that the AWS::LanguageExtentions transform is added to enable the default value functionality.
For example, the following code will again not produce anything in the "Mappings" section. The
call to findInMap will be able to resolve the value during synthesis and simply return
'Region not found'.
const regionTable = new CfnMapping(this, 'RegionTable', {
  mapping: {
    'us-east-1': {
      regionName: 'US East (N. Virginia)',
    },
    'us-east-2': {
      regionName: 'US East (Ohio)',
    },
  },
  lazy: true,
});

regionTable.findInMap('us-west-1', 'regionName', 'Region not found');

Example not in your language?
Dynamic References
CloudFormation supports dynamically resolving values
for SSM parameters (including secure strings) and Secrets Manager. Encoding such
references is done using the CfnDynamicReference class:
new CfnDynamicReference(
  CfnDynamicReferenceService.SECRETS_MANAGER,
  'secret-id:secret-string:json-key:version-stage:version-id',
);

Example not in your language?
Template Options & Transform
CloudFormation templates support a number of options, including which Macros or
Transforms to use when deploying the stack. Those can be
configured using the stack.templateOptions property:
const stack = new Stack(app, 'StackName');

stack.templateOptions.description = 'This will appear in the AWS console';
stack.templateOptions.transforms = ['AWS::Serverless-2016-10-31'];
stack.templateOptions.metadata = {
  metadataKey: 'MetadataValue',
};

Example not in your language?
Emitting Raw Resources
The CfnResource class allows emitting arbitrary entries in the
Resources section of the CloudFormation template.
new CfnResource(this, 'ResourceId', {
  type: 'AWS::S3::Bucket',
  properties: {
    BucketName: 'amzn-s3-demo-bucket'
  },
});

Example not in your language?
As for any other resource, the logical ID in the CloudFormation template will be
generated by the AWS CDK, but the type and properties will be copied verbatim in
the synthesized template.
Including raw CloudFormation template fragments
When migrating a CloudFormation stack to the AWS CDK, it can be useful to
include fragments of an existing template verbatim in the synthesized template.
This can be achieved using the CfnInclude class.
new CfnInclude(this, 'ID', {
  template: {
    Resources: {
      Bucket: {
        Type: 'AWS::S3::Bucket',
        Properties: {
          BucketName: 'amzn-s3-demo-bucket'
        }
      }
    }
  },
});

Example not in your language?
Termination Protection
You can prevent a stack from being accidentally deleted by enabling termination
protection on the stack. If a user attempts to delete a stack with termination
protection enabled, the deletion fails and the stack--including its status--remains
unchanged. Enabling or disabling termination protection on a stack sets it for any
nested stacks belonging to that stack as well. You can enable termination protection
on a stack by setting the terminationProtection prop to true.
const stack = new Stack(app, 'StackName', {
  terminationProtection: true,
});

Example not in your language?
You can also set termination protection with the setter after you've instantiated the stack.
const stack = new Stack(app, 'StackName', {});
stack.terminationProtection = true;

Example not in your language?
By default, termination protection is disabled.
Description
You can add a description of the stack in the same way as StackProps.
const stack = new Stack(app, 'StackName', {
  description: 'This is a description.',
});

Example not in your language?
CfnJson
CfnJson allows you to postpone the resolution of a JSON blob from
deployment-time. This is useful in cases where the CloudFormation JSON template
cannot express a certain value.
A common example is to use CfnJson in order to render a JSON map which needs
to use intrinsic functions in keys. Since JSON map keys must be strings, it is
impossible to use intrinsics in keys and CfnJson can help.
The following example defines an IAM role which can only be assumed by
principals that are tagged with a specific tag.
const tagParam = new CfnParameter(this, 'TagName');

const stringEquals = new CfnJson(this, 'ConditionJson', {
  value: {
    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,
  },
});

const principal = new iam.AccountRootPrincipal().withConditions({
  StringEquals: stringEquals,
});

new iam.Role(this, 'MyRole', { assumedBy: principal });

Example not in your language?
Explanation: since in this example we pass the tag name through a parameter, it
can only be resolved during deployment. The resolved value can be represented in
the template through a { "Ref": "TagName" }. However, since we want to use
this value inside a aws:PrincipalTag/TAG-NAME
IAM operator, we need it in the key of a StringEquals condition. JSON keys
must be strings, so to circumvent this limitation, we use CfnJson
to "delay" the rendition of this template section to deploy-time. This means
that the value of StringEquals in the template will be { "Fn::GetAtt": [ "ConditionJson", "Value" ] }, and will only "expand" to the operator we synthesized during deployment.
Stack Resource Limit
When deploying to AWS CloudFormation, it needs to keep in check the amount of resources being added inside a Stack. Currently it's possible to check the limits in the AWS CloudFormation quotas page.
It's possible to synthesize the project with more Resources than the allowed (or even reduce the number of Resources).
Set the context key @aws-cdk/core:stackResourceLimit with the proper value, being 0 for disable the limit of resources.
Template Indentation
The AWS CloudFormation templates generated by CDK include indentation by default.
Indentation makes the templates more readable, but also increases their size,
and CloudFormation templates cannot exceed 1MB.
It's possible to reduce the size of your templates by suppressing indentation.
To do this for all templates, set the context key @aws-cdk/core:suppressTemplateIndentation to true.
To do this for a specific stack, add a suppressTemplateIndentation: true property to the
stack's StackProps parameter. You can also set this property to false to override
the context key setting.
App Context
Context values are key-value pairs that can be associated with an app, stack, or construct.
One common use case for context is to use it for enabling/disabling feature flags. There are several places
where context can be specified. They are listed below in the order they are evaluated (items at the
top take precedence over those below).

The node.setContext() method
The postCliContext prop when you create an App
The CLI via the --context CLI argument
The cdk.json file via the context key:
The cdk.context.json file:
The ~/.cdk.json file via the context key:
The context prop when you create an App

Examples of setting context
new App({
  context: {
    '@aws-cdk/core:newStyleStackSynthesis': true,
  },
});

Example not in your language?
const app = new App();
app.node.setContext('@aws-cdk/core:newStyleStackSynthesis', true);

Example not in your language?
new App({
  postCliContext: {
    '@aws-cdk/core:newStyleStackSynthesis': true,
  },
});

Example not in your language?
cdk synth --context @aws-cdk/core:newStyleStackSynthesis=true

Example not in your language?
cdk.json
{
  "context": {
    "@aws-cdk/core:newStyleStackSynthesis": true
  }
}

Example not in your language?
cdk.context.json
{
  "@aws-cdk/core:newStyleStackSynthesis": true
}

Example not in your language?
~/.cdk.json
{
  "context": {
    "@aws-cdk/core:newStyleStackSynthesis": true
  }
}

Example not in your language?
IAM Permissions Boundary
It is possible to apply an IAM permissions boundary
to all roles within a specific construct scope. The most common use case would
be to apply a permissions boundary at the Stage level.
const prodStage = new Stage(app, 'ProdStage', {
  permissionsBoundary: PermissionsBoundary.fromName('cdk-${Qualifier}-PermissionsBoundary'),
});

Example not in your language?
Any IAM Roles or Users created within this Stage will have the default
permissions boundary attached.
For more details see the Permissions Boundary section in the IAM guide.
Policy Validation
If you or your organization use (or would like to use) any policy validation tool, such as
CloudFormation
Guard or
OPA, to define constraints on your
CloudFormation template, you can incorporate them into the CDK application.
By using the appropriate plugin, you can make the CDK application check the
generated CloudFormation templates against your policies immediately after
synthesis. If there are any violations, the synthesis will fail and a report
will be printed to the console or to a file (see below).

Note
This feature is considered experimental, and both the plugin API and the
format of the validation report are subject to change in the future.

For application developers
To use one or more validation plugins in your application, use the
policyValidationBeta1 property of Stage:
// globally for the entire app (an app is a stage)
const app = new App({
  policyValidationBeta1: [
    // These hypothetical classes implement IPolicyValidationPluginBeta1:
    new ThirdPartyPluginX(),
    new ThirdPartyPluginY(),
  ],
});

// only apply to a particular stage
const prodStage = new Stage(app, 'ProdStage', {
  policyValidationBeta1: [
    new ThirdPartyPluginX(),
  ],
});

Example not in your language?
Immediately after synthesis, all plugins registered this way will be invoked to
validate all the templates generated in the scope you defined. In particular, if
you register the templates in the App object, all templates will be subject to
validation.

Warning
Other than modifying the cloud assembly, plugins can do anything that your CDK
application can. They can read data from the filesystem, access the network
etc. It's your responsibility as the consumer of a plugin to verify that it is
secure to use.

By default, the report will be printed in a human readable format. If you want a
report in JSON format, enable it using the @aws-cdk/core:validationReportJson
context passing it directly to the application:
const app = new App({
  context: { '@aws-cdk/core:validationReportJson': true },
});

Example not in your language?
Alternatively, you can set this context key-value pair using the cdk.json or
cdk.context.json files in your project directory (see
Runtime context).
If you choose the JSON format, the CDK will print the policy validation report
to a file called policy-validation-report.json in the cloud assembly
directory. For the default, human-readable format, the report will be printed to
the standard output.
For plugin authors
The communication protocol between the CDK core module and your policy tool is
defined by the IPolicyValidationPluginBeta1 interface. To create a new plugin you must
write a class that implements this interface. There are two things you need to
implement: the plugin name (by overriding the name property), and the
validate() method.
The framework will call validate(), passing an IPolicyValidationContextBeta1 object.
The location of the templates to be validated is given by templatePaths. The
plugin should return an instance of PolicyValidationPluginReportBeta1. This object
represents the report that the user wil receive at the end of the synthesis.
class MyPlugin implements IPolicyValidationPluginBeta1 {
  public readonly name = 'MyPlugin';

  public validate(context: IPolicyValidationContextBeta1): PolicyValidationPluginReportBeta1 {
    // First read the templates using context.templatePaths...

    // ...then perform the validation, and then compose and return the report.
    // Using hard-coded values here for better clarity:
    return {
      success: false,
      violations: [{
        ruleName: 'CKV_AWS_117',
        description: 'Ensure that AWS Lambda function is configured inside a VPC',
        fix: 'https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1',
        violatingResources: [{
          resourceLogicalId: 'MyFunction3BAA72D1',
          templatePath: '/home/johndoe/myapp/cdk.out/MyService.template.json',
          locations: ['Properties/VpcConfig'],
        }],
      }],
    };
  }
}

Example not in your language?
In addition to the name, plugins may optionally report their version (version
property ) and a list of IDs of the rules they are going to evaluate (ruleIds
property).
Note that plugins are not allowed to modify anything in the cloud assembly. Any
attempt to do so will result in synthesis failure.
If your plugin depends on an external tool, keep in mind that some developers may
not have that tool installed in their workstations yet. To minimize friction, we
highly recommend that you provide some installation script along with your
plugin package, to automate the whole process. Better yet, run that script as
part of the installation of your package. With npm, for example, you can run
add it to the postinstall
script in the package.json
file.
Annotations
Construct authors can add annotations to constructs to report at three different
levels: ERROR, WARN, INFO.
Typically warnings are added for things that are important for the user to be
aware of, but will not cause deployment errors in all cases. Some common
scenarios are (non-exhaustive list):

Warn when the user needs to take a manual action, e.g. IAM policy should be
added to an referenced resource.
Warn if the user configuration might not follow best practices (but is still
valid)
Warn if the user is using a deprecated API

Acknowledging Warnings
If you would like to run with --strict mode enabled (warnings will throw
errors) it is possible to acknowledge warnings to make the warning go away.
For example, if > 10 IAM managed policies are added to an IAM Group, a warning
will be created:
IAM:Group:MaxPoliciesExceeded: You added 11 to IAM Group my-group. The maximum number of managed policies attached to an IAM group is 10.

Example not in your language?
If you have requested a quota increase
you may have the ability to add > 10 managed policies which means that this
warning does not apply to you. You can acknowledge this by acknowledging the
warning by the id.
Annotations.of(this).acknowledgeWarning('IAM:Group:MaxPoliciesExceeded', 'Account has quota increased to 20');

Example not in your language?\n\naws-cdk-lib module

LanguagePackage


 .NETAmazon.CDK
 Gogithub.com/aws/aws-cdk-go/awscdk/v2
 Javasoftware.amazon.awscdk
 Pythonaws_cdk
 TypeScriptaws-cdk-lib


AWS Cloud Development Kit Library
The AWS CDK construct library provides APIs to define your CDK application and add
CDK constructs to the application.
Usage
Upgrade from CDK 1.x
When upgrading from CDK 1.x, remove all dependencies to individual CDK packages
from your dependencies file and follow the rest of the sections.
Installation
To use this package, you need to declare this package and the constructs package as
dependencies.
According to the kind of project you are developing:
For projects that are CDK libraries in NPM, declare them both under the devDependencies and peerDependencies sections.
To make sure your library is compatible with the widest range of CDK versions: pick the minimum aws-cdk-lib version
that your library requires; declare a range dependency with a caret on that version in peerDependencies, and declare a
point version dependency on that version in devDependencies.
For example, let's say the minimum version your library needs is 2.38.0. Your package.json should look like this:
{
  "peerDependencies": {
    "aws-cdk-lib": "^2.38.0",
    "constructs": "^10.0.0"
  },
  "devDependencies": {
    /* Install the oldest version for testing so we don't accidentally use features from a newer version than we declare */
    "aws-cdk-lib": "2.38.0"
  }
}

Example not in your language?
For CDK apps, declare them under the dependencies section. Use a caret so you always get the latest version:
{
  "dependencies": {
    "aws-cdk-lib": "^2.38.0",
    "constructs": "^10.0.0"
  }
}

Example not in your language?
Use in your code
Classic import
You can use a classic import to get access to each service namespaces:
import { Stack, App, aws_s3 as s3 } from 'aws-cdk-lib';

const app = new App();
const stack = new Stack(app, 'TestStack');

new s3.Bucket(stack, 'TestBucket');

Example not in your language?
Barrel import
Alternatively, you can use "barrel" imports:
import { App, Stack } from 'aws-cdk-lib';
import { Bucket } from 'aws-cdk-lib/aws-s3';

const app = new App();
const stack = new Stack(app, 'TestStack');

new Bucket(stack, 'TestBucket');

Example not in your language?

Stacks and Stages
A Stack is the smallest physical unit of deployment, and maps directly onto
a CloudFormation Stack. You define a Stack by defining a subclass of Stack
-- let's call it MyStack -- and instantiating the constructs that make up
your application in MyStack's constructor. You then instantiate this stack
one or more times to define different instances of your application. For example,
you can instantiate it once using few and cheap EC2 instances for testing,
and once again using more and bigger EC2 instances for production.
When your application grows, you may decide that it makes more sense to split it
out across multiple Stack classes. This can happen for a number of reasons:

You could be starting to reach the maximum number of resources allowed in a single
stack (this is currently 500).
You could decide you want to separate out stateful resources and stateless resources
into separate stacks, so that it becomes easy to tear down and recreate the stacks
that don't have stateful resources.
There could be a single stack with resources (like a VPC) that are shared
between multiple instances of other stacks containing your applications.

As soon as your conceptual application starts to encompass multiple stacks,
it is convenient to wrap them in another construct that represents your
logical application. You can then treat that new unit the same way you used
to be able to treat a single stack: by instantiating it multiple times
for different instances of your application.
You can define a custom subclass of Stage, holding one or more
Stacks, to represent a single logical instance of your application.
As a final note: Stacks are not a unit of reuse. They describe physical
deployment layouts, and as such are best left to application builders to
organize their deployments with. If you want to vend a reusable construct,
define it as a subclasses of Construct: the consumers of your construct
will decide where to place it in their own stacks.
Stack Synthesizers
Each Stack has a synthesizer, an object that determines how and where
the Stack should be synthesized and deployed. The synthesizer controls
aspects like:

How does the stack reference assets? (Either through CloudFormation
parameters the CLI supplies, or because the Stack knows a predefined
location where assets will be uploaded).
What roles are used to deploy the stack? These can be bootstrapped
roles, roles created in some other way, or just the CLI's current
credentials.

The following synthesizers are available:

DefaultStackSynthesizer: recommended. Uses predefined asset locations and
roles created by the modern bootstrap template. Access control is done by
controlling who can assume the deploy role. This is the default stack
synthesizer in CDKv2.
LegacyStackSynthesizer: Uses CloudFormation parameters to communicate
asset locations, and the CLI's current permissions to deploy stacks. This
is the default stack synthesizer in CDKv1.
CliCredentialsStackSynthesizer: Uses predefined asset locations, and the
CLI's current permissions.

Each of these synthesizers takes configuration arguments. To configure
a stack with a synthesizer, pass it as one of its properties:
new MyStack(app, 'MyStack', {
  synthesizer: new DefaultStackSynthesizer({
    fileAssetsBucketName: 'amzn-s3-demo-bucket',
  }),
});

Example not in your language?
For more information on bootstrapping accounts and customizing synthesis,
see Bootstrapping in the CDK Developer Guide.
Nested Stacks
Nested stacks are stacks created as part of other stacks. You create a nested stack within another stack by using the NestedStack construct.
As your infrastructure grows, common patterns can emerge in which you declare the same components in multiple templates. You can separate out these common components and create dedicated templates for them. Then use the resource in your template to reference other templates, creating nested stacks.
For example, assume that you have a load balancer configuration that you use for most of your stacks. Instead of copying and pasting the same configurations into your templates, you can create a dedicated template for the load balancer. Then, you just use the resource to reference that template from within other templates.
The following example will define a single top-level stack that contains two nested stacks: each one with a single Amazon S3 bucket:
class MyNestedStack extends cfn.NestedStack {
  constructor(scope: Construct, id: string, props?: cfn.NestedStackProps) {
    super(scope, id, props);

    new s3.Bucket(this, 'NestedBucket');
  }
}

class MyParentStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    new MyNestedStack(this, 'Nested1');
    new MyNestedStack(this, 'Nested2');
  }
}

Example not in your language?
Resources references across nested/parent boundaries (even with multiple levels of nesting) will be wired by the AWS CDK
through CloudFormation parameters and outputs. When a resource from a parent stack is referenced by a nested stack,
a CloudFormation parameter will automatically be added to the nested stack and assigned from the parent; when a resource
from a nested stack is referenced by a parent stack, a CloudFormation output will be automatically be added to the
nested stack and referenced using Fn::GetAtt "Outputs.Xxx" from the parent.
Nested stacks also support the use of Docker image and file assets.
Accessing resources in a different stack
You can access resources in a different stack, as long as they are in the
same account and AWS Region (see next section for an exception).
The following example defines the stack stack1,
which defines an Amazon S3 bucket. Then it defines a second stack, stack2,
which takes the bucket from stack1 as a constructor property.
const prod = { account: '123456789012', region: 'us-east-1' };

const stack1 = new StackThatProvidesABucket(app, 'Stack1' , { env: prod });

// stack2 will take a property { bucket: IBucket }
const stack2 = new StackThatExpectsABucket(app, 'Stack2', {
  bucket: stack1.bucket,
  env: prod
});

Example not in your language?
If the AWS CDK determines that the resource is in the same account and
Region, but in a different stack, it automatically synthesizes AWS
CloudFormation
Exports
in the producing stack and an
Fn::ImportValue
in the consuming stack to transfer that information from one stack to the
other.
Accessing resources in a different stack and region

This feature is currently experimental

You can enable the Stack property crossRegionReferences
in order to access resources in a different stack and region. With this feature flag
enabled it is possible to do something like creating a CloudFront distribution in us-east-2 and
an ACM certificate in us-east-1.
const stack1 = new Stack(app, 'Stack1', {
  env: {
    region: 'us-east-1',
  },
  crossRegionReferences: true,
});
const cert = new acm.Certificate(stack1, 'Cert', {
  domainName: '*.example.com',
  validation: acm.CertificateValidation.fromDns(route53.PublicHostedZone.fromHostedZoneId(stack1, 'Zone', 'Z0329774B51CGXTDQV3X')),
});

const stack2 = new Stack(app, 'Stack2', {
  env: {
    region: 'us-east-2',
  },
  crossRegionReferences: true,
});
new cloudfront.Distribution(stack2, 'Distribution', {
  defaultBehavior: {
    origin: new origins.HttpOrigin('example.com'),
  },
  domainNames: ['dev.example.com'],
  certificate: cert,
});

Example not in your language?
When the AWS CDK determines that the resource is in a different stack and is in a different
region, it will "export" the value by creating a custom resource in the producing stack which
creates SSM Parameters in the consuming region for each exported value. The parameters will be
created with the name '/cdk/exports/${consumingStackName}/${export-name}'.
In order to "import" the exports into the consuming stack a SSM Dynamic reference
is used to reference the SSM parameter which was created.
In order to mimic strong references, a Custom Resource is also created in the consuming
stack which marks the SSM parameters as being "imported". When a parameter has been successfully
imported, the producing stack cannot update the value.

[!NOTE]
As a consequence of this feature being built on a Custom Resource, we are restricted to a
CloudFormation response body size limitation of 4096 bytes.
To prevent deployment errors related to the Custom Resource Provider response body being too
large, we recommend limiting the use of nested stacks and minimizing the length of stack names.
Doing this will prevent SSM parameter names from becoming too long which will reduce the size of the
response body.

See the adr
for more details on this feature.
Removing automatic cross-stack references
The automatic references created by CDK when you use resources across stacks
are convenient, but may block your deployments if you want to remove the
resources that are referenced in this way. You will see an error like:
Export Stack1:ExportsOutputFnGetAtt-****** cannot be deleted as it is in use by Stack1

Example not in your language?
Let's say there is a Bucket in the stack1, and the stack2 references its
bucket.bucketName. You now want to remove the bucket and run into the error above.
It's not safe to remove stack1.bucket while stack2 is still using it, so
unblocking yourself from this is a two-step process. This is how it works:
DEPLOYMENT 1: break the relationship

Make sure stack2 no longer references bucket.bucketName (maybe the consumer
stack now uses its own bucket, or it writes to an AWS DynamoDB table, or maybe you just
remove the Lambda Function altogether).
In the stack1 class, call this.exportValue(this.bucket.bucketName). This
will make sure the CloudFormation Export continues to exist while the relationship
between the two stacks is being broken.
Deploy (this will effectively only change the stack2, but it's safe to deploy both).

DEPLOYMENT 2: remove the resource

You are now free to remove the bucket resource from stack1.
Don't forget to remove the exportValue() call as well.
Deploy again (this time only the stack1 will be changed -- the bucket will be deleted).

Durations
To make specifications of time intervals unambiguous, a single class called
Duration is used throughout the AWS Construct Library by all constructs
that that take a time interval as a parameter (be it for a timeout, a
rate, or something else).
An instance of Duration is constructed by using one of the static factory
methods on it:
Duration.seconds(300)   // 5 minutes
Duration.minutes(5)     // 5 minutes
Duration.hours(1)       // 1 hour
Duration.days(7)        // 7 days
Duration.parse('PT5M')  // 5 minutes

Example not in your language?
Durations can be added or subtracted together:
Duration.minutes(1).plus(Duration.seconds(60)); // 2 minutes
Duration.minutes(5).minus(Duration.seconds(10)); // 290 secondes

Example not in your language?
Size (Digital Information Quantity)
To make specification of digital storage quantities unambiguous, a class called
Size is available.
An instance of Size is initialized through one of its static factory methods:
Size.kibibytes(200) // 200 KiB
Size.mebibytes(5)   // 5 MiB
Size.gibibytes(40)  // 40 GiB
Size.tebibytes(200) // 200 TiB
Size.pebibytes(3)   // 3 PiB

Example not in your language?
Instances of Size created with one of the units can be converted into others.
By default, conversion to a higher unit will fail if the conversion does not produce
a whole number. This can be overridden by unsetting integral property.
Size.mebibytes(2).toKibibytes()                                             // yields 2048
Size.kibibytes(2050).toMebibytes({ rounding: SizeRoundingBehavior.FLOOR })  // yields 2

Example not in your language?
Secrets
To help avoid accidental storage of secrets as plain text, we use the SecretValue type to
represent secrets. Any construct that takes a value that should be a secret (such as
a password or an access key) will take a parameter of type SecretValue.
The best practice is to store secrets in AWS Secrets Manager and reference them using SecretValue.secretsManager:
const secret = SecretValue.secretsManager('secretId', {
  jsonField: 'password', // optional: key of a JSON field to retrieve (defaults to all content),
  versionId: 'id',       // optional: id of the version (default AWSCURRENT)
  versionStage: 'stage', // optional: version stage name (default AWSCURRENT)
});

Example not in your language?
Using AWS Secrets Manager is the recommended way to reference secrets in a CDK app.
SecretValue also supports the following secret sources:

SecretValue.unsafePlainText(secret): stores the secret as plain text in your app and the resulting template (not recommended).
SecretValue.secretsManager(secret): refers to a secret stored in Secrets Manager
SecretValue.ssmSecure(param, version): refers to a secret stored as a SecureString in the SSM
Parameter Store. If you don't specify the exact version, AWS CloudFormation uses the latest
version of the parameter.
SecretValue.cfnParameter(param): refers to a secret passed through a CloudFormation parameter (must have NoEcho: true).
SecretValue.cfnDynamicReference(dynref): refers to a secret described by a CloudFormation dynamic reference (used by ssmSecure and secretsManager).
SecretValue.resourceAttribute(attr): refers to a secret returned from a CloudFormation resource creation.

SecretValues should only be passed to constructs that accept properties of type
SecretValue. These constructs are written to ensure your secrets will not be
exposed where they shouldn't be. If you try to use a SecretValue in a
different location, an error about unsafe secret usage will be thrown at
synthesis time.
If you rotate the secret's value in Secrets Manager, you must also change at
least one property on the resource where you are using the secret, to force
CloudFormation to re-read the secret.
SecretValue.ssmSecure() is only supported for a limited set of resources.
Click here for a list of supported resources and properties.
ARN manipulation
Sometimes you will need to put together or pick apart Amazon Resource Names
(ARNs). The functions stack.formatArn() and stack.splitArn() exist for
this purpose.
formatArn() can be used to build an ARN from components. It will automatically
use the region and account of the stack you're calling it on:
declare const stack: Stack;

// Builds "arn:<PARTITION>:lambda:<REGION>:<ACCOUNT>:function:MyFunction"
stack.formatArn({
  service: 'lambda',
  resource: 'function',
  arnFormat: ArnFormat.COLON_RESOURCE_NAME,
  resourceName: 'MyFunction'
});

Example not in your language?
splitArn() can be used to get a single component from an ARN. splitArn()
will correctly deal with both literal ARNs and deploy-time values (tokens),
but in case of a deploy-time value be aware that the result will be another
deploy-time value which cannot be inspected in the CDK application.
declare const stack: Stack;

// Extracts the function name out of an AWS Lambda Function ARN
const arnComponents = stack.splitArn(arn, ArnFormat.COLON_RESOURCE_NAME);
const functionName = arnComponents.resourceName;

Example not in your language?
Note that the format of the resource separator depends on the service and
may be any of the values supported by ArnFormat. When dealing with these
functions, it is important to know the format of the ARN you are dealing with.
For an exhaustive list of ARN formats used in AWS, see AWS ARNs and
Namespaces
in the AWS General Reference.
Dependencies
Construct Dependencies
Sometimes AWS resources depend on other resources, and the creation of one
resource must be completed before the next one can be started.
In general, CloudFormation will correctly infer the dependency relationship
between resources based on the property values that are used. In the cases where
it doesn't, the AWS Construct Library will add the dependency relationship for
you.
If you need to add an ordering dependency that is not automatically inferred,
you do so by adding a dependency relationship using
constructA.node.addDependency(constructB). This will add a dependency
relationship between all resources in the scope of constructA and all
resources in the scope of constructB.
If you want a single object to represent a set of constructs that are not
necessarily in the same scope, you can use a DependencyGroup. The
following creates a single object that represents a dependency on two
constructs, constructB and constructC:
// Declare the dependable object
const bAndC = new DependencyGroup();
bAndC.add(constructB);
bAndC.add(constructC);

// Take the dependency
constructA.node.addDependency(bAndC);

Example not in your language?
Stack Dependencies
Two different stack instances can have a dependency on one another. This
happens when an resource from one stack is referenced in another stack. In
that case, CDK records the cross-stack referencing of resources,
automatically produces the right CloudFormation primitives, and adds a
dependency between the two stacks. You can also manually add a dependency
between two stacks by using the stackA.addDependency(stackB) method.
A stack dependency has the following implications:

Cyclic dependencies are not allowed, so if stackA is using resources from
stackB, the reverse is not possible anymore.
Stacks with dependencies between them are treated specially by the CDK
toolkit:

If stackA depends on stackB, running cdk deploy stackA will also
automatically deploy stackB.
stackB's deployment will be performed before stackA's deployment.


CfnResource Dependencies
To make declaring dependencies between CfnResource objects easier, you can declare dependencies from one CfnResource object on another by using the cfnResource1.addDependency(cfnResource2) method. This method will work for resources both within the same stack and across stacks as it detects the relative location of the two resources and adds the dependency either to the resource or between the relevant stacks, as appropriate. If more complex logic is in needed, you can similarly remove, replace, or view dependencies between CfnResource objects with the CfnResource removeDependency, replaceDependency, and obtainDependencies methods, respectively.
Custom Resources
Custom Resources are CloudFormation resources that are implemented by arbitrary
user code. They can do arbitrary lookups or modifications during a
CloudFormation deployment.
Custom resources are backed by custom resource providers. Commonly, these are
Lambda Functions that are deployed in the same deployment as the one that
defines the custom resource itself, but they can also be backed by Lambda
Functions deployed previously, or code responding to SNS Topic events running on
EC2 instances in a completely different account. For more information on custom
resource providers, see the next section.
Once you have a provider, each definition of a CustomResource construct
represents one invocation. A single provider can be used for the implementation
of arbitrarily many custom resource definitions. A single definition looks like
this:
new CustomResource(this, 'MyMagicalResource', {
  resourceType: 'Custom::MyCustomResource', // must start with 'Custom::'

  // the resource properties
  properties: {
    Property1: 'foo',
    Property2: 'bar'
  },

  // the ARN of the provider (SNS/Lambda) which handles
  // CREATE, UPDATE or DELETE events for this resource type
  // see next section for details
  serviceToken: 'ARN'
});

Example not in your language?
Custom Resource Providers
Custom resources are backed by a custom resource provider which can be
implemented in one of the following ways. The following table compares the
various provider types (ordered from low-level to high-level):


ProviderCompute TypeError HandlingSubmit to CloudFormationMax TimeoutLanguageFootprint


sns.TopicSelf-managedManualManualUnlimitedAnyDepends
lambda.FunctionAWS LambdaManualManual15minAnySmall
core.CustomResourceProviderAWS LambdaAutoAuto15minNode.jsSmall
custom-resources.ProviderAWS LambdaAutoAutoUnlimited AsyncAnyLarge


Legend:

Compute type: which type of compute can be used to execute the handler.
Error Handling: whether errors thrown by handler code are automatically
trapped and a FAILED response is submitted to CloudFormation. If this is
"Manual", developers must take care of trapping errors. Otherwise, events
could cause stacks to hang.
Submit to CloudFormation: whether the framework takes care of submitting
SUCCESS/FAILED responses to CloudFormation through the event's response URL.
Max Timeout: maximum allows/possible timeout.
Language: which programming languages can be used to implement handlers.
Footprint: how many resources are used by the provider framework itself.

A NOTE ABOUT SINGLETONS
When defining resources for a custom resource provider, you will likely want to
define them as a stack singleton so that only a single instance of the
provider is created in your stack and which is used by all custom resources of
that type.
Here is a basic pattern for defining stack singletons in the CDK. The following
examples ensures that only a single SNS topic is defined:
function getOrCreate(scope: Construct): sns.Topic {
  const stack = Stack.of(scope);
  const uniqueid = 'GloballyUniqueIdForSingleton'; // For example, a UUID from `uuidgen`
  const existing = stack.node.tryFindChild(uniqueid);
  if (existing) {
    return existing as sns.Topic;
  }
  return new sns.Topic(stack, uniqueid);
}

Example not in your language?
Amazon SNS Topic
Every time a resource event occurs (CREATE/UPDATE/DELETE), an SNS notification
is sent to the SNS topic. Users must process these notifications (e.g. through a
fleet of worker hosts) and submit success/failure responses to the
CloudFormation service.

You only need to use this type of provider if your custom resource cannot run on AWS Lambda, for reasons other than the 15
minute timeout. If you are considering using this type of provider because you want to write a custom resource provider that may need
to wait for more than 15 minutes for the API calls to stabilize, have a look at the custom-resources module first.
Refer to the CloudFormation Custom Resource documentation for information on the contract your custom resource needs to adhere to.

Set serviceToken to topic.topicArn  in order to use this provider:
const topic = new sns.Topic(this, 'MyProvider');

new CustomResource(this, 'MyResource', {
  serviceToken: topic.topicArn
});

Example not in your language?
AWS Lambda Function
An AWS lambda function is called directly by CloudFormation for all resource
events. The handler must take care of explicitly submitting a success/failure
response to the CloudFormation service and handle various error cases.

We do not recommend you use this provider type. The CDK has wrappers around Lambda Functions that make them easier to work with.
If you do want to use this provider, refer to the CloudFormation Custom Resource documentation for information on the contract your custom resource needs to adhere to.

Set serviceToken to lambda.functionArn to use this provider:
const fn = new lambda.SingletonFunction(this, 'MyProvider', functionProps);

new CustomResource(this, 'MyResource', {
  serviceToken: fn.functionArn,
});

Example not in your language?
The core.CustomResourceProvider class
The class @aws-cdk/core.CustomResourceProvider offers a basic low-level
framework designed to implement simple and slim custom resource providers. It
currently only supports Node.js-based user handlers, represents permissions as raw
JSON blobs instead of iam.PolicyStatement objects, and it does not have
support for asynchronous waiting (handler cannot exceed the 15min lambda
timeout). The CustomResourceProviderRuntime supports runtime nodejs12.x,
nodejs14.x, nodejs16.x, nodejs18.x.

As an application builder, we do not recommend you use this provider type. This provider exists purely for custom resources that are part of the AWS Construct Library.
The custom-resources provider is more convenient to work with and more fully-featured.

The provider has a built-in singleton method which uses the resource type as a
stack-unique identifier and returns the service token:
const serviceToken = CustomResourceProvider.getOrCreate(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
  description: "Lambda function created by the custom resource provider",
});

new CustomResource(this, 'MyResource', {
  resourceType: 'Custom::MyCustomResourceType',
  serviceToken: serviceToken
});

Example not in your language?
The directory (my-handler in the above example) must include an index.js file. It cannot import
external dependencies or files outside this directory. It must export an async
function named handler. This function accepts the CloudFormation resource
event object and returns an object with the following structure:
exports.handler = async function(event) {
  const id = event.PhysicalResourceId; // only for "Update" and "Delete"
  const props = event.ResourceProperties;
  const oldProps = event.OldResourceProperties; // only for "Update"s

  switch (event.RequestType) {
    case "Create":
      // ...

    case "Update":
      // ...

      // if an error is thrown, a FAILED response will be submitted to CFN
      throw new Error('Failed!');

    case "Delete":
      // ...
  }

  return {
    // (optional) the value resolved from `resource.ref`
    // defaults to "event.PhysicalResourceId" or "event.RequestId"
    PhysicalResourceId: "REF",

    // (optional) calling `resource.getAtt("Att1")` on the custom resource in the CDK app
    // will return the value "BAR".
    Data: {
      Att1: "BAR",
      Att2: "BAZ"
    },

    // (optional) user-visible message
    Reason: "User-visible message",

    // (optional) hides values from the console
    NoEcho: true
  };
}

Example not in your language?
Here is an complete example of a custom resource that summarizes two numbers:
sum-handler/index.js:
exports.handler = async (e) => {
  return {
    Data: {
      Result: e.ResourceProperties.lhs + e.ResourceProperties.rhs,
    },
  };
};

Example not in your language?
sum.ts:
import { Construct } from 'constructs';
import {
  CustomResource,
  CustomResourceProvider,
  CustomResourceProviderRuntime,
  Token,
} from 'aws-cdk-lib';

export interface SumProps {
  readonly lhs: number;
  readonly rhs: number;
}

export class Sum extends Construct {
  public readonly result: number;

  constructor(scope: Construct, id: string, props: SumProps) {
    super(scope, id);

    const resourceType = 'Custom::Sum';
    const serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, {
      codeDirectory: `${__dirname}/sum-handler`,
      runtime: CustomResourceProviderRuntime.NODEJS_18_X,
    });

    const resource = new CustomResource(this, 'Resource', {
      resourceType: resourceType,
      serviceToken: serviceToken,
      properties: {
        lhs: props.lhs,
        rhs: props.rhs
      }
    });

    this.result = Token.asNumber(resource.getAtt('Result'));
  }
}

Example not in your language?
Usage will look like this:
const sum = new Sum(this, 'MySum', { lhs: 40, rhs: 2 });
new CfnOutput(this, 'Result', { value: Token.asString(sum.result) });

Example not in your language?
To access the ARN of the provider's AWS Lambda function role, use the getOrCreateProvider()
built-in singleton method:
const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
});

const roleArn = provider.roleArn;

Example not in your language?
This role ARN can then be used in resource-based IAM policies.
To add IAM policy statements to this role, use addToRolePolicy():
const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
});
provider.addToRolePolicy({
  Effect: 'Allow',
  Action: 's3:GetObject',
  Resource: '*',
})

Example not in your language?
Note that addToRolePolicy() uses direct IAM JSON policy blobs, not a
iam.PolicyStatement object like you will see in the rest of the CDK.
The Custom Resource Provider Framework
The @aws-cdk/custom-resources module includes an advanced framework for
implementing custom resource providers.
Handlers are implemented as AWS Lambda functions, which means that they can be
implemented in any Lambda-supported runtime. Furthermore, this provider has an
asynchronous mode, which means that users can provide an isComplete lambda
function which is called periodically until the operation is complete. This
allows implementing providers that can take up to two hours to stabilize.
Set serviceToken to provider.serviceToken to use this type of provider:
const provider = new customresources.Provider(this, 'MyProvider', {
  onEventHandler,
  isCompleteHandler, // optional async waiter
});

new CustomResource(this, 'MyResource', {
  serviceToken: provider.serviceToken
});

Example not in your language?
See the documentation for more details.
AWS CloudFormation features
A CDK stack synthesizes to an AWS CloudFormation Template. This section
explains how this module allows users to access low-level CloudFormation
features when needed.
Stack Outputs
CloudFormation stack outputs and exports are created using
the CfnOutput class:
new CfnOutput(this, 'OutputName', {
  value: myBucket.bucketName,
  description: 'The name of an S3 bucket', // Optional
  exportName: 'TheAwesomeBucket', // Registers a CloudFormation export named "TheAwesomeBucket"
});

Example not in your language?
Parameters
CloudFormation templates support the use of Parameters to
customize a template. They enable CloudFormation users to input custom values to
a template each time a stack is created or updated. While the CDK design
philosophy favors using build-time parameterization, users may need to use
CloudFormation in a number of cases (for example, when migrating an existing
stack to the AWS CDK).
Template parameters can be added to a stack by using the CfnParameter class:
new CfnParameter(this, 'MyParameter', {
  type: 'Number',
  default: 1337,
  // See the API reference for more configuration props
});

Example not in your language?
The value of parameters can then be obtained using one of the value methods.
As parameters are only resolved at deployment time, the values obtained are
placeholder tokens for the real value (Token.isUnresolved() would return true
for those):
const param = new CfnParameter(this, 'ParameterName', { /* config */ });

// If the parameter is a String
param.valueAsString;

// If the parameter is a Number
param.valueAsNumber;

// If the parameter is a List
param.valueAsList;

Example not in your language?
Pseudo Parameters
CloudFormation supports a number of pseudo parameters,
which resolve to useful values at deployment time. CloudFormation pseudo
parameters can be obtained from static members of the Aws class.
It is generally recommended to access pseudo parameters from the scope's stack
instead, which guarantees the values produced are qualifying the designated
stack, which is essential in cases where resources are shared cross-stack:
// "this" is the current construct
const stack = Stack.of(this);

stack.account; // Returns the AWS::AccountId for this stack (or the literal value if known)
stack.region;  // Returns the AWS::Region for this stack (or the literal value if known)
stack.partition; // Returns the AWS::Partition for this stack (or the literal value if known)

Example not in your language?
Resource Options
CloudFormation resources can also specify resource
attributes. The CfnResource class allows
accessing those through the cfnOptions property:
const rawBucket = new s3.CfnBucket(this, 'Bucket', { /* ... */ });
// -or-
const rawBucketAlt = myBucket.node.defaultChild as s3.CfnBucket;

// then
rawBucket.cfnOptions.condition = new CfnCondition(this, 'EnableBucket', { /* ... */ });
rawBucket.cfnOptions.metadata = {
  metadataKey: 'MetadataValue',
};

Example not in your language?
Resource dependencies (the DependsOn attribute) is modified using the
cfnResource.addDependency method:
const resourceA = new CfnResource(this, 'ResourceA', resourceProps);
const resourceB = new CfnResource(this, 'ResourceB', resourceProps);

resourceB.addDependency(resourceA);

Example not in your language?
CreationPolicy
Some resources support a CreationPolicy to be specified as a CfnOption.
The creation policy is invoked only when AWS CloudFormation creates the associated resource. Currently, the only AWS CloudFormation resources that support creation policies are CfnAutoScalingGroup, CfnInstance, CfnWaitCondition and CfnFleet.
The CfnFleet resource from the aws-appstream module supports specifying startFleet as
a property of the creationPolicy on the resource options. Setting it to true will make AWS CloudFormation wait until the fleet is started before continuing with the creation of
resources that depend on the fleet resource.
const fleet = new appstream.CfnFleet(this, 'Fleet', {
  instanceType: 'stream.standard.small',
  name: 'Fleet',
  computeCapacity: {
    desiredInstances: 1,
  },
  imageName: 'AppStream-AmazonLinux2-09-21-2022',
});
fleet.cfnOptions.creationPolicy = {
  startFleet: true,
};

Example not in your language?
The properties passed to the level 2 constructs AutoScalingGroup and Instance from the
aws-ec2 module abstract what is passed into the CfnOption properties resourceSignal and
autoScalingCreationPolicy, but when using level 1 constructs you can specify these yourself.
The CfnWaitCondition resource from the aws-cloudformation module suppports the resourceSignal.
The format of the timeout is PT#H#M#S. In the example below AWS Cloudformation will wait for
3 success signals to occur within 15 minutes before the status of the resource will be set to
CREATE_COMPLETE.
declare const resource: CfnResource;

resource.cfnOptions.creationPolicy = {
  resourceSignal: {
    count: 3,
    timeout: 'PR15M',
  }
};

Example not in your language?
Intrinsic Functions and Condition Expressions
CloudFormation supports intrinsic functions. These functions
can be accessed from the Fn class, which provides type-safe methods for each
intrinsic function as well as condition expressions:
declare const myObjectOrArray: any;
declare const myArray: any;

// To use Fn::Base64
Fn.base64('SGVsbG8gQ0RLIQo=');

// To compose condition expressions:
const environmentParameter = new CfnParameter(this, 'Environment');
Fn.conditionAnd(
  // The "Environment" CloudFormation template parameter evaluates to "Production"
  Fn.conditionEquals('Production', environmentParameter),
  // The AWS::Region pseudo-parameter value is NOT equal to "us-east-1"
  Fn.conditionNot(Fn.conditionEquals('us-east-1', Aws.REGION)),
);

// To use Fn::ToJsonString
Fn.toJsonString(myObjectOrArray);

// To use Fn::Length
Fn.len(Fn.split(',', myArray));

Example not in your language?
When working with deploy-time values (those for which Token.isUnresolved
returns true), idiomatic conditionals from the programming language cannot be
used (the value will not be known until deployment time). When conditional logic
needs to be expressed with un-resolved values, it is necessary to use
CloudFormation conditions by means of the CfnCondition class:
const environmentParameter = new CfnParameter(this, 'Environment');
const isProd = new CfnCondition(this, 'IsProduction', {
  expression: Fn.conditionEquals('Production', environmentParameter),
});

// Configuration value that is a different string based on IsProduction
const stage = Fn.conditionIf(isProd.logicalId, 'Beta', 'Prod').toString();

// Make Bucket creation condition to IsProduction by accessing
// and overriding the CloudFormation resource
const bucket = new s3.Bucket(this, 'Bucket');
const cfnBucket = myBucket.node.defaultChild as s3.CfnBucket;
cfnBucket.cfnOptions.condition = isProd;

Example not in your language?
Mappings
CloudFormation mappings are created and queried using the
CfnMappings class:
const regionTable = new CfnMapping(this, 'RegionTable', {
  mapping: {
    'us-east-1': {
      regionName: 'US East (N. Virginia)',
      // ...
    },
    'us-east-2': {
      regionName: 'US East (Ohio)',
      // ...
    },
    // ...
  }
});

regionTable.findInMap(Aws.REGION, 'regionName')

Example not in your language?
This will yield the following template:
Mappings:
  RegionTable:
    us-east-1:
      regionName: US East (N. Virginia)
    us-east-2:
      regionName: US East (Ohio)

Example not in your language?
Mappings can also be synthesized "lazily"; lazy mappings will only render a "Mappings"
section in the synthesized CloudFormation template if some findInMap call is unable to
immediately return a concrete value due to one or both of the keys being unresolved tokens
(some value only available at deploy-time).
For example, the following code will not produce anything in the "Mappings" section. The
call to findInMap will be able to resolve the value during synthesis and simply return
'US East (Ohio)'.
const regionTable = new CfnMapping(this, 'RegionTable', {
  mapping: {
    'us-east-1': {
      regionName: 'US East (N. Virginia)',
    },
    'us-east-2': {
      regionName: 'US East (Ohio)',
    },
  },
  lazy: true,
});

regionTable.findInMap('us-east-2', 'regionName');

Example not in your language?
On the other hand, the following code will produce the "Mappings" section shown above,
since the top-level key is an unresolved token. The call to findInMap will return a token that resolves to
{ "Fn::FindInMap": [ "RegionTable", { "Ref": "AWS::Region" }, "regionName" ] }.
declare const regionTable: CfnMapping;

regionTable.findInMap(Aws.REGION, 'regionName');

Example not in your language?
An optional default value can also be passed to findInMap. If either key is not found in the map and the mapping is lazy, findInMap will return the default value and not render the mapping.
If the mapping is not lazy or either key is an unresolved token, the call to findInMap will return a token that resolves to
{ "Fn::FindInMap": [ "MapName", "TopLevelKey", "SecondLevelKey", { "DefaultValue": "DefaultValue" } ] }, and the mapping will be rendered.
Note that the AWS::LanguageExtentions transform is added to enable the default value functionality.
For example, the following code will again not produce anything in the "Mappings" section. The
call to findInMap will be able to resolve the value during synthesis and simply return
'Region not found'.
const regionTable = new CfnMapping(this, 'RegionTable', {
  mapping: {
    'us-east-1': {
      regionName: 'US East (N. Virginia)',
    },
    'us-east-2': {
      regionName: 'US East (Ohio)',
    },
  },
  lazy: true,
});

regionTable.findInMap('us-west-1', 'regionName', 'Region not found');

Example not in your language?
Dynamic References
CloudFormation supports dynamically resolving values
for SSM parameters (including secure strings) and Secrets Manager. Encoding such
references is done using the CfnDynamicReference class:
new CfnDynamicReference(
  CfnDynamicReferenceService.SECRETS_MANAGER,
  'secret-id:secret-string:json-key:version-stage:version-id',
);

Example not in your language?
Template Options & Transform
CloudFormation templates support a number of options, including which Macros or
Transforms to use when deploying the stack. Those can be
configured using the stack.templateOptions property:
const stack = new Stack(app, 'StackName');

stack.templateOptions.description = 'This will appear in the AWS console';
stack.templateOptions.transforms = ['AWS::Serverless-2016-10-31'];
stack.templateOptions.metadata = {
  metadataKey: 'MetadataValue',
};

Example not in your language?
Emitting Raw Resources
The CfnResource class allows emitting arbitrary entries in the
Resources section of the CloudFormation template.
new CfnResource(this, 'ResourceId', {
  type: 'AWS::S3::Bucket',
  properties: {
    BucketName: 'amzn-s3-demo-bucket'
  },
});

Example not in your language?
As for any other resource, the logical ID in the CloudFormation template will be
generated by the AWS CDK, but the type and properties will be copied verbatim in
the synthesized template.
Including raw CloudFormation template fragments
When migrating a CloudFormation stack to the AWS CDK, it can be useful to
include fragments of an existing template verbatim in the synthesized template.
This can be achieved using the CfnInclude class.
new CfnInclude(this, 'ID', {
  template: {
    Resources: {
      Bucket: {
        Type: 'AWS::S3::Bucket',
        Properties: {
          BucketName: 'amzn-s3-demo-bucket'
        }
      }
    }
  },
});

Example not in your language?
Termination Protection
You can prevent a stack from being accidentally deleted by enabling termination
protection on the stack. If a user attempts to delete a stack with termination
protection enabled, the deletion fails and the stack--including its status--remains
unchanged. Enabling or disabling termination protection on a stack sets it for any
nested stacks belonging to that stack as well. You can enable termination protection
on a stack by setting the terminationProtection prop to true.
const stack = new Stack(app, 'StackName', {
  terminationProtection: true,
});

Example not in your language?
You can also set termination protection with the setter after you've instantiated the stack.
const stack = new Stack(app, 'StackName', {});
stack.terminationProtection = true;

Example not in your language?
By default, termination protection is disabled.
Description
You can add a description of the stack in the same way as StackProps.
const stack = new Stack(app, 'StackName', {
  description: 'This is a description.',
});

Example not in your language?
CfnJson
CfnJson allows you to postpone the resolution of a JSON blob from
deployment-time. This is useful in cases where the CloudFormation JSON template
cannot express a certain value.
A common example is to use CfnJson in order to render a JSON map which needs
to use intrinsic functions in keys. Since JSON map keys must be strings, it is
impossible to use intrinsics in keys and CfnJson can help.
The following example defines an IAM role which can only be assumed by
principals that are tagged with a specific tag.
const tagParam = new CfnParameter(this, 'TagName');

const stringEquals = new CfnJson(this, 'ConditionJson', {
  value: {
    [`aws:PrincipalTag/${tagParam.valueAsString}`]: true,
  },
});

const principal = new iam.AccountRootPrincipal().withConditions({
  StringEquals: stringEquals,
});

new iam.Role(this, 'MyRole', { assumedBy: principal });

Example not in your language?
Explanation: since in this example we pass the tag name through a parameter, it
can only be resolved during deployment. The resolved value can be represented in
the template through a { "Ref": "TagName" }. However, since we want to use
this value inside a aws:PrincipalTag/TAG-NAME
IAM operator, we need it in the key of a StringEquals condition. JSON keys
must be strings, so to circumvent this limitation, we use CfnJson
to "delay" the rendition of this template section to deploy-time. This means
that the value of StringEquals in the template will be { "Fn::GetAtt": [ "ConditionJson", "Value" ] }, and will only "expand" to the operator we synthesized during deployment.
Stack Resource Limit
When deploying to AWS CloudFormation, it needs to keep in check the amount of resources being added inside a Stack. Currently it's possible to check the limits in the AWS CloudFormation quotas page.
It's possible to synthesize the project with more Resources than the allowed (or even reduce the number of Resources).
Set the context key @aws-cdk/core:stackResourceLimit with the proper value, being 0 for disable the limit of resources.
Template Indentation
The AWS CloudFormation templates generated by CDK include indentation by default.
Indentation makes the templates more readable, but also increases their size,
and CloudFormation templates cannot exceed 1MB.
It's possible to reduce the size of your templates by suppressing indentation.
To do this for all templates, set the context key @aws-cdk/core:suppressTemplateIndentation to true.
To do this for a specific stack, add a suppressTemplateIndentation: true property to the
stack's StackProps parameter. You can also set this property to false to override
the context key setting.
App Context
Context values are key-value pairs that can be associated with an app, stack, or construct.
One common use case for context is to use it for enabling/disabling feature flags. There are several places
where context can be specified. They are listed below in the order they are evaluated (items at the
top take precedence over those below).

The node.setContext() method
The postCliContext prop when you create an App
The CLI via the --context CLI argument
The cdk.json file via the context key:
The cdk.context.json file:
The ~/.cdk.json file via the context key:
The context prop when you create an App

Examples of setting context
new App({
  context: {
    '@aws-cdk/core:newStyleStackSynthesis': true,
  },
});

Example not in your language?
const app = new App();
app.node.setContext('@aws-cdk/core:newStyleStackSynthesis', true);

Example not in your language?
new App({
  postCliContext: {
    '@aws-cdk/core:newStyleStackSynthesis': true,
  },
});

Example not in your language?
cdk synth --context @aws-cdk/core:newStyleStackSynthesis=true

Example not in your language?
cdk.json
{
  "context": {
    "@aws-cdk/core:newStyleStackSynthesis": true
  }
}

Example not in your language?
cdk.context.json
{
  "@aws-cdk/core:newStyleStackSynthesis": true
}

Example not in your language?
~/.cdk.json
{
  "context": {
    "@aws-cdk/core:newStyleStackSynthesis": true
  }
}

Example not in your language?
IAM Permissions Boundary
It is possible to apply an IAM permissions boundary
to all roles within a specific construct scope. The most common use case would
be to apply a permissions boundary at the Stage level.
const prodStage = new Stage(app, 'ProdStage', {
  permissionsBoundary: PermissionsBoundary.fromName('cdk-${Qualifier}-PermissionsBoundary'),
});

Example not in your language?
Any IAM Roles or Users created within this Stage will have the default
permissions boundary attached.
For more details see the Permissions Boundary section in the IAM guide.
Policy Validation
If you or your organization use (or would like to use) any policy validation tool, such as
CloudFormation
Guard or
OPA, to define constraints on your
CloudFormation template, you can incorporate them into the CDK application.
By using the appropriate plugin, you can make the CDK application check the
generated CloudFormation templates against your policies immediately after
synthesis. If there are any violations, the synthesis will fail and a report
will be printed to the console or to a file (see below).

Note
This feature is considered experimental, and both the plugin API and the
format of the validation report are subject to change in the future.

For application developers
To use one or more validation plugins in your application, use the
policyValidationBeta1 property of Stage:
// globally for the entire app (an app is a stage)
const app = new App({
  policyValidationBeta1: [
    // These hypothetical classes implement IPolicyValidationPluginBeta1:
    new ThirdPartyPluginX(),
    new ThirdPartyPluginY(),
  ],
});

// only apply to a particular stage
const prodStage = new Stage(app, 'ProdStage', {
  policyValidationBeta1: [
    new ThirdPartyPluginX(),
  ],
});

Example not in your language?
Immediately after synthesis, all plugins registered this way will be invoked to
validate all the templates generated in the scope you defined. In particular, if
you register the templates in the App object, all templates will be subject to
validation.

Warning
Other than modifying the cloud assembly, plugins can do anything that your CDK
application can. They can read data from the filesystem, access the network
etc. It's your responsibility as the consumer of a plugin to verify that it is
secure to use.

By default, the report will be printed in a human readable format. If you want a
report in JSON format, enable it using the @aws-cdk/core:validationReportJson
context passing it directly to the application:
const app = new App({
  context: { '@aws-cdk/core:validationReportJson': true },
});

Example not in your language?
Alternatively, you can set this context key-value pair using the cdk.json or
cdk.context.json files in your project directory (see
Runtime context).
If you choose the JSON format, the CDK will print the policy validation report
to a file called policy-validation-report.json in the cloud assembly
directory. For the default, human-readable format, the report will be printed to
the standard output.
For plugin authors
The communication protocol between the CDK core module and your policy tool is
defined by the IPolicyValidationPluginBeta1 interface. To create a new plugin you must
write a class that implements this interface. There are two things you need to
implement: the plugin name (by overriding the name property), and the
validate() method.
The framework will call validate(), passing an IPolicyValidationContextBeta1 object.
The location of the templates to be validated is given by templatePaths. The
plugin should return an instance of PolicyValidationPluginReportBeta1. This object
represents the report that the user wil receive at the end of the synthesis.
class MyPlugin implements IPolicyValidationPluginBeta1 {
  public readonly name = 'MyPlugin';

  public validate(context: IPolicyValidationContextBeta1): PolicyValidationPluginReportBeta1 {
    // First read the templates using context.templatePaths...

    // ...then perform the validation, and then compose and return the report.
    // Using hard-coded values here for better clarity:
    return {
      success: false,
      violations: [{
        ruleName: 'CKV_AWS_117',
        description: 'Ensure that AWS Lambda function is configured inside a VPC',
        fix: 'https://docs.bridgecrew.io/docs/ensure-that-aws-lambda-function-is-configured-inside-a-vpc-1',
        violatingResources: [{
          resourceLogicalId: 'MyFunction3BAA72D1',
          templatePath: '/home/johndoe/myapp/cdk.out/MyService.template.json',
          locations: ['Properties/VpcConfig'],
        }],
      }],
    };
  }
}

Example not in your language?
In addition to the name, plugins may optionally report their version (version
property ) and a list of IDs of the rules they are going to evaluate (ruleIds
property).
Note that plugins are not allowed to modify anything in the cloud assembly. Any
attempt to do so will result in synthesis failure.
If your plugin depends on an external tool, keep in mind that some developers may
not have that tool installed in their workstations yet. To minimize friction, we
highly recommend that you provide some installation script along with your
plugin package, to automate the whole process. Better yet, run that script as
part of the installation of your package. With npm, for example, you can run
add it to the postinstall
script in the package.json
file.
Annotations
Construct authors can add annotations to constructs to report at three different
levels: ERROR, WARN, INFO.
Typically warnings are added for things that are important for the user to be
aware of, but will not cause deployment errors in all cases. Some common
scenarios are (non-exhaustive list):

Warn when the user needs to take a manual action, e.g. IAM policy should be
added to an referenced resource.
Warn if the user configuration might not follow best practices (but is still
valid)
Warn if the user is using a deprecated API

Acknowledging Warnings
If you would like to run with --strict mode enabled (warnings will throw
errors) it is possible to acknowledge warnings to make the warning go away.
For example, if > 10 IAM managed policies are added to an IAM Group, a warning
will be created:
IAM:Group:MaxPoliciesExceeded: You added 11 to IAM Group my-group. The maximum number of managed policies attached to an IAM group is 10.

Example not in your language?
If you have requested a quota increase
you may have the ability to add > 10 managed policies which means that this
warning does not apply to you. You can acknowledge this by acknowledging the
warning by the id.
Annotations.of(this).acknowledgeWarning('IAM:Group:MaxPoliciesExceeded', 'Account has quota increased to 20');

Example not in your language?\n\n\n\nAWS CDK2.193.0API ReferencePythonJava.NETGoDeveloper GuideExamplesConstruct Hub\nAWS CDK2.193.0API ReferencePythonJava.NETGoDeveloper GuideExamplesConstruct Hub\nAPI ReferencePythonJava.NETGoDeveloper GuideExamplesConstruct Hub\nAWS CDKAWS CDK Reference DocumentationAPI ReferenceDeveloper GuideLooking for more constructs?Try Construct HubDocsAWS Construct LibraryCommunityStack OverflowMoreGitHub\nAWS CDKAWS CDK Reference DocumentationAPI ReferenceDeveloper GuideLooking for more constructs?Try Construct Hub\nAWS CDKAWS CDK Reference DocumentationAPI ReferenceDeveloper GuideLooking for more constructs?Try Construct Hub\nAWS CDKAWS CDK Reference DocumentationAPI ReferenceDeveloper GuideLooking for more constructs?Try Construct Hub\nAWS CDKAWS CDK Reference DocumentationAPI ReferenceDeveloper GuideLooking for more constructs?Try Construct Hub\nAWS CDKAWS CDK Reference DocumentationAPI ReferenceDeveloper GuideLooking for more constructs?Try Construct Hub\nAWS CDKAWS CDK Reference Documentation\nAPI ReferenceDeveloper Guide\nAPI ReferenceDeveloper Guide\nAPI ReferenceDeveloper Guide\nLooking for more constructs?\nDocsAWS Construct Library\nAWS Construct Library\nCommunityStack Overflow\n\n\nClick here to see all versions\n\n\nModules
The AWS Construct Library is organized into several modules. They are
named like this:

aws-xxx: service package for the indicated service. This package will
contain constructs to work with the given service.
aws-xxx¹: a little superscript 1 indicates that his package only
contains CloudFormation Resources (for now).
aws-xxx-targets: integration package for the indicated service. This
package will contain classes to connect the constructs in the "aws-xxx"
package to other AWS services it can work with.
xxx: packages that don't start "aws-" are AWS CDK framework packages.

Module Contents
Modules contain the following types:

Constructs - All higher-level
constructs
in this library.
Other Types - All non-construct classes, interfaces, structs
and enums that exist to support the constructs.
CloudFormation Resources - All constructs that map directly onto
CloudFormation Resources. We recommend that you read the CloudFormation
Resource and Property Type
Reference
for details on these resources.
CloudFormation Property Types - All structs that are used by the
CloudFormation Resource constructs.

Constructs take a set of (input) properties in their constructor; the set of
properties (and which ones are required) can be seen on a construct's
documentation page.
The construct's documentation page also lists the available methods to call
and the properties which can be used to retrieve information about the
construct after it has been instantiated.
Every type's page has a table at the top with links to language-specific
documentation on the type.\n\nAPI ReferenceModules
The AWS Construct Library is organized into several modules. They are
named like this:

aws-xxx: service package for the indicated service. This package will
contain constructs to work with the given service.
aws-xxx¹: a little superscript 1 indicates that his package only
contains CloudFormation Resources (for now).
aws-xxx-targets: integration package for the indicated service. This
package will contain classes to connect the constructs in the "aws-xxx"
package to other AWS services it can work with.
xxx: packages that don't start "aws-" are AWS CDK framework packages.

Module Contents
Modules contain the following types:

Constructs - All higher-level
constructs
in this library.
Other Types - All non-construct classes, interfaces, structs
and enums that exist to support the constructs.
CloudFormation Resources - All constructs that map directly onto
CloudFormation Resources. We recommend that you read the CloudFormation
Resource and Property Type
Reference
for details on these resources.
CloudFormation Property Types - All structs that are used by the
CloudFormation Resource constructs.

Constructs take a set of (input) properties in their constructor; the set of
properties (and which ones are required) can be seen on a construct's
documentation page.
The construct's documentation page also lists the available methods to call
and the properties which can be used to retrieve information about the
construct after it has been instantiated.
Every type's page has a table at the top with links to language-specific
documentation on the type.\n\n\n\nAWS Cloud Development Kit
          

  
    
    
    
  

        
              Contents:

API Reference


        
      
    

    
          
          AWS Cloud Development Kit
      

      
        
          
  
      
      AWS CDK Python Reference
      
      
  
  

          
           
             
  
AWS CDK Python Reference

Contents:

API Reference
aws_cdk
aws_cdk.alexa_ask
aws_cdk.app_staging_synthesizer_alpha
aws_cdk.assertions
aws_cdk.asset_awscli_v1
aws_cdk.asset_node_proxy_agent_v6
aws_cdk.aws_accessanalyzer
aws_cdk.aws_acmpca
aws_cdk.aws_amazonmq
aws_cdk.aws_amplify
aws_cdk.aws_amplify_alpha
aws_cdk.aws_amplifyuibuilder
aws_cdk.aws_apigateway
aws_cdk.aws_apigatewayv2
aws_cdk.aws_apigatewayv2_authorizers
aws_cdk.aws_apigatewayv2_integrations
aws_cdk.aws_appconfig
aws_cdk.aws_appflow
aws_cdk.aws_appintegrations
aws_cdk.aws_applicationautoscaling
aws_cdk.aws_applicationinsights
aws_cdk.aws_applicationsignals
aws_cdk.aws_applicationsignals_alpha
aws_cdk.aws_appmesh
aws_cdk.aws_apprunner
aws_cdk.aws_apprunner_alpha
aws_cdk.aws_appstream
aws_cdk.aws_appsync
aws_cdk.aws_apptest
aws_cdk.aws_aps
aws_cdk.aws_arczonalshift
aws_cdk.aws_athena
aws_cdk.aws_auditmanager
aws_cdk.aws_autoscaling
aws_cdk.aws_autoscaling_common
aws_cdk.aws_autoscaling_hooktargets
aws_cdk.aws_autoscalingplans
aws_cdk.aws_b2bi
aws_cdk.aws_backup
aws_cdk.aws_backupgateway
aws_cdk.aws_batch
aws_cdk.aws_bcmdataexports
aws_cdk.aws_bedrock
aws_cdk.aws_billingconductor
aws_cdk.aws_budgets
aws_cdk.aws_cassandra
aws_cdk.aws_ce
aws_cdk.aws_certificatemanager
aws_cdk.aws_chatbot
aws_cdk.aws_cleanrooms
aws_cdk.aws_cleanroomsml
aws_cdk.aws_cloud9
aws_cdk.aws_cloud9_alpha
aws_cdk.aws_cloudformation
aws_cdk.aws_cloudfront
aws_cdk.aws_cloudfront.experimental
aws_cdk.aws_cloudfront_origins
aws_cdk.aws_cloudtrail
aws_cdk.aws_cloudwatch
aws_cdk.aws_cloudwatch_actions
aws_cdk.aws_codeartifact
aws_cdk.aws_codebuild
aws_cdk.aws_codecommit
aws_cdk.aws_codeconnections
aws_cdk.aws_codedeploy
aws_cdk.aws_codeguruprofiler
aws_cdk.aws_codegurureviewer
aws_cdk.aws_codepipeline
aws_cdk.aws_codepipeline_actions
aws_cdk.aws_codestar
aws_cdk.aws_codestar_alpha
aws_cdk.aws_codestarconnections
aws_cdk.aws_codestarnotifications
aws_cdk.aws_cognito
aws_cdk.aws_cognito_identitypool
aws_cdk.aws_comprehend
aws_cdk.aws_config
aws_cdk.aws_connect
aws_cdk.aws_connectcampaigns
aws_cdk.aws_connectcampaignsv2
aws_cdk.aws_controltower
aws_cdk.aws_cur
aws_cdk.aws_customerprofiles
aws_cdk.aws_databrew
aws_cdk.aws_datapipeline
aws_cdk.aws_datasync
aws_cdk.aws_datazone
aws_cdk.aws_dax
aws_cdk.aws_deadline
aws_cdk.aws_detective
aws_cdk.aws_devicefarm
aws_cdk.aws_devopsguru
aws_cdk.aws_directoryservice
aws_cdk.aws_dlm
aws_cdk.aws_dms
aws_cdk.aws_docdb
aws_cdk.aws_docdbelastic
aws_cdk.aws_dsql
aws_cdk.aws_dynamodb
aws_cdk.aws_ec2
aws_cdk.aws_ec2_alpha
aws_cdk.aws_ecr
aws_cdk.aws_ecr_assets
aws_cdk.aws_ecs
aws_cdk.aws_ecs_patterns
aws_cdk.aws_efs
aws_cdk.aws_eks
aws_cdk.aws_eks_v2_alpha
aws_cdk.aws_elasticache
aws_cdk.aws_elasticbeanstalk
aws_cdk.aws_elasticloadbalancing
aws_cdk.aws_elasticloadbalancingv2
aws_cdk.aws_elasticloadbalancingv2_actions
aws_cdk.aws_elasticloadbalancingv2_targets
aws_cdk.aws_elasticsearch
aws_cdk.aws_emr
aws_cdk.aws_emrcontainers
aws_cdk.aws_emrserverless
aws_cdk.aws_entityresolution
aws_cdk.aws_events
aws_cdk.aws_events_targets
aws_cdk.aws_eventschemas
aws_cdk.aws_evidently
aws_cdk.aws_finspace
aws_cdk.aws_fis
aws_cdk.aws_fms
aws_cdk.aws_forecast
aws_cdk.aws_frauddetector
aws_cdk.aws_fsx
aws_cdk.aws_gamelift
aws_cdk.aws_gamelift_alpha
aws_cdk.aws_gameliftstreams
aws_cdk.aws_globalaccelerator
aws_cdk.aws_globalaccelerator_endpoints
aws_cdk.aws_glue
aws_cdk.aws_glue_alpha
aws_cdk.aws_grafana
aws_cdk.aws_greengrass
aws_cdk.aws_greengrassv2
aws_cdk.aws_groundstation
aws_cdk.aws_guardduty
aws_cdk.aws_healthimaging
aws_cdk.aws_healthlake
aws_cdk.aws_iam
aws_cdk.aws_identitystore
aws_cdk.aws_imagebuilder
aws_cdk.aws_inspector
aws_cdk.aws_inspectorv2
aws_cdk.aws_internetmonitor
aws_cdk.aws_invoicing
aws_cdk.aws_iot
aws_cdk.aws_iot_actions_alpha
aws_cdk.aws_iot_alpha
aws_cdk.aws_iotanalytics
aws_cdk.aws_iotcoredeviceadvisor
aws_cdk.aws_iotevents
aws_cdk.aws_iotevents_actions_alpha
aws_cdk.aws_iotevents_alpha
aws_cdk.aws_iotfleethub
aws_cdk.aws_iotfleetwise
aws_cdk.aws_iotsitewise
aws_cdk.aws_iotthingsgraph
aws_cdk.aws_iottwinmaker
aws_cdk.aws_iotwireless
aws_cdk.aws_ivs
aws_cdk.aws_ivs_alpha
aws_cdk.aws_ivschat
aws_cdk.aws_kafkaconnect
aws_cdk.aws_kendra
aws_cdk.aws_kendraranking
aws_cdk.aws_kinesis
aws_cdk.aws_kinesisanalytics
aws_cdk.aws_kinesisanalytics_flink_alpha
aws_cdk.aws_kinesisanalyticsv2
aws_cdk.aws_kinesisfirehose
aws_cdk.aws_kinesisvideo
aws_cdk.aws_kms
aws_cdk.aws_lakeformation
aws_cdk.aws_lambda
aws_cdk.aws_lambda_destinations
aws_cdk.aws_lambda_event_sources
aws_cdk.aws_lambda_go_alpha
aws_cdk.aws_lambda_nodejs
aws_cdk.aws_lambda_python_alpha
aws_cdk.aws_launchwizard
aws_cdk.aws_lex
aws_cdk.aws_licensemanager
aws_cdk.aws_lightsail
aws_cdk.aws_location
aws_cdk.aws_location_alpha
aws_cdk.aws_logs
aws_cdk.aws_logs_destinations
aws_cdk.aws_lookoutequipment
aws_cdk.aws_lookoutmetrics
aws_cdk.aws_lookoutvision
aws_cdk.aws_m2
aws_cdk.aws_macie
aws_cdk.aws_managedblockchain
aws_cdk.aws_mediaconnect
aws_cdk.aws_mediaconvert
aws_cdk.aws_medialive
aws_cdk.aws_mediapackage
aws_cdk.aws_mediapackagev2
aws_cdk.aws_mediastore
aws_cdk.aws_mediatailor
aws_cdk.aws_memorydb
aws_cdk.aws_msk
aws_cdk.aws_msk_alpha
aws_cdk.aws_mwaa
aws_cdk.aws_neptune
aws_cdk.aws_neptune_alpha
aws_cdk.aws_neptunegraph
aws_cdk.aws_networkfirewall
aws_cdk.aws_networkmanager
aws_cdk.aws_nimblestudio
aws_cdk.aws_notifications
aws_cdk.aws_notificationscontacts
aws_cdk.aws_oam
aws_cdk.aws_omics
aws_cdk.aws_opensearchserverless
aws_cdk.aws_opensearchservice
aws_cdk.aws_opsworks
aws_cdk.aws_opsworkscm
aws_cdk.aws_organizations
aws_cdk.aws_osis
aws_cdk.aws_panorama
aws_cdk.aws_paymentcryptography
aws_cdk.aws_pcaconnectorad
aws_cdk.aws_pcaconnectorscep
aws_cdk.aws_pcs
aws_cdk.aws_personalize
aws_cdk.aws_pinpoint
aws_cdk.aws_pinpointemail
aws_cdk.aws_pipes
aws_cdk.aws_pipes_alpha
aws_cdk.aws_pipes_enrichments_alpha
aws_cdk.aws_pipes_sources_alpha
aws_cdk.aws_pipes_targets_alpha
aws_cdk.aws_proton
aws_cdk.aws_qbusiness
aws_cdk.aws_qldb
aws_cdk.aws_quicksight
aws_cdk.aws_ram
aws_cdk.aws_rbin
aws_cdk.aws_rds
aws_cdk.aws_redshift
aws_cdk.aws_redshift_alpha
aws_cdk.aws_redshiftserverless
aws_cdk.aws_refactorspaces
aws_cdk.aws_rekognition
aws_cdk.aws_resiliencehub
aws_cdk.aws_resourceexplorer2
aws_cdk.aws_resourcegroups
aws_cdk.aws_robomaker
aws_cdk.aws_rolesanywhere
aws_cdk.aws_route53
aws_cdk.aws_route53_patterns
aws_cdk.aws_route53_targets
aws_cdk.aws_route53profiles
aws_cdk.aws_route53recoverycontrol
aws_cdk.aws_route53recoveryreadiness
aws_cdk.aws_route53resolver
aws_cdk.aws_route53resolver_alpha
aws_cdk.aws_rum
aws_cdk.aws_s3
aws_cdk.aws_s3_assets
aws_cdk.aws_s3_deployment
aws_cdk.aws_s3_notifications
aws_cdk.aws_s3express
aws_cdk.aws_s3objectlambda
aws_cdk.aws_s3objectlambda_alpha
aws_cdk.aws_s3outposts
aws_cdk.aws_s3tables
aws_cdk.aws_s3tables_alpha
aws_cdk.aws_sagemaker
aws_cdk.aws_sagemaker_alpha
aws_cdk.aws_sam
aws_cdk.aws_scheduler
aws_cdk.aws_scheduler_targets
aws_cdk.aws_sdb
aws_cdk.aws_secretsmanager
aws_cdk.aws_securityhub
aws_cdk.aws_securitylake
aws_cdk.aws_servicecatalog
aws_cdk.aws_servicecatalogappregistry
aws_cdk.aws_servicecatalogappregistry_alpha
aws_cdk.aws_servicediscovery
aws_cdk.aws_ses
aws_cdk.aws_ses_actions
aws_cdk.aws_shield
aws_cdk.aws_signer
aws_cdk.aws_simspaceweaver
aws_cdk.aws_sns
aws_cdk.aws_sns_subscriptions
aws_cdk.aws_sqs
aws_cdk.aws_ssm
aws_cdk.aws_ssmcontacts
aws_cdk.aws_ssmincidents
aws_cdk.aws_ssmquicksetup
aws_cdk.aws_sso
aws_cdk.aws_stepfunctions
aws_cdk.aws_stepfunctions_tasks
aws_cdk.aws_supportapp
aws_cdk.aws_synthetics
aws_cdk.aws_systemsmanagersap
aws_cdk.aws_timestream
aws_cdk.aws_transfer
aws_cdk.aws_verifiedpermissions
aws_cdk.aws_voiceid
aws_cdk.aws_vpclattice
aws_cdk.aws_waf
aws_cdk.aws_wafregional
aws_cdk.aws_wafv2
aws_cdk.aws_wisdom
aws_cdk.aws_workspaces
aws_cdk.aws_workspacesthinclient
aws_cdk.aws_workspacesweb
aws_cdk.aws_xray
aws_cdk.cloud_assembly_schema
aws_cdk.cloudformation_include
aws_cdk.custom_resources
aws_cdk.cx_api
aws_cdk.integ_tests_alpha
aws_cdk.lambda_layer_awscli
aws_cdk.lambda_layer_node_proxy_agent
aws_cdk.pipelines
aws_cdk.region_info
aws_cdk.triggers
constructs






Indices and tables

Index
Module Index
Search Page




           
          
          
        Next 
    

  

  
    © Copyright 2025, Amazon Web Services.
  

  Built with Sphinx using a
    theme
    provided by Read the Docs.\nAWS Cloud Development Kit
          

  
    
    
    
  

        
              Contents:

API Reference\nAWS Cloud Development Kit\nAWS Cloud Development Kit\nContents:

API Reference\nAWS Cloud Development Kit\nAWS CDK Python Reference
      
      
  
  

          
           
             
  
AWS CDK Python Reference

Contents:

API Reference
aws_cdk
aws_cdk.alexa_ask
aws_cdk.app_staging_synthesizer_alpha
aws_cdk.assertions
aws_cdk.asset_awscli_v1
aws_cdk.asset_node_proxy_agent_v6
aws_cdk.aws_accessanalyzer
aws_cdk.aws_acmpca
aws_cdk.aws_amazonmq
aws_cdk.aws_amplify
aws_cdk.aws_amplify_alpha
aws_cdk.aws_amplifyuibuilder
aws_cdk.aws_apigateway
aws_cdk.aws_apigatewayv2
aws_cdk.aws_apigatewayv2_authorizers
aws_cdk.aws_apigatewayv2_integrations
aws_cdk.aws_appconfig
aws_cdk.aws_appflow
aws_cdk.aws_appintegrations
aws_cdk.aws_applicationautoscaling
aws_cdk.aws_applicationinsights
aws_cdk.aws_applicationsignals
aws_cdk.aws_applicationsignals_alpha
aws_cdk.aws_appmesh
aws_cdk.aws_apprunner
aws_cdk.aws_apprunner_alpha
aws_cdk.aws_appstream
aws_cdk.aws_appsync
aws_cdk.aws_apptest
aws_cdk.aws_aps
aws_cdk.aws_arczonalshift
aws_cdk.aws_athena
aws_cdk.aws_auditmanager
aws_cdk.aws_autoscaling
aws_cdk.aws_autoscaling_common
aws_cdk.aws_autoscaling_hooktargets
aws_cdk.aws_autoscalingplans
aws_cdk.aws_b2bi
aws_cdk.aws_backup
aws_cdk.aws_backupgateway
aws_cdk.aws_batch
aws_cdk.aws_bcmdataexports
aws_cdk.aws_bedrock
aws_cdk.aws_billingconductor
aws_cdk.aws_budgets
aws_cdk.aws_cassandra
aws_cdk.aws_ce
aws_cdk.aws_certificatemanager
aws_cdk.aws_chatbot
aws_cdk.aws_cleanrooms
aws_cdk.aws_cleanroomsml
aws_cdk.aws_cloud9
aws_cdk.aws_cloud9_alpha
aws_cdk.aws_cloudformation
aws_cdk.aws_cloudfront
aws_cdk.aws_cloudfront.experimental
aws_cdk.aws_cloudfront_origins
aws_cdk.aws_cloudtrail
aws_cdk.aws_cloudwatch
aws_cdk.aws_cloudwatch_actions
aws_cdk.aws_codeartifact
aws_cdk.aws_codebuild
aws_cdk.aws_codecommit
aws_cdk.aws_codeconnections
aws_cdk.aws_codedeploy
aws_cdk.aws_codeguruprofiler
aws_cdk.aws_codegurureviewer
aws_cdk.aws_codepipeline
aws_cdk.aws_codepipeline_actions
aws_cdk.aws_codestar
aws_cdk.aws_codestar_alpha
aws_cdk.aws_codestarconnections
aws_cdk.aws_codestarnotifications
aws_cdk.aws_cognito
aws_cdk.aws_cognito_identitypool
aws_cdk.aws_comprehend
aws_cdk.aws_config
aws_cdk.aws_connect
aws_cdk.aws_connectcampaigns
aws_cdk.aws_connectcampaignsv2
aws_cdk.aws_controltower
aws_cdk.aws_cur
aws_cdk.aws_customerprofiles
aws_cdk.aws_databrew
aws_cdk.aws_datapipeline
aws_cdk.aws_datasync
aws_cdk.aws_datazone
aws_cdk.aws_dax
aws_cdk.aws_deadline
aws_cdk.aws_detective
aws_cdk.aws_devicefarm
aws_cdk.aws_devopsguru
aws_cdk.aws_directoryservice
aws_cdk.aws_dlm
aws_cdk.aws_dms
aws_cdk.aws_docdb
aws_cdk.aws_docdbelastic
aws_cdk.aws_dsql
aws_cdk.aws_dynamodb
aws_cdk.aws_ec2
aws_cdk.aws_ec2_alpha
aws_cdk.aws_ecr
aws_cdk.aws_ecr_assets
aws_cdk.aws_ecs
aws_cdk.aws_ecs_patterns
aws_cdk.aws_efs
aws_cdk.aws_eks
aws_cdk.aws_eks_v2_alpha
aws_cdk.aws_elasticache
aws_cdk.aws_elasticbeanstalk
aws_cdk.aws_elasticloadbalancing
aws_cdk.aws_elasticloadbalancingv2
aws_cdk.aws_elasticloadbalancingv2_actions
aws_cdk.aws_elasticloadbalancingv2_targets
aws_cdk.aws_elasticsearch
aws_cdk.aws_emr
aws_cdk.aws_emrcontainers
aws_cdk.aws_emrserverless
aws_cdk.aws_entityresolution
aws_cdk.aws_events
aws_cdk.aws_events_targets
aws_cdk.aws_eventschemas
aws_cdk.aws_evidently
aws_cdk.aws_finspace
aws_cdk.aws_fis
aws_cdk.aws_fms
aws_cdk.aws_forecast
aws_cdk.aws_frauddetector
aws_cdk.aws_fsx
aws_cdk.aws_gamelift
aws_cdk.aws_gamelift_alpha
aws_cdk.aws_gameliftstreams
aws_cdk.aws_globalaccelerator
aws_cdk.aws_globalaccelerator_endpoints
aws_cdk.aws_glue
aws_cdk.aws_glue_alpha
aws_cdk.aws_grafana
aws_cdk.aws_greengrass
aws_cdk.aws_greengrassv2
aws_cdk.aws_groundstation
aws_cdk.aws_guardduty
aws_cdk.aws_healthimaging
aws_cdk.aws_healthlake
aws_cdk.aws_iam
aws_cdk.aws_identitystore
aws_cdk.aws_imagebuilder
aws_cdk.aws_inspector
aws_cdk.aws_inspectorv2
aws_cdk.aws_internetmonitor
aws_cdk.aws_invoicing
aws_cdk.aws_iot
aws_cdk.aws_iot_actions_alpha
aws_cdk.aws_iot_alpha
aws_cdk.aws_iotanalytics
aws_cdk.aws_iotcoredeviceadvisor
aws_cdk.aws_iotevents
aws_cdk.aws_iotevents_actions_alpha
aws_cdk.aws_iotevents_alpha
aws_cdk.aws_iotfleethub
aws_cdk.aws_iotfleetwise
aws_cdk.aws_iotsitewise
aws_cdk.aws_iotthingsgraph
aws_cdk.aws_iottwinmaker
aws_cdk.aws_iotwireless
aws_cdk.aws_ivs
aws_cdk.aws_ivs_alpha
aws_cdk.aws_ivschat
aws_cdk.aws_kafkaconnect
aws_cdk.aws_kendra
aws_cdk.aws_kendraranking
aws_cdk.aws_kinesis
aws_cdk.aws_kinesisanalytics
aws_cdk.aws_kinesisanalytics_flink_alpha
aws_cdk.aws_kinesisanalyticsv2
aws_cdk.aws_kinesisfirehose
aws_cdk.aws_kinesisvideo
aws_cdk.aws_kms
aws_cdk.aws_lakeformation
aws_cdk.aws_lambda
aws_cdk.aws_lambda_destinations
aws_cdk.aws_lambda_event_sources
aws_cdk.aws_lambda_go_alpha
aws_cdk.aws_lambda_nodejs
aws_cdk.aws_lambda_python_alpha
aws_cdk.aws_launchwizard
aws_cdk.aws_lex
aws_cdk.aws_licensemanager
aws_cdk.aws_lightsail
aws_cdk.aws_location
aws_cdk.aws_location_alpha
aws_cdk.aws_logs
aws_cdk.aws_logs_destinations
aws_cdk.aws_lookoutequipment
aws_cdk.aws_lookoutmetrics
aws_cdk.aws_lookoutvision
aws_cdk.aws_m2
aws_cdk.aws_macie
aws_cdk.aws_managedblockchain
aws_cdk.aws_mediaconnect
aws_cdk.aws_mediaconvert
aws_cdk.aws_medialive
aws_cdk.aws_mediapackage
aws_cdk.aws_mediapackagev2
aws_cdk.aws_mediastore
aws_cdk.aws_mediatailor
aws_cdk.aws_memorydb
aws_cdk.aws_msk
aws_cdk.aws_msk_alpha
aws_cdk.aws_mwaa
aws_cdk.aws_neptune
aws_cdk.aws_neptune_alpha
aws_cdk.aws_neptunegraph
aws_cdk.aws_networkfirewall
aws_cdk.aws_networkmanager
aws_cdk.aws_nimblestudio
aws_cdk.aws_notifications
aws_cdk.aws_notificationscontacts
aws_cdk.aws_oam
aws_cdk.aws_omics
aws_cdk.aws_opensearchserverless
aws_cdk.aws_opensearchservice
aws_cdk.aws_opsworks
aws_cdk.aws_opsworkscm
aws_cdk.aws_organizations
aws_cdk.aws_osis
aws_cdk.aws_panorama
aws_cdk.aws_paymentcryptography
aws_cdk.aws_pcaconnectorad
aws_cdk.aws_pcaconnectorscep
aws_cdk.aws_pcs
aws_cdk.aws_personalize
aws_cdk.aws_pinpoint
aws_cdk.aws_pinpointemail
aws_cdk.aws_pipes
aws_cdk.aws_pipes_alpha
aws_cdk.aws_pipes_enrichments_alpha
aws_cdk.aws_pipes_sources_alpha
aws_cdk.aws_pipes_targets_alpha
aws_cdk.aws_proton
aws_cdk.aws_qbusiness
aws_cdk.aws_qldb
aws_cdk.aws_quicksight
aws_cdk.aws_ram
aws_cdk.aws_rbin
aws_cdk.aws_rds
aws_cdk.aws_redshift
aws_cdk.aws_redshift_alpha
aws_cdk.aws_redshiftserverless
aws_cdk.aws_refactorspaces
aws_cdk.aws_rekognition
aws_cdk.aws_resiliencehub
aws_cdk.aws_resourceexplorer2
aws_cdk.aws_resourcegroups
aws_cdk.aws_robomaker
aws_cdk.aws_rolesanywhere
aws_cdk.aws_route53
aws_cdk.aws_route53_patterns
aws_cdk.aws_route53_targets
aws_cdk.aws_route53profiles
aws_cdk.aws_route53recoverycontrol
aws_cdk.aws_route53recoveryreadiness
aws_cdk.aws_route53resolver
aws_cdk.aws_route53resolver_alpha
aws_cdk.aws_rum
aws_cdk.aws_s3
aws_cdk.aws_s3_assets
aws_cdk.aws_s3_deployment
aws_cdk.aws_s3_notifications
aws_cdk.aws_s3express
aws_cdk.aws_s3objectlambda
aws_cdk.aws_s3objectlambda_alpha
aws_cdk.aws_s3outposts
aws_cdk.aws_s3tables
aws_cdk.aws_s3tables_alpha
aws_cdk.aws_sagemaker
aws_cdk.aws_sagemaker_alpha
aws_cdk.aws_sam
aws_cdk.aws_scheduler
aws_cdk.aws_scheduler_targets
aws_cdk.aws_sdb
aws_cdk.aws_secretsmanager
aws_cdk.aws_securityhub
aws_cdk.aws_securitylake
aws_cdk.aws_servicecatalog
aws_cdk.aws_servicecatalogappregistry
aws_cdk.aws_servicecatalogappregistry_alpha
aws_cdk.aws_servicediscovery
aws_cdk.aws_ses
aws_cdk.aws_ses_actions
aws_cdk.aws_shield
aws_cdk.aws_signer
aws_cdk.aws_simspaceweaver
aws_cdk.aws_sns
aws_cdk.aws_sns_subscriptions
aws_cdk.aws_sqs
aws_cdk.aws_ssm
aws_cdk.aws_ssmcontacts
aws_cdk.aws_ssmincidents
aws_cdk.aws_ssmquicksetup
aws_cdk.aws_sso
aws_cdk.aws_stepfunctions
aws_cdk.aws_stepfunctions_tasks
aws_cdk.aws_supportapp
aws_cdk.aws_synthetics
aws_cdk.aws_systemsmanagersap
aws_cdk.aws_timestream
aws_cdk.aws_transfer
aws_cdk.aws_verifiedpermissions
aws_cdk.aws_voiceid
aws_cdk.aws_vpclattice
aws_cdk.aws_waf
aws_cdk.aws_wafregional
aws_cdk.aws_wafv2
aws_cdk.aws_wisdom
aws_cdk.aws_workspaces
aws_cdk.aws_workspacesthinclient
aws_cdk.aws_workspacesweb
aws_cdk.aws_xray
aws_cdk.cloud_assembly_schema
aws_cdk.cloudformation_include
aws_cdk.custom_resources
aws_cdk.cx_api
aws_cdk.integ_tests_alpha
aws_cdk.lambda_layer_awscli
aws_cdk.lambda_layer_node_proxy_agent
aws_cdk.pipelines
aws_cdk.region_info
aws_cdk.triggers
constructs






Indices and tables

Index
Module Index
Search Page




           
          
          
        Next 
    

  

  
    © Copyright 2025, Amazon Web Services.
  

  Built with Sphinx using a
    theme
    provided by Read the Docs.\nAWS CDK Python Reference
      
      
  
  

          
           
             
  
AWS CDK Python Reference

Contents:

API Reference
aws_cdk
aws_cdk.alexa_ask
aws_cdk.app_staging_synthesizer_alpha
aws_cdk.assertions
aws_cdk.asset_awscli_v1
aws_cdk.asset_node_proxy_agent_v6
aws_cdk.aws_accessanalyzer
aws_cdk.aws_acmpca
aws_cdk.aws_amazonmq
aws_cdk.aws_amplify
aws_cdk.aws_amplify_alpha
aws_cdk.aws_amplifyuibuilder
aws_cdk.aws_apigateway
aws_cdk.aws_apigatewayv2
aws_cdk.aws_apigatewayv2_authorizers
aws_cdk.aws_apigatewayv2_integrations
aws_cdk.aws_appconfig
aws_cdk.aws_appflow
aws_cdk.aws_appintegrations
aws_cdk.aws_applicationautoscaling
aws_cdk.aws_applicationinsights
aws_cdk.aws_applicationsignals
aws_cdk.aws_applicationsignals_alpha
aws_cdk.aws_appmesh
aws_cdk.aws_apprunner
aws_cdk.aws_apprunner_alpha
aws_cdk.aws_appstream
aws_cdk.aws_appsync
aws_cdk.aws_apptest
aws_cdk.aws_aps
aws_cdk.aws_arczonalshift
aws_cdk.aws_athena
aws_cdk.aws_auditmanager
aws_cdk.aws_autoscaling
aws_cdk.aws_autoscaling_common
aws_cdk.aws_autoscaling_hooktargets
aws_cdk.aws_autoscalingplans
aws_cdk.aws_b2bi
aws_cdk.aws_backup
aws_cdk.aws_backupgateway
aws_cdk.aws_batch
aws_cdk.aws_bcmdataexports
aws_cdk.aws_bedrock
aws_cdk.aws_billingconductor
aws_cdk.aws_budgets
aws_cdk.aws_cassandra
aws_cdk.aws_ce
aws_cdk.aws_certificatemanager
aws_cdk.aws_chatbot
aws_cdk.aws_cleanrooms
aws_cdk.aws_cleanroomsml
aws_cdk.aws_cloud9
aws_cdk.aws_cloud9_alpha
aws_cdk.aws_cloudformation
aws_cdk.aws_cloudfront
aws_cdk.aws_cloudfront.experimental
aws_cdk.aws_cloudfront_origins
aws_cdk.aws_cloudtrail
aws_cdk.aws_cloudwatch
aws_cdk.aws_cloudwatch_actions
aws_cdk.aws_codeartifact
aws_cdk.aws_codebuild
aws_cdk.aws_codecommit
aws_cdk.aws_codeconnections
aws_cdk.aws_codedeploy
aws_cdk.aws_codeguruprofiler
aws_cdk.aws_codegurureviewer
aws_cdk.aws_codepipeline
aws_cdk.aws_codepipeline_actions
aws_cdk.aws_codestar
aws_cdk.aws_codestar_alpha
aws_cdk.aws_codestarconnections
aws_cdk.aws_codestarnotifications
aws_cdk.aws_cognito
aws_cdk.aws_cognito_identitypool
aws_cdk.aws_comprehend
aws_cdk.aws_config
aws_cdk.aws_connect
aws_cdk.aws_connectcampaigns
aws_cdk.aws_connectcampaignsv2
aws_cdk.aws_controltower
aws_cdk.aws_cur
aws_cdk.aws_customerprofiles
aws_cdk.aws_databrew
aws_cdk.aws_datapipeline
aws_cdk.aws_datasync
aws_cdk.aws_datazone
aws_cdk.aws_dax
aws_cdk.aws_deadline
aws_cdk.aws_detective
aws_cdk.aws_devicefarm
aws_cdk.aws_devopsguru
aws_cdk.aws_directoryservice
aws_cdk.aws_dlm
aws_cdk.aws_dms
aws_cdk.aws_docdb
aws_cdk.aws_docdbelastic
aws_cdk.aws_dsql
aws_cdk.aws_dynamodb
aws_cdk.aws_ec2
aws_cdk.aws_ec2_alpha
aws_cdk.aws_ecr
aws_cdk.aws_ecr_assets
aws_cdk.aws_ecs
aws_cdk.aws_ecs_patterns
aws_cdk.aws_efs
aws_cdk.aws_eks
aws_cdk.aws_eks_v2_alpha
aws_cdk.aws_elasticache
aws_cdk.aws_elasticbeanstalk
aws_cdk.aws_elasticloadbalancing
aws_cdk.aws_elasticloadbalancingv2
aws_cdk.aws_elasticloadbalancingv2_actions
aws_cdk.aws_elasticloadbalancingv2_targets
aws_cdk.aws_elasticsearch
aws_cdk.aws_emr
aws_cdk.aws_emrcontainers
aws_cdk.aws_emrserverless
aws_cdk.aws_entityresolution
aws_cdk.aws_events
aws_cdk.aws_events_targets
aws_cdk.aws_eventschemas
aws_cdk.aws_evidently
aws_cdk.aws_finspace
aws_cdk.aws_fis
aws_cdk.aws_fms
aws_cdk.aws_forecast
aws_cdk.aws_frauddetector
aws_cdk.aws_fsx
aws_cdk.aws_gamelift
aws_cdk.aws_gamelift_alpha
aws_cdk.aws_gameliftstreams
aws_cdk.aws_globalaccelerator
aws_cdk.aws_globalaccelerator_endpoints
aws_cdk.aws_glue
aws_cdk.aws_glue_alpha
aws_cdk.aws_grafana
aws_cdk.aws_greengrass
aws_cdk.aws_greengrassv2
aws_cdk.aws_groundstation
aws_cdk.aws_guardduty
aws_cdk.aws_healthimaging
aws_cdk.aws_healthlake
aws_cdk.aws_iam
aws_cdk.aws_identitystore
aws_cdk.aws_imagebuilder
aws_cdk.aws_inspector
aws_cdk.aws_inspectorv2
aws_cdk.aws_internetmonitor
aws_cdk.aws_invoicing
aws_cdk.aws_iot
aws_cdk.aws_iot_actions_alpha
aws_cdk.aws_iot_alpha
aws_cdk.aws_iotanalytics
aws_cdk.aws_iotcoredeviceadvisor
aws_cdk.aws_iotevents
aws_cdk.aws_iotevents_actions_alpha
aws_cdk.aws_iotevents_alpha
aws_cdk.aws_iotfleethub
aws_cdk.aws_iotfleetwise
aws_cdk.aws_iotsitewise
aws_cdk.aws_iotthingsgraph
aws_cdk.aws_iottwinmaker
aws_cdk.aws_iotwireless
aws_cdk.aws_ivs
aws_cdk.aws_ivs_alpha
aws_cdk.aws_ivschat
aws_cdk.aws_kafkaconnect
aws_cdk.aws_kendra
aws_cdk.aws_kendraranking
aws_cdk.aws_kinesis
aws_cdk.aws_kinesisanalytics
aws_cdk.aws_kinesisanalytics_flink_alpha
aws_cdk.aws_kinesisanalyticsv2
aws_cdk.aws_kinesisfirehose
aws_cdk.aws_kinesisvideo
aws_cdk.aws_kms
aws_cdk.aws_lakeformation
aws_cdk.aws_lambda
aws_cdk.aws_lambda_destinations
aws_cdk.aws_lambda_event_sources
aws_cdk.aws_lambda_go_alpha
aws_cdk.aws_lambda_nodejs
aws_cdk.aws_lambda_python_alpha
aws_cdk.aws_launchwizard
aws_cdk.aws_lex
aws_cdk.aws_licensemanager
aws_cdk.aws_lightsail
aws_cdk.aws_location
aws_cdk.aws_location_alpha
aws_cdk.aws_logs
aws_cdk.aws_logs_destinations
aws_cdk.aws_lookoutequipment
aws_cdk.aws_lookoutmetrics
aws_cdk.aws_lookoutvision
aws_cdk.aws_m2
aws_cdk.aws_macie
aws_cdk.aws_managedblockchain
aws_cdk.aws_mediaconnect
aws_cdk.aws_mediaconvert
aws_cdk.aws_medialive
aws_cdk.aws_mediapackage
aws_cdk.aws_mediapackagev2
aws_cdk.aws_mediastore
aws_cdk.aws_mediatailor
aws_cdk.aws_memorydb
aws_cdk.aws_msk
aws_cdk.aws_msk_alpha
aws_cdk.aws_mwaa
aws_cdk.aws_neptune
aws_cdk.aws_neptune_alpha
aws_cdk.aws_neptunegraph
aws_cdk.aws_networkfirewall
aws_cdk.aws_networkmanager
aws_cdk.aws_nimblestudio
aws_cdk.aws_notifications
aws_cdk.aws_notificationscontacts
aws_cdk.aws_oam
aws_cdk.aws_omics
aws_cdk.aws_opensearchserverless
aws_cdk.aws_opensearchservice
aws_cdk.aws_opsworks
aws_cdk.aws_opsworkscm
aws_cdk.aws_organizations
aws_cdk.aws_osis
aws_cdk.aws_panorama
aws_cdk.aws_paymentcryptography
aws_cdk.aws_pcaconnectorad
aws_cdk.aws_pcaconnectorscep
aws_cdk.aws_pcs
aws_cdk.aws_personalize
aws_cdk.aws_pinpoint
aws_cdk.aws_pinpointemail
aws_cdk.aws_pipes
aws_cdk.aws_pipes_alpha
aws_cdk.aws_pipes_enrichments_alpha
aws_cdk.aws_pipes_sources_alpha
aws_cdk.aws_pipes_targets_alpha
aws_cdk.aws_proton
aws_cdk.aws_qbusiness
aws_cdk.aws_qldb
aws_cdk.aws_quicksight
aws_cdk.aws_ram
aws_cdk.aws_rbin
aws_cdk.aws_rds
aws_cdk.aws_redshift
aws_cdk.aws_redshift_alpha
aws_cdk.aws_redshiftserverless
aws_cdk.aws_refactorspaces
aws_cdk.aws_rekognition
aws_cdk.aws_resiliencehub
aws_cdk.aws_resourceexplorer2
aws_cdk.aws_resourcegroups
aws_cdk.aws_robomaker
aws_cdk.aws_rolesanywhere
aws_cdk.aws_route53
aws_cdk.aws_route53_patterns
aws_cdk.aws_route53_targets
aws_cdk.aws_route53profiles
aws_cdk.aws_route53recoverycontrol
aws_cdk.aws_route53recoveryreadiness
aws_cdk.aws_route53resolver
aws_cdk.aws_route53resolver_alpha
aws_cdk.aws_rum
aws_cdk.aws_s3
aws_cdk.aws_s3_assets
aws_cdk.aws_s3_deployment
aws_cdk.aws_s3_notifications
aws_cdk.aws_s3express
aws_cdk.aws_s3objectlambda
aws_cdk.aws_s3objectlambda_alpha
aws_cdk.aws_s3outposts
aws_cdk.aws_s3tables
aws_cdk.aws_s3tables_alpha
aws_cdk.aws_sagemaker
aws_cdk.aws_sagemaker_alpha
aws_cdk.aws_sam
aws_cdk.aws_scheduler
aws_cdk.aws_scheduler_targets
aws_cdk.aws_sdb
aws_cdk.aws_secretsmanager
aws_cdk.aws_securityhub
aws_cdk.aws_securitylake
aws_cdk.aws_servicecatalog
aws_cdk.aws_servicecatalogappregistry
aws_cdk.aws_servicecatalogappregistry_alpha
aws_cdk.aws_servicediscovery
aws_cdk.aws_ses
aws_cdk.aws_ses_actions
aws_cdk.aws_shield
aws_cdk.aws_signer
aws_cdk.aws_simspaceweaver
aws_cdk.aws_sns
aws_cdk.aws_sns_subscriptions
aws_cdk.aws_sqs
aws_cdk.aws_ssm
aws_cdk.aws_ssmcontacts
aws_cdk.aws_ssmincidents
aws_cdk.aws_ssmquicksetup
aws_cdk.aws_sso
aws_cdk.aws_stepfunctions
aws_cdk.aws_stepfunctions_tasks
aws_cdk.aws_supportapp
aws_cdk.aws_synthetics
aws_cdk.aws_systemsmanagersap
aws_cdk.aws_timestream
aws_cdk.aws_transfer
aws_cdk.aws_verifiedpermissions
aws_cdk.aws_voiceid
aws_cdk.aws_vpclattice
aws_cdk.aws_waf
aws_cdk.aws_wafregional
aws_cdk.aws_wafv2
aws_cdk.aws_wisdom
aws_cdk.aws_workspaces
aws_cdk.aws_workspacesthinclient
aws_cdk.aws_workspacesweb
aws_cdk.aws_xray
aws_cdk.cloud_assembly_schema
aws_cdk.cloudformation_include
aws_cdk.custom_resources
aws_cdk.cx_api
aws_cdk.integ_tests_alpha
aws_cdk.lambda_layer_awscli
aws_cdk.lambda_layer_node_proxy_agent
aws_cdk.pipelines
aws_cdk.region_info
aws_cdk.triggers
constructs






Indices and tables

Index
Module Index
Search Page




           
          
          
        Next 
    

  

  
    © Copyright 2025, Amazon Web Services.
  

  Built with Sphinx using a
    theme
    provided by Read the Docs.\nAWS CDK Python Reference\nAWS CDK Python Reference\nAWS CDK Python Reference

Contents:

API Reference
aws_cdk
aws_cdk.alexa_ask
aws_cdk.app_staging_synthesizer_alpha
aws_cdk.assertions
aws_cdk.asset_awscli_v1
aws_cdk.asset_node_proxy_agent_v6
aws_cdk.aws_accessanalyzer
aws_cdk.aws_acmpca
aws_cdk.aws_amazonmq
aws_cdk.aws_amplify
aws_cdk.aws_amplify_alpha
aws_cdk.aws_amplifyuibuilder
aws_cdk.aws_apigateway
aws_cdk.aws_apigatewayv2
aws_cdk.aws_apigatewayv2_authorizers
aws_cdk.aws_apigatewayv2_integrations
aws_cdk.aws_appconfig
aws_cdk.aws_appflow
aws_cdk.aws_appintegrations
aws_cdk.aws_applicationautoscaling
aws_cdk.aws_applicationinsights
aws_cdk.aws_applicationsignals
aws_cdk.aws_applicationsignals_alpha
aws_cdk.aws_appmesh
aws_cdk.aws_apprunner
aws_cdk.aws_apprunner_alpha
aws_cdk.aws_appstream
aws_cdk.aws_appsync
aws_cdk.aws_apptest
aws_cdk.aws_aps
aws_cdk.aws_arczonalshift
aws_cdk.aws_athena
aws_cdk.aws_auditmanager
aws_cdk.aws_autoscaling
aws_cdk.aws_autoscaling_common
aws_cdk.aws_autoscaling_hooktargets
aws_cdk.aws_autoscalingplans
aws_cdk.aws_b2bi
aws_cdk.aws_backup
aws_cdk.aws_backupgateway
aws_cdk.aws_batch
aws_cdk.aws_bcmdataexports
aws_cdk.aws_bedrock
aws_cdk.aws_billingconductor
aws_cdk.aws_budgets
aws_cdk.aws_cassandra
aws_cdk.aws_ce
aws_cdk.aws_certificatemanager
aws_cdk.aws_chatbot
aws_cdk.aws_cleanrooms
aws_cdk.aws_cleanroomsml
aws_cdk.aws_cloud9
aws_cdk.aws_cloud9_alpha
aws_cdk.aws_cloudformation
aws_cdk.aws_cloudfront
aws_cdk.aws_cloudfront.experimental
aws_cdk.aws_cloudfront_origins
aws_cdk.aws_cloudtrail
aws_cdk.aws_cloudwatch
aws_cdk.aws_cloudwatch_actions
aws_cdk.aws_codeartifact
aws_cdk.aws_codebuild
aws_cdk.aws_codecommit
aws_cdk.aws_codeconnections
aws_cdk.aws_codedeploy
aws_cdk.aws_codeguruprofiler
aws_cdk.aws_codegurureviewer
aws_cdk.aws_codepipeline
aws_cdk.aws_codepipeline_actions
aws_cdk.aws_codestar
aws_cdk.aws_codestar_alpha
aws_cdk.aws_codestarconnections
aws_cdk.aws_codestarnotifications
aws_cdk.aws_cognito
aws_cdk.aws_cognito_identitypool
aws_cdk.aws_comprehend
aws_cdk.aws_config
aws_cdk.aws_connect
aws_cdk.aws_connectcampaigns
aws_cdk.aws_connectcampaignsv2
aws_cdk.aws_controltower
aws_cdk.aws_cur
aws_cdk.aws_customerprofiles
aws_cdk.aws_databrew
aws_cdk.aws_datapipeline
aws_cdk.aws_datasync
aws_cdk.aws_datazone
aws_cdk.aws_dax
aws_cdk.aws_deadline
aws_cdk.aws_detective
aws_cdk.aws_devicefarm
aws_cdk.aws_devopsguru
aws_cdk.aws_directoryservice
aws_cdk.aws_dlm
aws_cdk.aws_dms
aws_cdk.aws_docdb
aws_cdk.aws_docdbelastic
aws_cdk.aws_dsql
aws_cdk.aws_dynamodb
aws_cdk.aws_ec2
aws_cdk.aws_ec2_alpha
aws_cdk.aws_ecr
aws_cdk.aws_ecr_assets
aws_cdk.aws_ecs
aws_cdk.aws_ecs_patterns
aws_cdk.aws_efs
aws_cdk.aws_eks
aws_cdk.aws_eks_v2_alpha
aws_cdk.aws_elasticache
aws_cdk.aws_elasticbeanstalk
aws_cdk.aws_elasticloadbalancing
aws_cdk.aws_elasticloadbalancingv2
aws_cdk.aws_elasticloadbalancingv2_actions
aws_cdk.aws_elasticloadbalancingv2_targets
aws_cdk.aws_elasticsearch
aws_cdk.aws_emr
aws_cdk.aws_emrcontainers
aws_cdk.aws_emrserverless
aws_cdk.aws_entityresolution
aws_cdk.aws_events
aws_cdk.aws_events_targets
aws_cdk.aws_eventschemas
aws_cdk.aws_evidently
aws_cdk.aws_finspace
aws_cdk.aws_fis
aws_cdk.aws_fms
aws_cdk.aws_forecast
aws_cdk.aws_frauddetector
aws_cdk.aws_fsx
aws_cdk.aws_gamelift
aws_cdk.aws_gamelift_alpha
aws_cdk.aws_gameliftstreams
aws_cdk.aws_globalaccelerator
aws_cdk.aws_globalaccelerator_endpoints
aws_cdk.aws_glue
aws_cdk.aws_glue_alpha
aws_cdk.aws_grafana
aws_cdk.aws_greengrass
aws_cdk.aws_greengrassv2
aws_cdk.aws_groundstation
aws_cdk.aws_guardduty
aws_cdk.aws_healthimaging
aws_cdk.aws_healthlake
aws_cdk.aws_iam
aws_cdk.aws_identitystore
aws_cdk.aws_imagebuilder
aws_cdk.aws_inspector
aws_cdk.aws_inspectorv2
aws_cdk.aws_internetmonitor
aws_cdk.aws_invoicing
aws_cdk.aws_iot
aws_cdk.aws_iot_actions_alpha
aws_cdk.aws_iot_alpha
aws_cdk.aws_iotanalytics
aws_cdk.aws_iotcoredeviceadvisor
aws_cdk.aws_iotevents
aws_cdk.aws_iotevents_actions_alpha
aws_cdk.aws_iotevents_alpha
aws_cdk.aws_iotfleethub
aws_cdk.aws_iotfleetwise
aws_cdk.aws_iotsitewise
aws_cdk.aws_iotthingsgraph
aws_cdk.aws_iottwinmaker
aws_cdk.aws_iotwireless
aws_cdk.aws_ivs
aws_cdk.aws_ivs_alpha
aws_cdk.aws_ivschat
aws_cdk.aws_kafkaconnect
aws_cdk.aws_kendra
aws_cdk.aws_kendraranking
aws_cdk.aws_kinesis
aws_cdk.aws_kinesisanalytics
aws_cdk.aws_kinesisanalytics_flink_alpha
aws_cdk.aws_kinesisanalyticsv2
aws_cdk.aws_kinesisfirehose
aws_cdk.aws_kinesisvideo
aws_cdk.aws_kms
aws_cdk.aws_lakeformation
aws_cdk.aws_lambda
aws_cdk.aws_lambda_destinations
aws_cdk.aws_lambda_event_sources
aws_cdk.aws_lambda_go_alpha
aws_cdk.aws_lambda_nodejs
aws_cdk.aws_lambda_python_alpha
aws_cdk.aws_launchwizard
aws_cdk.aws_lex
aws_cdk.aws_licensemanager
aws_cdk.aws_lightsail
aws_cdk.aws_location
aws_cdk.aws_location_alpha
aws_cdk.aws_logs
aws_cdk.aws_logs_destinations
aws_cdk.aws_lookoutequipment
aws_cdk.aws_lookoutmetrics
aws_cdk.aws_lookoutvision
aws_cdk.aws_m2
aws_cdk.aws_macie
aws_cdk.aws_managedblockchain
aws_cdk.aws_mediaconnect
aws_cdk.aws_mediaconvert
aws_cdk.aws_medialive
aws_cdk.aws_mediapackage
aws_cdk.aws_mediapackagev2
aws_cdk.aws_mediastore
aws_cdk.aws_mediatailor
aws_cdk.aws_memorydb
aws_cdk.aws_msk
aws_cdk.aws_msk_alpha
aws_cdk.aws_mwaa
aws_cdk.aws_neptune
aws_cdk.aws_neptune_alpha
aws_cdk.aws_neptunegraph
aws_cdk.aws_networkfirewall
aws_cdk.aws_networkmanager
aws_cdk.aws_nimblestudio
aws_cdk.aws_notifications
aws_cdk.aws_notificationscontacts
aws_cdk.aws_oam
aws_cdk.aws_omics
aws_cdk.aws_opensearchserverless
aws_cdk.aws_opensearchservice
aws_cdk.aws_opsworks
aws_cdk.aws_opsworkscm
aws_cdk.aws_organizations
aws_cdk.aws_osis
aws_cdk.aws_panorama
aws_cdk.aws_paymentcryptography
aws_cdk.aws_pcaconnectorad
aws_cdk.aws_pcaconnectorscep
aws_cdk.aws_pcs
aws_cdk.aws_personalize
aws_cdk.aws_pinpoint
aws_cdk.aws_pinpointemail
aws_cdk.aws_pipes
aws_cdk.aws_pipes_alpha
aws_cdk.aws_pipes_enrichments_alpha
aws_cdk.aws_pipes_sources_alpha
aws_cdk.aws_pipes_targets_alpha
aws_cdk.aws_proton
aws_cdk.aws_qbusiness
aws_cdk.aws_qldb
aws_cdk.aws_quicksight
aws_cdk.aws_ram
aws_cdk.aws_rbin
aws_cdk.aws_rds
aws_cdk.aws_redshift
aws_cdk.aws_redshift_alpha
aws_cdk.aws_redshiftserverless
aws_cdk.aws_refactorspaces
aws_cdk.aws_rekognition
aws_cdk.aws_resiliencehub
aws_cdk.aws_resourceexplorer2
aws_cdk.aws_resourcegroups
aws_cdk.aws_robomaker
aws_cdk.aws_rolesanywhere
aws_cdk.aws_route53
aws_cdk.aws_route53_patterns
aws_cdk.aws_route53_targets
aws_cdk.aws_route53profiles
aws_cdk.aws_route53recoverycontrol
aws_cdk.aws_route53recoveryreadiness
aws_cdk.aws_route53resolver
aws_cdk.aws_route53resolver_alpha
aws_cdk.aws_rum
aws_cdk.aws_s3
aws_cdk.aws_s3_assets
aws_cdk.aws_s3_deployment
aws_cdk.aws_s3_notifications
aws_cdk.aws_s3express
aws_cdk.aws_s3objectlambda
aws_cdk.aws_s3objectlambda_alpha
aws_cdk.aws_s3outposts
aws_cdk.aws_s3tables
aws_cdk.aws_s3tables_alpha
aws_cdk.aws_sagemaker
aws_cdk.aws_sagemaker_alpha
aws_cdk.aws_sam
aws_cdk.aws_scheduler
aws_cdk.aws_scheduler_targets
aws_cdk.aws_sdb
aws_cdk.aws_secretsmanager
aws_cdk.aws_securityhub
aws_cdk.aws_securitylake
aws_cdk.aws_servicecatalog
aws_cdk.aws_servicecatalogappregistry
aws_cdk.aws_servicecatalogappregistry_alpha
aws_cdk.aws_servicediscovery
aws_cdk.aws_ses
aws_cdk.aws_ses_actions
aws_cdk.aws_shield
aws_cdk.aws_signer
aws_cdk.aws_simspaceweaver
aws_cdk.aws_sns
aws_cdk.aws_sns_subscriptions
aws_cdk.aws_sqs
aws_cdk.aws_ssm
aws_cdk.aws_ssmcontacts
aws_cdk.aws_ssmincidents
aws_cdk.aws_ssmquicksetup
aws_cdk.aws_sso
aws_cdk.aws_stepfunctions
aws_cdk.aws_stepfunctions_tasks
aws_cdk.aws_supportapp
aws_cdk.aws_synthetics
aws_cdk.aws_systemsmanagersap
aws_cdk.aws_timestream
aws_cdk.aws_transfer
aws_cdk.aws_verifiedpermissions
aws_cdk.aws_voiceid
aws_cdk.aws_vpclattice
aws_cdk.aws_waf
aws_cdk.aws_wafregional
aws_cdk.aws_wafv2
aws_cdk.aws_wisdom
aws_cdk.aws_workspaces
aws_cdk.aws_workspacesthinclient
aws_cdk.aws_workspacesweb
aws_cdk.aws_xray
aws_cdk.cloud_assembly_schema
aws_cdk.cloudformation_include
aws_cdk.custom_resources
aws_cdk.cx_api
aws_cdk.integ_tests_alpha
aws_cdk.lambda_layer_awscli
aws_cdk.lambda_layer_node_proxy_agent
aws_cdk.pipelines
aws_cdk.region_info
aws_cdk.triggers
constructs






Indices and tables

Index
Module Index
Search Page\nAWS CDK Python Reference

Contents:

API Reference
aws_cdk
aws_cdk.alexa_ask
aws_cdk.app_staging_synthesizer_alpha
aws_cdk.assertions
aws_cdk.asset_awscli_v1
aws_cdk.asset_node_proxy_agent_v6
aws_cdk.aws_accessanalyzer
aws_cdk.aws_acmpca
aws_cdk.aws_amazonmq
aws_cdk.aws_amplify
aws_cdk.aws_amplify_alpha
aws_cdk.aws_amplifyuibuilder
aws_cdk.aws_apigateway
aws_cdk.aws_apigatewayv2
aws_cdk.aws_apigatewayv2_authorizers
aws_cdk.aws_apigatewayv2_integrations
aws_cdk.aws_appconfig
aws_cdk.aws_appflow
aws_cdk.aws_appintegrations
aws_cdk.aws_applicationautoscaling
aws_cdk.aws_applicationinsights
aws_cdk.aws_applicationsignals
aws_cdk.aws_applicationsignals_alpha
aws_cdk.aws_appmesh
aws_cdk.aws_apprunner
aws_cdk.aws_apprunner_alpha
aws_cdk.aws_appstream
aws_cdk.aws_appsync
aws_cdk.aws_apptest
aws_cdk.aws_aps
aws_cdk.aws_arczonalshift
aws_cdk.aws_athena
aws_cdk.aws_auditmanager
aws_cdk.aws_autoscaling
aws_cdk.aws_autoscaling_common
aws_cdk.aws_autoscaling_hooktargets
aws_cdk.aws_autoscalingplans
aws_cdk.aws_b2bi
aws_cdk.aws_backup
aws_cdk.aws_backupgateway
aws_cdk.aws_batch
aws_cdk.aws_bcmdataexports
aws_cdk.aws_bedrock
aws_cdk.aws_billingconductor
aws_cdk.aws_budgets
aws_cdk.aws_cassandra
aws_cdk.aws_ce
aws_cdk.aws_certificatemanager
aws_cdk.aws_chatbot
aws_cdk.aws_cleanrooms
aws_cdk.aws_cleanroomsml
aws_cdk.aws_cloud9
aws_cdk.aws_cloud9_alpha
aws_cdk.aws_cloudformation
aws_cdk.aws_cloudfront
aws_cdk.aws_cloudfront.experimental
aws_cdk.aws_cloudfront_origins
aws_cdk.aws_cloudtrail
aws_cdk.aws_cloudwatch
aws_cdk.aws_cloudwatch_actions
aws_cdk.aws_codeartifact
aws_cdk.aws_codebuild
aws_cdk.aws_codecommit
aws_cdk.aws_codeconnections
aws_cdk.aws_codedeploy
aws_cdk.aws_codeguruprofiler
aws_cdk.aws_codegurureviewer
aws_cdk.aws_codepipeline
aws_cdk.aws_codepipeline_actions
aws_cdk.aws_codestar
aws_cdk.aws_codestar_alpha
aws_cdk.aws_codestarconnections
aws_cdk.aws_codestarnotifications
aws_cdk.aws_cognito
aws_cdk.aws_cognito_identitypool
aws_cdk.aws_comprehend
aws_cdk.aws_config
aws_cdk.aws_connect
aws_cdk.aws_connectcampaigns
aws_cdk.aws_connectcampaignsv2
aws_cdk.aws_controltower
aws_cdk.aws_cur
aws_cdk.aws_customerprofiles
aws_cdk.aws_databrew
aws_cdk.aws_datapipeline
aws_cdk.aws_datasync
aws_cdk.aws_datazone
aws_cdk.aws_dax
aws_cdk.aws_deadline
aws_cdk.aws_detective
aws_cdk.aws_devicefarm
aws_cdk.aws_devopsguru
aws_cdk.aws_directoryservice
aws_cdk.aws_dlm
aws_cdk.aws_dms
aws_cdk.aws_docdb
aws_cdk.aws_docdbelastic
aws_cdk.aws_dsql
aws_cdk.aws_dynamodb
aws_cdk.aws_ec2
aws_cdk.aws_ec2_alpha
aws_cdk.aws_ecr
aws_cdk.aws_ecr_assets
aws_cdk.aws_ecs
aws_cdk.aws_ecs_patterns
aws_cdk.aws_efs
aws_cdk.aws_eks
aws_cdk.aws_eks_v2_alpha
aws_cdk.aws_elasticache
aws_cdk.aws_elasticbeanstalk
aws_cdk.aws_elasticloadbalancing
aws_cdk.aws_elasticloadbalancingv2
aws_cdk.aws_elasticloadbalancingv2_actions
aws_cdk.aws_elasticloadbalancingv2_targets
aws_cdk.aws_elasticsearch
aws_cdk.aws_emr
aws_cdk.aws_emrcontainers
aws_cdk.aws_emrserverless
aws_cdk.aws_entityresolution
aws_cdk.aws_events
aws_cdk.aws_events_targets
aws_cdk.aws_eventschemas
aws_cdk.aws_evidently
aws_cdk.aws_finspace
aws_cdk.aws_fis
aws_cdk.aws_fms
aws_cdk.aws_forecast
aws_cdk.aws_frauddetector
aws_cdk.aws_fsx
aws_cdk.aws_gamelift
aws_cdk.aws_gamelift_alpha
aws_cdk.aws_gameliftstreams
aws_cdk.aws_globalaccelerator
aws_cdk.aws_globalaccelerator_endpoints
aws_cdk.aws_glue
aws_cdk.aws_glue_alpha
aws_cdk.aws_grafana
aws_cdk.aws_greengrass
aws_cdk.aws_greengrassv2
aws_cdk.aws_groundstation
aws_cdk.aws_guardduty
aws_cdk.aws_healthimaging
aws_cdk.aws_healthlake
aws_cdk.aws_iam
aws_cdk.aws_identitystore
aws_cdk.aws_imagebuilder
aws_cdk.aws_inspector
aws_cdk.aws_inspectorv2
aws_cdk.aws_internetmonitor
aws_cdk.aws_invoicing
aws_cdk.aws_iot
aws_cdk.aws_iot_actions_alpha
aws_cdk.aws_iot_alpha
aws_cdk.aws_iotanalytics
aws_cdk.aws_iotcoredeviceadvisor
aws_cdk.aws_iotevents
aws_cdk.aws_iotevents_actions_alpha
aws_cdk.aws_iotevents_alpha
aws_cdk.aws_iotfleethub
aws_cdk.aws_iotfleetwise
aws_cdk.aws_iotsitewise
aws_cdk.aws_iotthingsgraph
aws_cdk.aws_iottwinmaker
aws_cdk.aws_iotwireless
aws_cdk.aws_ivs
aws_cdk.aws_ivs_alpha
aws_cdk.aws_ivschat
aws_cdk.aws_kafkaconnect
aws_cdk.aws_kendra
aws_cdk.aws_kendraranking
aws_cdk.aws_kinesis
aws_cdk.aws_kinesisanalytics
aws_cdk.aws_kinesisanalytics_flink_alpha
aws_cdk.aws_kinesisanalyticsv2
aws_cdk.aws_kinesisfirehose
aws_cdk.aws_kinesisvideo
aws_cdk.aws_kms
aws_cdk.aws_lakeformation
aws_cdk.aws_lambda
aws_cdk.aws_lambda_destinations
aws_cdk.aws_lambda_event_sources
aws_cdk.aws_lambda_go_alpha
aws_cdk.aws_lambda_nodejs
aws_cdk.aws_lambda_python_alpha
aws_cdk.aws_launchwizard
aws_cdk.aws_lex
aws_cdk.aws_licensemanager
aws_cdk.aws_lightsail
aws_cdk.aws_location
aws_cdk.aws_location_alpha
aws_cdk.aws_logs
aws_cdk.aws_logs_destinations
aws_cdk.aws_lookoutequipment
aws_cdk.aws_lookoutmetrics
aws_cdk.aws_lookoutvision
aws_cdk.aws_m2
aws_cdk.aws_macie
aws_cdk.aws_managedblockchain
aws_cdk.aws_mediaconnect
aws_cdk.aws_mediaconvert
aws_cdk.aws_medialive
aws_cdk.aws_mediapackage
aws_cdk.aws_mediapackagev2
aws_cdk.aws_mediastore
aws_cdk.aws_mediatailor
aws_cdk.aws_memorydb
aws_cdk.aws_msk
aws_cdk.aws_msk_alpha
aws_cdk.aws_mwaa
aws_cdk.aws_neptune
aws_cdk.aws_neptune_alpha
aws_cdk.aws_neptunegraph
aws_cdk.aws_networkfirewall
aws_cdk.aws_networkmanager
aws_cdk.aws_nimblestudio
aws_cdk.aws_notifications
aws_cdk.aws_notificationscontacts
aws_cdk.aws_oam
aws_cdk.aws_omics
aws_cdk.aws_opensearchserverless
aws_cdk.aws_opensearchservice
aws_cdk.aws_opsworks
aws_cdk.aws_opsworkscm
aws_cdk.aws_organizations
aws_cdk.aws_osis
aws_cdk.aws_panorama
aws_cdk.aws_paymentcryptography
aws_cdk.aws_pcaconnectorad
aws_cdk.aws_pcaconnectorscep
aws_cdk.aws_pcs
aws_cdk.aws_personalize
aws_cdk.aws_pinpoint
aws_cdk.aws_pinpointemail
aws_cdk.aws_pipes
aws_cdk.aws_pipes_alpha
aws_cdk.aws_pipes_enrichments_alpha
aws_cdk.aws_pipes_sources_alpha
aws_cdk.aws_pipes_targets_alpha
aws_cdk.aws_proton
aws_cdk.aws_qbusiness
aws_cdk.aws_qldb
aws_cdk.aws_quicksight
aws_cdk.aws_ram
aws_cdk.aws_rbin
aws_cdk.aws_rds
aws_cdk.aws_redshift
aws_cdk.aws_redshift_alpha
aws_cdk.aws_redshiftserverless
aws_cdk.aws_refactorspaces
aws_cdk.aws_rekognition
aws_cdk.aws_resiliencehub
aws_cdk.aws_resourceexplorer2
aws_cdk.aws_resourcegroups
aws_cdk.aws_robomaker
aws_cdk.aws_rolesanywhere
aws_cdk.aws_route53
aws_cdk.aws_route53_patterns
aws_cdk.aws_route53_targets
aws_cdk.aws_route53profiles
aws_cdk.aws_route53recoverycontrol
aws_cdk.aws_route53recoveryreadiness
aws_cdk.aws_route53resolver
aws_cdk.aws_route53resolver_alpha
aws_cdk.aws_rum
aws_cdk.aws_s3
aws_cdk.aws_s3_assets
aws_cdk.aws_s3_deployment
aws_cdk.aws_s3_notifications
aws_cdk.aws_s3express
aws_cdk.aws_s3objectlambda
aws_cdk.aws_s3objectlambda_alpha
aws_cdk.aws_s3outposts
aws_cdk.aws_s3tables
aws_cdk.aws_s3tables_alpha
aws_cdk.aws_sagemaker
aws_cdk.aws_sagemaker_alpha
aws_cdk.aws_sam
aws_cdk.aws_scheduler
aws_cdk.aws_scheduler_targets
aws_cdk.aws_sdb
aws_cdk.aws_secretsmanager
aws_cdk.aws_securityhub
aws_cdk.aws_securitylake
aws_cdk.aws_servicecatalog
aws_cdk.aws_servicecatalogappregistry
aws_cdk.aws_servicecatalogappregistry_alpha
aws_cdk.aws_servicediscovery
aws_cdk.aws_ses
aws_cdk.aws_ses_actions
aws_cdk.aws_shield
aws_cdk.aws_signer
aws_cdk.aws_simspaceweaver
aws_cdk.aws_sns
aws_cdk.aws_sns_subscriptions
aws_cdk.aws_sqs
aws_cdk.aws_ssm
aws_cdk.aws_ssmcontacts
aws_cdk.aws_ssmincidents
aws_cdk.aws_ssmquicksetup
aws_cdk.aws_sso
aws_cdk.aws_stepfunctions
aws_cdk.aws_stepfunctions_tasks
aws_cdk.aws_supportapp
aws_cdk.aws_synthetics
aws_cdk.aws_systemsmanagersap
aws_cdk.aws_timestream
aws_cdk.aws_transfer
aws_cdk.aws_verifiedpermissions
aws_cdk.aws_voiceid
aws_cdk.aws_vpclattice
aws_cdk.aws_waf
aws_cdk.aws_wafregional
aws_cdk.aws_wafv2
aws_cdk.aws_wisdom
aws_cdk.aws_workspaces
aws_cdk.aws_workspacesthinclient
aws_cdk.aws_workspacesweb
aws_cdk.aws_xray
aws_cdk.cloud_assembly_schema
aws_cdk.cloudformation_include
aws_cdk.custom_resources
aws_cdk.cx_api
aws_cdk.integ_tests_alpha
aws_cdk.lambda_layer_awscli
aws_cdk.lambda_layer_node_proxy_agent
aws_cdk.pipelines
aws_cdk.region_info
aws_cdk.triggers
constructs






Indices and tables

Index
Module Index
Search Page\nAWS CDK Python Reference\nContents:

API Reference
aws_cdk
aws_cdk.alexa_ask
aws_cdk.app_staging_synthesizer_alpha
aws_cdk.assertions
aws_cdk.asset_awscli_v1
aws_cdk.asset_node_proxy_agent_v6
aws_cdk.aws_accessanalyzer
aws_cdk.aws_acmpca
aws_cdk.aws_amazonmq
aws_cdk.aws_amplify
aws_cdk.aws_amplify_alpha
aws_cdk.aws_amplifyuibuilder
aws_cdk.aws_apigateway
aws_cdk.aws_apigatewayv2
aws_cdk.aws_apigatewayv2_authorizers
aws_cdk.aws_apigatewayv2_integrations
aws_cdk.aws_appconfig
aws_cdk.aws_appflow
aws_cdk.aws_appintegrations
aws_cdk.aws_applicationautoscaling
aws_cdk.aws_applicationinsights
aws_cdk.aws_applicationsignals
aws_cdk.aws_applicationsignals_alpha
aws_cdk.aws_appmesh
aws_cdk.aws_apprunner
aws_cdk.aws_apprunner_alpha
aws_cdk.aws_appstream
aws_cdk.aws_appsync
aws_cdk.aws_apptest
aws_cdk.aws_aps
aws_cdk.aws_arczonalshift
aws_cdk.aws_athena
aws_cdk.aws_auditmanager
aws_cdk.aws_autoscaling
aws_cdk.aws_autoscaling_common
aws_cdk.aws_autoscaling_hooktargets
aws_cdk.aws_autoscalingplans
aws_cdk.aws_b2bi
aws_cdk.aws_backup
aws_cdk.aws_backupgateway
aws_cdk.aws_batch
aws_cdk.aws_bcmdataexports
aws_cdk.aws_bedrock
aws_cdk.aws_billingconductor
aws_cdk.aws_budgets
aws_cdk.aws_cassandra
aws_cdk.aws_ce
aws_cdk.aws_certificatemanager
aws_cdk.aws_chatbot
aws_cdk.aws_cleanrooms
aws_cdk.aws_cleanroomsml
aws_cdk.aws_cloud9
aws_cdk.aws_cloud9_alpha
aws_cdk.aws_cloudformation
aws_cdk.aws_cloudfront
aws_cdk.aws_cloudfront.experimental
aws_cdk.aws_cloudfront_origins
aws_cdk.aws_cloudtrail
aws_cdk.aws_cloudwatch
aws_cdk.aws_cloudwatch_actions
aws_cdk.aws_codeartifact
aws_cdk.aws_codebuild
aws_cdk.aws_codecommit
aws_cdk.aws_codeconnections
aws_cdk.aws_codedeploy
aws_cdk.aws_codeguruprofiler
aws_cdk.aws_codegurureviewer
aws_cdk.aws_codepipeline
aws_cdk.aws_codepipeline_actions
aws_cdk.aws_codestar
aws_cdk.aws_codestar_alpha
aws_cdk.aws_codestarconnections
aws_cdk.aws_codestarnotifications
aws_cdk.aws_cognito
aws_cdk.aws_cognito_identitypool
aws_cdk.aws_comprehend
aws_cdk.aws_config
aws_cdk.aws_connect
aws_cdk.aws_connectcampaigns
aws_cdk.aws_connectcampaignsv2
aws_cdk.aws_controltower
aws_cdk.aws_cur
aws_cdk.aws_customerprofiles
aws_cdk.aws_databrew
aws_cdk.aws_datapipeline
aws_cdk.aws_datasync
aws_cdk.aws_datazone
aws_cdk.aws_dax
aws_cdk.aws_deadline
aws_cdk.aws_detective
aws_cdk.aws_devicefarm
aws_cdk.aws_devopsguru
aws_cdk.aws_directoryservice
aws_cdk.aws_dlm
aws_cdk.aws_dms
aws_cdk.aws_docdb
aws_cdk.aws_docdbelastic
aws_cdk.aws_dsql
aws_cdk.aws_dynamodb
aws_cdk.aws_ec2
aws_cdk.aws_ec2_alpha
aws_cdk.aws_ecr
aws_cdk.aws_ecr_assets
aws_cdk.aws_ecs
aws_cdk.aws_ecs_patterns
aws_cdk.aws_efs
aws_cdk.aws_eks
aws_cdk.aws_eks_v2_alpha
aws_cdk.aws_elasticache
aws_cdk.aws_elasticbeanstalk
aws_cdk.aws_elasticloadbalancing
aws_cdk.aws_elasticloadbalancingv2
aws_cdk.aws_elasticloadbalancingv2_actions
aws_cdk.aws_elasticloadbalancingv2_targets
aws_cdk.aws_elasticsearch
aws_cdk.aws_emr
aws_cdk.aws_emrcontainers
aws_cdk.aws_emrserverless
aws_cdk.aws_entityresolution
aws_cdk.aws_events
aws_cdk.aws_events_targets
aws_cdk.aws_eventschemas
aws_cdk.aws_evidently
aws_cdk.aws_finspace
aws_cdk.aws_fis
aws_cdk.aws_fms
aws_cdk.aws_forecast
aws_cdk.aws_frauddetector
aws_cdk.aws_fsx
aws_cdk.aws_gamelift
aws_cdk.aws_gamelift_alpha
aws_cdk.aws_gameliftstreams
aws_cdk.aws_globalaccelerator
aws_cdk.aws_globalaccelerator_endpoints
aws_cdk.aws_glue
aws_cdk.aws_glue_alpha
aws_cdk.aws_grafana
aws_cdk.aws_greengrass
aws_cdk.aws_greengrassv2
aws_cdk.aws_groundstation
aws_cdk.aws_guardduty
aws_cdk.aws_healthimaging
aws_cdk.aws_healthlake
aws_cdk.aws_iam
aws_cdk.aws_identitystore
aws_cdk.aws_imagebuilder
aws_cdk.aws_inspector
aws_cdk.aws_inspectorv2
aws_cdk.aws_internetmonitor
aws_cdk.aws_invoicing
aws_cdk.aws_iot
aws_cdk.aws_iot_actions_alpha
aws_cdk.aws_iot_alpha
aws_cdk.aws_iotanalytics
aws_cdk.aws_iotcoredeviceadvisor
aws_cdk.aws_iotevents
aws_cdk.aws_iotevents_actions_alpha
aws_cdk.aws_iotevents_alpha
aws_cdk.aws_iotfleethub
aws_cdk.aws_iotfleetwise
aws_cdk.aws_iotsitewise
aws_cdk.aws_iotthingsgraph
aws_cdk.aws_iottwinmaker
aws_cdk.aws_iotwireless
aws_cdk.aws_ivs
aws_cdk.aws_ivs_alpha
aws_cdk.aws_ivschat
aws_cdk.aws_kafkaconnect
aws_cdk.aws_kendra
aws_cdk.aws_kendraranking
aws_cdk.aws_kinesis
aws_cdk.aws_kinesisanalytics
aws_cdk.aws_kinesisanalytics_flink_alpha
aws_cdk.aws_kinesisanalyticsv2
aws_cdk.aws_kinesisfirehose
aws_cdk.aws_kinesisvideo
aws_cdk.aws_kms
aws_cdk.aws_lakeformation
aws_cdk.aws_lambda
aws_cdk.aws_lambda_destinations
aws_cdk.aws_lambda_event_sources
aws_cdk.aws_lambda_go_alpha
aws_cdk.aws_lambda_nodejs
aws_cdk.aws_lambda_python_alpha
aws_cdk.aws_launchwizard
aws_cdk.aws_lex
aws_cdk.aws_licensemanager
aws_cdk.aws_lightsail
aws_cdk.aws_location
aws_cdk.aws_location_alpha
aws_cdk.aws_logs
aws_cdk.aws_logs_destinations
aws_cdk.aws_lookoutequipment
aws_cdk.aws_lookoutmetrics
aws_cdk.aws_lookoutvision
aws_cdk.aws_m2
aws_cdk.aws_macie
aws_cdk.aws_managedblockchain
aws_cdk.aws_mediaconnect
aws_cdk.aws_mediaconvert
aws_cdk.aws_medialive
aws_cdk.aws_mediapackage
aws_cdk.aws_mediapackagev2
aws_cdk.aws_mediastore
aws_cdk.aws_mediatailor
aws_cdk.aws_memorydb
aws_cdk.aws_msk
aws_cdk.aws_msk_alpha
aws_cdk.aws_mwaa
aws_cdk.aws_neptune
aws_cdk.aws_neptune_alpha
aws_cdk.aws_neptunegraph
aws_cdk.aws_networkfirewall
aws_cdk.aws_networkmanager
aws_cdk.aws_nimblestudio
aws_cdk.aws_notifications
aws_cdk.aws_notificationscontacts
aws_cdk.aws_oam
aws_cdk.aws_omics
aws_cdk.aws_opensearchserverless
aws_cdk.aws_opensearchservice
aws_cdk.aws_opsworks
aws_cdk.aws_opsworkscm
aws_cdk.aws_organizations
aws_cdk.aws_osis
aws_cdk.aws_panorama
aws_cdk.aws_paymentcryptography
aws_cdk.aws_pcaconnectorad
aws_cdk.aws_pcaconnectorscep
aws_cdk.aws_pcs
aws_cdk.aws_personalize
aws_cdk.aws_pinpoint
aws_cdk.aws_pinpointemail
aws_cdk.aws_pipes
aws_cdk.aws_pipes_alpha
aws_cdk.aws_pipes_enrichments_alpha
aws_cdk.aws_pipes_sources_alpha
aws_cdk.aws_pipes_targets_alpha
aws_cdk.aws_proton
aws_cdk.aws_qbusiness
aws_cdk.aws_qldb
aws_cdk.aws_quicksight
aws_cdk.aws_ram
aws_cdk.aws_rbin
aws_cdk.aws_rds
aws_cdk.aws_redshift
aws_cdk.aws_redshift_alpha
aws_cdk.aws_redshiftserverless
aws_cdk.aws_refactorspaces
aws_cdk.aws_rekognition
aws_cdk.aws_resiliencehub
aws_cdk.aws_resourceexplorer2
aws_cdk.aws_resourcegroups
aws_cdk.aws_robomaker
aws_cdk.aws_rolesanywhere
aws_cdk.aws_route53
aws_cdk.aws_route53_patterns
aws_cdk.aws_route53_targets
aws_cdk.aws_route53profiles
aws_cdk.aws_route53recoverycontrol
aws_cdk.aws_route53recoveryreadiness
aws_cdk.aws_route53resolver
aws_cdk.aws_route53resolver_alpha
aws_cdk.aws_rum
aws_cdk.aws_s3
aws_cdk.aws_s3_assets
aws_cdk.aws_s3_deployment
aws_cdk.aws_s3_notifications
aws_cdk.aws_s3express
aws_cdk.aws_s3objectlambda
aws_cdk.aws_s3objectlambda_alpha
aws_cdk.aws_s3outposts
aws_cdk.aws_s3tables
aws_cdk.aws_s3tables_alpha
aws_cdk.aws_sagemaker
aws_cdk.aws_sagemaker_alpha
aws_cdk.aws_sam
aws_cdk.aws_scheduler
aws_cdk.aws_scheduler_targets
aws_cdk.aws_sdb
aws_cdk.aws_secretsmanager
aws_cdk.aws_securityhub
aws_cdk.aws_securitylake
aws_cdk.aws_servicecatalog
aws_cdk.aws_servicecatalogappregistry
aws_cdk.aws_servicecatalogappregistry_alpha
aws_cdk.aws_servicediscovery
aws_cdk.aws_ses
aws_cdk.aws_ses_actions
aws_cdk.aws_shield
aws_cdk.aws_signer
aws_cdk.aws_simspaceweaver
aws_cdk.aws_sns
aws_cdk.aws_sns_subscriptions
aws_cdk.aws_sqs
aws_cdk.aws_ssm
aws_cdk.aws_ssmcontacts
aws_cdk.aws_ssmincidents
aws_cdk.aws_ssmquicksetup
aws_cdk.aws_sso
aws_cdk.aws_stepfunctions
aws_cdk.aws_stepfunctions_tasks
aws_cdk.aws_supportapp
aws_cdk.aws_synthetics
aws_cdk.aws_systemsmanagersap
aws_cdk.aws_timestream
aws_cdk.aws_transfer
aws_cdk.aws_verifiedpermissions
aws_cdk.aws_voiceid
aws_cdk.aws_vpclattice
aws_cdk.aws_waf
aws_cdk.aws_wafregional
aws_cdk.aws_wafv2
aws_cdk.aws_wisdom
aws_cdk.aws_workspaces
aws_cdk.aws_workspacesthinclient
aws_cdk.aws_workspacesweb
aws_cdk.aws_xray
aws_cdk.cloud_assembly_schema
aws_cdk.cloudformation_include
aws_cdk.custom_resources
aws_cdk.cx_api
aws_cdk.integ_tests_alpha
aws_cdk.lambda_layer_awscli
aws_cdk.lambda_layer_node_proxy_agent
aws_cdk.pipelines
aws_cdk.region_info
aws_cdk.triggers
constructs\nAPI Reference
aws_cdk
aws_cdk.alexa_ask
aws_cdk.app_staging_synthesizer_alpha
aws_cdk.assertions
aws_cdk.asset_awscli_v1
aws_cdk.asset_node_proxy_agent_v6
aws_cdk.aws_accessanalyzer
aws_cdk.aws_acmpca
aws_cdk.aws_amazonmq
aws_cdk.aws_amplify
aws_cdk.aws_amplify_alpha
aws_cdk.aws_amplifyuibuilder
aws_cdk.aws_apigateway
aws_cdk.aws_apigatewayv2
aws_cdk.aws_apigatewayv2_authorizers
aws_cdk.aws_apigatewayv2_integrations
aws_cdk.aws_appconfig
aws_cdk.aws_appflow
aws_cdk.aws_appintegrations
aws_cdk.aws_applicationautoscaling
aws_cdk.aws_applicationinsights
aws_cdk.aws_applicationsignals
aws_cdk.aws_applicationsignals_alpha
aws_cdk.aws_appmesh
aws_cdk.aws_apprunner
aws_cdk.aws_apprunner_alpha
aws_cdk.aws_appstream
aws_cdk.aws_appsync
aws_cdk.aws_apptest
aws_cdk.aws_aps
aws_cdk.aws_arczonalshift
aws_cdk.aws_athena
aws_cdk.aws_auditmanager
aws_cdk.aws_autoscaling
aws_cdk.aws_autoscaling_common
aws_cdk.aws_autoscaling_hooktargets
aws_cdk.aws_autoscalingplans
aws_cdk.aws_b2bi
aws_cdk.aws_backup
aws_cdk.aws_backupgateway
aws_cdk.aws_batch
aws_cdk.aws_bcmdataexports
aws_cdk.aws_bedrock
aws_cdk.aws_billingconductor
aws_cdk.aws_budgets
aws_cdk.aws_cassandra
aws_cdk.aws_ce
aws_cdk.aws_certificatemanager
aws_cdk.aws_chatbot
aws_cdk.aws_cleanrooms
aws_cdk.aws_cleanroomsml
aws_cdk.aws_cloud9
aws_cdk.aws_cloud9_alpha
aws_cdk.aws_cloudformation
aws_cdk.aws_cloudfront
aws_cdk.aws_cloudfront.experimental
aws_cdk.aws_cloudfront_origins
aws_cdk.aws_cloudtrail
aws_cdk.aws_cloudwatch
aws_cdk.aws_cloudwatch_actions
aws_cdk.aws_codeartifact
aws_cdk.aws_codebuild
aws_cdk.aws_codecommit
aws_cdk.aws_codeconnections
aws_cdk.aws_codedeploy
aws_cdk.aws_codeguruprofiler
aws_cdk.aws_codegurureviewer
aws_cdk.aws_codepipeline
aws_cdk.aws_codepipeline_actions
aws_cdk.aws_codestar
aws_cdk.aws_codestar_alpha
aws_cdk.aws_codestarconnections
aws_cdk.aws_codestarnotifications
aws_cdk.aws_cognito
aws_cdk.aws_cognito_identitypool
aws_cdk.aws_comprehend
aws_cdk.aws_config
aws_cdk.aws_connect
aws_cdk.aws_connectcampaigns
aws_cdk.aws_connectcampaignsv2
aws_cdk.aws_controltower
aws_cdk.aws_cur
aws_cdk.aws_customerprofiles
aws_cdk.aws_databrew
aws_cdk.aws_datapipeline
aws_cdk.aws_datasync
aws_cdk.aws_datazone
aws_cdk.aws_dax
aws_cdk.aws_deadline
aws_cdk.aws_detective
aws_cdk.aws_devicefarm
aws_cdk.aws_devopsguru
aws_cdk.aws_directoryservice
aws_cdk.aws_dlm
aws_cdk.aws_dms
aws_cdk.aws_docdb
aws_cdk.aws_docdbelastic
aws_cdk.aws_dsql
aws_cdk.aws_dynamodb
aws_cdk.aws_ec2
aws_cdk.aws_ec2_alpha
aws_cdk.aws_ecr
aws_cdk.aws_ecr_assets
aws_cdk.aws_ecs
aws_cdk.aws_ecs_patterns
aws_cdk.aws_efs
aws_cdk.aws_eks
aws_cdk.aws_eks_v2_alpha
aws_cdk.aws_elasticache
aws_cdk.aws_elasticbeanstalk
aws_cdk.aws_elasticloadbalancing
aws_cdk.aws_elasticloadbalancingv2
aws_cdk.aws_elasticloadbalancingv2_actions
aws_cdk.aws_elasticloadbalancingv2_targets
aws_cdk.aws_elasticsearch
aws_cdk.aws_emr
aws_cdk.aws_emrcontainers
aws_cdk.aws_emrserverless
aws_cdk.aws_entityresolution
aws_cdk.aws_events
aws_cdk.aws_events_targets
aws_cdk.aws_eventschemas
aws_cdk.aws_evidently
aws_cdk.aws_finspace
aws_cdk.aws_fis
aws_cdk.aws_fms
aws_cdk.aws_forecast
aws_cdk.aws_frauddetector
aws_cdk.aws_fsx
aws_cdk.aws_gamelift
aws_cdk.aws_gamelift_alpha
aws_cdk.aws_gameliftstreams
aws_cdk.aws_globalaccelerator
aws_cdk.aws_globalaccelerator_endpoints
aws_cdk.aws_glue
aws_cdk.aws_glue_alpha
aws_cdk.aws_grafana
aws_cdk.aws_greengrass
aws_cdk.aws_greengrassv2
aws_cdk.aws_groundstation
aws_cdk.aws_guardduty
aws_cdk.aws_healthimaging
aws_cdk.aws_healthlake
aws_cdk.aws_iam
aws_cdk.aws_identitystore
aws_cdk.aws_imagebuilder
aws_cdk.aws_inspector
aws_cdk.aws_inspectorv2
aws_cdk.aws_internetmonitor
aws_cdk.aws_invoicing
aws_cdk.aws_iot
aws_cdk.aws_iot_actions_alpha
aws_cdk.aws_iot_alpha
aws_cdk.aws_iotanalytics
aws_cdk.aws_iotcoredeviceadvisor
aws_cdk.aws_iotevents
aws_cdk.aws_iotevents_actions_alpha
aws_cdk.aws_iotevents_alpha
aws_cdk.aws_iotfleethub
aws_cdk.aws_iotfleetwise
aws_cdk.aws_iotsitewise
aws_cdk.aws_iotthingsgraph
aws_cdk.aws_iottwinmaker
aws_cdk.aws_iotwireless
aws_cdk.aws_ivs
aws_cdk.aws_ivs_alpha
aws_cdk.aws_ivschat
aws_cdk.aws_kafkaconnect
aws_cdk.aws_kendra
aws_cdk.aws_kendraranking
aws_cdk.aws_kinesis
aws_cdk.aws_kinesisanalytics
aws_cdk.aws_kinesisanalytics_flink_alpha
aws_cdk.aws_kinesisanalyticsv2
aws_cdk.aws_kinesisfirehose
aws_cdk.aws_kinesisvideo
aws_cdk.aws_kms
aws_cdk.aws_lakeformation
aws_cdk.aws_lambda
aws_cdk.aws_lambda_destinations
aws_cdk.aws_lambda_event_sources
aws_cdk.aws_lambda_go_alpha
aws_cdk.aws_lambda_nodejs
aws_cdk.aws_lambda_python_alpha
aws_cdk.aws_launchwizard
aws_cdk.aws_lex
aws_cdk.aws_licensemanager
aws_cdk.aws_lightsail
aws_cdk.aws_location
aws_cdk.aws_location_alpha
aws_cdk.aws_logs
aws_cdk.aws_logs_destinations
aws_cdk.aws_lookoutequipment
aws_cdk.aws_lookoutmetrics
aws_cdk.aws_lookoutvision
aws_cdk.aws_m2
aws_cdk.aws_macie
aws_cdk.aws_managedblockchain
aws_cdk.aws_mediaconnect
aws_cdk.aws_mediaconvert
aws_cdk.aws_medialive
aws_cdk.aws_mediapackage
aws_cdk.aws_mediapackagev2
aws_cdk.aws_mediastore
aws_cdk.aws_mediatailor
aws_cdk.aws_memorydb
aws_cdk.aws_msk
aws_cdk.aws_msk_alpha
aws_cdk.aws_mwaa
aws_cdk.aws_neptune
aws_cdk.aws_neptune_alpha
aws_cdk.aws_neptunegraph
aws_cdk.aws_networkfirewall
aws_cdk.aws_networkmanager
aws_cdk.aws_nimblestudio
aws_cdk.aws_notifications
aws_cdk.aws_notificationscontacts
aws_cdk.aws_oam
aws_cdk.aws_omics
aws_cdk.aws_opensearchserverless
aws_cdk.aws_opensearchservice
aws_cdk.aws_opsworks
aws_cdk.aws_opsworkscm
aws_cdk.aws_organizations
aws_cdk.aws_osis
aws_cdk.aws_panorama
aws_cdk.aws_paymentcryptography
aws_cdk.aws_pcaconnectorad
aws_cdk.aws_pcaconnectorscep
aws_cdk.aws_pcs
aws_cdk.aws_personalize
aws_cdk.aws_pinpoint
aws_cdk.aws_pinpointemail
aws_cdk.aws_pipes
aws_cdk.aws_pipes_alpha
aws_cdk.aws_pipes_enrichments_alpha
aws_cdk.aws_pipes_sources_alpha
aws_cdk.aws_pipes_targets_alpha
aws_cdk.aws_proton
aws_cdk.aws_qbusiness
aws_cdk.aws_qldb
aws_cdk.aws_quicksight
aws_cdk.aws_ram
aws_cdk.aws_rbin
aws_cdk.aws_rds
aws_cdk.aws_redshift
aws_cdk.aws_redshift_alpha
aws_cdk.aws_redshiftserverless
aws_cdk.aws_refactorspaces
aws_cdk.aws_rekognition
aws_cdk.aws_resiliencehub
aws_cdk.aws_resourceexplorer2
aws_cdk.aws_resourcegroups
aws_cdk.aws_robomaker
aws_cdk.aws_rolesanywhere
aws_cdk.aws_route53
aws_cdk.aws_route53_patterns
aws_cdk.aws_route53_targets
aws_cdk.aws_route53profiles
aws_cdk.aws_route53recoverycontrol
aws_cdk.aws_route53recoveryreadiness
aws_cdk.aws_route53resolver
aws_cdk.aws_route53resolver_alpha
aws_cdk.aws_rum
aws_cdk.aws_s3
aws_cdk.aws_s3_assets
aws_cdk.aws_s3_deployment
aws_cdk.aws_s3_notifications
aws_cdk.aws_s3express
aws_cdk.aws_s3objectlambda
aws_cdk.aws_s3objectlambda_alpha
aws_cdk.aws_s3outposts
aws_cdk.aws_s3tables
aws_cdk.aws_s3tables_alpha
aws_cdk.aws_sagemaker
aws_cdk.aws_sagemaker_alpha
aws_cdk.aws_sam
aws_cdk.aws_scheduler
aws_cdk.aws_scheduler_targets
aws_cdk.aws_sdb
aws_cdk.aws_secretsmanager
aws_cdk.aws_securityhub
aws_cdk.aws_securitylake
aws_cdk.aws_servicecatalog
aws_cdk.aws_servicecatalogappregistry
aws_cdk.aws_servicecatalogappregistry_alpha
aws_cdk.aws_servicediscovery
aws_cdk.aws_ses
aws_cdk.aws_ses_actions
aws_cdk.aws_shield
aws_cdk.aws_signer
aws_cdk.aws_simspaceweaver
aws_cdk.aws_sns
aws_cdk.aws_sns_subscriptions
aws_cdk.aws_sqs
aws_cdk.aws_ssm
aws_cdk.aws_ssmcontacts
aws_cdk.aws_ssmincidents
aws_cdk.aws_ssmquicksetup
aws_cdk.aws_sso
aws_cdk.aws_stepfunctions
aws_cdk.aws_stepfunctions_tasks
aws_cdk.aws_supportapp
aws_cdk.aws_synthetics
aws_cdk.aws_systemsmanagersap
aws_cdk.aws_timestream
aws_cdk.aws_transfer
aws_cdk.aws_verifiedpermissions
aws_cdk.aws_voiceid
aws_cdk.aws_vpclattice
aws_cdk.aws_waf
aws_cdk.aws_wafregional
aws_cdk.aws_wafv2
aws_cdk.aws_wisdom
aws_cdk.aws_workspaces
aws_cdk.aws_workspacesthinclient
aws_cdk.aws_workspacesweb
aws_cdk.aws_xray
aws_cdk.cloud_assembly_schema
aws_cdk.cloudformation_include
aws_cdk.custom_resources
aws_cdk.cx_api
aws_cdk.integ_tests_alpha
aws_cdk.lambda_layer_awscli
aws_cdk.lambda_layer_node_proxy_agent
aws_cdk.pipelines
aws_cdk.region_info
aws_cdk.triggers
constructs\naws_cdk.app_staging_synthesizer_alpha\naws_cdk.app_staging_synthesizer_alpha\naws_cdk.asset_awscli_v1\naws_cdk.asset_awscli_v1\naws_cdk.asset_node_proxy_agent_v6\naws_cdk.asset_node_proxy_agent_v6\naws_cdk.aws_accessanalyzer\naws_cdk.aws_accessanalyzer\naws_cdk.aws_amplify_alpha\naws_cdk.aws_amplify_alpha\naws_cdk.aws_amplifyuibuilder\naws_cdk.aws_amplifyuibuilder\naws_cdk.aws_apigateway\naws_cdk.aws_apigateway\naws_cdk.aws_apigatewayv2\naws_cdk.aws_apigatewayv2\naws_cdk.aws_apigatewayv2_authorizers\naws_cdk.aws_apigatewayv2_authorizers\naws_cdk.aws_apigatewayv2_integrations\naws_cdk.aws_apigatewayv2_integrations\naws_cdk.aws_appconfig\naws_cdk.aws_appconfig\naws_cdk.aws_appintegrations\naws_cdk.aws_appintegrations\naws_cdk.aws_applicationautoscaling\naws_cdk.aws_applicationautoscaling\naws_cdk.aws_applicationinsights\naws_cdk.aws_applicationinsights\naws_cdk.aws_applicationsignals\naws_cdk.aws_applicationsignals\naws_cdk.aws_applicationsignals_alpha\naws_cdk.aws_applicationsignals_alpha\naws_cdk.aws_apprunner\naws_cdk.aws_apprunner\naws_cdk.aws_apprunner_alpha\naws_cdk.aws_apprunner_alpha\naws_cdk.aws_appstream\naws_cdk.aws_appstream\naws_cdk.aws_arczonalshift\naws_cdk.aws_arczonalshift\naws_cdk.aws_auditmanager\naws_cdk.aws_auditmanager\naws_cdk.aws_autoscaling\naws_cdk.aws_autoscaling\naws_cdk.aws_autoscaling_common\naws_cdk.aws_autoscaling_common\naws_cdk.aws_autoscaling_hooktargets\naws_cdk.aws_autoscaling_hooktargets\naws_cdk.aws_autoscalingplans\naws_cdk.aws_autoscalingplans\naws_cdk.aws_backupgateway\naws_cdk.aws_backupgateway\naws_cdk.aws_bcmdataexports\naws_cdk.aws_bcmdataexports\naws_cdk.aws_billingconductor\naws_cdk.aws_billingconductor\naws_cdk.aws_cassandra\naws_cdk.aws_cassandra\naws_cdk.aws_certificatemanager\naws_cdk.aws_certificatemanager\naws_cdk.aws_cleanrooms\naws_cdk.aws_cleanrooms\naws_cdk.aws_cleanroomsml\naws_cdk.aws_cleanroomsml\naws_cdk.aws_cloud9_alpha\naws_cdk.aws_cloud9_alpha\naws_cdk.aws_cloudformation\naws_cdk.aws_cloudformation\naws_cdk.aws_cloudfront\naws_cdk.aws_cloudfront\naws_cdk.aws_cloudfront.experimental\naws_cdk.aws_cloudfront.experimental\naws_cdk.aws_cloudfront_origins\naws_cdk.aws_cloudfront_origins\naws_cdk.aws_cloudtrail\naws_cdk.aws_cloudtrail\naws_cdk.aws_cloudwatch\naws_cdk.aws_cloudwatch\naws_cdk.aws_cloudwatch_actions\naws_cdk.aws_cloudwatch_actions\naws_cdk.aws_codeartifact\naws_cdk.aws_codeartifact\naws_cdk.aws_codebuild\naws_cdk.aws_codebuild\naws_cdk.aws_codecommit\naws_cdk.aws_codecommit\naws_cdk.aws_codeconnections\naws_cdk.aws_codeconnections\naws_cdk.aws_codedeploy\naws_cdk.aws_codedeploy\naws_cdk.aws_codeguruprofiler\naws_cdk.aws_codeguruprofiler\naws_cdk.aws_codegurureviewer\naws_cdk.aws_codegurureviewer\naws_cdk.aws_codepipeline\naws_cdk.aws_codepipeline\naws_cdk.aws_codepipeline_actions\naws_cdk.aws_codepipeline_actions\naws_cdk.aws_codestar_alpha\naws_cdk.aws_codestar_alpha\naws_cdk.aws_codestarconnections\naws_cdk.aws_codestarconnections\naws_cdk.aws_codestarnotifications\naws_cdk.aws_codestarnotifications\naws_cdk.aws_cognito_identitypool\naws_cdk.aws_cognito_identitypool\naws_cdk.aws_comprehend\naws_cdk.aws_comprehend\naws_cdk.aws_connectcampaigns\naws_cdk.aws_connectcampaigns\naws_cdk.aws_connectcampaignsv2\naws_cdk.aws_connectcampaignsv2\naws_cdk.aws_controltower\naws_cdk.aws_controltower\naws_cdk.aws_customerprofiles\naws_cdk.aws_customerprofiles\naws_cdk.aws_datapipeline\naws_cdk.aws_datapipeline\naws_cdk.aws_detective\naws_cdk.aws_detective\naws_cdk.aws_devicefarm\naws_cdk.aws_devicefarm\naws_cdk.aws_devopsguru\naws_cdk.aws_devopsguru\naws_cdk.aws_directoryservice\naws_cdk.aws_directoryservice\naws_cdk.aws_docdbelastic\naws_cdk.aws_docdbelastic\naws_cdk.aws_ec2_alpha\naws_cdk.aws_ec2_alpha\naws_cdk.aws_ecr_assets\naws_cdk.aws_ecr_assets\naws_cdk.aws_ecs_patterns\naws_cdk.aws_ecs_patterns\naws_cdk.aws_eks_v2_alpha\naws_cdk.aws_eks_v2_alpha\naws_cdk.aws_elasticache\naws_cdk.aws_elasticache\naws_cdk.aws_elasticbeanstalk\naws_cdk.aws_elasticbeanstalk\naws_cdk.aws_elasticloadbalancing\naws_cdk.aws_elasticloadbalancing\naws_cdk.aws_elasticloadbalancingv2\naws_cdk.aws_elasticloadbalancingv2\naws_cdk.aws_elasticloadbalancingv2_actions\naws_cdk.aws_elasticloadbalancingv2_actions\naws_cdk.aws_elasticloadbalancingv2_targets\naws_cdk.aws_elasticloadbalancingv2_targets\naws_cdk.aws_elasticsearch\naws_cdk.aws_elasticsearch\naws_cdk.aws_emrcontainers\naws_cdk.aws_emrcontainers\naws_cdk.aws_emrserverless\naws_cdk.aws_emrserverless\naws_cdk.aws_entityresolution\naws_cdk.aws_entityresolution\naws_cdk.aws_events_targets\naws_cdk.aws_events_targets\naws_cdk.aws_eventschemas\naws_cdk.aws_eventschemas\naws_cdk.aws_evidently\naws_cdk.aws_evidently\naws_cdk.aws_frauddetector\naws_cdk.aws_frauddetector\naws_cdk.aws_gamelift_alpha\naws_cdk.aws_gamelift_alpha\naws_cdk.aws_gameliftstreams\naws_cdk.aws_gameliftstreams\naws_cdk.aws_globalaccelerator\naws_cdk.aws_globalaccelerator\naws_cdk.aws_globalaccelerator_endpoints\naws_cdk.aws_globalaccelerator_endpoints\naws_cdk.aws_glue_alpha\naws_cdk.aws_glue_alpha\naws_cdk.aws_greengrass\naws_cdk.aws_greengrass\naws_cdk.aws_greengrassv2\naws_cdk.aws_greengrassv2\naws_cdk.aws_groundstation\naws_cdk.aws_groundstation\naws_cdk.aws_guardduty\naws_cdk.aws_guardduty\naws_cdk.aws_healthimaging\naws_cdk.aws_healthimaging\naws_cdk.aws_healthlake\naws_cdk.aws_healthlake\naws_cdk.aws_identitystore\naws_cdk.aws_identitystore\naws_cdk.aws_imagebuilder\naws_cdk.aws_imagebuilder\naws_cdk.aws_inspector\naws_cdk.aws_inspector\naws_cdk.aws_inspectorv2\naws_cdk.aws_inspectorv2\naws_cdk.aws_internetmonitor\naws_cdk.aws_internetmonitor\naws_cdk.aws_invoicing\naws_cdk.aws_invoicing\naws_cdk.aws_iot_actions_alpha\naws_cdk.aws_iot_actions_alpha\naws_cdk.aws_iot_alpha\naws_cdk.aws_iot_alpha\naws_cdk.aws_iotanalytics\naws_cdk.aws_iotanalytics\naws_cdk.aws_iotcoredeviceadvisor\naws_cdk.aws_iotcoredeviceadvisor\naws_cdk.aws_iotevents\naws_cdk.aws_iotevents\naws_cdk.aws_iotevents_actions_alpha\naws_cdk.aws_iotevents_actions_alpha\naws_cdk.aws_iotevents_alpha\naws_cdk.aws_iotevents_alpha\naws_cdk.aws_iotfleethub\naws_cdk.aws_iotfleethub\naws_cdk.aws_iotfleetwise\naws_cdk.aws_iotfleetwise\naws_cdk.aws_iotsitewise\naws_cdk.aws_iotsitewise\naws_cdk.aws_iotthingsgraph\naws_cdk.aws_iotthingsgraph\naws_cdk.aws_iottwinmaker\naws_cdk.aws_iottwinmaker\naws_cdk.aws_iotwireless\naws_cdk.aws_iotwireless\naws_cdk.aws_ivs_alpha\naws_cdk.aws_ivs_alpha\naws_cdk.aws_kafkaconnect\naws_cdk.aws_kafkaconnect\naws_cdk.aws_kendraranking\naws_cdk.aws_kendraranking\naws_cdk.aws_kinesisanalytics\naws_cdk.aws_kinesisanalytics\naws_cdk.aws_kinesisanalytics_flink_alpha\naws_cdk.aws_kinesisanalytics_flink_alpha\naws_cdk.aws_kinesisanalyticsv2\naws_cdk.aws_kinesisanalyticsv2\naws_cdk.aws_kinesisfirehose\naws_cdk.aws_kinesisfirehose\naws_cdk.aws_kinesisvideo\naws_cdk.aws_kinesisvideo\naws_cdk.aws_lakeformation\naws_cdk.aws_lakeformation\naws_cdk.aws_lambda_destinations\naws_cdk.aws_lambda_destinations\naws_cdk.aws_lambda_event_sources\naws_cdk.aws_lambda_event_sources\naws_cdk.aws_lambda_go_alpha\naws_cdk.aws_lambda_go_alpha\naws_cdk.aws_lambda_nodejs\naws_cdk.aws_lambda_nodejs\naws_cdk.aws_lambda_python_alpha\naws_cdk.aws_lambda_python_alpha\naws_cdk.aws_launchwizard\naws_cdk.aws_launchwizard\naws_cdk.aws_licensemanager\naws_cdk.aws_licensemanager\naws_cdk.aws_lightsail\naws_cdk.aws_lightsail\naws_cdk.aws_location_alpha\naws_cdk.aws_location_alpha\naws_cdk.aws_logs_destinations\naws_cdk.aws_logs_destinations\naws_cdk.aws_lookoutequipment\naws_cdk.aws_lookoutequipment\naws_cdk.aws_lookoutmetrics\naws_cdk.aws_lookoutmetrics\naws_cdk.aws_lookoutvision\naws_cdk.aws_lookoutvision\naws_cdk.aws_managedblockchain\naws_cdk.aws_managedblockchain\naws_cdk.aws_mediaconnect\naws_cdk.aws_mediaconnect\naws_cdk.aws_mediaconvert\naws_cdk.aws_mediaconvert\naws_cdk.aws_medialive\naws_cdk.aws_medialive\naws_cdk.aws_mediapackage\naws_cdk.aws_mediapackage\naws_cdk.aws_mediapackagev2\naws_cdk.aws_mediapackagev2\naws_cdk.aws_mediastore\naws_cdk.aws_mediastore\naws_cdk.aws_mediatailor\naws_cdk.aws_mediatailor\naws_cdk.aws_msk_alpha\naws_cdk.aws_msk_alpha\naws_cdk.aws_neptune_alpha\naws_cdk.aws_neptune_alpha\naws_cdk.aws_neptunegraph\naws_cdk.aws_neptunegraph\naws_cdk.aws_networkfirewall\naws_cdk.aws_networkfirewall\naws_cdk.aws_networkmanager\naws_cdk.aws_networkmanager\naws_cdk.aws_nimblestudio\naws_cdk.aws_nimblestudio\naws_cdk.aws_notifications\naws_cdk.aws_notifications\naws_cdk.aws_notificationscontacts\naws_cdk.aws_notificationscontacts\naws_cdk.aws_opensearchserverless\naws_cdk.aws_opensearchserverless\naws_cdk.aws_opensearchservice\naws_cdk.aws_opensearchservice\naws_cdk.aws_opsworkscm\naws_cdk.aws_opsworkscm\naws_cdk.aws_organizations\naws_cdk.aws_organizations\naws_cdk.aws_paymentcryptography\naws_cdk.aws_paymentcryptography\naws_cdk.aws_pcaconnectorad\naws_cdk.aws_pcaconnectorad\naws_cdk.aws_pcaconnectorscep\naws_cdk.aws_pcaconnectorscep\naws_cdk.aws_personalize\naws_cdk.aws_personalize\naws_cdk.aws_pinpointemail\naws_cdk.aws_pinpointemail\naws_cdk.aws_pipes_alpha\naws_cdk.aws_pipes_alpha\naws_cdk.aws_pipes_enrichments_alpha\naws_cdk.aws_pipes_enrichments_alpha\naws_cdk.aws_pipes_sources_alpha\naws_cdk.aws_pipes_sources_alpha\naws_cdk.aws_pipes_targets_alpha\naws_cdk.aws_pipes_targets_alpha\naws_cdk.aws_qbusiness\naws_cdk.aws_qbusiness\naws_cdk.aws_quicksight\naws_cdk.aws_quicksight\naws_cdk.aws_redshift_alpha\naws_cdk.aws_redshift_alpha\naws_cdk.aws_redshiftserverless\naws_cdk.aws_redshiftserverless\naws_cdk.aws_refactorspaces\naws_cdk.aws_refactorspaces\naws_cdk.aws_rekognition\naws_cdk.aws_rekognition\naws_cdk.aws_resiliencehub\naws_cdk.aws_resiliencehub\naws_cdk.aws_resourceexplorer2\naws_cdk.aws_resourceexplorer2\naws_cdk.aws_resourcegroups\naws_cdk.aws_resourcegroups\naws_cdk.aws_robomaker\naws_cdk.aws_robomaker\naws_cdk.aws_rolesanywhere\naws_cdk.aws_rolesanywhere\naws_cdk.aws_route53_patterns\naws_cdk.aws_route53_patterns\naws_cdk.aws_route53_targets\naws_cdk.aws_route53_targets\naws_cdk.aws_route53profiles\naws_cdk.aws_route53profiles\naws_cdk.aws_route53recoverycontrol\naws_cdk.aws_route53recoverycontrol\naws_cdk.aws_route53recoveryreadiness\naws_cdk.aws_route53recoveryreadiness\naws_cdk.aws_route53resolver\naws_cdk.aws_route53resolver\naws_cdk.aws_route53resolver_alpha\naws_cdk.aws_route53resolver_alpha\naws_cdk.aws_s3_assets\naws_cdk.aws_s3_assets\naws_cdk.aws_s3_deployment\naws_cdk.aws_s3_deployment\naws_cdk.aws_s3_notifications\naws_cdk.aws_s3_notifications\naws_cdk.aws_s3express\naws_cdk.aws_s3express\naws_cdk.aws_s3objectlambda\naws_cdk.aws_s3objectlambda\naws_cdk.aws_s3objectlambda_alpha\naws_cdk.aws_s3objectlambda_alpha\naws_cdk.aws_s3outposts\naws_cdk.aws_s3outposts\naws_cdk.aws_s3tables_alpha\naws_cdk.aws_s3tables_alpha\naws_cdk.aws_sagemaker\naws_cdk.aws_sagemaker\naws_cdk.aws_sagemaker_alpha\naws_cdk.aws_sagemaker_alpha\naws_cdk.aws_scheduler\naws_cdk.aws_scheduler\naws_cdk.aws_scheduler_targets\naws_cdk.aws_scheduler_targets\naws_cdk.aws_secretsmanager\naws_cdk.aws_secretsmanager\naws_cdk.aws_securityhub\naws_cdk.aws_securityhub\naws_cdk.aws_securitylake\naws_cdk.aws_securitylake\naws_cdk.aws_servicecatalog\naws_cdk.aws_servicecatalog\naws_cdk.aws_servicecatalogappregistry\naws_cdk.aws_servicecatalogappregistry\naws_cdk.aws_servicecatalogappregistry_alpha\naws_cdk.aws_servicecatalogappregistry_alpha\naws_cdk.aws_servicediscovery\naws_cdk.aws_servicediscovery\naws_cdk.aws_ses_actions\naws_cdk.aws_ses_actions\naws_cdk.aws_simspaceweaver\naws_cdk.aws_simspaceweaver\naws_cdk.aws_sns_subscriptions\naws_cdk.aws_sns_subscriptions\naws_cdk.aws_ssmcontacts\naws_cdk.aws_ssmcontacts\naws_cdk.aws_ssmincidents\naws_cdk.aws_ssmincidents\naws_cdk.aws_ssmquicksetup\naws_cdk.aws_ssmquicksetup\naws_cdk.aws_stepfunctions\naws_cdk.aws_stepfunctions\naws_cdk.aws_stepfunctions_tasks\naws_cdk.aws_stepfunctions_tasks\naws_cdk.aws_supportapp\naws_cdk.aws_supportapp\naws_cdk.aws_synthetics\naws_cdk.aws_synthetics\naws_cdk.aws_systemsmanagersap\naws_cdk.aws_systemsmanagersap\naws_cdk.aws_timestream\naws_cdk.aws_timestream\naws_cdk.aws_verifiedpermissions\naws_cdk.aws_verifiedpermissions\naws_cdk.aws_vpclattice\naws_cdk.aws_vpclattice\naws_cdk.aws_wafregional\naws_cdk.aws_wafregional\naws_cdk.aws_workspaces\naws_cdk.aws_workspaces\naws_cdk.aws_workspacesthinclient\naws_cdk.aws_workspacesthinclient\naws_cdk.aws_workspacesweb\naws_cdk.aws_workspacesweb\naws_cdk.cloud_assembly_schema\naws_cdk.cloud_assembly_schema\naws_cdk.cloudformation_include\naws_cdk.cloudformation_include\naws_cdk.custom_resources\naws_cdk.custom_resources\naws_cdk.integ_tests_alpha\naws_cdk.integ_tests_alpha\naws_cdk.lambda_layer_awscli\naws_cdk.lambda_layer_awscli\naws_cdk.lambda_layer_node_proxy_agent\naws_cdk.lambda_layer_node_proxy_agent\n© Copyright 2025, Amazon Web Services.\n© Copyright 2025, Amazon Web Services.\n\n\nAWS CDK 2.193.0 API


Packages

Package
Description
software.amazon.awscdk

AWS Cloud Development Kit Library

software.amazon.awscdk.alexa.ask

Alexa Skills Kit Construct Library

software.amazon.awscdk.app.staging.synthesizer.alpha

App Staging Synthesizer

software.amazon.awscdk.assertions

Assertions

software.amazon.awscdk.aws_apigatewayv2_authorizers

AWS APIGatewayv2 Authorizers

software.amazon.awscdk.aws_apigatewayv2_integrations

AWS APIGatewayv2 Integrations

software.amazon.awscdk.cloud_assembly_schema

Cloud Assembly Schema

software.amazon.awscdk.cloudformation.include

Include CloudFormation templates in the CDK

software.amazon.awscdk.customresources

AWS CDK Custom Resources

software.amazon.awscdk.cxapi

Cloud Executable API

software.amazon.awscdk.integtests.alpha

integ-tests

software.amazon.awscdk.lambda.layer.node.proxy.agent

AWS Lambda Layer with the NPM dependency proxy-agent

software.amazon.awscdk.lambdalayer.awscli

AWS Lambda Layer with AWS CLI

software.amazon.awscdk.pipelines

CDK Pipelines

software.amazon.awscdk.regioninfo

AWS Region-Specific Information Directory

software.amazon.awscdk.services.accessanalyzer

AWS::AccessAnalyzer Construct Library

software.amazon.awscdk.services.acmpca

AWS::ACMPCA Construct Library

software.amazon.awscdk.services.amazonmq

Amazon MQ Construct Library

software.amazon.awscdk.services.amplify

AWS Amplify Construct Library

software.amazon.awscdk.services.amplify.alpha

AWS Amplify Construct Library

software.amazon.awscdk.services.amplifyuibuilder

AWS::AmplifyUIBuilder Construct Library

software.amazon.awscdk.services.apigateway

Amazon API Gateway Construct Library

software.amazon.awscdk.services.apigatewayv2

AWS APIGatewayv2 Construct Library

software.amazon.awscdk.services.appconfig

AWS AppConfig Construct Library

software.amazon.awscdk.services.appflow

AWS::AppFlow Construct Library

software.amazon.awscdk.services.appintegrations

AWS::AppIntegrations Construct Library

software.amazon.awscdk.services.applicationautoscaling

AWS Auto Scaling Construct Library

software.amazon.awscdk.services.applicationinsights

AWS::ApplicationInsights Construct Library

software.amazon.awscdk.services.applicationsignals

AWS::ApplicationSignals Construct Library

software.amazon.awscdk.services.applicationsignals.alpha

AWS::ApplicationSignals Construct Library

software.amazon.awscdk.services.appmesh

AWS App Mesh Construct Library

software.amazon.awscdk.services.apprunner

AWS::AppRunner Construct Library

software.amazon.awscdk.services.apprunner.alpha

AWS::AppRunner Construct Library

software.amazon.awscdk.services.appstream

Amazon AppStream 2.0 Construct Library

software.amazon.awscdk.services.appsync

AWS AppSync Construct Library

software.amazon.awscdk.services.apptest

AWS::AppTest Construct Library

software.amazon.awscdk.services.aps

AWS::APS Construct Library

software.amazon.awscdk.services.arczonalshift

AWS::ARCZonalShift Construct Library

software.amazon.awscdk.services.athena

Amazon Athena Construct Library

software.amazon.awscdk.services.auditmanager

AWS::AuditManager Construct Library

software.amazon.awscdk.services.autoscaling

Amazon EC2 Auto Scaling Construct Library

software.amazon.awscdk.services.autoscaling.common

AWS AutoScaling Common Library

software.amazon.awscdk.services.autoscaling.hooktargets

Lifecycle Hook for the CDK AWS AutoScaling Library

software.amazon.awscdk.services.autoscalingplans

AWS Auto Scaling Plans Construct Library

software.amazon.awscdk.services.b2bi

AWS::B2BI Construct Library

software.amazon.awscdk.services.backup

AWS Backup Construct Library

software.amazon.awscdk.services.backupgateway

AWS::BackupGateway Construct Library

software.amazon.awscdk.services.batch

AWS Batch Construct Library

software.amazon.awscdk.services.bcmdataexports

AWS::BCMDataExports Construct Library

software.amazon.awscdk.services.bedrock

Amazon Bedrock Construct Library

software.amazon.awscdk.services.billingconductor

AWS::BillingConductor Construct Library

software.amazon.awscdk.services.budgets

AWS Budgets Construct Library

software.amazon.awscdk.services.cassandra

AWS::Cassandra Construct Library

software.amazon.awscdk.services.ce

AWS::CE Construct Library

software.amazon.awscdk.services.certificatemanager

AWS Certificate Manager Construct Library

software.amazon.awscdk.services.chatbot

AWS::Chatbot Construct Library

software.amazon.awscdk.services.cleanrooms

AWS::CleanRooms Construct Library

software.amazon.awscdk.services.cleanroomsml

AWS::CleanRoomsML Construct Library

software.amazon.awscdk.services.cloud9

AWS Cloud9 Construct Library

software.amazon.awscdk.services.cloud9.alpha

AWS Cloud9 Construct Library

software.amazon.awscdk.services.cloudformation

AWS CloudFormation Construct Library

software.amazon.awscdk.services.cloudfront

Amazon CloudFront Construct Library

software.amazon.awscdk.services.cloudfront.experimental
 
software.amazon.awscdk.services.cloudfront.origins

CloudFront Origins for the CDK CloudFront Library

software.amazon.awscdk.services.cloudtrail

AWS CloudTrail Construct Library

software.amazon.awscdk.services.cloudwatch

Amazon CloudWatch Construct Library

software.amazon.awscdk.services.cloudwatch.actions

CloudWatch Alarm Actions library

software.amazon.awscdk.services.codeartifact

AWS::CodeArtifact Construct Library

software.amazon.awscdk.services.codebuild

AWS CodeBuild Construct Library

software.amazon.awscdk.services.codecommit

AWS CodeCommit Construct Library

software.amazon.awscdk.services.codeconnections

AWS::CodeConnections Construct Library

software.amazon.awscdk.services.codedeploy

AWS CodeDeploy Construct Library

software.amazon.awscdk.services.codeguruprofiler

AWS::CodeGuruProfiler Construct Library

software.amazon.awscdk.services.codegurureviewer

AWS::CodeGuruReviewer Construct Library

software.amazon.awscdk.services.codepipeline

AWS CodePipeline Construct Library

software.amazon.awscdk.services.codepipeline.actions

AWS CodePipeline Actions

software.amazon.awscdk.services.codestar

AWS::CodeStar Construct Library

software.amazon.awscdk.services.codestar.alpha

AWS::CodeStar Construct Library

software.amazon.awscdk.services.codestarconnections

AWS::CodeStarConnections Construct Library

software.amazon.awscdk.services.codestarnotifications

AWS CodeStarNotifications Construct Library

software.amazon.awscdk.services.cognito

Amazon Cognito Construct Library

software.amazon.awscdk.services.cognito.identitypool

Amazon Cognito Identity Pool Construct Library

software.amazon.awscdk.services.comprehend

AWS::Comprehend Construct Library

software.amazon.awscdk.services.config

AWS Config Construct Library

software.amazon.awscdk.services.connect

AWS::Connect Construct Library

software.amazon.awscdk.services.connectcampaigns

AWS::ConnectCampaigns Construct Library

software.amazon.awscdk.services.connectcampaignsv2

AWS::ConnectCampaignsV2 Construct Library

software.amazon.awscdk.services.controltower

AWS::ControlTower Construct Library

software.amazon.awscdk.services.cur

AWS::CUR Construct Library

software.amazon.awscdk.services.customerprofiles

AWS::CustomerProfiles Construct Library

software.amazon.awscdk.services.databrew

AWS::DataBrew Construct Library

software.amazon.awscdk.services.datapipeline

AWS Data Pipeline Construct Library

software.amazon.awscdk.services.datasync

AWS::DataSync Construct Library

software.amazon.awscdk.services.datazone

AWS::DataZone Construct Library

software.amazon.awscdk.services.dax

Amazon DynamoDB Accelerator Construct Library

software.amazon.awscdk.services.deadline

AWS::Deadline Construct Library

software.amazon.awscdk.services.detective

AWS::Detective Construct Library

software.amazon.awscdk.services.devicefarm

AWS::DeviceFarm Construct Library

software.amazon.awscdk.services.devopsguru

AWS::DevOpsGuru Construct Library

software.amazon.awscdk.services.directoryservice

AWS Directory Service Construct Library

software.amazon.awscdk.services.dlm

Amazon Data Lifecycle Manager Construct Library

software.amazon.awscdk.services.dms

AWS Database Migration Service Construct Library

software.amazon.awscdk.services.docdb

Amazon DocumentDB Construct Library

software.amazon.awscdk.services.docdbelastic

AWS::DocDBElastic Construct Library

software.amazon.awscdk.services.dsql

AWS::DSQL Construct Library

software.amazon.awscdk.services.dynamodb

Amazon DynamoDB Construct Library

software.amazon.awscdk.services.ec2

Amazon EC2 Construct Library

software.amazon.awscdk.services.ec2.alpha

Amazon VpcV2 Construct Library

software.amazon.awscdk.services.ecr

Amazon ECR Construct Library

software.amazon.awscdk.services.ecr.assets

AWS CDK Docker Image Assets

software.amazon.awscdk.services.ecs

Amazon ECS Construct Library

software.amazon.awscdk.services.ecs.patterns

CDK Construct library for higher-level ECS Constructs

software.amazon.awscdk.services.efs

Amazon Elastic File System Construct Library

software.amazon.awscdk.services.eks

Amazon EKS Construct Library

software.amazon.awscdk.services.eks.v2.alpha

Amazon EKS V2 Construct Library

software.amazon.awscdk.services.elasticache

Amazon ElastiCache Construct Library

software.amazon.awscdk.services.elasticbeanstalk

AWS Elastic Beanstalk Construct Library

software.amazon.awscdk.services.elasticloadbalancing

Amazon Elastic Load Balancing Construct Library

software.amazon.awscdk.services.elasticloadbalancingv2

Amazon Elastic Load Balancing V2 Construct Library

software.amazon.awscdk.services.elasticloadbalancingv2.actions

Actions for AWS Elastic Load Balancing V2

software.amazon.awscdk.services.elasticloadbalancingv2.targets

Targets for AWS Elastic Load Balancing V2

software.amazon.awscdk.services.elasticsearch

Amazon OpenSearch Service Construct Library

software.amazon.awscdk.services.emr

Amazon EMR Construct Library

software.amazon.awscdk.services.emrcontainers

AWS::EMRContainers Construct Library

software.amazon.awscdk.services.emrserverless

AWS::EMRServerless Construct Library

software.amazon.awscdk.services.entityresolution

AWS::EntityResolution Construct Library

software.amazon.awscdk.services.events

Amazon EventBridge Construct Library

software.amazon.awscdk.services.events.targets

Event Targets for Amazon EventBridge

software.amazon.awscdk.services.eventschemas

AWS::EventSchemas Construct Library

software.amazon.awscdk.services.evidently

AWS::Evidently Construct Library

software.amazon.awscdk.services.finspace

AWS::FinSpace Construct Library

software.amazon.awscdk.services.fis

AWS::FIS Construct Library

software.amazon.awscdk.services.fms

AWS::FMS Construct Library

software.amazon.awscdk.services.forecast

AWS::Forecast Construct Library

software.amazon.awscdk.services.frauddetector

AWS::FraudDetector Construct Library

software.amazon.awscdk.services.fsx

Amazon FSx Construct Library

software.amazon.awscdk.services.gamelift

Amazon GameLift Construct Library

software.amazon.awscdk.services.gamelift.alpha

Amazon GameLift Construct Library

software.amazon.awscdk.services.gameliftstreams

AWS::GameLiftStreams Construct Library

software.amazon.awscdk.services.globalaccelerator

AWS::GlobalAccelerator Construct Library

software.amazon.awscdk.services.globalaccelerator.endpoints

Endpoints for AWS Global Accelerator

software.amazon.awscdk.services.glue

AWS Glue Construct Library

software.amazon.awscdk.services.glue.alpha

AWS Glue Construct Library

software.amazon.awscdk.services.grafana

AWS::Grafana Construct Library

software.amazon.awscdk.services.greengrass

AWS IoT Greengrass Construct Library

software.amazon.awscdk.services.greengrassv2

AWS::GreengrassV2 Construct Library

software.amazon.awscdk.services.groundstation

AWS::GroundStation Construct Library

software.amazon.awscdk.services.guardduty

Amazon GuardDuty Construct Library

software.amazon.awscdk.services.healthimaging

AWS::HealthImaging Construct Library

software.amazon.awscdk.services.healthlake

AWS::HealthLake Construct Library

software.amazon.awscdk.services.iam

AWS Identity and Access Management Construct Library

software.amazon.awscdk.services.identitystore

AWS::IdentityStore Construct Library

software.amazon.awscdk.services.imagebuilder

AWS::ImageBuilder Construct Library

software.amazon.awscdk.services.inspector

Amazon Inspector Construct Library

software.amazon.awscdk.services.inspectorv2

AWS::InspectorV2 Construct Library

software.amazon.awscdk.services.internetmonitor

AWS::InternetMonitor Construct Library

software.amazon.awscdk.services.invoicing

AWS::Invoicing Construct Library

software.amazon.awscdk.services.iot

AWS IoT Construct Library

software.amazon.awscdk.services.iot.actions.alpha

Actions for AWS IoT Rule

software.amazon.awscdk.services.iot.alpha

AWS IoT Construct Library

software.amazon.awscdk.services.iotanalytics

AWS IoT Analytics Construct Library

software.amazon.awscdk.services.iotcoredeviceadvisor

AWS::IoTCoreDeviceAdvisor Construct Library

software.amazon.awscdk.services.iotevents

AWS::IoTEvents Construct Library

software.amazon.awscdk.services.iotevents.actions.alpha

Actions for AWS::IoTEvents Detector Model

software.amazon.awscdk.services.iotevents.alpha

AWS::IoTEvents Construct Library

software.amazon.awscdk.services.iotfleethub

AWS::IoTFleetHub Construct Library

software.amazon.awscdk.services.iotfleetwise

AWS::IoTFleetWise Construct Library

software.amazon.awscdk.services.iotsitewise

AWS::IoTSiteWise Construct Library

software.amazon.awscdk.services.iotthingsgraph

AWS IoT Things Graph Construct Library

software.amazon.awscdk.services.iottwinmaker

AWS::IoTTwinMaker Construct Library

software.amazon.awscdk.services.iotwireless

AWS::IoTWireless Construct Library

software.amazon.awscdk.services.ivs

AWS::IVS Construct Library

software.amazon.awscdk.services.ivs.alpha

AWS::IVS Construct Library

software.amazon.awscdk.services.ivschat

AWS::IVSChat Construct Library

software.amazon.awscdk.services.kafkaconnect

AWS::KafkaConnect Construct Library

software.amazon.awscdk.services.kendra

AWS::Kendra Construct Library

software.amazon.awscdk.services.kendraranking

AWS::KendraRanking Construct Library

software.amazon.awscdk.services.kinesis

Amazon Kinesis Construct Library

software.amazon.awscdk.services.kinesisanalytics

Amazon Kinesis Data Analytics Construct Library

software.amazon.awscdk.services.kinesisanalytics.flink.alpha

Kinesis Analytics Flink

software.amazon.awscdk.services.kinesisanalyticsv2

AWS::KinesisAnalyticsV2 Construct Library

software.amazon.awscdk.services.kinesisfirehose

Amazon Data Firehose Construct Library

software.amazon.awscdk.services.kinesisvideo

AWS::KinesisVideo Construct Library

software.amazon.awscdk.services.kms

AWS Key Management Service Construct Library

software.amazon.awscdk.services.lakeformation

AWS::LakeFormation Construct Library

software.amazon.awscdk.services.lambda

AWS Lambda Construct Library

software.amazon.awscdk.services.lambda.destinations

Amazon Lambda Destinations Library

software.amazon.awscdk.services.lambda.eventsources

AWS Lambda Event Sources

software.amazon.awscdk.services.lambda.go.alpha

Amazon Lambda Golang Library

software.amazon.awscdk.services.lambda.nodejs

Amazon Lambda Node.js Library

software.amazon.awscdk.services.lambda.python.alpha

Amazon Lambda Python Library

software.amazon.awscdk.services.launchwizard

AWS::LaunchWizard Construct Library

software.amazon.awscdk.services.lex

AWS::Lex Construct Library

software.amazon.awscdk.services.licensemanager

AWS::LicenseManager Construct Library

software.amazon.awscdk.services.lightsail

AWS::Lightsail Construct Library

software.amazon.awscdk.services.location

AWS::Location Construct Library

software.amazon.awscdk.services.location.alpha

AWS::Location Construct Library

software.amazon.awscdk.services.logs

Amazon CloudWatch Logs Construct Library

software.amazon.awscdk.services.logs.destinations

AWS CloudWatch Logs Subscription Destination Library

software.amazon.awscdk.services.lookoutequipment

AWS::LookoutEquipment Construct Library

software.amazon.awscdk.services.lookoutmetrics

AWS::LookoutMetrics Construct Library

software.amazon.awscdk.services.lookoutvision

AWS::LookoutVision Construct Library

software.amazon.awscdk.services.m2

AWS::M2 Construct Library

software.amazon.awscdk.services.macie

AWS::Macie Construct Library

software.amazon.awscdk.services.managedblockchain

AWS::ManagedBlockchain Construct Library

software.amazon.awscdk.services.mediaconnect

AWS::MediaConnect Construct Library

software.amazon.awscdk.services.mediaconvert

AWS::MediaConvert Construct Library

software.amazon.awscdk.services.medialive

AWS Elemental MediaLive Construct Library

software.amazon.awscdk.services.mediapackage

AWS::MediaPackage Construct Library

software.amazon.awscdk.services.mediapackagev2

AWS::MediaPackageV2 Construct Library

software.amazon.awscdk.services.mediastore

AWS Elemental MediaStore Construct Library

software.amazon.awscdk.services.mediatailor

AWS::MediaTailor Construct Library

software.amazon.awscdk.services.memorydb

AWS::MemoryDB Construct Library

software.amazon.awscdk.services.msk

Amazon Managed Streaming for Apache Kafka Construct Library

software.amazon.awscdk.services.msk.alpha

Amazon Managed Streaming for Apache Kafka Construct Library

software.amazon.awscdk.services.mwaa

AWS::MWAA Construct Library

software.amazon.awscdk.services.neptune

Amazon Neptune Construct Library

software.amazon.awscdk.services.neptune.alpha

Amazon Neptune Construct Library

software.amazon.awscdk.services.neptunegraph

AWS::NeptuneGraph Construct Library

software.amazon.awscdk.services.networkfirewall

AWS::NetworkFirewall Construct Library

software.amazon.awscdk.services.networkmanager

AWS::NetworkManager Construct Library

software.amazon.awscdk.services.nimblestudio

AWS::NimbleStudio Construct Library

software.amazon.awscdk.services.notifications

AWS::Notifications Construct Library

software.amazon.awscdk.services.notificationscontacts

AWS::NotificationsContacts Construct Library

software.amazon.awscdk.services.oam

AWS::Oam Construct Library

software.amazon.awscdk.services.omics

AWS::Omics Construct Library

software.amazon.awscdk.services.opensearchserverless

AWS::OpenSearchServerless Construct Library

software.amazon.awscdk.services.opensearchservice

Amazon OpenSearch Service Construct Library

software.amazon.awscdk.services.opsworks

AWS OpsWorks Construct Library

software.amazon.awscdk.services.opsworkscm

AWS OpsWorks CM Construct Library

software.amazon.awscdk.services.organizations

AWS::Organizations Construct Library

software.amazon.awscdk.services.osis

AWS::OSIS Construct Library

software.amazon.awscdk.services.panorama

AWS::Panorama Construct Library

software.amazon.awscdk.services.paymentcryptography

AWS::PaymentCryptography Construct Library

software.amazon.awscdk.services.pcaconnectorad

AWS::PCAConnectorAD Construct Library

software.amazon.awscdk.services.pcaconnectorscep

AWS::PCAConnectorSCEP Construct Library

software.amazon.awscdk.services.pcs

AWS::PCS Construct Library

software.amazon.awscdk.services.personalize

AWS::Personalize Construct Library

software.amazon.awscdk.services.pinpoint

Amazon Pinpoint Construct Library

software.amazon.awscdk.services.pinpointemail

Amazon Pinpoint Email Construct Library

software.amazon.awscdk.services.pipes

AWS::Pipes Construct Library

software.amazon.awscdk.services.pipes.alpha

Amazon EventBridge Pipes Construct Library

software.amazon.awscdk.services.pipes.enrichments.alpha

Amazon EventBridge Pipes Enrichments Construct Library

software.amazon.awscdk.services.pipes.sources.alpha

Amazon EventBridge Pipes Sources Construct Library

software.amazon.awscdk.services.pipes.targets.alpha

Amazon EventBridge Pipes Targets Construct Library

software.amazon.awscdk.services.proton

AWS::Proton Construct Library

software.amazon.awscdk.services.qbusiness

AWS::QBusiness Construct Library

software.amazon.awscdk.services.qldb

AWS::QLDB Construct Library

software.amazon.awscdk.services.quicksight

AWS::QuickSight Construct Library

software.amazon.awscdk.services.ram

AWS Resource Access Manager Construct Library

software.amazon.awscdk.services.rbin

AWS::Rbin Construct Library

software.amazon.awscdk.services.rds

Amazon Relational Database Service Construct Library

software.amazon.awscdk.services.redshift

Amazon Redshift Construct Library

software.amazon.awscdk.services.redshift.alpha

Amazon Redshift Construct Library

software.amazon.awscdk.services.redshiftserverless

AWS::RedshiftServerless Construct Library

software.amazon.awscdk.services.refactorspaces

AWS::RefactorSpaces Construct Library

software.amazon.awscdk.services.rekognition

AWS::Rekognition Construct Library

software.amazon.awscdk.services.resiliencehub

AWS::ResilienceHub Construct Library

software.amazon.awscdk.services.resourceexplorer2

AWS::ResourceExplorer2 Construct Library

software.amazon.awscdk.services.resourcegroups

AWS::ResourceGroups Construct Library

software.amazon.awscdk.services.robomaker

AWS RoboMaker Construct Library

software.amazon.awscdk.services.rolesanywhere

AWS::RolesAnywhere Construct Library

software.amazon.awscdk.services.route53

Amazon Route53 Construct Library

software.amazon.awscdk.services.route53.patterns

CDK Construct library for higher-level Route 53 Constructs

software.amazon.awscdk.services.route53.targets

Route53 Alias Record Targets for the CDK Route53 Library

software.amazon.awscdk.services.route53profiles

AWS::Route53Profiles Construct Library

software.amazon.awscdk.services.route53recoverycontrol

AWS::Route53RecoveryControl Construct Library

software.amazon.awscdk.services.route53recoveryreadiness

AWS::Route53RecoveryReadiness Construct Library

software.amazon.awscdk.services.route53resolver

Amazon Route53 Resolver Construct Library

software.amazon.awscdk.services.route53resolver.alpha

Amazon Route53 Resolver Construct Library

software.amazon.awscdk.services.rum

AWS::RUM Construct Library

software.amazon.awscdk.services.s3

Amazon S3 Construct Library

software.amazon.awscdk.services.s3.assets

AWS CDK Assets

software.amazon.awscdk.services.s3.deployment

AWS S3 Deployment Construct Library

software.amazon.awscdk.services.s3.notifications

S3 Bucket Notifications Destinations

software.amazon.awscdk.services.s3express

AWS::S3Express Construct Library

software.amazon.awscdk.services.s3objectlambda

AWS::S3ObjectLambda Construct Library

software.amazon.awscdk.services.s3objectlambda.alpha

AWS::S3ObjectLambda Construct Library

software.amazon.awscdk.services.s3outposts

AWS::S3Outposts Construct Library

software.amazon.awscdk.services.s3tables

AWS::S3Tables Construct Library

software.amazon.awscdk.services.s3tables.alpha

Amazon S3 Tables Construct Library

software.amazon.awscdk.services.sagemaker

Amazon SageMaker Construct Library

software.amazon.awscdk.services.sagemaker.alpha

Amazon SageMaker Construct Library

software.amazon.awscdk.services.sam

AWS Serverless Application Model Construct Library

software.amazon.awscdk.services.scheduler

Amazon EventBridge Scheduler Construct Library

software.amazon.awscdk.services.scheduler.targets

Amazon EventBridge Scheduler Targets Construct Library

software.amazon.awscdk.services.sdb

Amazon SimpleDB Construct Library

software.amazon.awscdk.services.secretsmanager

AWS Secrets Manager Construct Library

software.amazon.awscdk.services.securityhub

AWS Security Hub Construct Library

software.amazon.awscdk.services.securitylake

AWS::SecurityLake Construct Library

software.amazon.awscdk.services.servicecatalog

AWS Service Catalog Construct Library

software.amazon.awscdk.services.servicecatalogappregistry

AWS::ServiceCatalogAppRegistry Construct Library

software.amazon.awscdk.services.servicecatalogappregistry.alpha

AWS ServiceCatalogAppRegistry Construct Library

software.amazon.awscdk.services.servicediscovery

Amazon ECS Service Discovery Construct Library

software.amazon.awscdk.services.ses

Amazon Simple Email Service Construct Library

software.amazon.awscdk.services.ses.actions

Amazon Simple Email Service Actions Library

software.amazon.awscdk.services.shield

AWS::Shield Construct Library

software.amazon.awscdk.services.signer

AWS::Signer Construct Library

software.amazon.awscdk.services.simspaceweaver

AWS::SimSpaceWeaver Construct Library

software.amazon.awscdk.services.sns

Amazon Simple Notification Service Construct Library

software.amazon.awscdk.services.sns.subscriptions

CDK Construct Library for Amazon Simple Notification Service Subscriptions

software.amazon.awscdk.services.sqs

Amazon Simple Queue Service Construct Library

software.amazon.awscdk.services.ssm

AWS Systems Manager Construct Library

software.amazon.awscdk.services.ssmcontacts

AWS::SSMContacts Construct Library

software.amazon.awscdk.services.ssmincidents

AWS::SSMIncidents Construct Library

software.amazon.awscdk.services.ssmquicksetup

AWS::SSMQuickSetup Construct Library

software.amazon.awscdk.services.sso

AWS::SSO Construct Library

software.amazon.awscdk.services.stepfunctions

AWS Step Functions Construct Library

software.amazon.awscdk.services.stepfunctions.tasks

Tasks for AWS Step Functions

software.amazon.awscdk.services.supportapp

AWS::SupportApp Construct Library

software.amazon.awscdk.services.synthetics

Amazon CloudWatch Synthetics Construct Library

software.amazon.awscdk.services.systemsmanagersap

AWS::SystemsManagerSAP Construct Library

software.amazon.awscdk.services.timestream

AWS::Timestream Construct Library

software.amazon.awscdk.services.transfer

AWS Transfer for SFTP Construct Library

software.amazon.awscdk.services.verifiedpermissions

AWS::VerifiedPermissions Construct Library

software.amazon.awscdk.services.voiceid

AWS::VoiceID Construct Library

software.amazon.awscdk.services.vpclattice

AWS::VpcLattice Construct Library

software.amazon.awscdk.services.waf

AWS Web Application Firewall Construct Library

software.amazon.awscdk.services.waf.regional

AWS WAF Regional Construct Library

software.amazon.awscdk.services.wafv2

AWS::WAFv2 Construct Library

software.amazon.awscdk.services.wisdom

AWS::Wisdom Construct Library

software.amazon.awscdk.services.workspaces

Amazon WorkSpaces Construct Library

software.amazon.awscdk.services.workspacesthinclient

AWS::WorkSpacesThinClient Construct Library

software.amazon.awscdk.services.workspacesweb

AWS::WorkSpacesWeb Construct Library

software.amazon.awscdk.services.xray

AWS::XRay Construct Library

software.amazon.awscdk.triggers

Triggers\n\n\n\nClick on a module in the left sidebar to view its documentation.\n\nClick on a module in the left sidebar to view its documentation.\n\n\n\n\n\nclass AssetStaging (construct)


LanguageType name


 .NETAmazon.CDK.AssetStaging
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#AssetStaging
 Javasoftware.amazon.awscdk.AssetStaging
 Pythonaws_cdk.AssetStaging
 TypeScript (source)aws-cdk-lib » AssetStaging


Implements
IConstruct, IDependable
Stages a file or directory from a location on the file system into a staging directory.
This is controlled by the context key 'aws:cdk:asset-staging' and enabled
by the CLI by default in order to ensure that when the CDK app exists, all
assets are available for deployment. Otherwise, if an app references assets
in temporary locations, those will not be available when it exists (see
https://github.com/aws/aws-cdk/issues/1716).
The stagedPath property is a stringified token that represents the location
of the file or directory after staging. It will be resolved only during the
"prepare" stage and may be either the original path or the staged path
depending on the context setting.
The file/directory are staged based on their content hash (fingerprint). This
means that only if content was changed, copy will happen.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';

declare const dockerImage: cdk.DockerImage;
declare const localBundling: cdk.ILocalBundling;
const assetStaging = new cdk.AssetStaging(this, 'MyAssetStaging', {
  sourcePath: 'sourcePath',

  // the properties below are optional
  assetHash: 'assetHash',
  assetHashType: cdk.AssetHashType.SOURCE,
  bundling: {
    image: dockerImage,

    // the properties below are optional
    bundlingFileAccess: cdk.BundlingFileAccess.VOLUME_COPY,
    command: ['command'],
    entrypoint: ['entrypoint'],
    environment: {
      environmentKey: 'environment',
    },
    local: localBundling,
    network: 'network',
    outputType: cdk.BundlingOutput.ARCHIVED,
    platform: 'platform',
    securityOpt: 'securityOpt',
    user: 'user',
    volumes: [{
      containerPath: 'containerPath',
      hostPath: 'hostPath',

      // the properties below are optional
      consistency: cdk.DockerVolumeConsistency.CONSISTENT,
    }],
    volumesFrom: ['volumesFrom'],
    workingDirectory: 'workingDirectory',
  },
  exclude: ['exclude'],
  extraHash: 'extraHash',
  follow: cdk.SymlinkFollowMode.NEVER,
  ignoreMode: cdk.IgnoreMode.GLOB,
});

Initializer
new AssetStaging(scope: Construct, id: string, props: AssetStagingProps)

Parameters

scope Construct
id string
props AssetStagingProps

Construct Props


NameTypeDescription


sourcePathstringThe source file or directory to copy from.
assetHash?stringSpecify a custom hash for this asset.
assetHashType?AssetHashTypeSpecifies the type of hash to calculate for this asset.
bundling?BundlingOptionsBundle the asset by executing a command in a Docker container or a custom bundling provider.
exclude?string[]File paths matching the patterns will be excluded.
extraHash?stringExtra information to encode into the fingerprint (e.g. build instructions and other inputs).
follow?SymlinkFollowModeA strategy for how to handle symlinks.
ignoreMode?IgnoreModeThe ignore behavior to use for exclude patterns.



sourcePath
Type:
string
The source file or directory to copy from.

assetHash?
Type:
string
(optional, default: based on assetHashType)
Specify a custom hash for this asset.
If assetHashType is set it must
be set to AssetHashType.CUSTOM. For consistency, this custom hash will
be SHA256 hashed and encoded as hex. The resulting hash will be the asset
hash.
NOTE: the hash is used in order to identify a specific revision of the asset, and
used for optimizing and caching deployment activities related to this asset such as
packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will
need to make sure it is updated every time the asset changes, or otherwise it is
possible that some deployments will not be invalidated.

assetHashType?
Type:
AssetHashType
(optional, default: the default is AssetHashType.SOURCE, but if assetHash is
explicitly specified this value defaults to AssetHashType.CUSTOM.)
Specifies the type of hash to calculate for this asset.
If assetHash is configured, this option must be undefined or
AssetHashType.CUSTOM.

bundling?
Type:
BundlingOptions
(optional, default: uploaded as-is to S3 if the asset is a regular file or a .zip file,
archived into a .zip file and uploaded to S3 otherwise)
Bundle the asset by executing a command in a Docker container or a custom bundling provider.
The asset path will be mounted at /asset-input. The Docker
container is responsible for putting content at /asset-output.
The content at /asset-output will be zipped and used as the
final asset.

exclude?
Type:
string[]
(optional, default: nothing is excluded)
File paths matching the patterns will be excluded.
See ignoreMode to set the matching behavior.
Has no effect on Assets bundled using the bundling property.

extraHash?
Type:
string
(optional, default: hash is only based on source content)
Extra information to encode into the fingerprint (e.g. build instructions and other inputs).

follow?
Type:
SymlinkFollowMode
(optional, default: SymlinkFollowMode.NEVER)
A strategy for how to handle symlinks.

ignoreMode?
Type:
IgnoreMode
(optional, default: IgnoreMode.GLOB)
The ignore behavior to use for exclude patterns.
Properties


NameTypeDescription


absoluteStagedPathstringAbsolute path to the asset data.
assetHashstringA cryptographic hash of the asset.
isArchivebooleanWhether this asset is an archive (zip or jar).
nodeNodeThe tree node.
packagingFileAssetPackagingHow this asset should be packaged.
sourcePathstringThe absolute path of the asset as it was referenced by the user.
static BUNDLING_INPUT_DIRstringThe directory inside the bundling container into which the asset sources will be mounted.
static BUNDLING_OUTPUT_DIRstringThe directory inside the bundling container into which the bundled output should be written.



absoluteStagedPath
Type:
string
Absolute path to the asset data.
If asset staging is disabled, this will just be the source path or
a temporary directory used for bundling.
If asset staging is enabled it will be the staged path.
IMPORTANT: If you are going to call addFileAsset(), use
relativeStagedPath() instead.

assetHash
Type:
string
A cryptographic hash of the asset.

isArchive
Type:
boolean
Whether this asset is an archive (zip or jar).

node
Type:
Node
The tree node.

packaging
Type:
FileAssetPackaging
How this asset should be packaged.

sourcePath
Type:
string
The absolute path of the asset as it was referenced by the user.

static BUNDLING_INPUT_DIR
Type:
string
The directory inside the bundling container into which the asset sources will be mounted.

static BUNDLING_OUTPUT_DIR
Type:
string
The directory inside the bundling container into which the bundled output should be written.
Methods


NameDescription


relativeStagedPath(stack)Return the path to the staged asset, relative to the Cloud Assembly (manifest) directory of the given stack.
toString()Returns a string representation of this construct.
static clearAssetHashCache()Clears the asset hash cache.



relativeStagedPath(stack)
public relativeStagedPath(stack: Stack): string

Parameters

stack Stack

Returns

string

Return the path to the staged asset, relative to the Cloud Assembly (manifest) directory of the given stack.
Only returns a relative path if the asset was staged, returns an absolute path if
it was not staged.
A bundled asset might end up in the outDir and still not count as
"staged"; if asset staging is disabled we're technically expected to
reference source directories, but we don't have a source directory for the
bundled outputs (as the bundle output is written to a temporary
directory). Nevertheless, we will still return an absolute path.
A non-obvious directory layout may look like this:
  CLOUD ASSEMBLY ROOT
    +-- asset.12345abcdef/
    +-- assembly-Stage
          +-- MyStack.template.json
          +-- MyStack.assets.json <- will contain { "path": "../asset.12345abcdef" }


toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static clearAssetHashCache()
public static clearAssetHashCache(): void

Clears the asset hash cache.\n\nclass AssetStaging (construct)


LanguageType name


 .NETAmazon.CDK.AssetStaging
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#AssetStaging
 Javasoftware.amazon.awscdk.AssetStaging
 Pythonaws_cdk.AssetStaging
 TypeScript (source)aws-cdk-lib » AssetStaging


Implements
IConstruct, IDependable
Stages a file or directory from a location on the file system into a staging directory.
This is controlled by the context key 'aws:cdk:asset-staging' and enabled
by the CLI by default in order to ensure that when the CDK app exists, all
assets are available for deployment. Otherwise, if an app references assets
in temporary locations, those will not be available when it exists (see
https://github.com/aws/aws-cdk/issues/1716).
The stagedPath property is a stringified token that represents the location
of the file or directory after staging. It will be resolved only during the
"prepare" stage and may be either the original path or the staged path
depending on the context setting.
The file/directory are staged based on their content hash (fingerprint). This
means that only if content was changed, copy will happen.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';

declare const dockerImage: cdk.DockerImage;
declare const localBundling: cdk.ILocalBundling;
const assetStaging = new cdk.AssetStaging(this, 'MyAssetStaging', {
  sourcePath: 'sourcePath',

  // the properties below are optional
  assetHash: 'assetHash',
  assetHashType: cdk.AssetHashType.SOURCE,
  bundling: {
    image: dockerImage,

    // the properties below are optional
    bundlingFileAccess: cdk.BundlingFileAccess.VOLUME_COPY,
    command: ['command'],
    entrypoint: ['entrypoint'],
    environment: {
      environmentKey: 'environment',
    },
    local: localBundling,
    network: 'network',
    outputType: cdk.BundlingOutput.ARCHIVED,
    platform: 'platform',
    securityOpt: 'securityOpt',
    user: 'user',
    volumes: [{
      containerPath: 'containerPath',
      hostPath: 'hostPath',

      // the properties below are optional
      consistency: cdk.DockerVolumeConsistency.CONSISTENT,
    }],
    volumesFrom: ['volumesFrom'],
    workingDirectory: 'workingDirectory',
  },
  exclude: ['exclude'],
  extraHash: 'extraHash',
  follow: cdk.SymlinkFollowMode.NEVER,
  ignoreMode: cdk.IgnoreMode.GLOB,
});

Initializer
new AssetStaging(scope: Construct, id: string, props: AssetStagingProps)

Parameters

scope Construct
id string
props AssetStagingProps

Construct Props


NameTypeDescription


sourcePathstringThe source file or directory to copy from.
assetHash?stringSpecify a custom hash for this asset.
assetHashType?AssetHashTypeSpecifies the type of hash to calculate for this asset.
bundling?BundlingOptionsBundle the asset by executing a command in a Docker container or a custom bundling provider.
exclude?string[]File paths matching the patterns will be excluded.
extraHash?stringExtra information to encode into the fingerprint (e.g. build instructions and other inputs).
follow?SymlinkFollowModeA strategy for how to handle symlinks.
ignoreMode?IgnoreModeThe ignore behavior to use for exclude patterns.



sourcePath
Type:
string
The source file or directory to copy from.

assetHash?
Type:
string
(optional, default: based on assetHashType)
Specify a custom hash for this asset.
If assetHashType is set it must
be set to AssetHashType.CUSTOM. For consistency, this custom hash will
be SHA256 hashed and encoded as hex. The resulting hash will be the asset
hash.
NOTE: the hash is used in order to identify a specific revision of the asset, and
used for optimizing and caching deployment activities related to this asset such as
packaging, uploading to Amazon S3, etc. If you chose to customize the hash, you will
need to make sure it is updated every time the asset changes, or otherwise it is
possible that some deployments will not be invalidated.

assetHashType?
Type:
AssetHashType
(optional, default: the default is AssetHashType.SOURCE, but if assetHash is
explicitly specified this value defaults to AssetHashType.CUSTOM.)
Specifies the type of hash to calculate for this asset.
If assetHash is configured, this option must be undefined or
AssetHashType.CUSTOM.

bundling?
Type:
BundlingOptions
(optional, default: uploaded as-is to S3 if the asset is a regular file or a .zip file,
archived into a .zip file and uploaded to S3 otherwise)
Bundle the asset by executing a command in a Docker container or a custom bundling provider.
The asset path will be mounted at /asset-input. The Docker
container is responsible for putting content at /asset-output.
The content at /asset-output will be zipped and used as the
final asset.

exclude?
Type:
string[]
(optional, default: nothing is excluded)
File paths matching the patterns will be excluded.
See ignoreMode to set the matching behavior.
Has no effect on Assets bundled using the bundling property.

extraHash?
Type:
string
(optional, default: hash is only based on source content)
Extra information to encode into the fingerprint (e.g. build instructions and other inputs).

follow?
Type:
SymlinkFollowMode
(optional, default: SymlinkFollowMode.NEVER)
A strategy for how to handle symlinks.

ignoreMode?
Type:
IgnoreMode
(optional, default: IgnoreMode.GLOB)
The ignore behavior to use for exclude patterns.
Properties


NameTypeDescription


absoluteStagedPathstringAbsolute path to the asset data.
assetHashstringA cryptographic hash of the asset.
isArchivebooleanWhether this asset is an archive (zip or jar).
nodeNodeThe tree node.
packagingFileAssetPackagingHow this asset should be packaged.
sourcePathstringThe absolute path of the asset as it was referenced by the user.
static BUNDLING_INPUT_DIRstringThe directory inside the bundling container into which the asset sources will be mounted.
static BUNDLING_OUTPUT_DIRstringThe directory inside the bundling container into which the bundled output should be written.



absoluteStagedPath
Type:
string
Absolute path to the asset data.
If asset staging is disabled, this will just be the source path or
a temporary directory used for bundling.
If asset staging is enabled it will be the staged path.
IMPORTANT: If you are going to call addFileAsset(), use
relativeStagedPath() instead.

assetHash
Type:
string
A cryptographic hash of the asset.

isArchive
Type:
boolean
Whether this asset is an archive (zip or jar).

node
Type:
Node
The tree node.

packaging
Type:
FileAssetPackaging
How this asset should be packaged.

sourcePath
Type:
string
The absolute path of the asset as it was referenced by the user.

static BUNDLING_INPUT_DIR
Type:
string
The directory inside the bundling container into which the asset sources will be mounted.

static BUNDLING_OUTPUT_DIR
Type:
string
The directory inside the bundling container into which the bundled output should be written.
Methods


NameDescription


relativeStagedPath(stack)Return the path to the staged asset, relative to the Cloud Assembly (manifest) directory of the given stack.
toString()Returns a string representation of this construct.
static clearAssetHashCache()Clears the asset hash cache.



relativeStagedPath(stack)
public relativeStagedPath(stack: Stack): string

Parameters

stack Stack

Returns

string

Return the path to the staged asset, relative to the Cloud Assembly (manifest) directory of the given stack.
Only returns a relative path if the asset was staged, returns an absolute path if
it was not staged.
A bundled asset might end up in the outDir and still not count as
"staged"; if asset staging is disabled we're technically expected to
reference source directories, but we don't have a source directory for the
bundled outputs (as the bundle output is written to a temporary
directory). Nevertheless, we will still return an absolute path.
A non-obvious directory layout may look like this:
  CLOUD ASSEMBLY ROOT
    +-- asset.12345abcdef/
    +-- assembly-Stage
          +-- MyStack.template.json
          +-- MyStack.assets.json <- will contain { "path": "../asset.12345abcdef" }


toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static clearAssetHashCache()
public static clearAssetHashCache(): void

Clears the asset hash cache.\n\n\n\nclass CustomResource (construct)


LanguageType name


 .NETAmazon.CDK.CustomResource
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CustomResource
 Javasoftware.amazon.awscdk.CustomResource
 Pythonaws_cdk.CustomResource
 TypeScript (source)aws-cdk-lib » CustomResource


Implements
IConstruct, IDependable, IResource
Instantiation of a custom resource, whose implementation is provided a Provider.
This class is intended to be used by construct library authors. Application
builder should not be able to tell whether or not a construct is backed by
a custom resource, and so the use of this class should be invisible.
Instead, construct library authors declare a custom construct that hides the
choice of provider, and accepts a strongly-typed properties object with the
properties your provider accepts.
Your custom resource provider (identified by the serviceToken property)
can be one of 4 constructs:

If you are authoring a construct library or application, we recommend you
use the Provider class in the custom-resources module.
If you are authoring a construct for the CDK's AWS Construct Library,
you should use the CustomResourceProvider construct in this package.
If you want full control over the provider, you can always directly use
a Lambda Function or SNS Topic by passing the ARN into serviceToken.

Example
const stack = new Stack();
const durToken = new CfnParameter(stack, 'MyParameter', {
  type: 'Number',
  default: 60,
});
new CustomResource(stack, 'MyCustomResource', {
  serviceToken: 'MyServiceToken',
  serviceTimeout: Duration.seconds(durToken.valueAsNumber),
});

Initializer
new CustomResource(scope: Construct, id: string, props: CustomResourceProps)

Parameters

scope Construct
id string
props CustomResourceProps

Construct Props


NameTypeDescription


serviceTokenstringThe ARN of the provider which implements this custom resource type.
pascalCaseProperties?booleanConvert all property keys to pascal case.
properties?{ [string]: any }Properties to pass to the Lambda.
removalPolicy?RemovalPolicyThe policy to apply when this resource is removed from the application.
resourceType?stringFor custom resources, you can specify AWS::CloudFormation::CustomResource (the default) as the resource type, or you can specify your own resource type name.
serviceTimeout?DurationThe maximum time that can elapse before a custom resource operation times out.



serviceToken
Type:
string
The ARN of the provider which implements this custom resource type.
You can implement a provider by listening to raw AWS CloudFormation events
and specify the ARN of an SNS topic (topic.topicArn) or the ARN of an AWS
Lambda function (lambda.functionArn) or use the CDK's custom resource
provider framework which makes it easier to implement robust providers.
Provider framework:
// use the provider framework from aws-cdk/custom-resources:
const provider = new customresources.Provider(this, 'ResourceProvider', {
  onEventHandler,
  isCompleteHandler, // optional
});

new CustomResource(this, 'MyResource', {
  serviceToken: provider.serviceToken,
});

AWS Lambda function (not recommended to use AWS Lambda Functions directly,
see the module README):
// invoke an AWS Lambda function when a lifecycle event occurs:
new CustomResource(this, 'MyResource', {
  serviceToken: myFunction.functionArn,
});

SNS topic (not recommended to use AWS Lambda Functions directly, see the
module README):
// publish lifecycle events to an SNS topic:
new CustomResource(this, 'MyResource', {
  serviceToken: myTopic.topicArn,
});

Maps to ServiceToken property for the AWS::CloudFormation::CustomResource resource

pascalCaseProperties?
Type:
boolean
(optional, default: false)
Convert all property keys to pascal case.

properties?
Type:
{ [string]: any }
(optional, default: No properties.)
Properties to pass to the Lambda.
Values in this properties dictionary can possibly overwrite other values in CustomResourceProps
E.g. ServiceToken and ServiceTimeout
It is recommended to avoid using same keys that exist in CustomResourceProps

removalPolicy?
Type:
RemovalPolicy
(optional, default: cdk.RemovalPolicy.Destroy)
The policy to apply when this resource is removed from the application.

resourceType?
Type:
string
(optional, default: AWS::CloudFormation::CustomResource)
For custom resources, you can specify AWS::CloudFormation::CustomResource (the default) as the resource type, or you can specify your own resource type name.
For example, you can use "Custom::MyCustomResourceTypeName".
Custom resource type names must begin with "Custom::" and can include
alphanumeric characters and the following characters: _@-. You can specify
a custom resource type name up to a maximum length of 60 characters. You
cannot change the type during an update.
Using your own resource type names helps you quickly differentiate the
types of custom resources in your stack. For example, if you had two custom
resources that conduct two different ping tests, you could name their type
as Custom::PingTester to make them easily identifiable as ping testers
(instead of using AWS::CloudFormation::CustomResource).
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html#aws-cfn-resource-type-name

serviceTimeout?
Type:
Duration
(optional, default: Duration.seconds(3600))
The maximum time that can elapse before a custom resource operation times out.
The value must be between 1 second and 3600 seconds.
Maps to ServiceTimeout property for the AWS::CloudFormation::CustomResource resource
A token can be specified for this property, but it must be specified with Duration.seconds().
Example
const stack = new Stack();
const durToken = new CfnParameter(stack, 'MyParameter', {
  type: 'Number',
  default: 60,
});
new CustomResource(stack, 'MyCustomResource', {
  serviceToken: 'MyServiceToken',
  serviceTimeout: Duration.seconds(durToken.valueAsNumber),
});

Properties


NameTypeDescription


envResourceEnvironmentThe environment this resource belongs to.
nodeNodeThe tree node.
refstringThe physical name of this custom resource.
stackStackThe stack in which this resource is defined.



env
Type:
ResourceEnvironment
The environment this resource belongs to.
For resources that are created and managed by the CDK
(generally, those created by creating new class instances like Role, Bucket, etc.),
this is always the same as the environment of the stack they belong to;
however, for imported resources
(those obtained from static methods like fromRoleArn, fromBucketName, etc.),
that might be different than the stack they were imported into.

node
Type:
Node
The tree node.

ref
Type:
string
The physical name of this custom resource.

stack
Type:
Stack
The stack in which this resource is defined.
Methods


NameDescription


applyRemovalPolicy(policy)Apply the given removal policy to this resource.
getAtt(attributeName)Returns the value of an attribute of the custom resource of an arbitrary type.
getAttString(attributeName)Returns the value of an attribute of the custom resource of type string.
toString()Returns a string representation of this construct.



applyRemovalPolicy(policy)
public applyRemovalPolicy(policy: RemovalPolicy): void

Parameters

policy RemovalPolicy

Apply the given removal policy to this resource.
The Removal Policy controls what happens to this resource when it stops
being managed by CloudFormation, either because you've removed it from the
CDK application or because you've made a change that requires the resource
to be replaced.
The resource can be deleted (RemovalPolicy.DESTROY), or left in your AWS
account for data recovery and cleanup later (RemovalPolicy.RETAIN).

getAtt(attributeName)
public getAtt(attributeName: string): Reference

Parameters

attributeName string  — the name of the attribute.

Returns

Reference

Returns the value of an attribute of the custom resource of an arbitrary type.
Attributes are returned from the custom resource provider through the
Data map where the key is the attribute name.

getAttString(attributeName)
public getAttString(attributeName: string): string

Parameters

attributeName string  — the name of the attribute.

Returns

string

Returns the value of an attribute of the custom resource of type string.
Attributes are returned from the custom resource provider through the
Data map where the key is the attribute name.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.\n\nclass CustomResource (construct)


LanguageType name


 .NETAmazon.CDK.CustomResource
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CustomResource
 Javasoftware.amazon.awscdk.CustomResource
 Pythonaws_cdk.CustomResource
 TypeScript (source)aws-cdk-lib » CustomResource


Implements
IConstruct, IDependable, IResource
Instantiation of a custom resource, whose implementation is provided a Provider.
This class is intended to be used by construct library authors. Application
builder should not be able to tell whether or not a construct is backed by
a custom resource, and so the use of this class should be invisible.
Instead, construct library authors declare a custom construct that hides the
choice of provider, and accepts a strongly-typed properties object with the
properties your provider accepts.
Your custom resource provider (identified by the serviceToken property)
can be one of 4 constructs:

If you are authoring a construct library or application, we recommend you
use the Provider class in the custom-resources module.
If you are authoring a construct for the CDK's AWS Construct Library,
you should use the CustomResourceProvider construct in this package.
If you want full control over the provider, you can always directly use
a Lambda Function or SNS Topic by passing the ARN into serviceToken.

Example
const stack = new Stack();
const durToken = new CfnParameter(stack, 'MyParameter', {
  type: 'Number',
  default: 60,
});
new CustomResource(stack, 'MyCustomResource', {
  serviceToken: 'MyServiceToken',
  serviceTimeout: Duration.seconds(durToken.valueAsNumber),
});

Initializer
new CustomResource(scope: Construct, id: string, props: CustomResourceProps)

Parameters

scope Construct
id string
props CustomResourceProps

Construct Props


NameTypeDescription


serviceTokenstringThe ARN of the provider which implements this custom resource type.
pascalCaseProperties?booleanConvert all property keys to pascal case.
properties?{ [string]: any }Properties to pass to the Lambda.
removalPolicy?RemovalPolicyThe policy to apply when this resource is removed from the application.
resourceType?stringFor custom resources, you can specify AWS::CloudFormation::CustomResource (the default) as the resource type, or you can specify your own resource type name.
serviceTimeout?DurationThe maximum time that can elapse before a custom resource operation times out.



serviceToken
Type:
string
The ARN of the provider which implements this custom resource type.
You can implement a provider by listening to raw AWS CloudFormation events
and specify the ARN of an SNS topic (topic.topicArn) or the ARN of an AWS
Lambda function (lambda.functionArn) or use the CDK's custom resource
provider framework which makes it easier to implement robust providers.
Provider framework:
// use the provider framework from aws-cdk/custom-resources:
const provider = new customresources.Provider(this, 'ResourceProvider', {
  onEventHandler,
  isCompleteHandler, // optional
});

new CustomResource(this, 'MyResource', {
  serviceToken: provider.serviceToken,
});

AWS Lambda function (not recommended to use AWS Lambda Functions directly,
see the module README):
// invoke an AWS Lambda function when a lifecycle event occurs:
new CustomResource(this, 'MyResource', {
  serviceToken: myFunction.functionArn,
});

SNS topic (not recommended to use AWS Lambda Functions directly, see the
module README):
// publish lifecycle events to an SNS topic:
new CustomResource(this, 'MyResource', {
  serviceToken: myTopic.topicArn,
});

Maps to ServiceToken property for the AWS::CloudFormation::CustomResource resource

pascalCaseProperties?
Type:
boolean
(optional, default: false)
Convert all property keys to pascal case.

properties?
Type:
{ [string]: any }
(optional, default: No properties.)
Properties to pass to the Lambda.
Values in this properties dictionary can possibly overwrite other values in CustomResourceProps
E.g. ServiceToken and ServiceTimeout
It is recommended to avoid using same keys that exist in CustomResourceProps

removalPolicy?
Type:
RemovalPolicy
(optional, default: cdk.RemovalPolicy.Destroy)
The policy to apply when this resource is removed from the application.

resourceType?
Type:
string
(optional, default: AWS::CloudFormation::CustomResource)
For custom resources, you can specify AWS::CloudFormation::CustomResource (the default) as the resource type, or you can specify your own resource type name.
For example, you can use "Custom::MyCustomResourceTypeName".
Custom resource type names must begin with "Custom::" and can include
alphanumeric characters and the following characters: _@-. You can specify
a custom resource type name up to a maximum length of 60 characters. You
cannot change the type during an update.
Using your own resource type names helps you quickly differentiate the
types of custom resources in your stack. For example, if you had two custom
resources that conduct two different ping tests, you could name their type
as Custom::PingTester to make them easily identifiable as ping testers
(instead of using AWS::CloudFormation::CustomResource).
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cfn-customresource.html#aws-cfn-resource-type-name

serviceTimeout?
Type:
Duration
(optional, default: Duration.seconds(3600))
The maximum time that can elapse before a custom resource operation times out.
The value must be between 1 second and 3600 seconds.
Maps to ServiceTimeout property for the AWS::CloudFormation::CustomResource resource
A token can be specified for this property, but it must be specified with Duration.seconds().
Example
const stack = new Stack();
const durToken = new CfnParameter(stack, 'MyParameter', {
  type: 'Number',
  default: 60,
});
new CustomResource(stack, 'MyCustomResource', {
  serviceToken: 'MyServiceToken',
  serviceTimeout: Duration.seconds(durToken.valueAsNumber),
});

Properties


NameTypeDescription


envResourceEnvironmentThe environment this resource belongs to.
nodeNodeThe tree node.
refstringThe physical name of this custom resource.
stackStackThe stack in which this resource is defined.



env
Type:
ResourceEnvironment
The environment this resource belongs to.
For resources that are created and managed by the CDK
(generally, those created by creating new class instances like Role, Bucket, etc.),
this is always the same as the environment of the stack they belong to;
however, for imported resources
(those obtained from static methods like fromRoleArn, fromBucketName, etc.),
that might be different than the stack they were imported into.

node
Type:
Node
The tree node.

ref
Type:
string
The physical name of this custom resource.

stack
Type:
Stack
The stack in which this resource is defined.
Methods


NameDescription


applyRemovalPolicy(policy)Apply the given removal policy to this resource.
getAtt(attributeName)Returns the value of an attribute of the custom resource of an arbitrary type.
getAttString(attributeName)Returns the value of an attribute of the custom resource of type string.
toString()Returns a string representation of this construct.



applyRemovalPolicy(policy)
public applyRemovalPolicy(policy: RemovalPolicy): void

Parameters

policy RemovalPolicy

Apply the given removal policy to this resource.
The Removal Policy controls what happens to this resource when it stops
being managed by CloudFormation, either because you've removed it from the
CDK application or because you've made a change that requires the resource
to be replaced.
The resource can be deleted (RemovalPolicy.DESTROY), or left in your AWS
account for data recovery and cleanup later (RemovalPolicy.RETAIN).

getAtt(attributeName)
public getAtt(attributeName: string): Reference

Parameters

attributeName string  — the name of the attribute.

Returns

Reference

Returns the value of an attribute of the custom resource of an arbitrary type.
Attributes are returned from the custom resource provider through the
Data map where the key is the attribute name.

getAttString(attributeName)
public getAttString(attributeName: string): string

Parameters

attributeName string  — the name of the attribute.

Returns

string

Returns the value of an attribute of the custom resource of type string.
Attributes are returned from the custom resource provider through the
Data map where the key is the attribute name.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.\n\n\n\nclass CustomResourceProvider (construct)


LanguageType name


 .NETAmazon.CDK.CustomResourceProvider
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CustomResourceProvider
 Javasoftware.amazon.awscdk.CustomResourceProvider
 Pythonaws_cdk.CustomResourceProvider
 TypeScript (source)aws-cdk-lib » CustomResourceProvider


Implements
IConstruct, IDependable
An AWS-Lambda backed custom resource provider, for CDK Construct Library constructs.
This is a provider for CustomResource constructs, backed by an AWS Lambda
Function. It only supports NodeJS runtimes.

Application builders do not need to use this provider type. This is not
a generic custom resource provider class. It is specifically
intended to be used only by constructs in the AWS CDK Construct Library, and
only exists here because of reverse dependency issues (for example, it cannot
use iam.PolicyStatement objects, since the iam library already depends on
the CDK core library and we cannot have cyclic dependencies).

If you are not writing constructs for the AWS Construct Library, you should
use the Provider class in the custom-resources module instead, which has
a better API and supports all Lambda runtimes, not just Node.
N.B.: When you are writing Custom Resource Providers, there are a number of
lifecycle events you have to pay attention to. These are documented in the
README of the custom-resources module. Be sure to give the documentation
in that module a read, regardless of whether you end up using the Provider
class in there or this one.
Example
const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
});
provider.addToRolePolicy({
  Effect: 'Allow',
  Action: 's3:GetObject',
  Resource: '*',
})

Initializer (protected)
super(scope: Construct, id: string, props: CustomResourceProviderProps)

Parameters

scope Construct
id string
props CustomResourceProviderProps

Construct Props


NameTypeDescription


codeDirectorystringA local file system directory with the provider's code.
runtimeCustomResourceProviderRuntimeThe AWS Lambda runtime and version to use for the provider.
description?stringA description of the function.
environment?{ [string]: string }Key-value pairs that are passed to Lambda as Environment.
memorySize?SizeThe amount of memory that your function has access to.
policyStatements?any[]A set of IAM policy statements to include in the inline policy of the provider's lambda function.
timeout?DurationAWS Lambda timeout for the provider.
useCfnResponseWrapper?booleanWhether or not the cloudformation response wrapper (nodejs-entrypoint.ts) is used. If set to true, nodejs-entrypoint.js is bundled in the same asset as the custom resource and set as the entrypoint. If set to false, the custom resource provided is the entrypoint.



codeDirectory
Type:
string
A local file system directory with the provider's code.
The code will be
bundled into a zip asset and wired to the provider's AWS Lambda function.

runtime
Type:
CustomResourceProviderRuntime
The AWS Lambda runtime and version to use for the provider.

description?
Type:
string
(optional, default: No description.)
A description of the function.

environment?
Type:
{ [string]: string }
(optional, default: No environment variables.)
Key-value pairs that are passed to Lambda as Environment.

memorySize?
Type:
Size
(optional, default: Size.mebibytes(128))
The amount of memory that your function has access to.
Increasing the
function's memory also increases its CPU allocation.

policyStatements?
Type:
any[]
(optional, default: no additional inline policy)
A set of IAM policy statements to include in the inline policy of the provider's lambda function.
Please note: these are direct IAM JSON policy blobs, not iam.PolicyStatement
objects like you will see in the rest of the CDK.
Example
const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
  policyStatements: [
    {
      Effect: 'Allow',
      Action: 's3:PutObject*',
      Resource: '*',
    }
  ],
});


timeout?
Type:
Duration
(optional, default: Duration.minutes(15))
AWS Lambda timeout for the provider.

useCfnResponseWrapper?
Type:
boolean
(optional, default: true if inlineCode: false and false otherwise.)
Whether or not the cloudformation response wrapper (nodejs-entrypoint.ts) is used. If set to true, nodejs-entrypoint.js is bundled in the same asset as the custom resource and set as the entrypoint. If set to false, the custom resource provided is the entrypoint.
Properties


NameTypeDescription


codeHashstringThe hash of the lambda code backing this provider.
nodeNodeThe tree node.
roleArnstringThe ARN of the provider's AWS Lambda function role.
serviceTokenstringThe ARN of the provider's AWS Lambda function which should be used as the serviceToken when defining a custom resource.



codeHash
Type:
string
The hash of the lambda code backing this provider.
Can be used to trigger updates
on code changes, even when the properties of a custom resource remain unchanged.

node
Type:
Node
The tree node.

roleArn
Type:
string
The ARN of the provider's AWS Lambda function role.

serviceToken
Type:
string
The ARN of the provider's AWS Lambda function which should be used as the serviceToken when defining a custom resource.
Methods


NameDescription


addToRolePolicy(statement)Add an IAM policy statement to the inline policy of the provider's lambda function's role.
toString()Returns a string representation of this construct.
static getOrCreate(scope, uniqueid, props)Returns a stack-level singleton ARN (service token) for the custom resource provider.
static getOrCreateProvider(scope, uniqueid, props)Returns a stack-level singleton for the custom resource provider.



addToRolePolicy(statement)
public addToRolePolicy(statement: any): void

Parameters

statement any

Add an IAM policy statement to the inline policy of the provider's lambda function's role.
Please note: this is a direct IAM JSON policy blob, not a iam.PolicyStatement
object like you will see in the rest of the CDK.
Example
declare const myProvider: CustomResourceProvider;

myProvider.addToRolePolicy({
  Effect: 'Allow',
  Action: 's3:GetObject',
  Resource: '*',
});


toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static getOrCreate(scope, uniqueid, props)
public static getOrCreate(scope: Construct, uniqueid: string, props: CustomResourceProviderProps): string

Parameters

scope Construct  — Construct scope.
uniqueid string  — A globally unique id that will be used for the stack-level construct.
props CustomResourceProviderProps  — Provider properties which will only be applied when the provider is first created.

Returns

string

Returns a stack-level singleton ARN (service token) for the custom resource provider.

static getOrCreateProvider(scope, uniqueid, props)
public static getOrCreateProvider(scope: Construct, uniqueid: string, props: CustomResourceProviderProps): CustomResourceProvider

Parameters

scope Construct  — Construct scope.
uniqueid string  — A globally unique id that will be used for the stack-level construct.
props CustomResourceProviderProps  — Provider properties which will only be applied when the provider is first created.

Returns

CustomResourceProvider

Returns a stack-level singleton for the custom resource provider.\n\nclass CustomResourceProvider (construct)


LanguageType name


 .NETAmazon.CDK.CustomResourceProvider
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CustomResourceProvider
 Javasoftware.amazon.awscdk.CustomResourceProvider
 Pythonaws_cdk.CustomResourceProvider
 TypeScript (source)aws-cdk-lib » CustomResourceProvider


Implements
IConstruct, IDependable
An AWS-Lambda backed custom resource provider, for CDK Construct Library constructs.
This is a provider for CustomResource constructs, backed by an AWS Lambda
Function. It only supports NodeJS runtimes.

Application builders do not need to use this provider type. This is not
a generic custom resource provider class. It is specifically
intended to be used only by constructs in the AWS CDK Construct Library, and
only exists here because of reverse dependency issues (for example, it cannot
use iam.PolicyStatement objects, since the iam library already depends on
the CDK core library and we cannot have cyclic dependencies).

If you are not writing constructs for the AWS Construct Library, you should
use the Provider class in the custom-resources module instead, which has
a better API and supports all Lambda runtimes, not just Node.
N.B.: When you are writing Custom Resource Providers, there are a number of
lifecycle events you have to pay attention to. These are documented in the
README of the custom-resources module. Be sure to give the documentation
in that module a read, regardless of whether you end up using the Provider
class in there or this one.
Example
const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
});
provider.addToRolePolicy({
  Effect: 'Allow',
  Action: 's3:GetObject',
  Resource: '*',
})

Initializer (protected)
super(scope: Construct, id: string, props: CustomResourceProviderProps)

Parameters

scope Construct
id string
props CustomResourceProviderProps

Construct Props


NameTypeDescription


codeDirectorystringA local file system directory with the provider's code.
runtimeCustomResourceProviderRuntimeThe AWS Lambda runtime and version to use for the provider.
description?stringA description of the function.
environment?{ [string]: string }Key-value pairs that are passed to Lambda as Environment.
memorySize?SizeThe amount of memory that your function has access to.
policyStatements?any[]A set of IAM policy statements to include in the inline policy of the provider's lambda function.
timeout?DurationAWS Lambda timeout for the provider.
useCfnResponseWrapper?booleanWhether or not the cloudformation response wrapper (nodejs-entrypoint.ts) is used. If set to true, nodejs-entrypoint.js is bundled in the same asset as the custom resource and set as the entrypoint. If set to false, the custom resource provided is the entrypoint.



codeDirectory
Type:
string
A local file system directory with the provider's code.
The code will be
bundled into a zip asset and wired to the provider's AWS Lambda function.

runtime
Type:
CustomResourceProviderRuntime
The AWS Lambda runtime and version to use for the provider.

description?
Type:
string
(optional, default: No description.)
A description of the function.

environment?
Type:
{ [string]: string }
(optional, default: No environment variables.)
Key-value pairs that are passed to Lambda as Environment.

memorySize?
Type:
Size
(optional, default: Size.mebibytes(128))
The amount of memory that your function has access to.
Increasing the
function's memory also increases its CPU allocation.

policyStatements?
Type:
any[]
(optional, default: no additional inline policy)
A set of IAM policy statements to include in the inline policy of the provider's lambda function.
Please note: these are direct IAM JSON policy blobs, not iam.PolicyStatement
objects like you will see in the rest of the CDK.
Example
const provider = CustomResourceProvider.getOrCreateProvider(this, 'Custom::MyCustomResourceType', {
  codeDirectory: `${__dirname}/my-handler`,
  runtime: CustomResourceProviderRuntime.NODEJS_18_X,
  policyStatements: [
    {
      Effect: 'Allow',
      Action: 's3:PutObject*',
      Resource: '*',
    }
  ],
});


timeout?
Type:
Duration
(optional, default: Duration.minutes(15))
AWS Lambda timeout for the provider.

useCfnResponseWrapper?
Type:
boolean
(optional, default: true if inlineCode: false and false otherwise.)
Whether or not the cloudformation response wrapper (nodejs-entrypoint.ts) is used. If set to true, nodejs-entrypoint.js is bundled in the same asset as the custom resource and set as the entrypoint. If set to false, the custom resource provided is the entrypoint.
Properties


NameTypeDescription


codeHashstringThe hash of the lambda code backing this provider.
nodeNodeThe tree node.
roleArnstringThe ARN of the provider's AWS Lambda function role.
serviceTokenstringThe ARN of the provider's AWS Lambda function which should be used as the serviceToken when defining a custom resource.



codeHash
Type:
string
The hash of the lambda code backing this provider.
Can be used to trigger updates
on code changes, even when the properties of a custom resource remain unchanged.

node
Type:
Node
The tree node.

roleArn
Type:
string
The ARN of the provider's AWS Lambda function role.

serviceToken
Type:
string
The ARN of the provider's AWS Lambda function which should be used as the serviceToken when defining a custom resource.
Methods


NameDescription


addToRolePolicy(statement)Add an IAM policy statement to the inline policy of the provider's lambda function's role.
toString()Returns a string representation of this construct.
static getOrCreate(scope, uniqueid, props)Returns a stack-level singleton ARN (service token) for the custom resource provider.
static getOrCreateProvider(scope, uniqueid, props)Returns a stack-level singleton for the custom resource provider.



addToRolePolicy(statement)
public addToRolePolicy(statement: any): void

Parameters

statement any

Add an IAM policy statement to the inline policy of the provider's lambda function's role.
Please note: this is a direct IAM JSON policy blob, not a iam.PolicyStatement
object like you will see in the rest of the CDK.
Example
declare const myProvider: CustomResourceProvider;

myProvider.addToRolePolicy({
  Effect: 'Allow',
  Action: 's3:GetObject',
  Resource: '*',
});


toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static getOrCreate(scope, uniqueid, props)
public static getOrCreate(scope: Construct, uniqueid: string, props: CustomResourceProviderProps): string

Parameters

scope Construct  — Construct scope.
uniqueid string  — A globally unique id that will be used for the stack-level construct.
props CustomResourceProviderProps  — Provider properties which will only be applied when the provider is first created.

Returns

string

Returns a stack-level singleton ARN (service token) for the custom resource provider.

static getOrCreateProvider(scope, uniqueid, props)
public static getOrCreateProvider(scope: Construct, uniqueid: string, props: CustomResourceProviderProps): CustomResourceProvider

Parameters

scope Construct  — Construct scope.
uniqueid string  — A globally unique id that will be used for the stack-level construct.
props CustomResourceProviderProps  — Provider properties which will only be applied when the provider is first created.

Returns

CustomResourceProvider

Returns a stack-level singleton for the custom resource provider.\n\n\n\nclass NestedStack (construct)


LanguageType name


 .NETAmazon.CDK.NestedStack
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#NestedStack
 Javasoftware.amazon.awscdk.NestedStack
 Pythonaws_cdk.NestedStack
 TypeScript (source)aws-cdk-lib » NestedStack


Implements
IConstruct, IDependable, ITaggable
A CloudFormation nested stack.
When you apply template changes to update a top-level stack, CloudFormation
updates the top-level stack and initiates an update to its nested stacks.
CloudFormation updates the resources of modified nested stacks, but does not
update the resources of unmodified nested stacks.
Furthermore, this stack will not be treated as an independent deployment
artifact (won't be listed in "cdk list" or deployable through "cdk deploy"),
but rather only synthesized as a template and uploaded as an asset to S3.
Cross references of resource attributes between the parent stack and the
nested stack will automatically be translated to stack parameters and
outputs.
Example
import * as cdk from 'aws-cdk-lib';
import { CustomResourceConfig } from 'aws-cdk-lib/custom-resources';
import * as s3deploy from 'aws-cdk-lib/aws-s3-deployment';

const app = new cdk.App();
const stack = new cdk.Stack(app, 'Stack');
CustomResourceConfig.of(app).addLogRetentionLifetime(logs.RetentionDays.TEN_YEARS);

const nestedStackA = new cdk.NestedStack(stack, 'NestedStackA');
let websiteBucketA = new s3.Bucket(nestedStackA, "WebsiteBucketA", {});
new s3deploy.BucketDeployment(nestedStackA, "s3deployA", {
    sources: [s3deploy.Source.jsonData("file.json", { a: "b" })],
    destinationBucket: websiteBucketA,
    logRetention: logs.RetentionDays.ONE_DAY, // overridden by the `TEN_YEARS` set by `CustomResourceConfig`.
});

const nestedStackB = new cdk.NestedStack(stack, 'NestedStackB');
let websiteBucketB = new s3.Bucket(nestedStackB, "WebsiteBucketB", {});
new s3deploy.BucketDeployment(nestedStackB, "s3deployB", {
    sources: [s3deploy.Source.jsonData("file.json", { a: "b" })],
    destinationBucket: websiteBucketB,
    logRetention: logs.RetentionDays.ONE_DAY, // overridden by the `TEN_YEARS` set by `CustomResourceConfig`.
});

Initializer
new NestedStack(scope: Construct, id: string, props?: NestedStackProps)

Parameters

scope Construct
id string
props NestedStackProps

Construct Props


NameTypeDescription


description?stringA description of the stack.
notificationArns?string[]The Simple Notification Service (SNS) topics to publish stack related events.
parameters?{ [string]: string }The set value pairs that represent the parameters passed to CloudFormation when this nested stack is created.
removalPolicy?RemovalPolicyPolicy to apply when the nested stack is removed.
timeout?DurationThe length of time that CloudFormation waits for the nested stack to reach the CREATE_COMPLETE state.



description?
Type:
string
(optional, default: No description.)
A description of the stack.

notificationArns?
Type:
string[]
(optional, default: notifications are not sent for this stack.)
The Simple Notification Service (SNS) topics to publish stack related events.

parameters?
Type:
{ [string]: string }
(optional, default: no user-defined parameters are passed to the nested stack)
The set value pairs that represent the parameters passed to CloudFormation when this nested stack is created.
Each parameter has a name corresponding
to a parameter defined in the embedded template and a value representing
the value that you want to set for the parameter.
The nested stack construct will automatically synthesize parameters in order
to bind references from the parent stack(s) into the nested stack.

removalPolicy?
Type:
RemovalPolicy
(optional, default: RemovalPolicy.DESTROY)
Policy to apply when the nested stack is removed.
The default is Destroy, because all Removal Policies of resources inside the
Nested Stack should already have been set correctly. You normally should
not need to set this value.

timeout?
Type:
Duration
(optional, default: no timeout)
The length of time that CloudFormation waits for the nested stack to reach the CREATE_COMPLETE state.
When CloudFormation detects that the nested stack has reached the
CREATE_COMPLETE state, it marks the nested stack resource as
CREATE_COMPLETE in the parent stack and resumes creating the parent stack.
If the timeout period expires before the nested stack reaches
CREATE_COMPLETE, CloudFormation marks the nested stack as failed and rolls
back both the nested stack and parent stack.
Properties


NameTypeDescription


accountstringThe AWS account into which this stack will be deployed.
artifactIdstringThe ID of the cloud assembly artifact for this stack.
availabilityZonesstring[]Returns the list of AZs that are available in the AWS environment (account/region) associated with this stack.
bundlingRequiredbooleanIndicates whether the stack requires bundling or not.
dependenciesStack[]Return the stacks this stack depends on.
environmentstringThe environment coordinates in which this stack is deployed.
nestedbooleanIndicates if this is a nested stack, in which case parentStack will include a reference to it's parent.
nodeNodeThe tree node.
notificationArnsstring[]Returns the list of notification Amazon Resource Names (ARNs) for the current stack.
partitionstringThe partition in which this stack is defined.
regionstringThe AWS region into which this stack will be deployed (e.g. us-west-2).
stackIdstringAn attribute that represents the ID of the stack.
stackNamestringAn attribute that represents the name of the nested stack.
synthesizerIStackSynthesizerSynthesis method for this stack.
tagsTagManagerTags to be applied to the stack.
templateFilestringThe name of the CloudFormation template file emitted to the output directory during synthesis.
templateOptionsITemplateOptionsOptions for CloudFormation template (like version, transform, description).
terminationProtectionbooleanWhether termination protection is enabled for this stack.
urlSuffixstringThe Amazon domain suffix for the region in which this stack is defined.
nestedStackParent?StackIf this is a nested stack, returns it's parent stack.
nestedStackResource?CfnResourceIf this is a nested stack, this represents its AWS::CloudFormation::Stack resource.



account
Type:
string
The AWS account into which this stack will be deployed.
This value is resolved according to the following rules:

The value provided to env.account when the stack is defined. This can
either be a concrete account (e.g. 585695031111) or the
Aws.ACCOUNT_ID token.
Aws.ACCOUNT_ID, which represents the CloudFormation intrinsic reference
{ "Ref": "AWS::AccountId" } encoded as a string token.

Preferably, you should use the return value as an opaque string and not
attempt to parse it to implement your logic. If you do, you must first
check that it is a concrete value an not an unresolved token. If this
value is an unresolved token (Token.isUnresolved(stack.account) returns
true), this implies that the user wishes that this stack will synthesize
into an account-agnostic template. In this case, your code should either
fail (throw an error, emit a synth error using Annotations.of(construct).addError()) or
implement some other account-agnostic behavior.

artifactId
Type:
string
The ID of the cloud assembly artifact for this stack.

availabilityZones
Type:
string[]
Returns the list of AZs that are available in the AWS environment (account/region) associated with this stack.
If the stack is environment-agnostic (either account and/or region are
tokens), this property will return an array with 2 tokens that will resolve
at deploy-time to the first two availability zones returned from CloudFormation's
Fn::GetAZs intrinsic function.
If they are not available in the context, returns a set of dummy values and
reports them as missing, and let the CLI resolve them by calling EC2
DescribeAvailabilityZones on the target environment.
To specify a different strategy for selecting availability zones override this method.

bundlingRequired
Type:
boolean
Indicates whether the stack requires bundling or not.

dependencies
Type:
Stack[]
Return the stacks this stack depends on.

environment
Type:
string
The environment coordinates in which this stack is deployed.
In the form
aws://account/region. Use stack.account and stack.region to obtain
the specific values, no need to parse.
You can use this value to determine if two stacks are targeting the same
environment.
If either stack.account or stack.region are not concrete values (e.g.
Aws.ACCOUNT_ID or Aws.REGION) the special strings unknown-account and/or
unknown-region will be used respectively to indicate this stack is
region/account-agnostic.

nested
Type:
boolean
Indicates if this is a nested stack, in which case parentStack will include a reference to it's parent.

node
Type:
Node
The tree node.

notificationArns
Type:
string[]
Returns the list of notification Amazon Resource Names (ARNs) for the current stack.

partition
Type:
string
The partition in which this stack is defined.

region
Type:
string
The AWS region into which this stack will be deployed (e.g. us-west-2).
This value is resolved according to the following rules:

The value provided to env.region when the stack is defined. This can
either be a concrete region (e.g. us-west-2) or the Aws.REGION
token.
Aws.REGION, which is represents the CloudFormation intrinsic reference
{ "Ref": "AWS::Region" } encoded as a string token.

Preferably, you should use the return value as an opaque string and not
attempt to parse it to implement your logic. If you do, you must first
check that it is a concrete value an not an unresolved token. If this
value is an unresolved token (Token.isUnresolved(stack.region) returns
true), this implies that the user wishes that this stack will synthesize
into a region-agnostic template. In this case, your code should either
fail (throw an error, emit a synth error using Annotations.of(construct).addError()) or
implement some other region-agnostic behavior.

stackId
Type:
string
An attribute that represents the ID of the stack.
This is a context aware attribute:

If this is referenced from the parent stack, it will return { "Ref": "LogicalIdOfNestedStackResource" }.
If this is referenced from the context of the nested stack, it will return { "Ref": "AWS::StackId" }

Example value: arn:aws:cloudformation:us-east-2:123456789012:stack/mystack-mynestedstack-sggfrhxhum7w/f449b250-b969-11e0-a185-5081d0136786

stackName
Type:
string
An attribute that represents the name of the nested stack.
This is a context aware attribute:

If this is referenced from the parent stack, it will return a token that parses the name from the stack ID.
If this is referenced from the context of the nested stack, it will return { "Ref": "AWS::StackName" }

Example value: mystack-mynestedstack-sggfrhxhum7w

synthesizer
Type:
IStackSynthesizer
Synthesis method for this stack.

tags
Type:
TagManager
Tags to be applied to the stack.

templateFile
Type:
string
The name of the CloudFormation template file emitted to the output directory during synthesis.
Example value: MyStack.template.json

templateOptions
Type:
ITemplateOptions
Options for CloudFormation template (like version, transform, description).

terminationProtection
Type:
boolean
Whether termination protection is enabled for this stack.

urlSuffix
Type:
string
The Amazon domain suffix for the region in which this stack is defined.

nestedStackParent?
Type:
Stack
(optional)
If this is a nested stack, returns it's parent stack.

nestedStackResource?
Type:
CfnResource
(optional)
If this is a nested stack, this represents its AWS::CloudFormation::Stack resource.
undefined for top-level (non-nested) stacks.
Methods


NameDescription


addDependency(target, reason?)Add a dependency between this stack and another stack.
addMetadata(key, value)Adds an arbitrary key-value pair, with information you want to record about the stack.
addTransform(transform)Add a Transform to this stack. A Transform is a macro that AWS CloudFormation uses to process your template.
exportStringListValue(exportedValue, options?)Create a CloudFormation Export for a string list value.
exportValue(exportedValue, options?)Create a CloudFormation Export for a string value.
formatArn(components)Creates an ARN from components.
getLogicalId(element)Allocates a stack-unique CloudFormation-compatible logical identity for a specific resource.
regionalFact(factName, defaultValue?)Look up a fact value for the given fact for the region of this stack.
renameLogicalId(oldId, newId)Rename a generated logical identities.
reportMissingContextKey(report)Indicate that a context key was expected.
resolve(obj)Resolve a tokenized value in the context of the current stack.
setParameter(name, value)Assign a value to one of the nested stack parameters.
splitArn(arn, arnFormat)Splits the provided ARN into its components.
toJsonString(obj, space?)Convert an object, potentially containing tokens, to a JSON string.
toString()Returns a string representation of this construct.
toYamlString(obj)Convert an object, potentially containing tokens, to a YAML string.
static isNestedStack(x)Checks if x is an object of type NestedStack.



addDependency(target, reason?)
public addDependency(target: Stack, reason?: string): void

Parameters

target Stack
reason string

Add a dependency between this stack and another stack.
This can be used to define dependencies between any two stacks within an
app, and also supports nested stacks.

addMetadata(key, value)
public addMetadata(key: string, value: any): void

Parameters

key string
value any

Adds an arbitrary key-value pair, with information you want to record about the stack.
These get translated to the Metadata section of the generated template.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html

addTransform(transform)
public addTransform(transform: string): void

Parameters

transform string  — The transform to add.

Add a Transform to this stack. A Transform is a macro that AWS CloudFormation uses to process your template.
Duplicate values are removed when stack is synthesized.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Example
declare const stack: Stack;

stack.addTransform('AWS::Serverless-2016-10-31')


exportStringListValue(exportedValue, options?)
public exportStringListValue(exportedValue: any, options?: ExportValueOptions): string[]

Parameters

exportedValue any
options ExportValueOptions

Returns

string[]

Create a CloudFormation Export for a string list value.
Returns a string list representing the corresponding Fn.importValue()
expression for this Export. The export expression is automatically wrapped with an
Fn::Join and the import value with an Fn::Split, since CloudFormation can only
export strings. You can control the name for the export by passing the name option.
If you don't supply a value for name, the value you're exporting must be
a Resource attribute (for example: bucket.bucketName) and it will be
given the same name as the automatic cross-stack reference that would be created
if you used the attribute in another Stack.
One of the uses for this method is to remove the relationship between
two Stacks established by automatic cross-stack references. It will
temporarily ensure that the CloudFormation Export still exists while you
remove the reference from the consuming stack. After that, you can remove
the resource and the manual export.
See exportValue for an example of this process.

exportValue(exportedValue, options?)
public exportValue(exportedValue: any, options?: ExportValueOptions): string

Parameters

exportedValue any
options ExportValueOptions

Returns

string

Create a CloudFormation Export for a string value.
Returns a string representing the corresponding Fn.importValue()
expression for this Export. You can control the name for the export by
passing the name option.
If you don't supply a value for name, the value you're exporting must be
a Resource attribute (for example: bucket.bucketName) and it will be
given the same name as the automatic cross-stack reference that would be created
if you used the attribute in another Stack.
One of the uses for this method is to remove the relationship between
two Stacks established by automatic cross-stack references. It will
temporarily ensure that the CloudFormation Export still exists while you
remove the reference from the consuming stack. After that, you can remove
the resource and the manual export.
Here is how the process works. Let's say there are two stacks,
producerStack and consumerStack, and producerStack has a bucket
called bucket, which is referenced by consumerStack (perhaps because
an AWS Lambda Function writes into it, or something like that).
It is not safe to remove producerStack.bucket because as the bucket is being
deleted, consumerStack might still be using it.
Instead, the process takes two deployments:
Deployment 1: break the relationship:

Make sure consumerStack no longer references bucket.bucketName (maybe the consumer
stack now uses its own bucket, or it writes to an AWS DynamoDB table, or maybe you just
remove the Lambda Function altogether).
In the ProducerStack class, call this.exportValue(this.bucket.bucketName). This
will make sure the CloudFormation Export continues to exist while the relationship
between the two stacks is being broken.
Deploy (this will effectively only change the consumerStack, but it's safe to deploy both).

Deployment 2: remove the bucket resource:

You are now free to remove the bucket resource from producerStack.
Don't forget to remove the exportValue() call as well.
Deploy again (this time only the producerStack will be changed -- the bucket will be deleted).


formatArn(components)
public formatArn(components: ArnComponents): string

Parameters

components ArnComponents

Returns

string

Creates an ARN from components.
If partition, region or account are not specified, the stack's
partition, region and account will be used.
If any component is the empty string, an empty string will be inserted
into the generated ARN at the location that component corresponds to.
The ARN will be formatted as follows:
arn:{partition}:{service}:{region}:{account}:{resource}{sep}{resource-name}
The required ARN pieces that are omitted will be taken from the stack that
the 'scope' is attached to. If all ARN pieces are supplied, the supplied scope
can be 'undefined'.

getLogicalId(element)
public getLogicalId(element: CfnElement): string

Parameters

element CfnElement  — The CloudFormation element for which a logical identity is needed.

Returns

string

Allocates a stack-unique CloudFormation-compatible logical identity for a specific resource.
This method is called when a CfnElement is created and used to render the
initial logical identity of resources. Logical ID renames are applied at
this stage.
This method uses the protected method allocateLogicalId to render the
logical ID for an element. To modify the naming scheme, extend the Stack
class and override this method.

regionalFact(factName, defaultValue?)
public regionalFact(factName: string, defaultValue?: string): string

Parameters

factName string
defaultValue string

Returns

string

Look up a fact value for the given fact for the region of this stack.
Will return a definite value only if the region of the current stack is resolved.
If not, a lookup map will be added to the stack and the lookup will be done at
CDK deployment time.
What regions will be included in the lookup map is controlled by the
@aws-cdk/core:target-partitions context value: it must be set to a list
of partitions, and only regions from the given partitions will be included.
If no such context key is set, all regions will be included.
This function is intended to be used by construct library authors. Application
builders can rely on the abstractions offered by construct libraries and do
not have to worry about regional facts.
If defaultValue is not given, it is an error if the fact is unknown for
the given region.

renameLogicalId(oldId, newId)
public renameLogicalId(oldId: string, newId: string): void

Parameters

oldId string
newId string

Rename a generated logical identities.
To modify the naming scheme strategy, extend the Stack class and
override the allocateLogicalId method.

reportMissingContextKey(report)
public reportMissingContextKey(report: MissingContext): void

Parameters

report MissingContext  — The set of parameters needed to obtain the context.

Indicate that a context key was expected.
Contains instructions which will be emitted into the cloud assembly on how
the key should be supplied.

resolve(obj)
public resolve(obj: any): any

Parameters

obj any

Returns

any

Resolve a tokenized value in the context of the current stack.

setParameter(name, value)
public setParameter(name: string, value: string): void

Parameters

name string  — The parameter name (ID).
value string  — The value to assign.

Assign a value to one of the nested stack parameters.

splitArn(arn, arnFormat)
public splitArn(arn: string, arnFormat: ArnFormat): ArnComponents

Parameters

arn string  — the ARN to split into its components.
arnFormat ArnFormat  — the expected format of 'arn' - depends on what format the service 'arn' represents uses.

Returns

ArnComponents

Splits the provided ARN into its components.
Works both if 'arn' is a string like 'arn:aws:s3:::bucket',
and a Token representing a dynamic CloudFormation expression
(in which case the returned components will also be dynamic CloudFormation expressions,
encoded as Tokens).

toJsonString(obj, space?)
public toJsonString(obj: any, space?: number): string

Parameters

obj any
space number

Returns

string

Convert an object, potentially containing tokens, to a JSON string.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

toYamlString(obj)
public toYamlString(obj: any): string

Parameters

obj any

Returns

string

Convert an object, potentially containing tokens, to a YAML string.

static isNestedStack(x)
public static isNestedStack(x: any): boolean

Parameters

x any

Returns

boolean

Checks if x is an object of type NestedStack.\n\nclass NestedStack (construct)


LanguageType name


 .NETAmazon.CDK.NestedStack
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#NestedStack
 Javasoftware.amazon.awscdk.NestedStack
 Pythonaws_cdk.NestedStack
 TypeScript (source)aws-cdk-lib » NestedStack


Implements
IConstruct, IDependable, ITaggable
A CloudFormation nested stack.
When you apply template changes to update a top-level stack, CloudFormation
updates the top-level stack and initiates an update to its nested stacks.
CloudFormation updates the resources of modified nested stacks, but does not
update the resources of unmodified nested stacks.
Furthermore, this stack will not be treated as an independent deployment
artifact (won't be listed in "cdk list" or deployable through "cdk deploy"),
but rather only synthesized as a template and uploaded as an asset to S3.
Cross references of resource attributes between the parent stack and the
nested stack will automatically be translated to stack parameters and
outputs.
Example
import * as cdk from 'aws-cdk-lib';
import { CustomResourceConfig } from 'aws-cdk-lib/custom-resources';
import * as s3deploy from 'aws-cdk-lib/aws-s3-deployment';

const app = new cdk.App();
const stack = new cdk.Stack(app, 'Stack');
CustomResourceConfig.of(app).addLogRetentionLifetime(logs.RetentionDays.TEN_YEARS);

const nestedStackA = new cdk.NestedStack(stack, 'NestedStackA');
let websiteBucketA = new s3.Bucket(nestedStackA, "WebsiteBucketA", {});
new s3deploy.BucketDeployment(nestedStackA, "s3deployA", {
    sources: [s3deploy.Source.jsonData("file.json", { a: "b" })],
    destinationBucket: websiteBucketA,
    logRetention: logs.RetentionDays.ONE_DAY, // overridden by the `TEN_YEARS` set by `CustomResourceConfig`.
});

const nestedStackB = new cdk.NestedStack(stack, 'NestedStackB');
let websiteBucketB = new s3.Bucket(nestedStackB, "WebsiteBucketB", {});
new s3deploy.BucketDeployment(nestedStackB, "s3deployB", {
    sources: [s3deploy.Source.jsonData("file.json", { a: "b" })],
    destinationBucket: websiteBucketB,
    logRetention: logs.RetentionDays.ONE_DAY, // overridden by the `TEN_YEARS` set by `CustomResourceConfig`.
});

Initializer
new NestedStack(scope: Construct, id: string, props?: NestedStackProps)

Parameters

scope Construct
id string
props NestedStackProps

Construct Props


NameTypeDescription


description?stringA description of the stack.
notificationArns?string[]The Simple Notification Service (SNS) topics to publish stack related events.
parameters?{ [string]: string }The set value pairs that represent the parameters passed to CloudFormation when this nested stack is created.
removalPolicy?RemovalPolicyPolicy to apply when the nested stack is removed.
timeout?DurationThe length of time that CloudFormation waits for the nested stack to reach the CREATE_COMPLETE state.



description?
Type:
string
(optional, default: No description.)
A description of the stack.

notificationArns?
Type:
string[]
(optional, default: notifications are not sent for this stack.)
The Simple Notification Service (SNS) topics to publish stack related events.

parameters?
Type:
{ [string]: string }
(optional, default: no user-defined parameters are passed to the nested stack)
The set value pairs that represent the parameters passed to CloudFormation when this nested stack is created.
Each parameter has a name corresponding
to a parameter defined in the embedded template and a value representing
the value that you want to set for the parameter.
The nested stack construct will automatically synthesize parameters in order
to bind references from the parent stack(s) into the nested stack.

removalPolicy?
Type:
RemovalPolicy
(optional, default: RemovalPolicy.DESTROY)
Policy to apply when the nested stack is removed.
The default is Destroy, because all Removal Policies of resources inside the
Nested Stack should already have been set correctly. You normally should
not need to set this value.

timeout?
Type:
Duration
(optional, default: no timeout)
The length of time that CloudFormation waits for the nested stack to reach the CREATE_COMPLETE state.
When CloudFormation detects that the nested stack has reached the
CREATE_COMPLETE state, it marks the nested stack resource as
CREATE_COMPLETE in the parent stack and resumes creating the parent stack.
If the timeout period expires before the nested stack reaches
CREATE_COMPLETE, CloudFormation marks the nested stack as failed and rolls
back both the nested stack and parent stack.
Properties


NameTypeDescription


accountstringThe AWS account into which this stack will be deployed.
artifactIdstringThe ID of the cloud assembly artifact for this stack.
availabilityZonesstring[]Returns the list of AZs that are available in the AWS environment (account/region) associated with this stack.
bundlingRequiredbooleanIndicates whether the stack requires bundling or not.
dependenciesStack[]Return the stacks this stack depends on.
environmentstringThe environment coordinates in which this stack is deployed.
nestedbooleanIndicates if this is a nested stack, in which case parentStack will include a reference to it's parent.
nodeNodeThe tree node.
notificationArnsstring[]Returns the list of notification Amazon Resource Names (ARNs) for the current stack.
partitionstringThe partition in which this stack is defined.
regionstringThe AWS region into which this stack will be deployed (e.g. us-west-2).
stackIdstringAn attribute that represents the ID of the stack.
stackNamestringAn attribute that represents the name of the nested stack.
synthesizerIStackSynthesizerSynthesis method for this stack.
tagsTagManagerTags to be applied to the stack.
templateFilestringThe name of the CloudFormation template file emitted to the output directory during synthesis.
templateOptionsITemplateOptionsOptions for CloudFormation template (like version, transform, description).
terminationProtectionbooleanWhether termination protection is enabled for this stack.
urlSuffixstringThe Amazon domain suffix for the region in which this stack is defined.
nestedStackParent?StackIf this is a nested stack, returns it's parent stack.
nestedStackResource?CfnResourceIf this is a nested stack, this represents its AWS::CloudFormation::Stack resource.



account
Type:
string
The AWS account into which this stack will be deployed.
This value is resolved according to the following rules:

The value provided to env.account when the stack is defined. This can
either be a concrete account (e.g. 585695031111) or the
Aws.ACCOUNT_ID token.
Aws.ACCOUNT_ID, which represents the CloudFormation intrinsic reference
{ "Ref": "AWS::AccountId" } encoded as a string token.

Preferably, you should use the return value as an opaque string and not
attempt to parse it to implement your logic. If you do, you must first
check that it is a concrete value an not an unresolved token. If this
value is an unresolved token (Token.isUnresolved(stack.account) returns
true), this implies that the user wishes that this stack will synthesize
into an account-agnostic template. In this case, your code should either
fail (throw an error, emit a synth error using Annotations.of(construct).addError()) or
implement some other account-agnostic behavior.

artifactId
Type:
string
The ID of the cloud assembly artifact for this stack.

availabilityZones
Type:
string[]
Returns the list of AZs that are available in the AWS environment (account/region) associated with this stack.
If the stack is environment-agnostic (either account and/or region are
tokens), this property will return an array with 2 tokens that will resolve
at deploy-time to the first two availability zones returned from CloudFormation's
Fn::GetAZs intrinsic function.
If they are not available in the context, returns a set of dummy values and
reports them as missing, and let the CLI resolve them by calling EC2
DescribeAvailabilityZones on the target environment.
To specify a different strategy for selecting availability zones override this method.

bundlingRequired
Type:
boolean
Indicates whether the stack requires bundling or not.

dependencies
Type:
Stack[]
Return the stacks this stack depends on.

environment
Type:
string
The environment coordinates in which this stack is deployed.
In the form
aws://account/region. Use stack.account and stack.region to obtain
the specific values, no need to parse.
You can use this value to determine if two stacks are targeting the same
environment.
If either stack.account or stack.region are not concrete values (e.g.
Aws.ACCOUNT_ID or Aws.REGION) the special strings unknown-account and/or
unknown-region will be used respectively to indicate this stack is
region/account-agnostic.

nested
Type:
boolean
Indicates if this is a nested stack, in which case parentStack will include a reference to it's parent.

node
Type:
Node
The tree node.

notificationArns
Type:
string[]
Returns the list of notification Amazon Resource Names (ARNs) for the current stack.

partition
Type:
string
The partition in which this stack is defined.

region
Type:
string
The AWS region into which this stack will be deployed (e.g. us-west-2).
This value is resolved according to the following rules:

The value provided to env.region when the stack is defined. This can
either be a concrete region (e.g. us-west-2) or the Aws.REGION
token.
Aws.REGION, which is represents the CloudFormation intrinsic reference
{ "Ref": "AWS::Region" } encoded as a string token.

Preferably, you should use the return value as an opaque string and not
attempt to parse it to implement your logic. If you do, you must first
check that it is a concrete value an not an unresolved token. If this
value is an unresolved token (Token.isUnresolved(stack.region) returns
true), this implies that the user wishes that this stack will synthesize
into a region-agnostic template. In this case, your code should either
fail (throw an error, emit a synth error using Annotations.of(construct).addError()) or
implement some other region-agnostic behavior.

stackId
Type:
string
An attribute that represents the ID of the stack.
This is a context aware attribute:

If this is referenced from the parent stack, it will return { "Ref": "LogicalIdOfNestedStackResource" }.
If this is referenced from the context of the nested stack, it will return { "Ref": "AWS::StackId" }

Example value: arn:aws:cloudformation:us-east-2:123456789012:stack/mystack-mynestedstack-sggfrhxhum7w/f449b250-b969-11e0-a185-5081d0136786

stackName
Type:
string
An attribute that represents the name of the nested stack.
This is a context aware attribute:

If this is referenced from the parent stack, it will return a token that parses the name from the stack ID.
If this is referenced from the context of the nested stack, it will return { "Ref": "AWS::StackName" }

Example value: mystack-mynestedstack-sggfrhxhum7w

synthesizer
Type:
IStackSynthesizer
Synthesis method for this stack.

tags
Type:
TagManager
Tags to be applied to the stack.

templateFile
Type:
string
The name of the CloudFormation template file emitted to the output directory during synthesis.
Example value: MyStack.template.json

templateOptions
Type:
ITemplateOptions
Options for CloudFormation template (like version, transform, description).

terminationProtection
Type:
boolean
Whether termination protection is enabled for this stack.

urlSuffix
Type:
string
The Amazon domain suffix for the region in which this stack is defined.

nestedStackParent?
Type:
Stack
(optional)
If this is a nested stack, returns it's parent stack.

nestedStackResource?
Type:
CfnResource
(optional)
If this is a nested stack, this represents its AWS::CloudFormation::Stack resource.
undefined for top-level (non-nested) stacks.
Methods


NameDescription


addDependency(target, reason?)Add a dependency between this stack and another stack.
addMetadata(key, value)Adds an arbitrary key-value pair, with information you want to record about the stack.
addTransform(transform)Add a Transform to this stack. A Transform is a macro that AWS CloudFormation uses to process your template.
exportStringListValue(exportedValue, options?)Create a CloudFormation Export for a string list value.
exportValue(exportedValue, options?)Create a CloudFormation Export for a string value.
formatArn(components)Creates an ARN from components.
getLogicalId(element)Allocates a stack-unique CloudFormation-compatible logical identity for a specific resource.
regionalFact(factName, defaultValue?)Look up a fact value for the given fact for the region of this stack.
renameLogicalId(oldId, newId)Rename a generated logical identities.
reportMissingContextKey(report)Indicate that a context key was expected.
resolve(obj)Resolve a tokenized value in the context of the current stack.
setParameter(name, value)Assign a value to one of the nested stack parameters.
splitArn(arn, arnFormat)Splits the provided ARN into its components.
toJsonString(obj, space?)Convert an object, potentially containing tokens, to a JSON string.
toString()Returns a string representation of this construct.
toYamlString(obj)Convert an object, potentially containing tokens, to a YAML string.
static isNestedStack(x)Checks if x is an object of type NestedStack.



addDependency(target, reason?)
public addDependency(target: Stack, reason?: string): void

Parameters

target Stack
reason string

Add a dependency between this stack and another stack.
This can be used to define dependencies between any two stacks within an
app, and also supports nested stacks.

addMetadata(key, value)
public addMetadata(key: string, value: any): void

Parameters

key string
value any

Adds an arbitrary key-value pair, with information you want to record about the stack.
These get translated to the Metadata section of the generated template.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html

addTransform(transform)
public addTransform(transform: string): void

Parameters

transform string  — The transform to add.

Add a Transform to this stack. A Transform is a macro that AWS CloudFormation uses to process your template.
Duplicate values are removed when stack is synthesized.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Example
declare const stack: Stack;

stack.addTransform('AWS::Serverless-2016-10-31')


exportStringListValue(exportedValue, options?)
public exportStringListValue(exportedValue: any, options?: ExportValueOptions): string[]

Parameters

exportedValue any
options ExportValueOptions

Returns

string[]

Create a CloudFormation Export for a string list value.
Returns a string list representing the corresponding Fn.importValue()
expression for this Export. The export expression is automatically wrapped with an
Fn::Join and the import value with an Fn::Split, since CloudFormation can only
export strings. You can control the name for the export by passing the name option.
If you don't supply a value for name, the value you're exporting must be
a Resource attribute (for example: bucket.bucketName) and it will be
given the same name as the automatic cross-stack reference that would be created
if you used the attribute in another Stack.
One of the uses for this method is to remove the relationship between
two Stacks established by automatic cross-stack references. It will
temporarily ensure that the CloudFormation Export still exists while you
remove the reference from the consuming stack. After that, you can remove
the resource and the manual export.
See exportValue for an example of this process.

exportValue(exportedValue, options?)
public exportValue(exportedValue: any, options?: ExportValueOptions): string

Parameters

exportedValue any
options ExportValueOptions

Returns

string

Create a CloudFormation Export for a string value.
Returns a string representing the corresponding Fn.importValue()
expression for this Export. You can control the name for the export by
passing the name option.
If you don't supply a value for name, the value you're exporting must be
a Resource attribute (for example: bucket.bucketName) and it will be
given the same name as the automatic cross-stack reference that would be created
if you used the attribute in another Stack.
One of the uses for this method is to remove the relationship between
two Stacks established by automatic cross-stack references. It will
temporarily ensure that the CloudFormation Export still exists while you
remove the reference from the consuming stack. After that, you can remove
the resource and the manual export.
Here is how the process works. Let's say there are two stacks,
producerStack and consumerStack, and producerStack has a bucket
called bucket, which is referenced by consumerStack (perhaps because
an AWS Lambda Function writes into it, or something like that).
It is not safe to remove producerStack.bucket because as the bucket is being
deleted, consumerStack might still be using it.
Instead, the process takes two deployments:
Deployment 1: break the relationship:

Make sure consumerStack no longer references bucket.bucketName (maybe the consumer
stack now uses its own bucket, or it writes to an AWS DynamoDB table, or maybe you just
remove the Lambda Function altogether).
In the ProducerStack class, call this.exportValue(this.bucket.bucketName). This
will make sure the CloudFormation Export continues to exist while the relationship
between the two stacks is being broken.
Deploy (this will effectively only change the consumerStack, but it's safe to deploy both).

Deployment 2: remove the bucket resource:

You are now free to remove the bucket resource from producerStack.
Don't forget to remove the exportValue() call as well.
Deploy again (this time only the producerStack will be changed -- the bucket will be deleted).


formatArn(components)
public formatArn(components: ArnComponents): string

Parameters

components ArnComponents

Returns

string

Creates an ARN from components.
If partition, region or account are not specified, the stack's
partition, region and account will be used.
If any component is the empty string, an empty string will be inserted
into the generated ARN at the location that component corresponds to.
The ARN will be formatted as follows:
arn:{partition}:{service}:{region}:{account}:{resource}{sep}{resource-name}
The required ARN pieces that are omitted will be taken from the stack that
the 'scope' is attached to. If all ARN pieces are supplied, the supplied scope
can be 'undefined'.

getLogicalId(element)
public getLogicalId(element: CfnElement): string

Parameters

element CfnElement  — The CloudFormation element for which a logical identity is needed.

Returns

string

Allocates a stack-unique CloudFormation-compatible logical identity for a specific resource.
This method is called when a CfnElement is created and used to render the
initial logical identity of resources. Logical ID renames are applied at
this stage.
This method uses the protected method allocateLogicalId to render the
logical ID for an element. To modify the naming scheme, extend the Stack
class and override this method.

regionalFact(factName, defaultValue?)
public regionalFact(factName: string, defaultValue?: string): string

Parameters

factName string
defaultValue string

Returns

string

Look up a fact value for the given fact for the region of this stack.
Will return a definite value only if the region of the current stack is resolved.
If not, a lookup map will be added to the stack and the lookup will be done at
CDK deployment time.
What regions will be included in the lookup map is controlled by the
@aws-cdk/core:target-partitions context value: it must be set to a list
of partitions, and only regions from the given partitions will be included.
If no such context key is set, all regions will be included.
This function is intended to be used by construct library authors. Application
builders can rely on the abstractions offered by construct libraries and do
not have to worry about regional facts.
If defaultValue is not given, it is an error if the fact is unknown for
the given region.

renameLogicalId(oldId, newId)
public renameLogicalId(oldId: string, newId: string): void

Parameters

oldId string
newId string

Rename a generated logical identities.
To modify the naming scheme strategy, extend the Stack class and
override the allocateLogicalId method.

reportMissingContextKey(report)
public reportMissingContextKey(report: MissingContext): void

Parameters

report MissingContext  — The set of parameters needed to obtain the context.

Indicate that a context key was expected.
Contains instructions which will be emitted into the cloud assembly on how
the key should be supplied.

resolve(obj)
public resolve(obj: any): any

Parameters

obj any

Returns

any

Resolve a tokenized value in the context of the current stack.

setParameter(name, value)
public setParameter(name: string, value: string): void

Parameters

name string  — The parameter name (ID).
value string  — The value to assign.

Assign a value to one of the nested stack parameters.

splitArn(arn, arnFormat)
public splitArn(arn: string, arnFormat: ArnFormat): ArnComponents

Parameters

arn string  — the ARN to split into its components.
arnFormat ArnFormat  — the expected format of 'arn' - depends on what format the service 'arn' represents uses.

Returns

ArnComponents

Splits the provided ARN into its components.
Works both if 'arn' is a string like 'arn:aws:s3:::bucket',
and a Token representing a dynamic CloudFormation expression
(in which case the returned components will also be dynamic CloudFormation expressions,
encoded as Tokens).

toJsonString(obj, space?)
public toJsonString(obj: any, space?: number): string

Parameters

obj any
space number

Returns

string

Convert an object, potentially containing tokens, to a JSON string.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

toYamlString(obj)
public toYamlString(obj: any): string

Parameters

obj any

Returns

string

Convert an object, potentially containing tokens, to a YAML string.

static isNestedStack(x)
public static isNestedStack(x: any): boolean

Parameters

x any

Returns

boolean

Checks if x is an object of type NestedStack.\n\n\n\nclass Stack (construct)


LanguageType name


 .NETAmazon.CDK.Stack
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Stack
 Javasoftware.amazon.awscdk.Stack
 Pythonaws_cdk.Stack
 TypeScript (source)aws-cdk-lib » Stack


Implements
IConstruct, IDependable, ITaggable
A root construct which represents a single CloudFormation stack.
Example
import * as cdk from 'aws-cdk-lib';
import * as s3 from 'aws-cdk-lib/aws-s3';

const app = new cdk.App();
const stack = new cdk.Stack(app, 'Stack');

declare const bucket: s3.IBucket;

new dynamodb.Table(stack, 'Table', {
  partitionKey: {
    name: 'id',
    type: dynamodb.AttributeType.STRING,
  },
  importSource: {
    compressionType: dynamodb.InputCompressionType.GZIP,
    inputFormat: dynamodb.InputFormat.csv({
      delimiter: ',',
      headerList: ['id', 'name'],
    }),
    bucket,
    keyPrefix: 'prefix',
  },
});

Initializer
new Stack(scope?: Construct, id?: string, props?: StackProps)

Parameters

scope Construct  — Parent of this stack, usually an App or a Stage, but could be any construct.
id string  — The construct ID of this stack.
props StackProps  — Stack properties.

Creates a new stack.
Construct Props


NameTypeDescription


analyticsReporting?booleanInclude runtime versioning information in this Stack.
crossRegionReferences?booleanEnable this flag to allow native cross region stack references.
description?stringA description of the stack.
env?EnvironmentThe AWS environment (account/region) where this stack will be deployed.
notificationArns?string[]SNS Topic ARNs that will receive stack events.
permissionsBoundary?PermissionsBoundaryOptions for applying a permissions boundary to all IAM Roles and Users created within this Stage.
stackName?stringName to deploy the stack with.
suppressTemplateIndentation?booleanEnable this flag to suppress indentation in generated CloudFormation templates.
synthesizer?IStackSynthesizerSynthesis method to use while deploying this stack.
tags?{ [string]: string }Stack tags that will be applied to all the taggable resources and the stack itself.
terminationProtection?booleanWhether to enable termination protection for this stack.



analyticsReporting?
Type:
boolean
(optional, default: analyticsReporting setting of containing App, or value of
'aws:cdk:version-reporting' context key)
Include runtime versioning information in this Stack.

crossRegionReferences?
Type:
boolean
(optional, default: false)
Enable this flag to allow native cross region stack references.
Enabling this will create a CloudFormation custom resource
in both the producing stack and consuming stack in order to perform the export/import
This feature is currently experimental

description?
Type:
string
(optional, default: No description.)
A description of the stack.

env?
Type:
Environment
(optional, default: The environment of the containing Stage if available,
otherwise create the stack will be environment-agnostic.)
The AWS environment (account/region) where this stack will be deployed.
Set the region/account fields of env to either a concrete value to
select the indicated environment (recommended for production stacks), or to
the values of environment variables
CDK_DEFAULT_REGION/CDK_DEFAULT_ACCOUNT to let the target environment
depend on the AWS credentials/configuration that the CDK CLI is executed
under (recommended for development stacks).
If the Stack is instantiated inside a Stage, any undefined
region/account fields from env will default to the same field on the
encompassing Stage, if configured there.
If either region or account are not set nor inherited from Stage, the
Stack will be considered "environment-agnostic"". Environment-agnostic
stacks can be deployed to any environment but may not be able to take
advantage of all features of the CDK. For example, they will not be able to
use environmental context lookups such as ec2.Vpc.fromLookup and will not
automatically translate Service Principals to the right format based on the
environment's AWS partition, and other such enhancements.
Example
// Use a concrete account and region to deploy this stack to:
// `.account` and `.region` will simply return these values.
new Stack(app, 'Stack1', {
  env: {
    account: '123456789012',
    region: 'us-east-1'
  },
});

// Use the CLI's current credentials to determine the target environment:
// `.account` and `.region` will reflect the account+region the CLI
// is configured to use (based on the user CLI credentials)
new Stack(app, 'Stack2', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION
  },
});

// Define multiple stacks stage associated with an environment
const myStage = new Stage(app, 'MyStage', {
  env: {
    account: '123456789012',
    region: 'us-east-1'
  }
});

// both of these stacks will use the stage's account/region:
// `.account` and `.region` will resolve to the concrete values as above
new MyStack(myStage, 'Stack1');
new YourStack(myStage, 'Stack2');

// Define an environment-agnostic stack:
// `.account` and `.region` will resolve to `{ "Ref": "AWS::AccountId" }` and `{ "Ref": "AWS::Region" }` respectively.
// which will only resolve to actual values by CloudFormation during deployment.
new MyStack(app, 'Stack1');


notificationArns?
Type:
string[]
(optional, default: no notfication arns.)
SNS Topic ARNs that will receive stack events.

permissionsBoundary?
Type:
PermissionsBoundary
(optional, default: no permissions boundary is applied)
Options for applying a permissions boundary to all IAM Roles and Users created within this Stage.

stackName?
Type:
string
(optional, default: Derived from construct path.)
Name to deploy the stack with.

suppressTemplateIndentation?
Type:
boolean
(optional, default: the value of @aws-cdk/core:suppressTemplateIndentation, or false if that is not set.)
Enable this flag to suppress indentation in generated CloudFormation templates.
If not specified, the value of the @aws-cdk/core:suppressTemplateIndentation
context key will be used. If that is not specified, then the
default value false will be used.

synthesizer?
Type:
IStackSynthesizer
(optional, default: The synthesizer specified on App, or DefaultStackSynthesizer otherwise.)
Synthesis method to use while deploying this stack.
The Stack Synthesizer controls aspects of synthesis and deployment,
like how assets are referenced and what IAM roles to use. For more
information, see the README of the main CDK package.
If not specified, the defaultStackSynthesizer from App will be used.
If that is not specified, DefaultStackSynthesizer is used if
@aws-cdk/core:newStyleStackSynthesis is set to true or the CDK major
version is v2. In CDK v1 LegacyStackSynthesizer is the default if no
other synthesizer is specified.

tags?
Type:
{ [string]: string }
(optional, default: {})
Stack tags that will be applied to all the taggable resources and the stack itself.

terminationProtection?
Type:
boolean
(optional, default: false)
Whether to enable termination protection for this stack.
Properties


NameTypeDescription


accountstringThe AWS account into which this stack will be deployed.
artifactIdstringThe ID of the cloud assembly artifact for this stack.
availabilityZonesstring[]Returns the list of AZs that are available in the AWS environment (account/region) associated with this stack.
bundlingRequiredbooleanIndicates whether the stack requires bundling or not.
dependenciesStack[]Return the stacks this stack depends on.
environmentstringThe environment coordinates in which this stack is deployed.
nestedbooleanIndicates if this is a nested stack, in which case parentStack will include a reference to it's parent.
nodeNodeThe tree node.
notificationArnsstring[]Returns the list of notification Amazon Resource Names (ARNs) for the current stack.
partitionstringThe partition in which this stack is defined.
regionstringThe AWS region into which this stack will be deployed (e.g. us-west-2).
stackIdstringThe ID of the stack.
stackNamestringThe concrete CloudFormation physical stack name.
synthesizerIStackSynthesizerSynthesis method for this stack.
tagsTagManagerTags to be applied to the stack.
templateFilestringThe name of the CloudFormation template file emitted to the output directory during synthesis.
templateOptionsITemplateOptionsOptions for CloudFormation template (like version, transform, description).
terminationProtectionbooleanWhether termination protection is enabled for this stack.
urlSuffixstringThe Amazon domain suffix for the region in which this stack is defined.
nestedStackParent?StackIf this is a nested stack, returns it's parent stack.
nestedStackResource?CfnResourceIf this is a nested stack, this represents its AWS::CloudFormation::Stack resource.



account
Type:
string
The AWS account into which this stack will be deployed.
This value is resolved according to the following rules:

The value provided to env.account when the stack is defined. This can
either be a concrete account (e.g. 585695031111) or the
Aws.ACCOUNT_ID token.
Aws.ACCOUNT_ID, which represents the CloudFormation intrinsic reference
{ "Ref": "AWS::AccountId" } encoded as a string token.

Preferably, you should use the return value as an opaque string and not
attempt to parse it to implement your logic. If you do, you must first
check that it is a concrete value an not an unresolved token. If this
value is an unresolved token (Token.isUnresolved(stack.account) returns
true), this implies that the user wishes that this stack will synthesize
into an account-agnostic template. In this case, your code should either
fail (throw an error, emit a synth error using Annotations.of(construct).addError()) or
implement some other account-agnostic behavior.

artifactId
Type:
string
The ID of the cloud assembly artifact for this stack.

availabilityZones
Type:
string[]
Returns the list of AZs that are available in the AWS environment (account/region) associated with this stack.
If the stack is environment-agnostic (either account and/or region are
tokens), this property will return an array with 2 tokens that will resolve
at deploy-time to the first two availability zones returned from CloudFormation's
Fn::GetAZs intrinsic function.
If they are not available in the context, returns a set of dummy values and
reports them as missing, and let the CLI resolve them by calling EC2
DescribeAvailabilityZones on the target environment.
To specify a different strategy for selecting availability zones override this method.

bundlingRequired
Type:
boolean
Indicates whether the stack requires bundling or not.

dependencies
Type:
Stack[]
Return the stacks this stack depends on.

environment
Type:
string
The environment coordinates in which this stack is deployed.
In the form
aws://account/region. Use stack.account and stack.region to obtain
the specific values, no need to parse.
You can use this value to determine if two stacks are targeting the same
environment.
If either stack.account or stack.region are not concrete values (e.g.
Aws.ACCOUNT_ID or Aws.REGION) the special strings unknown-account and/or
unknown-region will be used respectively to indicate this stack is
region/account-agnostic.

nested
Type:
boolean
Indicates if this is a nested stack, in which case parentStack will include a reference to it's parent.

node
Type:
Node
The tree node.

notificationArns
Type:
string[]
Returns the list of notification Amazon Resource Names (ARNs) for the current stack.

partition
Type:
string
The partition in which this stack is defined.

region
Type:
string
The AWS region into which this stack will be deployed (e.g. us-west-2).
This value is resolved according to the following rules:

The value provided to env.region when the stack is defined. This can
either be a concrete region (e.g. us-west-2) or the Aws.REGION
token.
Aws.REGION, which is represents the CloudFormation intrinsic reference
{ "Ref": "AWS::Region" } encoded as a string token.

Preferably, you should use the return value as an opaque string and not
attempt to parse it to implement your logic. If you do, you must first
check that it is a concrete value an not an unresolved token. If this
value is an unresolved token (Token.isUnresolved(stack.region) returns
true), this implies that the user wishes that this stack will synthesize
into a region-agnostic template. In this case, your code should either
fail (throw an error, emit a synth error using Annotations.of(construct).addError()) or
implement some other region-agnostic behavior.

stackId
Type:
string
The ID of the stack.
Example
// After resolving, looks like
'arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123'


stackName
Type:
string
The concrete CloudFormation physical stack name.
This is either the name defined explicitly in the stackName prop or
allocated based on the stack's location in the construct tree. Stacks that
are directly defined under the app use their construct id as their stack
name. Stacks that are defined deeper within the tree will use a hashed naming
scheme based on the construct path to ensure uniqueness.
If you wish to obtain the deploy-time AWS::StackName intrinsic,
you can use Aws.STACK_NAME directly.

synthesizer
Type:
IStackSynthesizer
Synthesis method for this stack.

tags
Type:
TagManager
Tags to be applied to the stack.

templateFile
Type:
string
The name of the CloudFormation template file emitted to the output directory during synthesis.
Example value: MyStack.template.json

templateOptions
Type:
ITemplateOptions
Options for CloudFormation template (like version, transform, description).

terminationProtection
Type:
boolean
Whether termination protection is enabled for this stack.

urlSuffix
Type:
string
The Amazon domain suffix for the region in which this stack is defined.

nestedStackParent?
Type:
Stack
(optional)
If this is a nested stack, returns it's parent stack.

nestedStackResource?
Type:
CfnResource
(optional)
If this is a nested stack, this represents its AWS::CloudFormation::Stack resource.
undefined for top-level (non-nested) stacks.
Methods


NameDescription


addDependency(target, reason?)Add a dependency between this stack and another stack.
addMetadata(key, value)Adds an arbitrary key-value pair, with information you want to record about the stack.
addTransform(transform)Add a Transform to this stack. A Transform is a macro that AWS CloudFormation uses to process your template.
exportStringListValue(exportedValue, options?)Create a CloudFormation Export for a string list value.
exportValue(exportedValue, options?)Create a CloudFormation Export for a string value.
formatArn(components)Creates an ARN from components.
getLogicalId(element)Allocates a stack-unique CloudFormation-compatible logical identity for a specific resource.
regionalFact(factName, defaultValue?)Look up a fact value for the given fact for the region of this stack.
renameLogicalId(oldId, newId)Rename a generated logical identities.
reportMissingContextKey(report)Indicate that a context key was expected.
resolve(obj)Resolve a tokenized value in the context of the current stack.
splitArn(arn, arnFormat)Splits the provided ARN into its components.
toJsonString(obj, space?)Convert an object, potentially containing tokens, to a JSON string.
toString()Returns a string representation of this construct.
toYamlString(obj)Convert an object, potentially containing tokens, to a YAML string.
protected allocateLogicalId(cfnElement)Returns the naming scheme used to allocate logical IDs.
static isStack(x)Return whether the given object is a Stack.
static of(construct)Looks up the first stack scope in which construct is defined.



addDependency(target, reason?)
public addDependency(target: Stack, reason?: string): void

Parameters

target Stack
reason string

Add a dependency between this stack and another stack.
This can be used to define dependencies between any two stacks within an
app, and also supports nested stacks.

addMetadata(key, value)
public addMetadata(key: string, value: any): void

Parameters

key string
value any

Adds an arbitrary key-value pair, with information you want to record about the stack.
These get translated to the Metadata section of the generated template.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html

addTransform(transform)
public addTransform(transform: string): void

Parameters

transform string  — The transform to add.

Add a Transform to this stack. A Transform is a macro that AWS CloudFormation uses to process your template.
Duplicate values are removed when stack is synthesized.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Example
declare const stack: Stack;

stack.addTransform('AWS::Serverless-2016-10-31')


exportStringListValue(exportedValue, options?)
public exportStringListValue(exportedValue: any, options?: ExportValueOptions): string[]

Parameters

exportedValue any
options ExportValueOptions

Returns

string[]

Create a CloudFormation Export for a string list value.
Returns a string list representing the corresponding Fn.importValue()
expression for this Export. The export expression is automatically wrapped with an
Fn::Join and the import value with an Fn::Split, since CloudFormation can only
export strings. You can control the name for the export by passing the name option.
If you don't supply a value for name, the value you're exporting must be
a Resource attribute (for example: bucket.bucketName) and it will be
given the same name as the automatic cross-stack reference that would be created
if you used the attribute in another Stack.
One of the uses for this method is to remove the relationship between
two Stacks established by automatic cross-stack references. It will
temporarily ensure that the CloudFormation Export still exists while you
remove the reference from the consuming stack. After that, you can remove
the resource and the manual export.
See exportValue for an example of this process.

exportValue(exportedValue, options?)
public exportValue(exportedValue: any, options?: ExportValueOptions): string

Parameters

exportedValue any
options ExportValueOptions

Returns

string

Create a CloudFormation Export for a string value.
Returns a string representing the corresponding Fn.importValue()
expression for this Export. You can control the name for the export by
passing the name option.
If you don't supply a value for name, the value you're exporting must be
a Resource attribute (for example: bucket.bucketName) and it will be
given the same name as the automatic cross-stack reference that would be created
if you used the attribute in another Stack.
One of the uses for this method is to remove the relationship between
two Stacks established by automatic cross-stack references. It will
temporarily ensure that the CloudFormation Export still exists while you
remove the reference from the consuming stack. After that, you can remove
the resource and the manual export.
Here is how the process works. Let's say there are two stacks,
producerStack and consumerStack, and producerStack has a bucket
called bucket, which is referenced by consumerStack (perhaps because
an AWS Lambda Function writes into it, or something like that).
It is not safe to remove producerStack.bucket because as the bucket is being
deleted, consumerStack might still be using it.
Instead, the process takes two deployments:
Deployment 1: break the relationship:

Make sure consumerStack no longer references bucket.bucketName (maybe the consumer
stack now uses its own bucket, or it writes to an AWS DynamoDB table, or maybe you just
remove the Lambda Function altogether).
In the ProducerStack class, call this.exportValue(this.bucket.bucketName). This
will make sure the CloudFormation Export continues to exist while the relationship
between the two stacks is being broken.
Deploy (this will effectively only change the consumerStack, but it's safe to deploy both).

Deployment 2: remove the bucket resource:

You are now free to remove the bucket resource from producerStack.
Don't forget to remove the exportValue() call as well.
Deploy again (this time only the producerStack will be changed -- the bucket will be deleted).


formatArn(components)
public formatArn(components: ArnComponents): string

Parameters

components ArnComponents

Returns

string

Creates an ARN from components.
If partition, region or account are not specified, the stack's
partition, region and account will be used.
If any component is the empty string, an empty string will be inserted
into the generated ARN at the location that component corresponds to.
The ARN will be formatted as follows:
arn:{partition}:{service}:{region}:{account}:{resource}{sep}{resource-name}
The required ARN pieces that are omitted will be taken from the stack that
the 'scope' is attached to. If all ARN pieces are supplied, the supplied scope
can be 'undefined'.

getLogicalId(element)
public getLogicalId(element: CfnElement): string

Parameters

element CfnElement  — The CloudFormation element for which a logical identity is needed.

Returns

string

Allocates a stack-unique CloudFormation-compatible logical identity for a specific resource.
This method is called when a CfnElement is created and used to render the
initial logical identity of resources. Logical ID renames are applied at
this stage.
This method uses the protected method allocateLogicalId to render the
logical ID for an element. To modify the naming scheme, extend the Stack
class and override this method.

regionalFact(factName, defaultValue?)
public regionalFact(factName: string, defaultValue?: string): string

Parameters

factName string
defaultValue string

Returns

string

Look up a fact value for the given fact for the region of this stack.
Will return a definite value only if the region of the current stack is resolved.
If not, a lookup map will be added to the stack and the lookup will be done at
CDK deployment time.
What regions will be included in the lookup map is controlled by the
@aws-cdk/core:target-partitions context value: it must be set to a list
of partitions, and only regions from the given partitions will be included.
If no such context key is set, all regions will be included.
This function is intended to be used by construct library authors. Application
builders can rely on the abstractions offered by construct libraries and do
not have to worry about regional facts.
If defaultValue is not given, it is an error if the fact is unknown for
the given region.

renameLogicalId(oldId, newId)
public renameLogicalId(oldId: string, newId: string): void

Parameters

oldId string
newId string

Rename a generated logical identities.
To modify the naming scheme strategy, extend the Stack class and
override the allocateLogicalId method.

reportMissingContextKey(report)
public reportMissingContextKey(report: MissingContext): void

Parameters

report MissingContext  — The set of parameters needed to obtain the context.

Indicate that a context key was expected.
Contains instructions which will be emitted into the cloud assembly on how
the key should be supplied.

resolve(obj)
public resolve(obj: any): any

Parameters

obj any

Returns

any

Resolve a tokenized value in the context of the current stack.

splitArn(arn, arnFormat)
public splitArn(arn: string, arnFormat: ArnFormat): ArnComponents

Parameters

arn string  — the ARN to split into its components.
arnFormat ArnFormat  — the expected format of 'arn' - depends on what format the service 'arn' represents uses.

Returns

ArnComponents

Splits the provided ARN into its components.
Works both if 'arn' is a string like 'arn:aws:s3:::bucket',
and a Token representing a dynamic CloudFormation expression
(in which case the returned components will also be dynamic CloudFormation expressions,
encoded as Tokens).

toJsonString(obj, space?)
public toJsonString(obj: any, space?: number): string

Parameters

obj any
space number

Returns

string

Convert an object, potentially containing tokens, to a JSON string.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

toYamlString(obj)
public toYamlString(obj: any): string

Parameters

obj any

Returns

string

Convert an object, potentially containing tokens, to a YAML string.

protected allocateLogicalId(cfnElement)
protected allocateLogicalId(cfnElement: CfnElement): string

Parameters

cfnElement CfnElement  — The element for which the logical ID is allocated.

Returns

string

Returns the naming scheme used to allocate logical IDs.
By default, uses
the HashedAddressingScheme but this method can be overridden to customize
this behavior.
In order to make sure logical IDs are unique and stable, we hash the resource
construct tree path (i.e. toplevel/secondlevel/.../myresource) and add it as
a suffix to the path components joined without a separator (CloudFormation
IDs only allow alphanumeric characters).
The result will be:
<path.join('')><md5(path.join('/')>
"human"      "hash"
If the "human" part of the ID exceeds 240 characters, we simply trim it so
the total ID doesn't exceed CloudFormation's 255 character limit.
We only take 8 characters from the md5 hash (0.000005 chance of collision).
Special cases:

If the path only contains a single component (i.e. it's a top-level
resource), we won't add the hash to it. The hash is not needed for
disambiguation and also, it allows for a more straightforward migration an
existing CloudFormation template to a CDK stack without logical ID changes
(or renames).
For aesthetic reasons, if the last components of the path are the same
(i.e. L1/L2/Pipeline/Pipeline), they will be de-duplicated to make the
resulting human portion of the ID more pleasing: L1L2Pipeline&lt;HASH&gt;
instead of L1L2PipelinePipeline&lt;HASH&gt;
If a component is named "Default" it will be omitted from the path. This
allows refactoring higher level abstractions around constructs without affecting
the IDs of already deployed resources.
If a component is named "Resource" it will be omitted from the user-visible
path, but included in the hash. This reduces visual noise in the human readable
part of the identifier.


static isStack(x)
public static isStack(x: any): boolean

Parameters

x any

Returns

boolean

Return whether the given object is a Stack.
We do attribute detection since we can't reliably use 'instanceof'.

static of(construct)
public static of(construct: IConstruct): Stack

Parameters

construct IConstruct  — The construct to start the search from.

Returns

Stack

Looks up the first stack scope in which construct is defined.
Fails if there is no stack up the tree.\n\nclass Stack (construct)


LanguageType name


 .NETAmazon.CDK.Stack
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Stack
 Javasoftware.amazon.awscdk.Stack
 Pythonaws_cdk.Stack
 TypeScript (source)aws-cdk-lib » Stack


Implements
IConstruct, IDependable, ITaggable
A root construct which represents a single CloudFormation stack.
Example
import * as cdk from 'aws-cdk-lib';
import * as s3 from 'aws-cdk-lib/aws-s3';

const app = new cdk.App();
const stack = new cdk.Stack(app, 'Stack');

declare const bucket: s3.IBucket;

new dynamodb.Table(stack, 'Table', {
  partitionKey: {
    name: 'id',
    type: dynamodb.AttributeType.STRING,
  },
  importSource: {
    compressionType: dynamodb.InputCompressionType.GZIP,
    inputFormat: dynamodb.InputFormat.csv({
      delimiter: ',',
      headerList: ['id', 'name'],
    }),
    bucket,
    keyPrefix: 'prefix',
  },
});

Initializer
new Stack(scope?: Construct, id?: string, props?: StackProps)

Parameters

scope Construct  — Parent of this stack, usually an App or a Stage, but could be any construct.
id string  — The construct ID of this stack.
props StackProps  — Stack properties.

Creates a new stack.
Construct Props


NameTypeDescription


analyticsReporting?booleanInclude runtime versioning information in this Stack.
crossRegionReferences?booleanEnable this flag to allow native cross region stack references.
description?stringA description of the stack.
env?EnvironmentThe AWS environment (account/region) where this stack will be deployed.
notificationArns?string[]SNS Topic ARNs that will receive stack events.
permissionsBoundary?PermissionsBoundaryOptions for applying a permissions boundary to all IAM Roles and Users created within this Stage.
stackName?stringName to deploy the stack with.
suppressTemplateIndentation?booleanEnable this flag to suppress indentation in generated CloudFormation templates.
synthesizer?IStackSynthesizerSynthesis method to use while deploying this stack.
tags?{ [string]: string }Stack tags that will be applied to all the taggable resources and the stack itself.
terminationProtection?booleanWhether to enable termination protection for this stack.



analyticsReporting?
Type:
boolean
(optional, default: analyticsReporting setting of containing App, or value of
'aws:cdk:version-reporting' context key)
Include runtime versioning information in this Stack.

crossRegionReferences?
Type:
boolean
(optional, default: false)
Enable this flag to allow native cross region stack references.
Enabling this will create a CloudFormation custom resource
in both the producing stack and consuming stack in order to perform the export/import
This feature is currently experimental

description?
Type:
string
(optional, default: No description.)
A description of the stack.

env?
Type:
Environment
(optional, default: The environment of the containing Stage if available,
otherwise create the stack will be environment-agnostic.)
The AWS environment (account/region) where this stack will be deployed.
Set the region/account fields of env to either a concrete value to
select the indicated environment (recommended for production stacks), or to
the values of environment variables
CDK_DEFAULT_REGION/CDK_DEFAULT_ACCOUNT to let the target environment
depend on the AWS credentials/configuration that the CDK CLI is executed
under (recommended for development stacks).
If the Stack is instantiated inside a Stage, any undefined
region/account fields from env will default to the same field on the
encompassing Stage, if configured there.
If either region or account are not set nor inherited from Stage, the
Stack will be considered "environment-agnostic"". Environment-agnostic
stacks can be deployed to any environment but may not be able to take
advantage of all features of the CDK. For example, they will not be able to
use environmental context lookups such as ec2.Vpc.fromLookup and will not
automatically translate Service Principals to the right format based on the
environment's AWS partition, and other such enhancements.
Example
// Use a concrete account and region to deploy this stack to:
// `.account` and `.region` will simply return these values.
new Stack(app, 'Stack1', {
  env: {
    account: '123456789012',
    region: 'us-east-1'
  },
});

// Use the CLI's current credentials to determine the target environment:
// `.account` and `.region` will reflect the account+region the CLI
// is configured to use (based on the user CLI credentials)
new Stack(app, 'Stack2', {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION
  },
});

// Define multiple stacks stage associated with an environment
const myStage = new Stage(app, 'MyStage', {
  env: {
    account: '123456789012',
    region: 'us-east-1'
  }
});

// both of these stacks will use the stage's account/region:
// `.account` and `.region` will resolve to the concrete values as above
new MyStack(myStage, 'Stack1');
new YourStack(myStage, 'Stack2');

// Define an environment-agnostic stack:
// `.account` and `.region` will resolve to `{ "Ref": "AWS::AccountId" }` and `{ "Ref": "AWS::Region" }` respectively.
// which will only resolve to actual values by CloudFormation during deployment.
new MyStack(app, 'Stack1');


notificationArns?
Type:
string[]
(optional, default: no notfication arns.)
SNS Topic ARNs that will receive stack events.

permissionsBoundary?
Type:
PermissionsBoundary
(optional, default: no permissions boundary is applied)
Options for applying a permissions boundary to all IAM Roles and Users created within this Stage.

stackName?
Type:
string
(optional, default: Derived from construct path.)
Name to deploy the stack with.

suppressTemplateIndentation?
Type:
boolean
(optional, default: the value of @aws-cdk/core:suppressTemplateIndentation, or false if that is not set.)
Enable this flag to suppress indentation in generated CloudFormation templates.
If not specified, the value of the @aws-cdk/core:suppressTemplateIndentation
context key will be used. If that is not specified, then the
default value false will be used.

synthesizer?
Type:
IStackSynthesizer
(optional, default: The synthesizer specified on App, or DefaultStackSynthesizer otherwise.)
Synthesis method to use while deploying this stack.
The Stack Synthesizer controls aspects of synthesis and deployment,
like how assets are referenced and what IAM roles to use. For more
information, see the README of the main CDK package.
If not specified, the defaultStackSynthesizer from App will be used.
If that is not specified, DefaultStackSynthesizer is used if
@aws-cdk/core:newStyleStackSynthesis is set to true or the CDK major
version is v2. In CDK v1 LegacyStackSynthesizer is the default if no
other synthesizer is specified.

tags?
Type:
{ [string]: string }
(optional, default: {})
Stack tags that will be applied to all the taggable resources and the stack itself.

terminationProtection?
Type:
boolean
(optional, default: false)
Whether to enable termination protection for this stack.
Properties


NameTypeDescription


accountstringThe AWS account into which this stack will be deployed.
artifactIdstringThe ID of the cloud assembly artifact for this stack.
availabilityZonesstring[]Returns the list of AZs that are available in the AWS environment (account/region) associated with this stack.
bundlingRequiredbooleanIndicates whether the stack requires bundling or not.
dependenciesStack[]Return the stacks this stack depends on.
environmentstringThe environment coordinates in which this stack is deployed.
nestedbooleanIndicates if this is a nested stack, in which case parentStack will include a reference to it's parent.
nodeNodeThe tree node.
notificationArnsstring[]Returns the list of notification Amazon Resource Names (ARNs) for the current stack.
partitionstringThe partition in which this stack is defined.
regionstringThe AWS region into which this stack will be deployed (e.g. us-west-2).
stackIdstringThe ID of the stack.
stackNamestringThe concrete CloudFormation physical stack name.
synthesizerIStackSynthesizerSynthesis method for this stack.
tagsTagManagerTags to be applied to the stack.
templateFilestringThe name of the CloudFormation template file emitted to the output directory during synthesis.
templateOptionsITemplateOptionsOptions for CloudFormation template (like version, transform, description).
terminationProtectionbooleanWhether termination protection is enabled for this stack.
urlSuffixstringThe Amazon domain suffix for the region in which this stack is defined.
nestedStackParent?StackIf this is a nested stack, returns it's parent stack.
nestedStackResource?CfnResourceIf this is a nested stack, this represents its AWS::CloudFormation::Stack resource.



account
Type:
string
The AWS account into which this stack will be deployed.
This value is resolved according to the following rules:

The value provided to env.account when the stack is defined. This can
either be a concrete account (e.g. 585695031111) or the
Aws.ACCOUNT_ID token.
Aws.ACCOUNT_ID, which represents the CloudFormation intrinsic reference
{ "Ref": "AWS::AccountId" } encoded as a string token.

Preferably, you should use the return value as an opaque string and not
attempt to parse it to implement your logic. If you do, you must first
check that it is a concrete value an not an unresolved token. If this
value is an unresolved token (Token.isUnresolved(stack.account) returns
true), this implies that the user wishes that this stack will synthesize
into an account-agnostic template. In this case, your code should either
fail (throw an error, emit a synth error using Annotations.of(construct).addError()) or
implement some other account-agnostic behavior.

artifactId
Type:
string
The ID of the cloud assembly artifact for this stack.

availabilityZones
Type:
string[]
Returns the list of AZs that are available in the AWS environment (account/region) associated with this stack.
If the stack is environment-agnostic (either account and/or region are
tokens), this property will return an array with 2 tokens that will resolve
at deploy-time to the first two availability zones returned from CloudFormation's
Fn::GetAZs intrinsic function.
If they are not available in the context, returns a set of dummy values and
reports them as missing, and let the CLI resolve them by calling EC2
DescribeAvailabilityZones on the target environment.
To specify a different strategy for selecting availability zones override this method.

bundlingRequired
Type:
boolean
Indicates whether the stack requires bundling or not.

dependencies
Type:
Stack[]
Return the stacks this stack depends on.

environment
Type:
string
The environment coordinates in which this stack is deployed.
In the form
aws://account/region. Use stack.account and stack.region to obtain
the specific values, no need to parse.
You can use this value to determine if two stacks are targeting the same
environment.
If either stack.account or stack.region are not concrete values (e.g.
Aws.ACCOUNT_ID or Aws.REGION) the special strings unknown-account and/or
unknown-region will be used respectively to indicate this stack is
region/account-agnostic.

nested
Type:
boolean
Indicates if this is a nested stack, in which case parentStack will include a reference to it's parent.

node
Type:
Node
The tree node.

notificationArns
Type:
string[]
Returns the list of notification Amazon Resource Names (ARNs) for the current stack.

partition
Type:
string
The partition in which this stack is defined.

region
Type:
string
The AWS region into which this stack will be deployed (e.g. us-west-2).
This value is resolved according to the following rules:

The value provided to env.region when the stack is defined. This can
either be a concrete region (e.g. us-west-2) or the Aws.REGION
token.
Aws.REGION, which is represents the CloudFormation intrinsic reference
{ "Ref": "AWS::Region" } encoded as a string token.

Preferably, you should use the return value as an opaque string and not
attempt to parse it to implement your logic. If you do, you must first
check that it is a concrete value an not an unresolved token. If this
value is an unresolved token (Token.isUnresolved(stack.region) returns
true), this implies that the user wishes that this stack will synthesize
into a region-agnostic template. In this case, your code should either
fail (throw an error, emit a synth error using Annotations.of(construct).addError()) or
implement some other region-agnostic behavior.

stackId
Type:
string
The ID of the stack.
Example
// After resolving, looks like
'arn:aws:cloudformation:us-west-2:123456789012:stack/teststack/51af3dc0-da77-11e4-872e-1234567db123'


stackName
Type:
string
The concrete CloudFormation physical stack name.
This is either the name defined explicitly in the stackName prop or
allocated based on the stack's location in the construct tree. Stacks that
are directly defined under the app use their construct id as their stack
name. Stacks that are defined deeper within the tree will use a hashed naming
scheme based on the construct path to ensure uniqueness.
If you wish to obtain the deploy-time AWS::StackName intrinsic,
you can use Aws.STACK_NAME directly.

synthesizer
Type:
IStackSynthesizer
Synthesis method for this stack.

tags
Type:
TagManager
Tags to be applied to the stack.

templateFile
Type:
string
The name of the CloudFormation template file emitted to the output directory during synthesis.
Example value: MyStack.template.json

templateOptions
Type:
ITemplateOptions
Options for CloudFormation template (like version, transform, description).

terminationProtection
Type:
boolean
Whether termination protection is enabled for this stack.

urlSuffix
Type:
string
The Amazon domain suffix for the region in which this stack is defined.

nestedStackParent?
Type:
Stack
(optional)
If this is a nested stack, returns it's parent stack.

nestedStackResource?
Type:
CfnResource
(optional)
If this is a nested stack, this represents its AWS::CloudFormation::Stack resource.
undefined for top-level (non-nested) stacks.
Methods


NameDescription


addDependency(target, reason?)Add a dependency between this stack and another stack.
addMetadata(key, value)Adds an arbitrary key-value pair, with information you want to record about the stack.
addTransform(transform)Add a Transform to this stack. A Transform is a macro that AWS CloudFormation uses to process your template.
exportStringListValue(exportedValue, options?)Create a CloudFormation Export for a string list value.
exportValue(exportedValue, options?)Create a CloudFormation Export for a string value.
formatArn(components)Creates an ARN from components.
getLogicalId(element)Allocates a stack-unique CloudFormation-compatible logical identity for a specific resource.
regionalFact(factName, defaultValue?)Look up a fact value for the given fact for the region of this stack.
renameLogicalId(oldId, newId)Rename a generated logical identities.
reportMissingContextKey(report)Indicate that a context key was expected.
resolve(obj)Resolve a tokenized value in the context of the current stack.
splitArn(arn, arnFormat)Splits the provided ARN into its components.
toJsonString(obj, space?)Convert an object, potentially containing tokens, to a JSON string.
toString()Returns a string representation of this construct.
toYamlString(obj)Convert an object, potentially containing tokens, to a YAML string.
protected allocateLogicalId(cfnElement)Returns the naming scheme used to allocate logical IDs.
static isStack(x)Return whether the given object is a Stack.
static of(construct)Looks up the first stack scope in which construct is defined.



addDependency(target, reason?)
public addDependency(target: Stack, reason?: string): void

Parameters

target Stack
reason string

Add a dependency between this stack and another stack.
This can be used to define dependencies between any two stacks within an
app, and also supports nested stacks.

addMetadata(key, value)
public addMetadata(key: string, value: any): void

Parameters

key string
value any

Adds an arbitrary key-value pair, with information you want to record about the stack.
These get translated to the Metadata section of the generated template.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html

addTransform(transform)
public addTransform(transform: string): void

Parameters

transform string  — The transform to add.

Add a Transform to this stack. A Transform is a macro that AWS CloudFormation uses to process your template.
Duplicate values are removed when stack is synthesized.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Example
declare const stack: Stack;

stack.addTransform('AWS::Serverless-2016-10-31')


exportStringListValue(exportedValue, options?)
public exportStringListValue(exportedValue: any, options?: ExportValueOptions): string[]

Parameters

exportedValue any
options ExportValueOptions

Returns

string[]

Create a CloudFormation Export for a string list value.
Returns a string list representing the corresponding Fn.importValue()
expression for this Export. The export expression is automatically wrapped with an
Fn::Join and the import value with an Fn::Split, since CloudFormation can only
export strings. You can control the name for the export by passing the name option.
If you don't supply a value for name, the value you're exporting must be
a Resource attribute (for example: bucket.bucketName) and it will be
given the same name as the automatic cross-stack reference that would be created
if you used the attribute in another Stack.
One of the uses for this method is to remove the relationship between
two Stacks established by automatic cross-stack references. It will
temporarily ensure that the CloudFormation Export still exists while you
remove the reference from the consuming stack. After that, you can remove
the resource and the manual export.
See exportValue for an example of this process.

exportValue(exportedValue, options?)
public exportValue(exportedValue: any, options?: ExportValueOptions): string

Parameters

exportedValue any
options ExportValueOptions

Returns

string

Create a CloudFormation Export for a string value.
Returns a string representing the corresponding Fn.importValue()
expression for this Export. You can control the name for the export by
passing the name option.
If you don't supply a value for name, the value you're exporting must be
a Resource attribute (for example: bucket.bucketName) and it will be
given the same name as the automatic cross-stack reference that would be created
if you used the attribute in another Stack.
One of the uses for this method is to remove the relationship between
two Stacks established by automatic cross-stack references. It will
temporarily ensure that the CloudFormation Export still exists while you
remove the reference from the consuming stack. After that, you can remove
the resource and the manual export.
Here is how the process works. Let's say there are two stacks,
producerStack and consumerStack, and producerStack has a bucket
called bucket, which is referenced by consumerStack (perhaps because
an AWS Lambda Function writes into it, or something like that).
It is not safe to remove producerStack.bucket because as the bucket is being
deleted, consumerStack might still be using it.
Instead, the process takes two deployments:
Deployment 1: break the relationship:

Make sure consumerStack no longer references bucket.bucketName (maybe the consumer
stack now uses its own bucket, or it writes to an AWS DynamoDB table, or maybe you just
remove the Lambda Function altogether).
In the ProducerStack class, call this.exportValue(this.bucket.bucketName). This
will make sure the CloudFormation Export continues to exist while the relationship
between the two stacks is being broken.
Deploy (this will effectively only change the consumerStack, but it's safe to deploy both).

Deployment 2: remove the bucket resource:

You are now free to remove the bucket resource from producerStack.
Don't forget to remove the exportValue() call as well.
Deploy again (this time only the producerStack will be changed -- the bucket will be deleted).


formatArn(components)
public formatArn(components: ArnComponents): string

Parameters

components ArnComponents

Returns

string

Creates an ARN from components.
If partition, region or account are not specified, the stack's
partition, region and account will be used.
If any component is the empty string, an empty string will be inserted
into the generated ARN at the location that component corresponds to.
The ARN will be formatted as follows:
arn:{partition}:{service}:{region}:{account}:{resource}{sep}{resource-name}
The required ARN pieces that are omitted will be taken from the stack that
the 'scope' is attached to. If all ARN pieces are supplied, the supplied scope
can be 'undefined'.

getLogicalId(element)
public getLogicalId(element: CfnElement): string

Parameters

element CfnElement  — The CloudFormation element for which a logical identity is needed.

Returns

string

Allocates a stack-unique CloudFormation-compatible logical identity for a specific resource.
This method is called when a CfnElement is created and used to render the
initial logical identity of resources. Logical ID renames are applied at
this stage.
This method uses the protected method allocateLogicalId to render the
logical ID for an element. To modify the naming scheme, extend the Stack
class and override this method.

regionalFact(factName, defaultValue?)
public regionalFact(factName: string, defaultValue?: string): string

Parameters

factName string
defaultValue string

Returns

string

Look up a fact value for the given fact for the region of this stack.
Will return a definite value only if the region of the current stack is resolved.
If not, a lookup map will be added to the stack and the lookup will be done at
CDK deployment time.
What regions will be included in the lookup map is controlled by the
@aws-cdk/core:target-partitions context value: it must be set to a list
of partitions, and only regions from the given partitions will be included.
If no such context key is set, all regions will be included.
This function is intended to be used by construct library authors. Application
builders can rely on the abstractions offered by construct libraries and do
not have to worry about regional facts.
If defaultValue is not given, it is an error if the fact is unknown for
the given region.

renameLogicalId(oldId, newId)
public renameLogicalId(oldId: string, newId: string): void

Parameters

oldId string
newId string

Rename a generated logical identities.
To modify the naming scheme strategy, extend the Stack class and
override the allocateLogicalId method.

reportMissingContextKey(report)
public reportMissingContextKey(report: MissingContext): void

Parameters

report MissingContext  — The set of parameters needed to obtain the context.

Indicate that a context key was expected.
Contains instructions which will be emitted into the cloud assembly on how
the key should be supplied.

resolve(obj)
public resolve(obj: any): any

Parameters

obj any

Returns

any

Resolve a tokenized value in the context of the current stack.

splitArn(arn, arnFormat)
public splitArn(arn: string, arnFormat: ArnFormat): ArnComponents

Parameters

arn string  — the ARN to split into its components.
arnFormat ArnFormat  — the expected format of 'arn' - depends on what format the service 'arn' represents uses.

Returns

ArnComponents

Splits the provided ARN into its components.
Works both if 'arn' is a string like 'arn:aws:s3:::bucket',
and a Token representing a dynamic CloudFormation expression
(in which case the returned components will also be dynamic CloudFormation expressions,
encoded as Tokens).

toJsonString(obj, space?)
public toJsonString(obj: any, space?: number): string

Parameters

obj any
space number

Returns

string

Convert an object, potentially containing tokens, to a JSON string.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

toYamlString(obj)
public toYamlString(obj: any): string

Parameters

obj any

Returns

string

Convert an object, potentially containing tokens, to a YAML string.

protected allocateLogicalId(cfnElement)
protected allocateLogicalId(cfnElement: CfnElement): string

Parameters

cfnElement CfnElement  — The element for which the logical ID is allocated.

Returns

string

Returns the naming scheme used to allocate logical IDs.
By default, uses
the HashedAddressingScheme but this method can be overridden to customize
this behavior.
In order to make sure logical IDs are unique and stable, we hash the resource
construct tree path (i.e. toplevel/secondlevel/.../myresource) and add it as
a suffix to the path components joined without a separator (CloudFormation
IDs only allow alphanumeric characters).
The result will be:
<path.join('')><md5(path.join('/')>
"human"      "hash"
If the "human" part of the ID exceeds 240 characters, we simply trim it so
the total ID doesn't exceed CloudFormation's 255 character limit.
We only take 8 characters from the md5 hash (0.000005 chance of collision).
Special cases:

If the path only contains a single component (i.e. it's a top-level
resource), we won't add the hash to it. The hash is not needed for
disambiguation and also, it allows for a more straightforward migration an
existing CloudFormation template to a CDK stack without logical ID changes
(or renames).
For aesthetic reasons, if the last components of the path are the same
(i.e. L1/L2/Pipeline/Pipeline), they will be de-duplicated to make the
resulting human portion of the ID more pleasing: L1L2Pipeline&lt;HASH&gt;
instead of L1L2PipelinePipeline&lt;HASH&gt;
If a component is named "Default" it will be omitted from the path. This
allows refactoring higher level abstractions around constructs without affecting
the IDs of already deployed resources.
If a component is named "Resource" it will be omitted from the user-visible
path, but included in the hash. This reduces visual noise in the human readable
part of the identifier.


static isStack(x)
public static isStack(x: any): boolean

Parameters

x any

Returns

boolean

Return whether the given object is a Stack.
We do attribute detection since we can't reliably use 'instanceof'.

static of(construct)
public static of(construct: IConstruct): Stack

Parameters

construct IConstruct  — The construct to start the search from.

Returns

Stack

Looks up the first stack scope in which construct is defined.
Fails if there is no stack up the tree.\n\n\n\nclass Stage (construct)


LanguageType name


 .NETAmazon.CDK.Stage
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Stage
 Javasoftware.amazon.awscdk.Stage
 Pythonaws_cdk.Stage
 TypeScript (source)aws-cdk-lib » Stage


Implements
IConstruct, IDependable
An abstract application modeling unit consisting of Stacks that should be deployed together.
Derive a subclass of Stage and use it to model a single instance of your
application.
You can then instantiate your subclass multiple times to model multiple
copies of your application which should be be deployed to different
environments.
Example
declare const pipeline: pipelines.CodePipeline;
const preprod = new MyApplicationStage(this, 'PreProd');
const prod = new MyApplicationStage(this, 'Prod');

pipeline.addStage(preprod, {
  post: [
    new pipelines.ShellStep('Validate Endpoint', {
      commands: ['curl -Ssf https://my.webservice.com/'],
    }),
  ],
});
pipeline.addStage(prod, {
  pre: [new pipelines.ManualApprovalStep('PromoteToProd')],
});

Initializer
new Stage(scope: Construct, id: string, props?: StageProps)

Parameters

scope Construct
id string
props StageProps

Construct Props


NameTypeDescription


env?EnvironmentDefault AWS environment (account/region) for Stacks in this Stage.
outdir?stringThe output directory into which to emit synthesized artifacts.
permissionsBoundary?PermissionsBoundaryOptions for applying a permissions boundary to all IAM Roles and Users created within this Stage.
policyValidationBeta1?IPolicyValidationPluginBeta1[]Validation plugins to run during synthesis.
stageName?stringName of this stage.



env?
Type:
Environment
(optional, default: The environments should be configured on the Stacks.)
Default AWS environment (account/region) for Stacks in this Stage.
Stacks defined inside this Stage with either region or account missing
from its env will use the corresponding field given here.
If either region or accountis is not configured for Stack (either on
the Stack itself or on the containing Stage), the Stack will be
environment-agnostic.
Environment-agnostic stacks can be deployed to any environment, may not be
able to take advantage of all features of the CDK. For example, they will
not be able to use environmental context lookups, will not automatically
translate Service Principals to the right format based on the environment's
AWS partition, and other such enhancements.
Example
// Use a concrete account and region to deploy this Stage to
new Stage(app, 'Stage1', {
  env: { account: '123456789012', region: 'us-east-1' },
});

// Use the CLI's current credentials to determine the target environment
new Stage(app, 'Stage2', {
  env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});


outdir?
Type:
string
(optional, default: for nested stages, outdir will be determined as a relative
directory to the outdir of the app. For apps, if outdir is not specified, a
temporary directory will be created.)
The output directory into which to emit synthesized artifacts.
Can only be specified if this stage is the root stage (the app). If this is
specified and this stage is nested within another stage, an error will be
thrown.

permissionsBoundary?
Type:
PermissionsBoundary
(optional, default: no permissions boundary is applied)
Options for applying a permissions boundary to all IAM Roles and Users created within this Stage.
Be aware that this feature uses Aspects, and the Aspects are applied at the
Stack level with a priority of MUTATING (if the feature flag
@aws-cdk/core:aspectPrioritiesMutating is set) or DEFAULT (if the flag
is not set). This is relevant if you are both using your own Aspects to
assign Permissions Boundaries, as well as specifying this property.  The
Aspect added by this property will overwrite the Permissions Boundary
assigned by your own Aspect if both: (a) your Aspect has a lower or equal
priority to the automatic Aspect, and (b) your Aspect is applied above
the Stack level.  If either of those conditions are not true, your own
Aspect will win.
We recommend assigning Permissions Boundaries only using the provided APIs,
and not using custom Aspects.

policyValidationBeta1?
Type:
IPolicyValidationPluginBeta1[]
(optional, default: no validation plugins are used)
Validation plugins to run during synthesis.
If any plugin reports any violation,
synthesis will be interrupted and the report displayed to the user.

stageName?
Type:
string
(optional, default: Derived from the id.)
Name of this stage.
Properties


NameTypeDescription


artifactIdstringArtifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string.
assetOutdirstringThe cloud assembly asset output directory.
nodeNodeThe tree node.
outdirstringThe cloud assembly output directory.
policyValidationBeta1IPolicyValidationPluginBeta1[]Validation plugins to run during synthesis.
stageNamestringThe name of the stage.
account?stringThe default account for all resources defined within this stage.
parentStage?StageThe parent stage or undefined if this is the app.
region?stringThe default region for all resources defined within this stage.



artifactId
Type:
string
Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string.
Derived from the construct path.

assetOutdir
Type:
string
The cloud assembly asset output directory.

node
Type:
Node
The tree node.

outdir
Type:
string
The cloud assembly output directory.

policyValidationBeta1
Type:
IPolicyValidationPluginBeta1[]
Validation plugins to run during synthesis.
If any plugin reports any violation,
synthesis will be interrupted and the report displayed to the user.

stageName
Type:
string
The name of the stage.
Based on names of the parent stages separated by
hypens.

account?
Type:
string
(optional)
The default account for all resources defined within this stage.

parentStage?
Type:
Stage
(optional)
The parent stage or undefined if this is the app.




region?
Type:
string
(optional)
The default region for all resources defined within this stage.
Methods


NameDescription


synth(options?)Synthesize this stage into a cloud assembly.
toString()Returns a string representation of this construct.
static isStage(x)Test whether the given construct is a stage.
static of(construct)Return the stage this construct is contained with, if available.



synth(options?)
public synth(options?: StageSynthesisOptions): CloudAssembly

Parameters

options StageSynthesisOptions

Returns

CloudAssembly

Synthesize this stage into a cloud assembly.
Once an assembly has been synthesized, it cannot be modified. Subsequent
calls will return the same assembly.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static isStage(x)
public static isStage(x: any): boolean

Parameters

x any

Returns

boolean

Test whether the given construct is a stage.

static of(construct)
public static of(construct: IConstruct): Stage

Parameters

construct IConstruct

Returns

Stage

Return the stage this construct is contained with, if available.
If called
on a nested stage, returns its parent.\n\nclass Stage (construct)


LanguageType name


 .NETAmazon.CDK.Stage
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Stage
 Javasoftware.amazon.awscdk.Stage
 Pythonaws_cdk.Stage
 TypeScript (source)aws-cdk-lib » Stage


Implements
IConstruct, IDependable
An abstract application modeling unit consisting of Stacks that should be deployed together.
Derive a subclass of Stage and use it to model a single instance of your
application.
You can then instantiate your subclass multiple times to model multiple
copies of your application which should be be deployed to different
environments.
Example
declare const pipeline: pipelines.CodePipeline;
const preprod = new MyApplicationStage(this, 'PreProd');
const prod = new MyApplicationStage(this, 'Prod');

pipeline.addStage(preprod, {
  post: [
    new pipelines.ShellStep('Validate Endpoint', {
      commands: ['curl -Ssf https://my.webservice.com/'],
    }),
  ],
});
pipeline.addStage(prod, {
  pre: [new pipelines.ManualApprovalStep('PromoteToProd')],
});

Initializer
new Stage(scope: Construct, id: string, props?: StageProps)

Parameters

scope Construct
id string
props StageProps

Construct Props


NameTypeDescription


env?EnvironmentDefault AWS environment (account/region) for Stacks in this Stage.
outdir?stringThe output directory into which to emit synthesized artifacts.
permissionsBoundary?PermissionsBoundaryOptions for applying a permissions boundary to all IAM Roles and Users created within this Stage.
policyValidationBeta1?IPolicyValidationPluginBeta1[]Validation plugins to run during synthesis.
stageName?stringName of this stage.



env?
Type:
Environment
(optional, default: The environments should be configured on the Stacks.)
Default AWS environment (account/region) for Stacks in this Stage.
Stacks defined inside this Stage with either region or account missing
from its env will use the corresponding field given here.
If either region or accountis is not configured for Stack (either on
the Stack itself or on the containing Stage), the Stack will be
environment-agnostic.
Environment-agnostic stacks can be deployed to any environment, may not be
able to take advantage of all features of the CDK. For example, they will
not be able to use environmental context lookups, will not automatically
translate Service Principals to the right format based on the environment's
AWS partition, and other such enhancements.
Example
// Use a concrete account and region to deploy this Stage to
new Stage(app, 'Stage1', {
  env: { account: '123456789012', region: 'us-east-1' },
});

// Use the CLI's current credentials to determine the target environment
new Stage(app, 'Stage2', {
  env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
});


outdir?
Type:
string
(optional, default: for nested stages, outdir will be determined as a relative
directory to the outdir of the app. For apps, if outdir is not specified, a
temporary directory will be created.)
The output directory into which to emit synthesized artifacts.
Can only be specified if this stage is the root stage (the app). If this is
specified and this stage is nested within another stage, an error will be
thrown.

permissionsBoundary?
Type:
PermissionsBoundary
(optional, default: no permissions boundary is applied)
Options for applying a permissions boundary to all IAM Roles and Users created within this Stage.
Be aware that this feature uses Aspects, and the Aspects are applied at the
Stack level with a priority of MUTATING (if the feature flag
@aws-cdk/core:aspectPrioritiesMutating is set) or DEFAULT (if the flag
is not set). This is relevant if you are both using your own Aspects to
assign Permissions Boundaries, as well as specifying this property.  The
Aspect added by this property will overwrite the Permissions Boundary
assigned by your own Aspect if both: (a) your Aspect has a lower or equal
priority to the automatic Aspect, and (b) your Aspect is applied above
the Stack level.  If either of those conditions are not true, your own
Aspect will win.
We recommend assigning Permissions Boundaries only using the provided APIs,
and not using custom Aspects.

policyValidationBeta1?
Type:
IPolicyValidationPluginBeta1[]
(optional, default: no validation plugins are used)
Validation plugins to run during synthesis.
If any plugin reports any violation,
synthesis will be interrupted and the report displayed to the user.

stageName?
Type:
string
(optional, default: Derived from the id.)
Name of this stage.
Properties


NameTypeDescription


artifactIdstringArtifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string.
assetOutdirstringThe cloud assembly asset output directory.
nodeNodeThe tree node.
outdirstringThe cloud assembly output directory.
policyValidationBeta1IPolicyValidationPluginBeta1[]Validation plugins to run during synthesis.
stageNamestringThe name of the stage.
account?stringThe default account for all resources defined within this stage.
parentStage?StageThe parent stage or undefined if this is the app.
region?stringThe default region for all resources defined within this stage.



artifactId
Type:
string
Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string.
Derived from the construct path.

assetOutdir
Type:
string
The cloud assembly asset output directory.

node
Type:
Node
The tree node.

outdir
Type:
string
The cloud assembly output directory.

policyValidationBeta1
Type:
IPolicyValidationPluginBeta1[]
Validation plugins to run during synthesis.
If any plugin reports any violation,
synthesis will be interrupted and the report displayed to the user.

stageName
Type:
string
The name of the stage.
Based on names of the parent stages separated by
hypens.

account?
Type:
string
(optional)
The default account for all resources defined within this stage.

parentStage?
Type:
Stage
(optional)
The parent stage or undefined if this is the app.




region?
Type:
string
(optional)
The default region for all resources defined within this stage.
Methods


NameDescription


synth(options?)Synthesize this stage into a cloud assembly.
toString()Returns a string representation of this construct.
static isStage(x)Test whether the given construct is a stage.
static of(construct)Return the stage this construct is contained with, if available.



synth(options?)
public synth(options?: StageSynthesisOptions): CloudAssembly

Parameters

options StageSynthesisOptions

Returns

CloudAssembly

Synthesize this stage into a cloud assembly.
Once an assembly has been synthesized, it cannot be modified. Subsequent
calls will return the same assembly.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static isStage(x)
public static isStage(x: any): boolean

Parameters

x any

Returns

boolean

Test whether the given construct is a stage.

static of(construct)
public static of(construct: IConstruct): Stage

Parameters

construct IConstruct

Returns

Stage

Return the stage this construct is contained with, if available.
If called
on a nested stage, returns its parent.\n\n\n\nclass Annotations


LanguageType name


 .NETAmazon.CDK.Annotations
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Annotations
 Javasoftware.amazon.awscdk.Annotations
 Pythonaws_cdk.Annotations
 TypeScript (source)aws-cdk-lib » Annotations


Includes API for attaching annotations such as warning messages to constructs.
Example
import * as cdk from 'aws-cdk-lib';
import { Construct, IConstruct } from 'constructs';

class MyAspect implements cdk.IAspect {
  public visit(node: IConstruct): void {
    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {
      this.error(node, 'we do not want a Foo::Bar resource');
    }
  }

  protected error(node: IConstruct, message: string): void {
    cdk.Annotations.of(node).addError(message);
  }
}

class MyStack extends cdk.Stack {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    const stack = new cdk.Stack();
    new cdk.CfnResource(stack, 'Foo', {
      type: 'Foo::Bar',
      properties: {
        Fred: 'Thud',
      },
    });
    cdk.Aspects.of(stack).add(new MyAspect());
  }
}

Methods


NameDescription


acknowledgeWarning(id, message?)Acknowledge a warning. When a warning is acknowledged for a scope all warnings that match the id will be ignored.
addDeprecation(api, message)Adds a deprecation warning for a specific API.
addError(message)Adds an { "error": <message> } metadata entry to this construct.
addInfo(message)Adds an info metadata entry to this construct.
addWarning(message)Adds a warning metadata entry to this construct. Prefer using addWarningV2.
addWarningV2(id, message)Adds an acknowledgeable warning metadata entry to this construct.
static of(scope)Returns the annotations API for a construct scope.



acknowledgeWarning(id, message?)
public acknowledgeWarning(id: string, message?: string): void

Parameters

id string  — - the id of the warning message to acknowledge.
message string  — optional message to explain the reason for acknowledgement.

Acknowledge a warning. When a warning is acknowledged for a scope all warnings that match the id will be ignored.
The acknowledgement will apply to all child scopes
Example
declare const myConstruct: Construct;
Annotations.of(myConstruct).acknowledgeWarning('SomeWarningId', 'This warning can be ignored because...');


addDeprecation(api, message)
public addDeprecation(api: string, message: string): void

Parameters

api string  — The API being deprecated in the format module.Class.property (e.g. @aws-cdk/core.Construct.node).
message string  — The deprecation message to display, with information about alternatives.

Adds a deprecation warning for a specific API.
Deprecations will be added only once per construct as a warning and will be
deduplicated based on the api.
If the environment variable CDK_BLOCK_DEPRECATIONS is set, this method
will throw an error instead with the deprecation message.

addError(message)
public addError(message: string): void

Parameters

message string  — The error message.

Adds an { "error": <message> } metadata entry to this construct.
The toolkit will fail deployment of any stack that has errors reported against it.

addInfo(message)
public addInfo(message: string): void

Parameters

message string  — The info message.

Adds an info metadata entry to this construct.
The CLI will display the info message when apps are synthesized.

addWarning(message)
public addWarning(message: string): void

Parameters

message string  — The warning message.

Adds a warning metadata entry to this construct. Prefer using addWarningV2.
The CLI will display the warning when an app is synthesized, or fail if run
in --strict mode.
Warnings added by this call cannot be acknowledged. This will block users from
running in --strict mode until the deal with the warning, which makes it
effectively not very different from addError. Prefer using addWarningV2 instead.

addWarningV2(id, message)
public addWarningV2(id: string, message: string): void

Parameters

id string  — the unique identifier for the warning.
message string  — The warning message.

Adds an acknowledgeable warning metadata entry to this construct.
The CLI will display the warning when an app is synthesized, or fail if run
in --strict mode.
If the warning is acknowledged using acknowledgeWarning(), it will not be shown by
the CLI, and will not cause --strict mode to fail synthesis.
Example
declare const myConstruct: Construct;
Annotations.of(myConstruct).addWarningV2('my-library:Construct.someWarning', 'Some message explaining the warning');


static of(scope)
public static of(scope: IConstruct): Annotations

Parameters

scope IConstruct  — The scope.

Returns

Annotations

Returns the annotations API for a construct scope.\n\nclass Annotations


LanguageType name


 .NETAmazon.CDK.Annotations
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Annotations
 Javasoftware.amazon.awscdk.Annotations
 Pythonaws_cdk.Annotations
 TypeScript (source)aws-cdk-lib » Annotations


Includes API for attaching annotations such as warning messages to constructs.
Example
import * as cdk from 'aws-cdk-lib';
import { Construct, IConstruct } from 'constructs';

class MyAspect implements cdk.IAspect {
  public visit(node: IConstruct): void {
    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {
      this.error(node, 'we do not want a Foo::Bar resource');
    }
  }

  protected error(node: IConstruct, message: string): void {
    cdk.Annotations.of(node).addError(message);
  }
}

class MyStack extends cdk.Stack {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    const stack = new cdk.Stack();
    new cdk.CfnResource(stack, 'Foo', {
      type: 'Foo::Bar',
      properties: {
        Fred: 'Thud',
      },
    });
    cdk.Aspects.of(stack).add(new MyAspect());
  }
}

Methods


NameDescription


acknowledgeWarning(id, message?)Acknowledge a warning. When a warning is acknowledged for a scope all warnings that match the id will be ignored.
addDeprecation(api, message)Adds a deprecation warning for a specific API.
addError(message)Adds an { "error": <message> } metadata entry to this construct.
addInfo(message)Adds an info metadata entry to this construct.
addWarning(message)Adds a warning metadata entry to this construct. Prefer using addWarningV2.
addWarningV2(id, message)Adds an acknowledgeable warning metadata entry to this construct.
static of(scope)Returns the annotations API for a construct scope.



acknowledgeWarning(id, message?)
public acknowledgeWarning(id: string, message?: string): void

Parameters

id string  — - the id of the warning message to acknowledge.
message string  — optional message to explain the reason for acknowledgement.

Acknowledge a warning. When a warning is acknowledged for a scope all warnings that match the id will be ignored.
The acknowledgement will apply to all child scopes
Example
declare const myConstruct: Construct;
Annotations.of(myConstruct).acknowledgeWarning('SomeWarningId', 'This warning can be ignored because...');


addDeprecation(api, message)
public addDeprecation(api: string, message: string): void

Parameters

api string  — The API being deprecated in the format module.Class.property (e.g. @aws-cdk/core.Construct.node).
message string  — The deprecation message to display, with information about alternatives.

Adds a deprecation warning for a specific API.
Deprecations will be added only once per construct as a warning and will be
deduplicated based on the api.
If the environment variable CDK_BLOCK_DEPRECATIONS is set, this method
will throw an error instead with the deprecation message.

addError(message)
public addError(message: string): void

Parameters

message string  — The error message.

Adds an { "error": <message> } metadata entry to this construct.
The toolkit will fail deployment of any stack that has errors reported against it.

addInfo(message)
public addInfo(message: string): void

Parameters

message string  — The info message.

Adds an info metadata entry to this construct.
The CLI will display the info message when apps are synthesized.

addWarning(message)
public addWarning(message: string): void

Parameters

message string  — The warning message.

Adds a warning metadata entry to this construct. Prefer using addWarningV2.
The CLI will display the warning when an app is synthesized, or fail if run
in --strict mode.
Warnings added by this call cannot be acknowledged. This will block users from
running in --strict mode until the deal with the warning, which makes it
effectively not very different from addError. Prefer using addWarningV2 instead.

addWarningV2(id, message)
public addWarningV2(id: string, message: string): void

Parameters

id string  — the unique identifier for the warning.
message string  — The warning message.

Adds an acknowledgeable warning metadata entry to this construct.
The CLI will display the warning when an app is synthesized, or fail if run
in --strict mode.
If the warning is acknowledged using acknowledgeWarning(), it will not be shown by
the CLI, and will not cause --strict mode to fail synthesis.
Example
declare const myConstruct: Construct;
Annotations.of(myConstruct).addWarningV2('my-library:Construct.someWarning', 'Some message explaining the warning');


static of(scope)
public static of(scope: IConstruct): Annotations

Parameters

scope IConstruct  — The scope.

Returns

Annotations

Returns the annotations API for a construct scope.\n\n\n\nclass App


LanguageType name


 .NETAmazon.CDK.App
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#App
 Javasoftware.amazon.awscdk.App
 Pythonaws_cdk.App
 TypeScript (source)aws-cdk-lib » App


Implements
IConstruct, IDependable
Extends
Stage
A construct which represents an entire CDK app. This construct is normally the root of the construct tree.
You would normally define an App instance in your program's entrypoint,
then define constructs where the app is used as the parent scope.
After all the child constructs are defined within the app, you should call
app.synth() which will emit a "cloud assembly" from this app into the
directory specified by outdir. Cloud assemblies includes artifacts such as
CloudFormation templates and assets that are needed to deploy this app into
the AWS cloud.
See also: https://docs.aws.amazon.com/cdk/latest/guide/apps.html
Example
import * as cdk from 'aws-cdk-lib';
import * as s3 from 'aws-cdk-lib/aws-s3';

const app = new cdk.App();
const stack = new cdk.Stack(app, 'Stack');

declare const bucket: s3.IBucket;

new dynamodb.Table(stack, 'Table', {
  partitionKey: {
    name: 'id',
    type: dynamodb.AttributeType.STRING,
  },
  importSource: {
    compressionType: dynamodb.InputCompressionType.GZIP,
    inputFormat: dynamodb.InputFormat.csv({
      delimiter: ',',
      headerList: ['id', 'name'],
    }),
    bucket,
    keyPrefix: 'prefix',
  },
});

Initializer
new App(props?: AppProps)

Parameters

props AppProps  — initialization properties.

Initializes a CDK application.
Properties


NameTypeDescription


artifactIdstringArtifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string.
assetOutdirstringThe cloud assembly asset output directory.
nodeNodeThe tree node.
outdirstringThe cloud assembly output directory.
policyValidationBeta1IPolicyValidationPluginBeta1[]Validation plugins to run during synthesis.
stageNamestringThe name of the stage.
account?stringThe default account for all resources defined within this stage.
parentStage?StageThe parent stage or undefined if this is the app.
region?stringThe default region for all resources defined within this stage.



artifactId
Type:
string
Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string.
Derived from the construct path.

assetOutdir
Type:
string
The cloud assembly asset output directory.

node
Type:
Node
The tree node.

outdir
Type:
string
The cloud assembly output directory.

policyValidationBeta1
Type:
IPolicyValidationPluginBeta1[]
Validation plugins to run during synthesis.
If any plugin reports any violation,
synthesis will be interrupted and the report displayed to the user.

stageName
Type:
string
The name of the stage.
Based on names of the parent stages separated by
hypens.

account?
Type:
string
(optional)
The default account for all resources defined within this stage.

parentStage?
Type:
Stage
(optional)
The parent stage or undefined if this is the app.




region?
Type:
string
(optional)
The default region for all resources defined within this stage.
Methods


NameDescription


synth(options?)Synthesize this stage into a cloud assembly.
toString()Returns a string representation of this construct.
static isApp(obj)Checks if an object is an instance of the App class.



synth(options?)
public synth(options?: StageSynthesisOptions): CloudAssembly

Parameters

options StageSynthesisOptions

Returns

CloudAssembly

Synthesize this stage into a cloud assembly.
Once an assembly has been synthesized, it cannot be modified. Subsequent
calls will return the same assembly.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static isApp(obj)
public static isApp(obj: any): boolean

Parameters

obj any  — The object to evaluate.

Returns

boolean

Checks if an object is an instance of the App class.\n\nclass App


LanguageType name


 .NETAmazon.CDK.App
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#App
 Javasoftware.amazon.awscdk.App
 Pythonaws_cdk.App
 TypeScript (source)aws-cdk-lib » App


Implements
IConstruct, IDependable
Extends
Stage
A construct which represents an entire CDK app. This construct is normally the root of the construct tree.
You would normally define an App instance in your program's entrypoint,
then define constructs where the app is used as the parent scope.
After all the child constructs are defined within the app, you should call
app.synth() which will emit a "cloud assembly" from this app into the
directory specified by outdir. Cloud assemblies includes artifacts such as
CloudFormation templates and assets that are needed to deploy this app into
the AWS cloud.
See also: https://docs.aws.amazon.com/cdk/latest/guide/apps.html
Example
import * as cdk from 'aws-cdk-lib';
import * as s3 from 'aws-cdk-lib/aws-s3';

const app = new cdk.App();
const stack = new cdk.Stack(app, 'Stack');

declare const bucket: s3.IBucket;

new dynamodb.Table(stack, 'Table', {
  partitionKey: {
    name: 'id',
    type: dynamodb.AttributeType.STRING,
  },
  importSource: {
    compressionType: dynamodb.InputCompressionType.GZIP,
    inputFormat: dynamodb.InputFormat.csv({
      delimiter: ',',
      headerList: ['id', 'name'],
    }),
    bucket,
    keyPrefix: 'prefix',
  },
});

Initializer
new App(props?: AppProps)

Parameters

props AppProps  — initialization properties.

Initializes a CDK application.
Properties


NameTypeDescription


artifactIdstringArtifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string.
assetOutdirstringThe cloud assembly asset output directory.
nodeNodeThe tree node.
outdirstringThe cloud assembly output directory.
policyValidationBeta1IPolicyValidationPluginBeta1[]Validation plugins to run during synthesis.
stageNamestringThe name of the stage.
account?stringThe default account for all resources defined within this stage.
parentStage?StageThe parent stage or undefined if this is the app.
region?stringThe default region for all resources defined within this stage.



artifactId
Type:
string
Artifact ID of the assembly if it is a nested stage. The root stage (app) will return an empty string.
Derived from the construct path.

assetOutdir
Type:
string
The cloud assembly asset output directory.

node
Type:
Node
The tree node.

outdir
Type:
string
The cloud assembly output directory.

policyValidationBeta1
Type:
IPolicyValidationPluginBeta1[]
Validation plugins to run during synthesis.
If any plugin reports any violation,
synthesis will be interrupted and the report displayed to the user.

stageName
Type:
string
The name of the stage.
Based on names of the parent stages separated by
hypens.

account?
Type:
string
(optional)
The default account for all resources defined within this stage.

parentStage?
Type:
Stage
(optional)
The parent stage or undefined if this is the app.




region?
Type:
string
(optional)
The default region for all resources defined within this stage.
Methods


NameDescription


synth(options?)Synthesize this stage into a cloud assembly.
toString()Returns a string representation of this construct.
static isApp(obj)Checks if an object is an instance of the App class.



synth(options?)
public synth(options?: StageSynthesisOptions): CloudAssembly

Parameters

options StageSynthesisOptions

Returns

CloudAssembly

Synthesize this stage into a cloud assembly.
Once an assembly has been synthesized, it cannot be modified. Subsequent
calls will return the same assembly.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static isApp(obj)
public static isApp(obj: any): boolean

Parameters

obj any  — The object to evaluate.

Returns

boolean

Checks if an object is an instance of the App class.\n\n\n\nclass Arn


LanguageType name


 .NETAmazon.CDK.Arn
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Arn
 Javasoftware.amazon.awscdk.Arn
 Pythonaws_cdk.Arn
 TypeScript (source)aws-cdk-lib » Arn


Methods


NameDescription


static extractResourceName(arn, resourceType)Extract the full resource name from an ARN.
static format(components, stack?)Creates an ARN from components.
static split(arn, arnFormat)Splits the provided ARN into its components.



static extractResourceName(arn, resourceType)
public static extractResourceName(arn: string, resourceType: string): string

Parameters

arn string
resourceType string

Returns

string

Extract the full resource name from an ARN.
Necessary for resource names (paths) that may contain the separator, like
arn:aws:iam::111111111111:role/path/to/role/name.
Only works if we statically know the expected resourceType beforehand, since we're going
to use that to split the string on ':<resourceType>/' (and take the right-hand side).
We can't extract the 'resourceType' from the ARN at hand, because CloudFormation Expressions
only allow literals in the 'separator' argument to { Fn::Split }, and so it can't be
{ Fn::Select: [5, { Fn::Split: [':', ARN] }}.
Only necessary for ARN formats for which the type-name separator is /.

static format(components, stack?)
public static format(components: ArnComponents, stack?: Stack): string

Parameters

components ArnComponents
stack Stack

Returns

string

Creates an ARN from components.
If partition, region or account are not specified, the stack's
partition, region and account will be used.
If any component is the empty string, an empty string will be inserted
into the generated ARN at the location that component corresponds to.
The ARN will be formatted as follows:
arn:{partition}:{service}:{region}:{account}:{resource}{sep}{resource-name}
The required ARN pieces that are omitted will be taken from the stack that
the 'scope' is attached to. If all ARN pieces are supplied, the supplied scope
can be 'undefined'.

static split(arn, arnFormat)
public static split(arn: string, arnFormat: ArnFormat): ArnComponents

Parameters

arn string  — the ARN to split into its components.
arnFormat ArnFormat  — the expected format of 'arn' - depends on what format the service 'arn' represents uses.

Returns

ArnComponents

Splits the provided ARN into its components.
Works both if 'arn' is a string like 'arn:aws:s3:::bucket',
and a Token representing a dynamic CloudFormation expression
(in which case the returned components will also be dynamic CloudFormation expressions,
encoded as Tokens).\n\nclass Arn


LanguageType name


 .NETAmazon.CDK.Arn
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Arn
 Javasoftware.amazon.awscdk.Arn
 Pythonaws_cdk.Arn
 TypeScript (source)aws-cdk-lib » Arn


Methods


NameDescription


static extractResourceName(arn, resourceType)Extract the full resource name from an ARN.
static format(components, stack?)Creates an ARN from components.
static split(arn, arnFormat)Splits the provided ARN into its components.



static extractResourceName(arn, resourceType)
public static extractResourceName(arn: string, resourceType: string): string

Parameters

arn string
resourceType string

Returns

string

Extract the full resource name from an ARN.
Necessary for resource names (paths) that may contain the separator, like
arn:aws:iam::111111111111:role/path/to/role/name.
Only works if we statically know the expected resourceType beforehand, since we're going
to use that to split the string on ':<resourceType>/' (and take the right-hand side).
We can't extract the 'resourceType' from the ARN at hand, because CloudFormation Expressions
only allow literals in the 'separator' argument to { Fn::Split }, and so it can't be
{ Fn::Select: [5, { Fn::Split: [':', ARN] }}.
Only necessary for ARN formats for which the type-name separator is /.

static format(components, stack?)
public static format(components: ArnComponents, stack?: Stack): string

Parameters

components ArnComponents
stack Stack

Returns

string

Creates an ARN from components.
If partition, region or account are not specified, the stack's
partition, region and account will be used.
If any component is the empty string, an empty string will be inserted
into the generated ARN at the location that component corresponds to.
The ARN will be formatted as follows:
arn:{partition}:{service}:{region}:{account}:{resource}{sep}{resource-name}
The required ARN pieces that are omitted will be taken from the stack that
the 'scope' is attached to. If all ARN pieces are supplied, the supplied scope
can be 'undefined'.

static split(arn, arnFormat)
public static split(arn: string, arnFormat: ArnFormat): ArnComponents

Parameters

arn string  — the ARN to split into its components.
arnFormat ArnFormat  — the expected format of 'arn' - depends on what format the service 'arn' represents uses.

Returns

ArnComponents

Splits the provided ARN into its components.
Works both if 'arn' is a string like 'arn:aws:s3:::bucket',
and a Token representing a dynamic CloudFormation expression
(in which case the returned components will also be dynamic CloudFormation expressions,
encoded as Tokens).\n\n\n\nclass AspectApplication


LanguageType name


 .NETAmazon.CDK.AspectApplication
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#AspectApplication
 Javasoftware.amazon.awscdk.AspectApplication
 Pythonaws_cdk.AspectApplication
 TypeScript (source)aws-cdk-lib » AspectApplication


Object respresenting an Aspect application.
Stores the Aspect, the pointer to the construct it was applied
to, and the priority value of that Aspect.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

declare const aspect: cdk.IAspect;
declare const construct: constructs.Construct;
const aspectApplication = new cdk.AspectApplication(construct, aspect, 123);

Initializer
new AspectApplication(construct: IConstruct, aspect: IAspect, priority: number)

Parameters

construct IConstruct
aspect IAspect
priority number

Initializes AspectApplication object.
Properties


NameTypeDescription


aspectIAspectThe Aspect that was applied.
constructIConstructThe construct that the Aspect was applied to.
prioritynumberGets the priority value.



aspect
Type:
IAspect
The Aspect that was applied.

construct
Type:
IConstruct
The construct that the Aspect was applied to.

priority
Type:
number
Gets the priority value.
Sets the priority value.\n\nclass AspectApplication


LanguageType name


 .NETAmazon.CDK.AspectApplication
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#AspectApplication
 Javasoftware.amazon.awscdk.AspectApplication
 Pythonaws_cdk.AspectApplication
 TypeScript (source)aws-cdk-lib » AspectApplication


Object respresenting an Aspect application.
Stores the Aspect, the pointer to the construct it was applied
to, and the priority value of that Aspect.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';
import * as constructs from 'constructs';

declare const aspect: cdk.IAspect;
declare const construct: constructs.Construct;
const aspectApplication = new cdk.AspectApplication(construct, aspect, 123);

Initializer
new AspectApplication(construct: IConstruct, aspect: IAspect, priority: number)

Parameters

construct IConstruct
aspect IAspect
priority number

Initializes AspectApplication object.
Properties


NameTypeDescription


aspectIAspectThe Aspect that was applied.
constructIConstructThe construct that the Aspect was applied to.
prioritynumberGets the priority value.



aspect
Type:
IAspect
The Aspect that was applied.

construct
Type:
IConstruct
The construct that the Aspect was applied to.

priority
Type:
number
Gets the priority value.
Sets the priority value.\n\n\n\nclass AspectPriority


LanguageType name


 .NETAmazon.CDK.AspectPriority
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#AspectPriority
 Javasoftware.amazon.awscdk.AspectPriority
 Pythonaws_cdk.AspectPriority
 TypeScript (source)aws-cdk-lib » AspectPriority


Default Priority values for Aspects.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';
const aspectPriority = new cdk.AspectPriority();

Initializer
new AspectPriority()

Properties


NameTypeDescription


static DEFAULTnumberDefault priority for Aspects that are applied without a priority.
static MUTATINGnumberSuggested priority for Aspects that mutate the construct tree.
static READONLYnumberSuggested priority for Aspects that only read the construct tree.



static DEFAULT
Type:
number
Default priority for Aspects that are applied without a priority.

static MUTATING
Type:
number
Suggested priority for Aspects that mutate the construct tree.

static READONLY
Type:
number
Suggested priority for Aspects that only read the construct tree.\n\nclass AspectPriority


LanguageType name


 .NETAmazon.CDK.AspectPriority
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#AspectPriority
 Javasoftware.amazon.awscdk.AspectPriority
 Pythonaws_cdk.AspectPriority
 TypeScript (source)aws-cdk-lib » AspectPriority


Default Priority values for Aspects.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';
const aspectPriority = new cdk.AspectPriority();

Initializer
new AspectPriority()

Properties


NameTypeDescription


static DEFAULTnumberDefault priority for Aspects that are applied without a priority.
static MUTATINGnumberSuggested priority for Aspects that mutate the construct tree.
static READONLYnumberSuggested priority for Aspects that only read the construct tree.



static DEFAULT
Type:
number
Default priority for Aspects that are applied without a priority.

static MUTATING
Type:
number
Suggested priority for Aspects that mutate the construct tree.

static READONLY
Type:
number
Suggested priority for Aspects that only read the construct tree.\n\n\n\nclass Aspects


LanguageType name


 .NETAmazon.CDK.Aspects
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Aspects
 Javasoftware.amazon.awscdk.Aspects
 Pythonaws_cdk.Aspects
 TypeScript (source)aws-cdk-lib » Aspects


Aspects can be applied to CDK tree scopes and can operate on the tree before synthesis.
Example
import * as cdk from 'aws-cdk-lib';
import { Construct, IConstruct } from 'constructs';

class MyAspect implements cdk.IAspect {
  public visit(node: IConstruct): void {
    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {
      this.error(node, 'we do not want a Foo::Bar resource');
    }
  }

  protected error(node: IConstruct, message: string): void {
    cdk.Annotations.of(node).addError(message);
  }
}

class MyStack extends cdk.Stack {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    const stack = new cdk.Stack();
    new cdk.CfnResource(stack, 'Foo', {
      type: 'Foo::Bar',
      properties: {
        Fred: 'Thud',
      },
    });
    cdk.Aspects.of(stack).add(new MyAspect());
  }
}

Properties


NameTypeDescription


allIAspect[]The list of aspects which were directly applied on this scope.
appliedAspectApplication[]The list of aspects with priority which were directly applied on this scope.



all
Type:
IAspect[]
The list of aspects which were directly applied on this scope.

applied
Type:
AspectApplication[]
The list of aspects with priority which were directly applied on this scope.
Also returns inherited Aspects of this node.
Methods


NameDescription


add(aspect, options?)Adds an aspect to apply this scope before synthesis.
static of(scope)Returns the Aspects object associated with a construct scope.



add(aspect, options?)
public add(aspect: IAspect, options?: AspectOptions): void

Parameters

aspect IAspect  — The aspect to add.
options AspectOptions  — Options to apply on this aspect.

Adds an aspect to apply this scope before synthesis.

static of(scope)
public static of(scope: IConstruct): Aspects

Parameters

scope IConstruct  — The scope for which these aspects will apply.

Returns

Aspects

Returns the Aspects object associated with a construct scope.\n\nclass Aspects


LanguageType name


 .NETAmazon.CDK.Aspects
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Aspects
 Javasoftware.amazon.awscdk.Aspects
 Pythonaws_cdk.Aspects
 TypeScript (source)aws-cdk-lib » Aspects


Aspects can be applied to CDK tree scopes and can operate on the tree before synthesis.
Example
import * as cdk from 'aws-cdk-lib';
import { Construct, IConstruct } from 'constructs';

class MyAspect implements cdk.IAspect {
  public visit(node: IConstruct): void {
    if (node instanceof cdk.CfnResource && node.cfnResourceType === 'Foo::Bar') {
      this.error(node, 'we do not want a Foo::Bar resource');
    }
  }

  protected error(node: IConstruct, message: string): void {
    cdk.Annotations.of(node).addError(message);
  }
}

class MyStack extends cdk.Stack {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    const stack = new cdk.Stack();
    new cdk.CfnResource(stack, 'Foo', {
      type: 'Foo::Bar',
      properties: {
        Fred: 'Thud',
      },
    });
    cdk.Aspects.of(stack).add(new MyAspect());
  }
}

Properties


NameTypeDescription


allIAspect[]The list of aspects which were directly applied on this scope.
appliedAspectApplication[]The list of aspects with priority which were directly applied on this scope.



all
Type:
IAspect[]
The list of aspects which were directly applied on this scope.

applied
Type:
AspectApplication[]
The list of aspects with priority which were directly applied on this scope.
Also returns inherited Aspects of this node.
Methods


NameDescription


add(aspect, options?)Adds an aspect to apply this scope before synthesis.
static of(scope)Returns the Aspects object associated with a construct scope.



add(aspect, options?)
public add(aspect: IAspect, options?: AspectOptions): void

Parameters

aspect IAspect  — The aspect to add.
options AspectOptions  — Options to apply on this aspect.

Adds an aspect to apply this scope before synthesis.

static of(scope)
public static of(scope: IConstruct): Aspects

Parameters

scope IConstruct  — The scope for which these aspects will apply.

Returns

Aspects

Returns the Aspects object associated with a construct scope.\n\n\n\nclass AssetManifestBuilder


LanguageType name


 .NETAmazon.CDK.AssetManifestBuilder
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#AssetManifestBuilder
 Javasoftware.amazon.awscdk.AssetManifestBuilder
 Pythonaws_cdk.AssetManifestBuilder
 TypeScript (source)aws-cdk-lib » AssetManifestBuilder


Build an asset manifest from assets added to a stack.
This class does not need to be used by app builders; it is only necessary for building Stack Synthesizers.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';
const assetManifestBuilder = new cdk.AssetManifestBuilder();

Initializer
new AssetManifestBuilder()

Properties


NameTypeDescription


hasAssetsbooleanWhether there are any assets registered in the manifest.



hasAssets
Type:
boolean
Whether there are any assets registered in the manifest.
Methods


NameDescription


addDockerImageAsset(stack, sourceHash, source, dest, options?)Add a docker asset source and destination to the manifest.
addFileAsset(stack, sourceHash, source, dest, options?)Add a file asset source and destination to the manifest.
defaultAddDockerImageAsset(stack, asset, target, options?)Add a docker image asset to the manifest with default settings.
defaultAddFileAsset(stack, asset, target, options?)Add a file asset to the manifest with default settings.
emitManifest(stack, session, options?, dependencies?)Write the manifest to disk, and add it to the synthesis session.



addDockerImageAsset(stack, sourceHash, source, dest, options?)
public addDockerImageAsset(stack: Stack, sourceHash: string, source: DockerImageSource, dest: DockerImageDestination, options?: AddDockerImageAssetOptions): DockerImageDestination

Parameters

stack Stack
sourceHash string
source DockerImageSource
dest DockerImageDestination
options AddDockerImageAssetOptions

Returns

DockerImageDestination

Add a docker asset source and destination to the manifest.
sourceHash should be unique for every source.

addFileAsset(stack, sourceHash, source, dest, options?)
public addFileAsset(stack: Stack, sourceHash: string, source: FileSource, dest: FileDestination, options?: AddFileAssetOptions): FileDestination

Parameters

stack Stack
sourceHash string
source FileSource
dest FileDestination
options AddFileAssetOptions

Returns

FileDestination

Add a file asset source and destination to the manifest.
sourceHash should be unique for every source.

defaultAddDockerImageAsset(stack, asset, target, options?)
public defaultAddDockerImageAsset(stack: Stack, asset: DockerImageAssetSource, target: AssetManifestDockerImageDestination, options?: AddDockerImageAssetOptions): DockerImageDestination

Parameters

stack Stack
asset DockerImageAssetSource
target AssetManifestDockerImageDestination
options AddDockerImageAssetOptions

Returns

DockerImageDestination

Add a docker image asset to the manifest with default settings.
Derive the region from the stack, use the asset hash as the key, and set the prefix.

defaultAddFileAsset(stack, asset, target, options?)
public defaultAddFileAsset(stack: Stack, asset: FileAssetSource, target: AssetManifestFileDestination, options?: AddFileAssetOptions): FileDestination

Parameters

stack Stack
asset FileAssetSource
target AssetManifestFileDestination
options AddFileAssetOptions

Returns

FileDestination

Add a file asset to the manifest with default settings.
Derive the region from the stack, use the asset hash as the key, copy the
file extension over, and set the prefix.

emitManifest(stack, session, options?, dependencies?)
public emitManifest(stack: Stack, session: ISynthesisSession, options?: AssetManifestOptions, dependencies?: string[]): string

Parameters

stack Stack
session ISynthesisSession
options AssetManifestOptions
dependencies string[]

Returns

string

Write the manifest to disk, and add it to the synthesis session.
Return the artifact id, which should be added to the additionalDependencies
field of the stack artifact.\n\nclass AssetManifestBuilder


LanguageType name


 .NETAmazon.CDK.AssetManifestBuilder
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#AssetManifestBuilder
 Javasoftware.amazon.awscdk.AssetManifestBuilder
 Pythonaws_cdk.AssetManifestBuilder
 TypeScript (source)aws-cdk-lib » AssetManifestBuilder


Build an asset manifest from assets added to a stack.
This class does not need to be used by app builders; it is only necessary for building Stack Synthesizers.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';
const assetManifestBuilder = new cdk.AssetManifestBuilder();

Initializer
new AssetManifestBuilder()

Properties


NameTypeDescription


hasAssetsbooleanWhether there are any assets registered in the manifest.



hasAssets
Type:
boolean
Whether there are any assets registered in the manifest.
Methods


NameDescription


addDockerImageAsset(stack, sourceHash, source, dest, options?)Add a docker asset source and destination to the manifest.
addFileAsset(stack, sourceHash, source, dest, options?)Add a file asset source and destination to the manifest.
defaultAddDockerImageAsset(stack, asset, target, options?)Add a docker image asset to the manifest with default settings.
defaultAddFileAsset(stack, asset, target, options?)Add a file asset to the manifest with default settings.
emitManifest(stack, session, options?, dependencies?)Write the manifest to disk, and add it to the synthesis session.



addDockerImageAsset(stack, sourceHash, source, dest, options?)
public addDockerImageAsset(stack: Stack, sourceHash: string, source: DockerImageSource, dest: DockerImageDestination, options?: AddDockerImageAssetOptions): DockerImageDestination

Parameters

stack Stack
sourceHash string
source DockerImageSource
dest DockerImageDestination
options AddDockerImageAssetOptions

Returns

DockerImageDestination

Add a docker asset source and destination to the manifest.
sourceHash should be unique for every source.

addFileAsset(stack, sourceHash, source, dest, options?)
public addFileAsset(stack: Stack, sourceHash: string, source: FileSource, dest: FileDestination, options?: AddFileAssetOptions): FileDestination

Parameters

stack Stack
sourceHash string
source FileSource
dest FileDestination
options AddFileAssetOptions

Returns

FileDestination

Add a file asset source and destination to the manifest.
sourceHash should be unique for every source.

defaultAddDockerImageAsset(stack, asset, target, options?)
public defaultAddDockerImageAsset(stack: Stack, asset: DockerImageAssetSource, target: AssetManifestDockerImageDestination, options?: AddDockerImageAssetOptions): DockerImageDestination

Parameters

stack Stack
asset DockerImageAssetSource
target AssetManifestDockerImageDestination
options AddDockerImageAssetOptions

Returns

DockerImageDestination

Add a docker image asset to the manifest with default settings.
Derive the region from the stack, use the asset hash as the key, and set the prefix.

defaultAddFileAsset(stack, asset, target, options?)
public defaultAddFileAsset(stack: Stack, asset: FileAssetSource, target: AssetManifestFileDestination, options?: AddFileAssetOptions): FileDestination

Parameters

stack Stack
asset FileAssetSource
target AssetManifestFileDestination
options AddFileAssetOptions

Returns

FileDestination

Add a file asset to the manifest with default settings.
Derive the region from the stack, use the asset hash as the key, copy the
file extension over, and set the prefix.

emitManifest(stack, session, options?, dependencies?)
public emitManifest(stack: Stack, session: ISynthesisSession, options?: AssetManifestOptions, dependencies?: string[]): string

Parameters

stack Stack
session ISynthesisSession
options AssetManifestOptions
dependencies string[]

Returns

string

Write the manifest to disk, and add it to the synthesis session.
Return the artifact id, which should be added to the additionalDependencies
field of the stack artifact.\n\n\n\nclass Aws


LanguageType name


 .NETAmazon.CDK.Aws
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Aws
 Javasoftware.amazon.awscdk.Aws
 Pythonaws_cdk.Aws
 TypeScript (source)aws-cdk-lib » Aws


Accessor for pseudo parameters.
Since pseudo parameters need to be anchored to a stack somewhere in the
construct tree, this class takes an scope parameter; the pseudo parameter
values can be obtained as properties from an scoped object.
Properties


NameTypeDescription


static ACCOUNT_IDstring
static NOTIFICATION_ARNSstring[]
static NO_VALUEstring
static PARTITIONstring
static REGIONstring
static STACK_IDstring
static STACK_NAMEstring
static URL_SUFFIXstring



static ACCOUNT_ID
Type:
string

static NOTIFICATION_ARNS
Type:
string[]

static NO_VALUE
Type:
string

static PARTITION
Type:
string

static REGION
Type:
string

static STACK_ID
Type:
string

static STACK_NAME
Type:
string

static URL_SUFFIX
Type:
string\n\nclass Aws


LanguageType name


 .NETAmazon.CDK.Aws
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#Aws
 Javasoftware.amazon.awscdk.Aws
 Pythonaws_cdk.Aws
 TypeScript (source)aws-cdk-lib » Aws


Accessor for pseudo parameters.
Since pseudo parameters need to be anchored to a stack somewhere in the
construct tree, this class takes an scope parameter; the pseudo parameter
values can be obtained as properties from an scoped object.
Properties


NameTypeDescription


static ACCOUNT_IDstring
static NOTIFICATION_ARNSstring[]
static NO_VALUEstring
static PARTITIONstring
static REGIONstring
static STACK_IDstring
static STACK_NAMEstring
static URL_SUFFIXstring



static ACCOUNT_ID
Type:
string

static NOTIFICATION_ARNS
Type:
string[]

static NO_VALUE
Type:
string

static PARTITION
Type:
string

static REGION
Type:
string

static STACK_ID
Type:
string

static STACK_NAME
Type:
string

static URL_SUFFIX
Type:
string\n\n\n\nclass BootstraplessSynthesizer


LanguageType name


 .NETAmazon.CDK.BootstraplessSynthesizer
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#BootstraplessSynthesizer
 Javasoftware.amazon.awscdk.BootstraplessSynthesizer
 Pythonaws_cdk.BootstraplessSynthesizer
 TypeScript (source)aws-cdk-lib » BootstraplessSynthesizer


Implements
IStackSynthesizer, IReusableStackSynthesizer, IBoundStackSynthesizer
Extends
DefaultStackSynthesizer
Synthesizer that reuses bootstrap roles from a different region.
A special synthesizer that behaves similarly to DefaultStackSynthesizer,
but doesn't require bootstrapping the environment it operates in. Instead,
it will re-use the Roles that were created for a different region (which
is possible because IAM is a global service).
However, it will not assume asset buckets or repositories have been created,
and therefore does not support assets.
The name is poorly chosen -- it does still require bootstrapping, it just
does not support assets.
Used by the CodePipeline construct for the support stacks needed for
cross-region replication S3 buckets. App builders do not need to use this
synthesizer directly.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';
const bootstraplessSynthesizer = new cdk.BootstraplessSynthesizer(/* all optional props */ {
  cloudFormationExecutionRoleArn: 'cloudFormationExecutionRoleArn',
  deployRoleArn: 'deployRoleArn',
});

Initializer
new BootstraplessSynthesizer(props?: BootstraplessSynthesizerProps)

Parameters

props BootstraplessSynthesizerProps

Properties


NameTypeDescription


cloudFormationExecutionRoleArnstringReturns the ARN of the CFN execution Role.
deployRoleArnstringReturns the ARN of the deploy Role.
bootstrapQualifier?stringThe qualifier used to bootstrap this stack.
lookupRole?stringThe role used to lookup for this stack.



cloudFormationExecutionRoleArn
Type:
string
Returns the ARN of the CFN execution Role.

deployRoleArn
Type:
string
Returns the ARN of the deploy Role.

bootstrapQualifier?
Type:
string
(optional)
The qualifier used to bootstrap this stack.

lookupRole?
Type:
string
(optional)
The role used to lookup for this stack.
Methods


NameDescription


addDockerImageAsset(_asset)Register a Docker Image Asset.
addFileAsset(_asset)Register a File Asset.
bind(stack)Bind to the stack this environment is going to be used on.
reusableBind(stack)Produce a bound Stack Synthesizer for the given stack.
synthesize(session)Synthesize the associated stack to the session.



addDockerImageAsset(_asset)
public addDockerImageAsset(_asset: DockerImageAssetSource): DockerImageAssetLocation

Parameters

_asset DockerImageAssetSource

Returns

DockerImageAssetLocation

Register a Docker Image Asset.
Returns the parameters that can be used to refer to the asset inside the template.
The synthesizer must rely on some out-of-band mechanism to make sure the given files
are actually placed in the returned location before the deployment happens. This can
be by writing the instructions to the asset manifest (for use by the cdk-assets tool),
by relying on the CLI to upload files (legacy behavior), or some other operator controlled
mechanism.

addFileAsset(_asset)
public addFileAsset(_asset: FileAssetSource): FileAssetLocation

Parameters

_asset FileAssetSource

Returns

FileAssetLocation

Register a File Asset.
Returns the parameters that can be used to refer to the asset inside the template.
The synthesizer must rely on some out-of-band mechanism to make sure the given files
are actually placed in the returned location before the deployment happens. This can
be by writing the instructions to the asset manifest (for use by the cdk-assets tool),
by relying on the CLI to upload files (legacy behavior), or some other operator controlled
mechanism.

bind(stack)
public bind(stack: Stack): void

Parameters

stack Stack

Bind to the stack this environment is going to be used on.
Must be called before any of the other methods are called.

reusableBind(stack)
public reusableBind(stack: Stack): IBoundStackSynthesizer

Parameters

stack Stack

Returns

IBoundStackSynthesizer

Produce a bound Stack Synthesizer for the given stack.
This method may be called more than once on the same object.

synthesize(session)
public synthesize(session: ISynthesisSession): void

Parameters

session ISynthesisSession

Synthesize the associated stack to the session.\n\nclass BootstraplessSynthesizer


LanguageType name


 .NETAmazon.CDK.BootstraplessSynthesizer
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#BootstraplessSynthesizer
 Javasoftware.amazon.awscdk.BootstraplessSynthesizer
 Pythonaws_cdk.BootstraplessSynthesizer
 TypeScript (source)aws-cdk-lib » BootstraplessSynthesizer


Implements
IStackSynthesizer, IReusableStackSynthesizer, IBoundStackSynthesizer
Extends
DefaultStackSynthesizer
Synthesizer that reuses bootstrap roles from a different region.
A special synthesizer that behaves similarly to DefaultStackSynthesizer,
but doesn't require bootstrapping the environment it operates in. Instead,
it will re-use the Roles that were created for a different region (which
is possible because IAM is a global service).
However, it will not assume asset buckets or repositories have been created,
and therefore does not support assets.
The name is poorly chosen -- it does still require bootstrapping, it just
does not support assets.
Used by the CodePipeline construct for the support stacks needed for
cross-region replication S3 buckets. App builders do not need to use this
synthesizer directly.
Example
// The code below shows an example of how to instantiate this type.
// The values are placeholders you should change.
import * as cdk from 'aws-cdk-lib';
const bootstraplessSynthesizer = new cdk.BootstraplessSynthesizer(/* all optional props */ {
  cloudFormationExecutionRoleArn: 'cloudFormationExecutionRoleArn',
  deployRoleArn: 'deployRoleArn',
});

Initializer
new BootstraplessSynthesizer(props?: BootstraplessSynthesizerProps)

Parameters

props BootstraplessSynthesizerProps

Properties


NameTypeDescription


cloudFormationExecutionRoleArnstringReturns the ARN of the CFN execution Role.
deployRoleArnstringReturns the ARN of the deploy Role.
bootstrapQualifier?stringThe qualifier used to bootstrap this stack.
lookupRole?stringThe role used to lookup for this stack.



cloudFormationExecutionRoleArn
Type:
string
Returns the ARN of the CFN execution Role.

deployRoleArn
Type:
string
Returns the ARN of the deploy Role.

bootstrapQualifier?
Type:
string
(optional)
The qualifier used to bootstrap this stack.

lookupRole?
Type:
string
(optional)
The role used to lookup for this stack.
Methods


NameDescription


addDockerImageAsset(_asset)Register a Docker Image Asset.
addFileAsset(_asset)Register a File Asset.
bind(stack)Bind to the stack this environment is going to be used on.
reusableBind(stack)Produce a bound Stack Synthesizer for the given stack.
synthesize(session)Synthesize the associated stack to the session.



addDockerImageAsset(_asset)
public addDockerImageAsset(_asset: DockerImageAssetSource): DockerImageAssetLocation

Parameters

_asset DockerImageAssetSource

Returns

DockerImageAssetLocation

Register a Docker Image Asset.
Returns the parameters that can be used to refer to the asset inside the template.
The synthesizer must rely on some out-of-band mechanism to make sure the given files
are actually placed in the returned location before the deployment happens. This can
be by writing the instructions to the asset manifest (for use by the cdk-assets tool),
by relying on the CLI to upload files (legacy behavior), or some other operator controlled
mechanism.

addFileAsset(_asset)
public addFileAsset(_asset: FileAssetSource): FileAssetLocation

Parameters

_asset FileAssetSource

Returns

FileAssetLocation

Register a File Asset.
Returns the parameters that can be used to refer to the asset inside the template.
The synthesizer must rely on some out-of-band mechanism to make sure the given files
are actually placed in the returned location before the deployment happens. This can
be by writing the instructions to the asset manifest (for use by the cdk-assets tool),
by relying on the CLI to upload files (legacy behavior), or some other operator controlled
mechanism.

bind(stack)
public bind(stack: Stack): void

Parameters

stack Stack

Bind to the stack this environment is going to be used on.
Must be called before any of the other methods are called.

reusableBind(stack)
public reusableBind(stack: Stack): IBoundStackSynthesizer

Parameters

stack Stack

Returns

IBoundStackSynthesizer

Produce a bound Stack Synthesizer for the given stack.
This method may be called more than once on the same object.

synthesize(session)
public synthesize(session: ISynthesisSession): void

Parameters

session ISynthesisSession

Synthesize the associated stack to the session.\n\n\n\nclass CfnDynamicReference


LanguageType name


 .NETAmazon.CDK.CfnDynamicReference
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CfnDynamicReference
 Javasoftware.amazon.awscdk.CfnDynamicReference
 Pythonaws_cdk.CfnDynamicReference
 TypeScript (source)aws-cdk-lib » CfnDynamicReference


Implements
IResolvable
Extends
Intrinsic
References a dynamically retrieved value.
This is a Construct so that subclasses will (eventually) be able to attach
metadata to themselves without having to change call signatures.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html
Example
new CfnDynamicReference(
  CfnDynamicReferenceService.SECRETS_MANAGER,
  'secret-id:secret-string:json-key:version-stage:version-id',
);

Initializer
new CfnDynamicReference(service: CfnDynamicReferenceService, key: string)

Parameters

service CfnDynamicReferenceService
key string

Properties


NameTypeDescription


creationStackstring[]The captured stack trace which represents the location in which this token was created.
typeHint?ResolutionTypeHintType that the Intrinsic is expected to evaluate to.



creationStack
Type:
string[]
The captured stack trace which represents the location in which this token was created.

typeHint?
Type:
ResolutionTypeHint
(optional)
Type that the Intrinsic is expected to evaluate to.
Methods


NameDescription


resolve(_context)Produce the Token's value at resolution time.
toJSON()Turn this Token into JSON.
toString()Convert an instance of this Token to a string.
toStringList()Convert an instance of this Token to a string list.



resolve(_context)
public resolve(_context: IResolveContext): any

Parameters

_context IResolveContext

Returns

any

Produce the Token's value at resolution time.

toJSON()
public toJSON(): any

Returns

any

Turn this Token into JSON.
Called automatically when JSON.stringify() is called on a Token.

toString()
public toString(): string

Returns

string

Convert an instance of this Token to a string.
This method will be called implicitly by language runtimes if the object
is embedded into a string. We treat it the same as an explicit
stringification.

toStringList()
public toStringList(): string[]

Returns

string[]

Convert an instance of this Token to a string list.
This method will be called implicitly by language runtimes if the object
is embedded into a list. We treat it the same as an explicit
stringification.\n\nclass CfnDynamicReference


LanguageType name


 .NETAmazon.CDK.CfnDynamicReference
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CfnDynamicReference
 Javasoftware.amazon.awscdk.CfnDynamicReference
 Pythonaws_cdk.CfnDynamicReference
 TypeScript (source)aws-cdk-lib » CfnDynamicReference


Implements
IResolvable
Extends
Intrinsic
References a dynamically retrieved value.
This is a Construct so that subclasses will (eventually) be able to attach
metadata to themselves without having to change call signatures.
See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html
Example
new CfnDynamicReference(
  CfnDynamicReferenceService.SECRETS_MANAGER,
  'secret-id:secret-string:json-key:version-stage:version-id',
);

Initializer
new CfnDynamicReference(service: CfnDynamicReferenceService, key: string)

Parameters

service CfnDynamicReferenceService
key string

Properties


NameTypeDescription


creationStackstring[]The captured stack trace which represents the location in which this token was created.
typeHint?ResolutionTypeHintType that the Intrinsic is expected to evaluate to.



creationStack
Type:
string[]
The captured stack trace which represents the location in which this token was created.

typeHint?
Type:
ResolutionTypeHint
(optional)
Type that the Intrinsic is expected to evaluate to.
Methods


NameDescription


resolve(_context)Produce the Token's value at resolution time.
toJSON()Turn this Token into JSON.
toString()Convert an instance of this Token to a string.
toStringList()Convert an instance of this Token to a string list.



resolve(_context)
public resolve(_context: IResolveContext): any

Parameters

_context IResolveContext

Returns

any

Produce the Token's value at resolution time.

toJSON()
public toJSON(): any

Returns

any

Turn this Token into JSON.
Called automatically when JSON.stringify() is called on a Token.

toString()
public toString(): string

Returns

string

Convert an instance of this Token to a string.
This method will be called implicitly by language runtimes if the object
is embedded into a string. We treat it the same as an explicit
stringification.

toStringList()
public toStringList(): string[]

Returns

string[]

Convert an instance of this Token to a string list.
This method will be called implicitly by language runtimes if the object
is embedded into a list. We treat it the same as an explicit
stringification.\n\n\n\nclass CfnElement


LanguageType name


 .NETAmazon.CDK.CfnElement
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CfnElement
 Javasoftware.amazon.awscdk.CfnElement
 Pythonaws_cdk.CfnElement
 TypeScript (source)aws-cdk-lib » CfnElement


Implements
IConstruct, IDependable
Extends
Construct
Implemented by
CfnSkill, CfnAnalyzer, CfnCertificate, CfnCertificateAuthority, CfnCertificateAuthorityActivation, CfnPermission, CfnBroker, CfnConfiguration, CfnConfigurationAssociation, CfnApp, CfnBranch, CfnDomain, CfnComponent, CfnForm, CfnTheme, CfnAccount, CfnApiKey, CfnAuthorizer, CfnBasePathMapping, CfnBasePathMappingV2, CfnClientCertificate, CfnDeployment, CfnDocumentationPart, CfnDocumentationVersion, CfnDomainName, CfnDomainNameAccessAssociation, CfnDomainNameV2, CfnGatewayResponse, CfnMethod, CfnModel, CfnRequestValidator, CfnResource, CfnRestApi, CfnStage, CfnUsagePlan, CfnUsagePlanKey, CfnVpcLink, CfnApi, CfnApiGatewayManagedOverrides, CfnApiMapping, CfnAuthorizer, CfnDeployment, CfnDomainName, CfnIntegration, CfnIntegrationResponse, CfnModel, CfnRoute, CfnRouteResponse, CfnStage, CfnVpcLink, CfnApplication, CfnConfigurationProfile, CfnDeployment, CfnDeploymentStrategy, CfnEnvironment, CfnExtension, CfnExtensionAssociation, CfnHostedConfigurationVersion, CfnConnector, CfnConnectorProfile, CfnFlow, CfnApplication, CfnDataIntegration, CfnEventIntegration, CfnScalableTarget, CfnScalingPolicy, CfnApplication, CfnDiscovery, CfnServiceLevelObjective, CfnGatewayRoute, CfnMesh, CfnRoute, CfnVirtualGateway, CfnVirtualNode, CfnVirtualRouter, CfnVirtualService, CfnAutoScalingConfiguration, CfnObservabilityConfiguration, CfnService, CfnVpcConnector, CfnVpcIngressConnection, CfnAppBlock, CfnAppBlockBuilder, CfnApplication, CfnApplicationEntitlementAssociation, CfnApplicationFleetAssociation, CfnDirectoryConfig, CfnEntitlement, CfnFleet, CfnImageBuilder, CfnStack, CfnStackFleetAssociation, CfnStackUserAssociation, CfnUser, CfnApi, CfnApiCache, CfnApiKey, CfnChannelNamespace, CfnDataSource, CfnDomainName, CfnDomainNameApiAssociation, CfnFunctionConfiguration, CfnGraphQLApi, CfnGraphQLSchema, CfnResolver, CfnSourceApiAssociation, CfnTestCase, CfnRuleGroupsNamespace, CfnScraper, CfnWorkspace, CfnAutoshiftObserverNotificationStatus, CfnZonalAutoshiftConfiguration, CfnCapacityReservation, CfnDataCatalog, CfnNamedQuery, CfnPreparedStatement, CfnWorkGroup, CfnAssessment, CfnAutoScalingGroup, CfnLaunchConfiguration, CfnLifecycleHook, CfnScalingPolicy, CfnScheduledAction, CfnWarmPool, CfnScalingPlan, CfnCapability, CfnPartnership, CfnProfile, CfnTransformer, CfnBackupPlan, CfnBackupSelection, CfnBackupVault, CfnFramework, CfnLogicallyAirGappedBackupVault, CfnReportPlan, CfnRestoreTestingPlan, CfnRestoreTestingSelection, CfnHypervisor, CfnComputeEnvironment, CfnConsumableResource, CfnJobDefinition, CfnJobQueue, CfnSchedulingPolicy, CfnExport, CfnAgent, CfnAgentAlias, CfnApplicationInferenceProfile, CfnBlueprint, CfnDataAutomationProject, CfnDataSource, CfnFlow, CfnFlowAlias, CfnFlowVersion, CfnGuardrail, CfnGuardrailVersion, CfnKnowledgeBase, CfnPrompt, CfnPromptVersion, CfnBillingGroup, CfnCustomLineItem, CfnPricingPlan, CfnPricingRule, CfnBudget, CfnBudgetsAction, CfnKeyspace, CfnTable, CfnType, CfnAnomalyMonitor, CfnAnomalySubscription, CfnCostCategory, CfnAccount, CfnCertificate, CfnCustomAction, CfnMicrosoftTeamsChannelConfiguration, CfnSlackChannelConfiguration, CfnAnalysisTemplate, CfnCollaboration, CfnConfiguredTable, CfnConfiguredTableAssociation, CfnIdMappingTable, CfnIdNamespaceAssociation, CfnMembership, CfnPrivacyBudgetTemplate, CfnTrainingDataset, CfnEnvironmentEC2, CfnCustomResource, CfnGuardHook, CfnHookDefaultVersion, CfnHookTypeConfig, CfnHookVersion, CfnLambdaHook, CfnMacro, CfnModuleDefaultVersion, CfnModuleVersion, CfnPublicTypeVersion, CfnPublisher, CfnResourceDefaultVersion, CfnResourceVersion, CfnStack, CfnStackSet, CfnTypeActivation, CfnWaitCondition, CfnWaitConditionHandle, CfnAnycastIpList, CfnCachePolicy, CfnCloudFrontOriginAccessIdentity, CfnContinuousDeploymentPolicy, CfnDistribution, CfnFunction, CfnKeyGroup, CfnKeyValueStore, CfnMonitoringSubscription, CfnOriginAccessControl, CfnOriginRequestPolicy, CfnPublicKey, CfnRealtimeLogConfig, CfnResponseHeadersPolicy, CfnStreamingDistribution, CfnVpcOrigin, CfnChannel, CfnDashboard, CfnEventDataStore, CfnResourcePolicy, CfnTrail, CfnAlarm, CfnAnomalyDetector, CfnCompositeAlarm, CfnDashboard, CfnInsightRule, CfnMetricStream, CfnDomain, CfnPackageGroup, CfnRepository, CfnFleet, CfnProject, CfnReportGroup, CfnSourceCredential, CfnRepository, CfnConnection, CfnApplication, CfnDeploymentConfig, CfnDeploymentGroup, CfnProfilingGroup, CfnRepositoryAssociation, CfnCustomActionType, CfnPipeline, CfnWebhook, CfnGitHubRepository, CfnConnection, CfnRepositoryLink, CfnSyncConfiguration, CfnNotificationRule, CfnIdentityPool, CfnIdentityPoolPrincipalTag, CfnIdentityPoolRoleAttachment, CfnLogDeliveryConfiguration, CfnManagedLoginBranding, CfnUserPool, CfnUserPoolClient, CfnUserPoolDomain, CfnUserPoolGroup, CfnUserPoolIdentityProvider, CfnUserPoolResourceServer, CfnUserPoolRiskConfigurationAttachment, CfnUserPoolUICustomizationAttachment, CfnUserPoolUser, CfnUserPoolUserToGroupAttachment, CfnDocumentClassifier, CfnFlywheel, CfnAggregationAuthorization, CfnConfigRule, CfnConfigurationAggregator, CfnConfigurationRecorder, CfnConformancePack, CfnDeliveryChannel, CfnOrganizationConfigRule, CfnOrganizationConformancePack, CfnRemediationConfiguration, CfnStoredQuery, CfnAgentStatus, CfnApprovedOrigin, CfnContactFlow, CfnContactFlowModule, CfnContactFlowVersion, CfnEmailAddress, CfnEvaluationForm, CfnHoursOfOperation, CfnInstance, CfnInstanceStorageConfig, CfnIntegrationAssociation, CfnPhoneNumber, CfnPredefinedAttribute, CfnPrompt, CfnQueue, CfnQuickConnect, CfnRoutingProfile, CfnRule, CfnSecurityKey, CfnSecurityProfile, CfnTaskTemplate, CfnTrafficDistributionGroup, CfnUser, CfnUserHierarchyGroup, CfnUserHierarchyStructure, CfnView, CfnViewVersion, CfnCampaign, CfnCampaign, CfnEnabledBaseline, CfnEnabledControl, CfnLandingZone, CfnReportDefinition, CfnCalculatedAttributeDefinition, CfnDomain, CfnEventStream, CfnEventTrigger, CfnIntegration, CfnObjectType, CfnSegmentDefinition, CfnDataset, CfnJob, CfnProject, CfnRecipe, CfnRuleset, CfnSchedule, CfnPipeline, CfnAgent, CfnLocationAzureBlob, CfnLocationEFS, CfnLocationFSxLustre, CfnLocationFSxONTAP, CfnLocationFSxOpenZFS, CfnLocationFSxWindows, CfnLocationHDFS, CfnLocationNFS, CfnLocationObjectStorage, CfnLocationS3, CfnLocationSMB, CfnStorageSystem, CfnTask, CfnConnection, CfnDataSource, CfnDomain, CfnEnvironment, CfnEnvironmentActions, CfnEnvironmentBlueprintConfiguration, CfnEnvironmentProfile, CfnGroupProfile, CfnProject, CfnProjectMembership, CfnSubscriptionTarget, CfnUserProfile, CfnCluster, CfnParameterGroup, CfnSubnetGroup, CfnFarm, CfnFleet, CfnLicenseEndpoint, CfnLimit, CfnMeteredProduct, CfnMonitor, CfnQueue, CfnQueueEnvironment, CfnQueueFleetAssociation, CfnQueueLimitAssociation, CfnStorageProfile, CfnGraph, CfnMemberInvitation, CfnOrganizationAdmin, CfnDevicePool, CfnInstanceProfile, CfnNetworkProfile, CfnProject, CfnTestGridProject, CfnVPCEConfiguration, CfnLogAnomalyDetectionIntegration, CfnNotificationChannel, CfnResourceCollection, CfnMicrosoftAD, CfnSimpleAD, CfnLifecyclePolicy, CfnCertificate, CfnDataMigration, CfnDataProvider, CfnEndpoint, CfnEventSubscription, CfnInstanceProfile, CfnMigrationProject, CfnReplicationConfig, CfnReplicationInstance, CfnReplicationSubnetGroup, CfnReplicationTask, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBSubnetGroup, CfnEventSubscription, CfnCluster, CfnCluster, CfnGlobalTable, CfnTable, CfnCapacityReservation, CfnCapacityReservationFleet, CfnCarrierGateway, CfnClientVpnAuthorizationRule, CfnClientVpnEndpoint, CfnClientVpnRoute, CfnClientVpnTargetNetworkAssociation, CfnCustomerGateway, CfnDHCPOptions, CfnEC2Fleet, CfnEIP, CfnEIPAssociation, CfnEgressOnlyInternetGateway, CfnEnclaveCertificateIamRoleAssociation, CfnFlowLog, CfnGatewayRouteTableAssociation, CfnHost, CfnIPAM, CfnIPAMAllocation, CfnIPAMPool, CfnIPAMPoolCidr, CfnIPAMResourceDiscovery, CfnIPAMResourceDiscoveryAssociation, CfnIPAMScope, CfnInstance, CfnInstanceConnectEndpoint, CfnInternetGateway, CfnKeyPair, CfnLaunchTemplate, CfnLocalGatewayRoute, CfnLocalGatewayRouteTable, CfnLocalGatewayRouteTableVPCAssociation, CfnLocalGatewayRouteTableVirtualInterfaceGroupAssociation, CfnNatGateway, CfnNetworkAcl, CfnNetworkAclEntry, CfnNetworkInsightsAccessScope, CfnNetworkInsightsAccessScopeAnalysis, CfnNetworkInsightsAnalysis, CfnNetworkInsightsPath, CfnNetworkInterface, CfnNetworkInterfaceAttachment, CfnNetworkInterfacePermission, CfnNetworkPerformanceMetricSubscription, CfnPlacementGroup, CfnPrefixList, CfnRoute, CfnRouteServer, CfnRouteServerAssociation, CfnRouteServerEndpoint, CfnRouteServerPeer, CfnRouteServerPropagation, CfnRouteTable, CfnSecurityGroup, CfnSecurityGroupEgress, CfnSecurityGroupIngress, CfnSecurityGroupVpcAssociation, CfnSnapshotBlockPublicAccess, CfnSpotFleet, CfnSubnet, CfnSubnetCidrBlock, CfnSubnetNetworkAclAssociation, CfnSubnetRouteTableAssociation, CfnTrafficMirrorFilter, CfnTrafficMirrorFilterRule, CfnTrafficMirrorSession, CfnTrafficMirrorTarget, CfnTransitGateway, CfnTransitGatewayAttachment, CfnTransitGatewayConnect, CfnTransitGatewayMulticastDomain, CfnTransitGatewayMulticastDomainAssociation, CfnTransitGatewayMulticastGroupMember, CfnTransitGatewayMulticastGroupSource, CfnTransitGatewayPeeringAttachment, CfnTransitGatewayRoute, CfnTransitGatewayRouteTable, CfnTransitGatewayRouteTableAssociation, CfnTransitGatewayRouteTablePropagation, CfnTransitGatewayVpcAttachment, CfnVPC, CfnVPCBlockPublicAccessExclusion, CfnVPCBlockPublicAccessOptions, CfnVPCCidrBlock, CfnVPCDHCPOptionsAssociation, CfnVPCEndpoint, CfnVPCEndpointConnectionNotification, CfnVPCEndpointService, CfnVPCEndpointServicePermissions, CfnVPCGatewayAttachment, CfnVPCPeeringConnection, CfnVPNConnection, CfnVPNConnectionRoute, CfnVPNGateway, CfnVPNGatewayRoutePropagation, CfnVerifiedAccessEndpoint, CfnVerifiedAccessGroup, CfnVerifiedAccessInstance, CfnVerifiedAccessTrustProvider, CfnVolume, CfnVolumeAttachment, CfnPublicRepository, CfnPullThroughCacheRule, CfnRegistryPolicy, CfnReplicationConfiguration, CfnRepository, CfnRepositoryCreationTemplate, CfnCapacityProvider, CfnCluster, CfnClusterCapacityProviderAssociations, CfnPrimaryTaskSet, CfnService, CfnTaskDefinition, CfnTaskSet, CfnAccessPoint, CfnFileSystem, CfnMountTarget, CfnAccessEntry, CfnAddon, CfnCluster, CfnFargateProfile, CfnIdentityProviderConfig, CfnNodegroup, CfnPodIdentityAssociation, CfnCacheCluster, CfnGlobalReplicationGroup, CfnParameterGroup, CfnReplicationGroup, CfnSecurityGroup, CfnSecurityGroupIngress, CfnServerlessCache, CfnSubnetGroup, CfnUser, CfnUserGroup, CfnApplication, CfnApplicationVersion, CfnConfigurationTemplate, CfnEnvironment, CfnLoadBalancer, CfnListener, CfnListenerCertificate, CfnListenerRule, CfnLoadBalancer, CfnTargetGroup, CfnTrustStore, CfnTrustStoreRevocation, CfnDomain, CfnCluster, CfnInstanceFleetConfig, CfnInstanceGroupConfig, CfnSecurityConfiguration, CfnStep, CfnStudio, CfnStudioSessionMapping, CfnWALWorkspace, CfnVirtualCluster, CfnApplication, CfnIdMappingWorkflow, CfnIdNamespace, CfnMatchingWorkflow, CfnPolicyStatement, CfnSchemaMapping, CfnApiDestination, CfnArchive, CfnConnection, CfnEndpoint, CfnEventBus, CfnEventBusPolicy, CfnRule, CfnDiscoverer, CfnRegistry, CfnRegistryPolicy, CfnSchema, CfnExperiment, CfnFeature, CfnLaunch, CfnProject, CfnSegment, CfnEnvironment, CfnExperimentTemplate, CfnTargetAccountConfiguration, CfnNotificationChannel, CfnPolicy, CfnResourceSet, CfnDataset, CfnDatasetGroup, CfnDetector, CfnEntityType, CfnEventType, CfnLabel, CfnList, CfnOutcome, CfnVariable, CfnDataRepositoryAssociation, CfnFileSystem, CfnSnapshot, CfnStorageVirtualMachine, CfnVolume, CfnAlias, CfnBuild, CfnContainerFleet, CfnContainerGroupDefinition, CfnFleet, CfnGameServerGroup, CfnGameSessionQueue, CfnLocation, CfnMatchmakingConfiguration, CfnMatchmakingRuleSet, CfnScript, CfnApplication, CfnStreamGroup, CfnAccelerator, CfnCrossAccountAttachment, CfnEndpointGroup, CfnListener, CfnClassifier, CfnConnection, CfnCrawler, CfnCustomEntityType, CfnDataCatalogEncryptionSettings, CfnDataQualityRuleset, CfnDatabase, CfnDevEndpoint, CfnJob, CfnMLTransform, CfnPartition, CfnRegistry, CfnSchema, CfnSchemaVersion, CfnSchemaVersionMetadata, CfnSecurityConfiguration, CfnTable, CfnTableOptimizer, CfnTrigger, CfnUsageProfile, CfnWorkflow, CfnWorkspace, CfnConnectorDefinition, CfnConnectorDefinitionVersion, CfnCoreDefinition, CfnCoreDefinitionVersion, CfnDeviceDefinition, CfnDeviceDefinitionVersion, CfnFunctionDefinition, CfnFunctionDefinitionVersion, CfnGroup, CfnGroupVersion, CfnLoggerDefinition, CfnLoggerDefinitionVersion, CfnResourceDefinition, CfnResourceDefinitionVersion, CfnSubscriptionDefinition, CfnSubscriptionDefinitionVersion, CfnComponentVersion, CfnDeployment, CfnConfig, CfnDataflowEndpointGroup, CfnMissionProfile, CfnDetector, CfnFilter, CfnIPSet, CfnMalwareProtectionPlan, CfnMaster, CfnMember, CfnPublishingDestination, CfnThreatIntelSet, CfnDatastore, CfnFHIRDatastore, CfnAccessKey, CfnGroup, CfnGroupPolicy, CfnInstanceProfile, CfnManagedPolicy, CfnOIDCProvider, CfnPolicy, CfnRole, CfnRolePolicy, CfnSAMLProvider, CfnServerCertificate, CfnServiceLinkedRole, CfnUser, CfnUserPolicy, CfnUserToGroupAddition, CfnVirtualMFADevice, CfnGroup, CfnGroupMembership, CfnComponent, CfnContainerRecipe, CfnDistributionConfiguration, CfnImage, CfnImagePipeline, CfnImageRecipe, CfnInfrastructureConfiguration, CfnLifecyclePolicy, CfnWorkflow, CfnAssessmentTarget, CfnAssessmentTemplate, CfnResourceGroup, CfnCisScanConfiguration, CfnFilter, CfnMonitor, CfnInvoiceUnit, CfnAccountAuditConfiguration, CfnAuthorizer, CfnBillingGroup, CfnCACertificate, CfnCertificate, CfnCertificateProvider, CfnCommand, CfnCustomMetric, CfnDimension, CfnDomainConfiguration, CfnFleetMetric, CfnJobTemplate, CfnLogging, CfnMitigationAction, CfnPolicy, CfnPolicyPrincipalAttachment, CfnProvisioningTemplate, CfnResourceSpecificLogging, CfnRoleAlias, CfnScheduledAudit, CfnSecurityProfile, CfnSoftwarePackage, CfnSoftwarePackageVersion, CfnThing, CfnThingGroup, CfnThingPrincipalAttachment, CfnThingType, CfnTopicRule, CfnTopicRuleDestination, CfnChannel, CfnDataset, CfnDatastore, CfnPipeline, CfnSuiteDefinition, CfnAlarmModel, CfnDetectorModel, CfnInput, CfnApplication, CfnCampaign, CfnDecoderManifest, CfnFleet, CfnModelManifest, CfnSignalCatalog, CfnStateTemplate, CfnVehicle, CfnAccessPolicy, CfnAsset, CfnAssetModel, CfnDashboard, CfnDataset, CfnGateway, CfnPortal, CfnProject, CfnFlowTemplate, CfnComponentType, CfnEntity, CfnScene, CfnSyncJob, CfnWorkspace, CfnDestination, CfnDeviceProfile, CfnFuotaTask, CfnMulticastGroup, CfnNetworkAnalyzerConfiguration, CfnPartnerAccount, CfnServiceProfile, CfnTaskDefinition, CfnWirelessDevice, CfnWirelessDeviceImportTask, CfnWirelessGateway, CfnChannel, CfnEncoderConfiguration, CfnIngestConfiguration, CfnPlaybackKeyPair, CfnPlaybackRestrictionPolicy, CfnPublicKey, CfnRecordingConfiguration, CfnStage, CfnStorageConfiguration, CfnStreamKey, CfnLoggingConfiguration, CfnRoom, CfnConnector, CfnCustomPlugin, CfnWorkerConfiguration, CfnDataSource, CfnFaq, CfnIndex, CfnExecutionPlan, CfnResourcePolicy, CfnStream, CfnStreamConsumer, CfnApplication, CfnApplicationCloudWatchLoggingOptionV2, CfnApplicationOutput, CfnApplicationOutputV2, CfnApplicationReferenceDataSource, CfnApplicationReferenceDataSourceV2, CfnApplicationV2, CfnApplication, CfnApplicationCloudWatchLoggingOption, CfnApplicationOutput, CfnApplicationReferenceDataSource, CfnDeliveryStream, CfnSignalingChannel, CfnStream, CfnAlias, CfnKey, CfnReplicaKey, CfnDataCellsFilter, CfnDataLakeSettings, CfnPermissions, CfnPrincipalPermissions, CfnResource, CfnTag, CfnTagAssociation, CfnAlias, CfnCodeSigningConfig, CfnEventInvokeConfig, CfnEventSourceMapping, CfnFunction, CfnLayerVersion, CfnLayerVersionPermission, CfnPermission, CfnUrl, CfnVersion, CfnDeployment, CfnBot, CfnBotAlias, CfnBotVersion, CfnResourcePolicy, CfnGrant, CfnLicense, CfnAlarm, CfnBucket, CfnCertificate, CfnContainer, CfnDatabase, CfnDisk, CfnDistribution, CfnInstance, CfnLoadBalancer, CfnLoadBalancerTlsCertificate, CfnStaticIp, CfnAPIKey, CfnGeofenceCollection, CfnMap, CfnPlaceIndex, CfnRouteCalculator, CfnTracker, CfnTrackerConsumer, CfnAccountPolicy, CfnDelivery, CfnDeliveryDestination, CfnDeliverySource, CfnDestination, CfnIntegration, CfnLogAnomalyDetector, CfnLogGroup, CfnLogStream, CfnMetricFilter, CfnQueryDefinition, CfnResourcePolicy, CfnSubscriptionFilter, CfnTransformer, CfnInferenceScheduler, CfnAlert, CfnAnomalyDetector, CfnProject, CfnApplication, CfnDeployment, CfnEnvironment, CfnAllowList, CfnCustomDataIdentifier, CfnFindingsFilter, CfnSession, CfnAccessor, CfnMember, CfnNode, CfnBridge, CfnBridgeOutput, CfnBridgeSource, CfnFlow, CfnFlowEntitlement, CfnFlowOutput, CfnFlowSource, CfnFlowVpcInterface, CfnGateway, CfnJobTemplate, CfnPreset, CfnQueue, CfnChannel, CfnChannelPlacementGroup, CfnCloudWatchAlarmTemplate, CfnCloudWatchAlarmTemplateGroup, CfnCluster, CfnEventBridgeRuleTemplate, CfnEventBridgeRuleTemplateGroup, CfnInput, CfnInputSecurityGroup, CfnMultiplex, CfnMultiplexprogram, CfnNetwork, CfnSdiSource, CfnSignalMap, CfnAsset, CfnChannel, CfnOriginEndpoint, CfnPackagingConfiguration, CfnPackagingGroup, CfnChannel, CfnChannelGroup, CfnChannelPolicy, CfnOriginEndpoint, CfnOriginEndpointPolicy, CfnContainer, CfnChannel, CfnChannelPolicy, CfnLiveSource, CfnPlaybackConfiguration, CfnSourceLocation, CfnVodSource, CfnACL, CfnCluster, CfnMultiRegionCluster, CfnParameterGroup, CfnSubnetGroup, CfnUser, CfnBatchScramSecret, CfnCluster, CfnClusterPolicy, CfnConfiguration, CfnReplicator, CfnServerlessCluster, CfnVpcConnection, CfnEnvironment, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBParameterGroup, CfnDBSubnetGroup, CfnEventSubscription, CfnGraph, CfnPrivateGraphEndpoint, CfnFirewall, CfnFirewallPolicy, CfnLoggingConfiguration, CfnRuleGroup, CfnTLSInspectionConfiguration, CfnConnectAttachment, CfnConnectPeer, CfnCoreNetwork, CfnCustomerGatewayAssociation, CfnDevice, CfnDirectConnectGatewayAttachment, CfnGlobalNetwork, CfnLink, CfnLinkAssociation, CfnSite, CfnSiteToSiteVpnAttachment, CfnTransitGatewayPeering, CfnTransitGatewayRegistration, CfnTransitGatewayRouteTableAttachment, CfnVpcAttachment, CfnLaunchProfile, CfnStreamingImage, CfnStudio, CfnStudioComponent, CfnChannelAssociation, CfnEventRule, CfnManagedNotificationAccountContactAssociation, CfnManagedNotificationAdditionalChannelAssociation, CfnNotificationConfiguration, CfnNotificationHub, CfnEmailContact, CfnLink, CfnSink, CfnAnnotationStore, CfnReferenceStore, CfnRunGroup, CfnSequenceStore, CfnVariantStore, CfnWorkflow, CfnAccessPolicy, CfnCollection, CfnIndex, CfnLifecyclePolicy, CfnSecurityConfig, CfnSecurityPolicy, CfnVpcEndpoint, CfnApplication, CfnDomain, CfnApp, CfnElasticLoadBalancerAttachment, CfnInstance, CfnLayer, CfnStack, CfnUserProfile, CfnVolume, CfnServer, CfnAccount, CfnOrganization, CfnOrganizationalUnit, CfnPolicy, CfnResourcePolicy, CfnPipeline, CfnApplicationInstance, CfnPackage, CfnPackageVersion, CfnAlias, CfnKey, CfnConnector, CfnDirectoryRegistration, CfnServicePrincipalName, CfnTemplate, CfnTemplateGroupAccessControlEntry, CfnChallenge, CfnConnector, CfnCluster, CfnComputeNodeGroup, CfnQueue, CfnDataset, CfnDatasetGroup, CfnSchema, CfnSolution, CfnADMChannel, CfnAPNSChannel, CfnAPNSSandboxChannel, CfnAPNSVoipChannel, CfnAPNSVoipSandboxChannel, CfnApp, CfnApplicationSettings, CfnBaiduChannel, CfnCampaign, CfnEmailChannel, CfnEmailTemplate, CfnEventStream, CfnGCMChannel, CfnInAppTemplate, CfnPushTemplate, CfnSMSChannel, CfnSegment, CfnSmsTemplate, CfnVoiceChannel, CfnConfigurationSet, CfnConfigurationSetEventDestination, CfnDedicatedIpPool, CfnIdentity, CfnPipe, CfnEnvironmentAccountConnection, CfnEnvironmentTemplate, CfnServiceTemplate, CfnApplication, CfnDataAccessor, CfnDataSource, CfnIndex, CfnPermission, CfnPlugin, CfnRetriever, CfnWebExperience, CfnLedger, CfnStream, CfnAnalysis, CfnCustomPermissions, CfnDashboard, CfnDataSet, CfnDataSource, CfnFolder, CfnRefreshSchedule, CfnTemplate, CfnTheme, CfnTopic, CfnVPCConnection, CfnPermission, CfnResourceShare, CfnRule, CfnCustomDBEngineVersion, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBParameterGroup, CfnDBProxy, CfnDBProxyEndpoint, CfnDBProxyTargetGroup, CfnDBSecurityGroup, CfnDBSecurityGroupIngress, CfnDBShardGroup, CfnDBSubnetGroup, CfnEventSubscription, CfnGlobalCluster, CfnIntegration, CfnOptionGroup, CfnCluster, CfnClusterParameterGroup, CfnClusterSecurityGroup, CfnClusterSecurityGroupIngress, CfnClusterSubnetGroup, CfnEndpointAccess, CfnEndpointAuthorization, CfnEventSubscription, CfnIntegration, CfnScheduledAction, CfnNamespace, CfnWorkgroup, CfnApplication, CfnEnvironment, CfnRoute, CfnService, CfnCollection, CfnProject, CfnStreamProcessor, CfnApp, CfnResiliencyPolicy, CfnDefaultViewAssociation, CfnIndex, CfnView, CfnGroup, CfnTagSyncTask, CfnFleet, CfnRobot, CfnRobotApplication, CfnRobotApplicationVersion, CfnSimulationApplication, CfnSimulationApplicationVersion, CfnCRL, CfnProfile, CfnTrustAnchor, CfnCidrCollection, CfnDNSSEC, CfnHealthCheck, CfnHostedZone, CfnKeySigningKey, CfnRecordSet, CfnRecordSetGroup, CfnProfile, CfnProfileAssociation, CfnProfileResourceAssociation, CfnCluster, CfnControlPanel, CfnRoutingControl, CfnSafetyRule, CfnCell, CfnReadinessCheck, CfnRecoveryGroup, CfnResourceSet, CfnFirewallDomainList, CfnFirewallRuleGroup, CfnFirewallRuleGroupAssociation, CfnOutpostResolver, CfnResolverConfig, CfnResolverDNSSECConfig, CfnResolverEndpoint, CfnResolverQueryLoggingConfig, CfnResolverQueryLoggingConfigAssociation, CfnResolverRule, CfnResolverRuleAssociation, CfnAppMonitor, CfnAccessGrant, CfnAccessGrantsInstance, CfnAccessGrantsLocation, CfnAccessPoint, CfnBucket, CfnBucketPolicy, CfnMultiRegionAccessPoint, CfnMultiRegionAccessPointPolicy, CfnStorageLens, CfnStorageLensGroup, CfnBucketPolicy, CfnDirectoryBucket, CfnAccessPoint, CfnAccessPointPolicy, CfnAccessPoint, CfnBucket, CfnBucketPolicy, CfnEndpoint, CfnTableBucket, CfnTableBucketPolicy, CfnApp, CfnAppImageConfig, CfnCluster, CfnCodeRepository, CfnDataQualityJobDefinition, CfnDevice, CfnDeviceFleet, CfnDomain, CfnEndpoint, CfnEndpointConfig, CfnFeatureGroup, CfnImage, CfnImageVersion, CfnInferenceComponent, CfnInferenceExperiment, CfnMlflowTrackingServer, CfnModel, CfnModelBiasJobDefinition, CfnModelCard, CfnModelExplainabilityJobDefinition, CfnModelPackage, CfnModelPackageGroup, CfnModelQualityJobDefinition, CfnMonitoringSchedule, CfnNotebookInstance, CfnNotebookInstanceLifecycleConfig, CfnPartnerApp, CfnPipeline, CfnProject, CfnSpace, CfnStudioLifecycleConfig, CfnUserProfile, CfnWorkteam, CfnApi, CfnApplication, CfnFunction, CfnHttpApi, CfnLayerVersion, CfnSimpleTable, CfnStateMachine, CfnSchedule, CfnScheduleGroup, CfnDomain, CfnResourcePolicy, CfnRotationSchedule, CfnSecret, CfnSecretTargetAttachment, CfnAutomationRule, CfnConfigurationPolicy, CfnDelegatedAdmin, CfnFindingAggregator, CfnHub, CfnInsight, CfnOrganizationConfiguration, CfnPolicyAssociation, CfnProductSubscription, CfnSecurityControl, CfnStandard, CfnAwsLogSource, CfnDataLake, CfnSubscriber, CfnSubscriberNotification, CfnAcceptedPortfolioShare, CfnCloudFormationProduct, CfnCloudFormationProvisionedProduct, CfnLaunchNotificationConstraint, CfnLaunchRoleConstraint, CfnLaunchTemplateConstraint, CfnPortfolio, CfnPortfolioPrincipalAssociation, CfnPortfolioProductAssociation, CfnPortfolioShare, CfnResourceUpdateConstraint, CfnServiceAction, CfnServiceActionAssociation, CfnStackSetConstraint, CfnTagOption, CfnTagOptionAssociation, CfnApplication, CfnAttributeGroup, CfnAttributeGroupAssociation, CfnResourceAssociation, CfnHttpNamespace, CfnInstance, CfnPrivateDnsNamespace, CfnPublicDnsNamespace, CfnService, CfnConfigurationSet, CfnConfigurationSetEventDestination, CfnContactList, CfnDedicatedIpPool, CfnEmailIdentity, CfnMailManagerAddonInstance, CfnMailManagerAddonSubscription, CfnMailManagerArchive, CfnMailManagerIngressPoint, CfnMailManagerRelay, CfnMailManagerRuleSet, CfnMailManagerTrafficPolicy, CfnReceiptFilter, CfnReceiptRule, CfnReceiptRuleSet, CfnTemplate, CfnVdmAttributes, CfnDRTAccess, CfnProactiveEngagement, CfnProtection, CfnProtectionGroup, CfnProfilePermission, CfnSigningProfile, CfnSimulation, CfnSubscription, CfnTopic, CfnTopicInlinePolicy, CfnTopicPolicy, CfnQueue, CfnQueueInlinePolicy, CfnQueuePolicy, CfnAssociation, CfnDocument, CfnMaintenanceWindow, CfnMaintenanceWindowTarget, CfnMaintenanceWindowTask, CfnParameter, CfnPatchBaseline, CfnResourceDataSync, CfnResourcePolicy, CfnContact, CfnContactChannel, CfnPlan, CfnRotation, CfnReplicationSet, CfnResponsePlan, CfnConfigurationManager, CfnApplication, CfnApplicationAssignment, CfnAssignment, CfnInstance, CfnInstanceAccessControlAttributeConfiguration, CfnPermissionSet, CfnActivity, CfnStateMachine, CfnStateMachineAlias, CfnStateMachineVersion, CfnAccountAlias, CfnSlackChannelConfiguration, CfnSlackWorkspaceConfiguration, CfnCanary, CfnGroup, CfnApplication, CfnDatabase, CfnInfluxDBInstance, CfnScheduledQuery, CfnTable, CfnAgreement, CfnCertificate, CfnConnector, CfnProfile, CfnServer, CfnUser, CfnWebApp, CfnWorkflow, CfnIdentitySource, CfnPolicy, CfnPolicyStore, CfnPolicyTemplate, CfnDomain, CfnAccessLogSubscription, CfnAuthPolicy, CfnListener, CfnResourceConfiguration, CfnResourceGateway, CfnResourcePolicy, CfnRule, CfnService, CfnServiceNetwork, CfnServiceNetworkResourceAssociation, CfnServiceNetworkServiceAssociation, CfnServiceNetworkVpcAssociation, CfnTargetGroup, CfnByteMatchSet, CfnIPSet, CfnRule, CfnSizeConstraintSet, CfnSqlInjectionMatchSet, CfnWebACL, CfnXssMatchSet, CfnByteMatchSet, CfnGeoMatchSet, CfnIPSet, CfnRateBasedRule, CfnRegexPatternSet, CfnRule, CfnSizeConstraintSet, CfnSqlInjectionMatchSet, CfnWebACL, CfnWebACLAssociation, CfnXssMatchSet, CfnIPSet, CfnLoggingConfiguration, CfnRegexPatternSet, CfnRuleGroup, CfnWebACL, CfnWebACLAssociation, CfnAIAgent, CfnAIAgentVersion, CfnAIGuardrail, CfnAIGuardrailVersion, CfnAIPrompt, CfnAIPromptVersion, CfnAssistant, CfnAssistantAssociation, CfnKnowledgeBase, CfnMessageTemplate, CfnMessageTemplateVersion, CfnConnectionAlias, CfnWorkspace, CfnWorkspacesPool, CfnEnvironment, CfnBrowserSettings, CfnDataProtectionSettings, CfnIdentityProvider, CfnIpAccessSettings, CfnNetworkSettings, CfnPortal, CfnTrustStore, CfnUserAccessLoggingSettings, CfnUserSettings, CfnGroup, CfnResourcePolicy, CfnSamplingRule, CfnTransactionSearchConfig, CfnInclude, CfnCodeDeployBlueGreenHook, CfnCondition, CfnCustomResource, CfnGuardHook, CfnHook, CfnHookDefaultVersion, CfnHookTypeConfig, CfnHookVersion, CfnLambdaHook, CfnMacro, CfnMapping, CfnModuleDefaultVersion, CfnModuleVersion, CfnOutput, CfnParameter, CfnPublicTypeVersion, CfnPublisher, CfnResource, CfnResourceDefaultVersion, CfnResourceVersion, CfnRule, CfnStack, CfnStackSet, CfnTypeActivation, CfnWaitCondition, CfnWaitConditionHandle
An element of a CloudFormation stack.
Initializer
new CfnElement(scope: Construct, id: string)

Parameters

scope Construct  — The parent construct.
id string

Creates an entity and binds it to a tree.
Note that the root of the tree must be a Stack object (not just any Root).
Properties


NameTypeDescription


creationStackstring[]
logicalIdstringThe logical ID for this CloudFormation stack element.
nodeNodeThe tree node.
stackStackThe stack in which this element is defined.



creationStack
Type:
string[]

logicalId
Type:
string
The logical ID for this CloudFormation stack element.
The logical ID of the element
is calculated from the path of the resource node in the construct tree.
To override this value, use overrideLogicalId(newLogicalId).

node
Type:
Node
The tree node.

stack
Type:
Stack
The stack in which this element is defined.
CfnElements must be defined within a stack scope (directly or indirectly).
Methods


NameDescription


overrideLogicalId(newLogicalId)Overrides the auto-generated logical ID with a specific ID.
toString()Returns a string representation of this construct.
static isCfnElement(x)Returns true if a construct is a stack element (i.e. part of the synthesized cloudformation template).



overrideLogicalId(newLogicalId)
public overrideLogicalId(newLogicalId: string): void

Parameters

newLogicalId string  — The new logical ID to use for this stack element.

Overrides the auto-generated logical ID with a specific ID.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static isCfnElement(x)
public static isCfnElement(x: any): boolean

Parameters

x any

Returns

boolean

Returns true if a construct is a stack element (i.e. part of the synthesized cloudformation template).
Uses duck-typing instead of instanceof to allow stack elements from different
versions of this library to be included in the same stack.\n\nclass CfnElement


LanguageType name


 .NETAmazon.CDK.CfnElement
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CfnElement
 Javasoftware.amazon.awscdk.CfnElement
 Pythonaws_cdk.CfnElement
 TypeScript (source)aws-cdk-lib » CfnElement


Implements
IConstruct, IDependable
Extends
Construct
Implemented by
CfnSkill, CfnAnalyzer, CfnCertificate, CfnCertificateAuthority, CfnCertificateAuthorityActivation, CfnPermission, CfnBroker, CfnConfiguration, CfnConfigurationAssociation, CfnApp, CfnBranch, CfnDomain, CfnComponent, CfnForm, CfnTheme, CfnAccount, CfnApiKey, CfnAuthorizer, CfnBasePathMapping, CfnBasePathMappingV2, CfnClientCertificate, CfnDeployment, CfnDocumentationPart, CfnDocumentationVersion, CfnDomainName, CfnDomainNameAccessAssociation, CfnDomainNameV2, CfnGatewayResponse, CfnMethod, CfnModel, CfnRequestValidator, CfnResource, CfnRestApi, CfnStage, CfnUsagePlan, CfnUsagePlanKey, CfnVpcLink, CfnApi, CfnApiGatewayManagedOverrides, CfnApiMapping, CfnAuthorizer, CfnDeployment, CfnDomainName, CfnIntegration, CfnIntegrationResponse, CfnModel, CfnRoute, CfnRouteResponse, CfnStage, CfnVpcLink, CfnApplication, CfnConfigurationProfile, CfnDeployment, CfnDeploymentStrategy, CfnEnvironment, CfnExtension, CfnExtensionAssociation, CfnHostedConfigurationVersion, CfnConnector, CfnConnectorProfile, CfnFlow, CfnApplication, CfnDataIntegration, CfnEventIntegration, CfnScalableTarget, CfnScalingPolicy, CfnApplication, CfnDiscovery, CfnServiceLevelObjective, CfnGatewayRoute, CfnMesh, CfnRoute, CfnVirtualGateway, CfnVirtualNode, CfnVirtualRouter, CfnVirtualService, CfnAutoScalingConfiguration, CfnObservabilityConfiguration, CfnService, CfnVpcConnector, CfnVpcIngressConnection, CfnAppBlock, CfnAppBlockBuilder, CfnApplication, CfnApplicationEntitlementAssociation, CfnApplicationFleetAssociation, CfnDirectoryConfig, CfnEntitlement, CfnFleet, CfnImageBuilder, CfnStack, CfnStackFleetAssociation, CfnStackUserAssociation, CfnUser, CfnApi, CfnApiCache, CfnApiKey, CfnChannelNamespace, CfnDataSource, CfnDomainName, CfnDomainNameApiAssociation, CfnFunctionConfiguration, CfnGraphQLApi, CfnGraphQLSchema, CfnResolver, CfnSourceApiAssociation, CfnTestCase, CfnRuleGroupsNamespace, CfnScraper, CfnWorkspace, CfnAutoshiftObserverNotificationStatus, CfnZonalAutoshiftConfiguration, CfnCapacityReservation, CfnDataCatalog, CfnNamedQuery, CfnPreparedStatement, CfnWorkGroup, CfnAssessment, CfnAutoScalingGroup, CfnLaunchConfiguration, CfnLifecycleHook, CfnScalingPolicy, CfnScheduledAction, CfnWarmPool, CfnScalingPlan, CfnCapability, CfnPartnership, CfnProfile, CfnTransformer, CfnBackupPlan, CfnBackupSelection, CfnBackupVault, CfnFramework, CfnLogicallyAirGappedBackupVault, CfnReportPlan, CfnRestoreTestingPlan, CfnRestoreTestingSelection, CfnHypervisor, CfnComputeEnvironment, CfnConsumableResource, CfnJobDefinition, CfnJobQueue, CfnSchedulingPolicy, CfnExport, CfnAgent, CfnAgentAlias, CfnApplicationInferenceProfile, CfnBlueprint, CfnDataAutomationProject, CfnDataSource, CfnFlow, CfnFlowAlias, CfnFlowVersion, CfnGuardrail, CfnGuardrailVersion, CfnKnowledgeBase, CfnPrompt, CfnPromptVersion, CfnBillingGroup, CfnCustomLineItem, CfnPricingPlan, CfnPricingRule, CfnBudget, CfnBudgetsAction, CfnKeyspace, CfnTable, CfnType, CfnAnomalyMonitor, CfnAnomalySubscription, CfnCostCategory, CfnAccount, CfnCertificate, CfnCustomAction, CfnMicrosoftTeamsChannelConfiguration, CfnSlackChannelConfiguration, CfnAnalysisTemplate, CfnCollaboration, CfnConfiguredTable, CfnConfiguredTableAssociation, CfnIdMappingTable, CfnIdNamespaceAssociation, CfnMembership, CfnPrivacyBudgetTemplate, CfnTrainingDataset, CfnEnvironmentEC2, CfnCustomResource, CfnGuardHook, CfnHookDefaultVersion, CfnHookTypeConfig, CfnHookVersion, CfnLambdaHook, CfnMacro, CfnModuleDefaultVersion, CfnModuleVersion, CfnPublicTypeVersion, CfnPublisher, CfnResourceDefaultVersion, CfnResourceVersion, CfnStack, CfnStackSet, CfnTypeActivation, CfnWaitCondition, CfnWaitConditionHandle, CfnAnycastIpList, CfnCachePolicy, CfnCloudFrontOriginAccessIdentity, CfnContinuousDeploymentPolicy, CfnDistribution, CfnFunction, CfnKeyGroup, CfnKeyValueStore, CfnMonitoringSubscription, CfnOriginAccessControl, CfnOriginRequestPolicy, CfnPublicKey, CfnRealtimeLogConfig, CfnResponseHeadersPolicy, CfnStreamingDistribution, CfnVpcOrigin, CfnChannel, CfnDashboard, CfnEventDataStore, CfnResourcePolicy, CfnTrail, CfnAlarm, CfnAnomalyDetector, CfnCompositeAlarm, CfnDashboard, CfnInsightRule, CfnMetricStream, CfnDomain, CfnPackageGroup, CfnRepository, CfnFleet, CfnProject, CfnReportGroup, CfnSourceCredential, CfnRepository, CfnConnection, CfnApplication, CfnDeploymentConfig, CfnDeploymentGroup, CfnProfilingGroup, CfnRepositoryAssociation, CfnCustomActionType, CfnPipeline, CfnWebhook, CfnGitHubRepository, CfnConnection, CfnRepositoryLink, CfnSyncConfiguration, CfnNotificationRule, CfnIdentityPool, CfnIdentityPoolPrincipalTag, CfnIdentityPoolRoleAttachment, CfnLogDeliveryConfiguration, CfnManagedLoginBranding, CfnUserPool, CfnUserPoolClient, CfnUserPoolDomain, CfnUserPoolGroup, CfnUserPoolIdentityProvider, CfnUserPoolResourceServer, CfnUserPoolRiskConfigurationAttachment, CfnUserPoolUICustomizationAttachment, CfnUserPoolUser, CfnUserPoolUserToGroupAttachment, CfnDocumentClassifier, CfnFlywheel, CfnAggregationAuthorization, CfnConfigRule, CfnConfigurationAggregator, CfnConfigurationRecorder, CfnConformancePack, CfnDeliveryChannel, CfnOrganizationConfigRule, CfnOrganizationConformancePack, CfnRemediationConfiguration, CfnStoredQuery, CfnAgentStatus, CfnApprovedOrigin, CfnContactFlow, CfnContactFlowModule, CfnContactFlowVersion, CfnEmailAddress, CfnEvaluationForm, CfnHoursOfOperation, CfnInstance, CfnInstanceStorageConfig, CfnIntegrationAssociation, CfnPhoneNumber, CfnPredefinedAttribute, CfnPrompt, CfnQueue, CfnQuickConnect, CfnRoutingProfile, CfnRule, CfnSecurityKey, CfnSecurityProfile, CfnTaskTemplate, CfnTrafficDistributionGroup, CfnUser, CfnUserHierarchyGroup, CfnUserHierarchyStructure, CfnView, CfnViewVersion, CfnCampaign, CfnCampaign, CfnEnabledBaseline, CfnEnabledControl, CfnLandingZone, CfnReportDefinition, CfnCalculatedAttributeDefinition, CfnDomain, CfnEventStream, CfnEventTrigger, CfnIntegration, CfnObjectType, CfnSegmentDefinition, CfnDataset, CfnJob, CfnProject, CfnRecipe, CfnRuleset, CfnSchedule, CfnPipeline, CfnAgent, CfnLocationAzureBlob, CfnLocationEFS, CfnLocationFSxLustre, CfnLocationFSxONTAP, CfnLocationFSxOpenZFS, CfnLocationFSxWindows, CfnLocationHDFS, CfnLocationNFS, CfnLocationObjectStorage, CfnLocationS3, CfnLocationSMB, CfnStorageSystem, CfnTask, CfnConnection, CfnDataSource, CfnDomain, CfnEnvironment, CfnEnvironmentActions, CfnEnvironmentBlueprintConfiguration, CfnEnvironmentProfile, CfnGroupProfile, CfnProject, CfnProjectMembership, CfnSubscriptionTarget, CfnUserProfile, CfnCluster, CfnParameterGroup, CfnSubnetGroup, CfnFarm, CfnFleet, CfnLicenseEndpoint, CfnLimit, CfnMeteredProduct, CfnMonitor, CfnQueue, CfnQueueEnvironment, CfnQueueFleetAssociation, CfnQueueLimitAssociation, CfnStorageProfile, CfnGraph, CfnMemberInvitation, CfnOrganizationAdmin, CfnDevicePool, CfnInstanceProfile, CfnNetworkProfile, CfnProject, CfnTestGridProject, CfnVPCEConfiguration, CfnLogAnomalyDetectionIntegration, CfnNotificationChannel, CfnResourceCollection, CfnMicrosoftAD, CfnSimpleAD, CfnLifecyclePolicy, CfnCertificate, CfnDataMigration, CfnDataProvider, CfnEndpoint, CfnEventSubscription, CfnInstanceProfile, CfnMigrationProject, CfnReplicationConfig, CfnReplicationInstance, CfnReplicationSubnetGroup, CfnReplicationTask, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBSubnetGroup, CfnEventSubscription, CfnCluster, CfnCluster, CfnGlobalTable, CfnTable, CfnCapacityReservation, CfnCapacityReservationFleet, CfnCarrierGateway, CfnClientVpnAuthorizationRule, CfnClientVpnEndpoint, CfnClientVpnRoute, CfnClientVpnTargetNetworkAssociation, CfnCustomerGateway, CfnDHCPOptions, CfnEC2Fleet, CfnEIP, CfnEIPAssociation, CfnEgressOnlyInternetGateway, CfnEnclaveCertificateIamRoleAssociation, CfnFlowLog, CfnGatewayRouteTableAssociation, CfnHost, CfnIPAM, CfnIPAMAllocation, CfnIPAMPool, CfnIPAMPoolCidr, CfnIPAMResourceDiscovery, CfnIPAMResourceDiscoveryAssociation, CfnIPAMScope, CfnInstance, CfnInstanceConnectEndpoint, CfnInternetGateway, CfnKeyPair, CfnLaunchTemplate, CfnLocalGatewayRoute, CfnLocalGatewayRouteTable, CfnLocalGatewayRouteTableVPCAssociation, CfnLocalGatewayRouteTableVirtualInterfaceGroupAssociation, CfnNatGateway, CfnNetworkAcl, CfnNetworkAclEntry, CfnNetworkInsightsAccessScope, CfnNetworkInsightsAccessScopeAnalysis, CfnNetworkInsightsAnalysis, CfnNetworkInsightsPath, CfnNetworkInterface, CfnNetworkInterfaceAttachment, CfnNetworkInterfacePermission, CfnNetworkPerformanceMetricSubscription, CfnPlacementGroup, CfnPrefixList, CfnRoute, CfnRouteServer, CfnRouteServerAssociation, CfnRouteServerEndpoint, CfnRouteServerPeer, CfnRouteServerPropagation, CfnRouteTable, CfnSecurityGroup, CfnSecurityGroupEgress, CfnSecurityGroupIngress, CfnSecurityGroupVpcAssociation, CfnSnapshotBlockPublicAccess, CfnSpotFleet, CfnSubnet, CfnSubnetCidrBlock, CfnSubnetNetworkAclAssociation, CfnSubnetRouteTableAssociation, CfnTrafficMirrorFilter, CfnTrafficMirrorFilterRule, CfnTrafficMirrorSession, CfnTrafficMirrorTarget, CfnTransitGateway, CfnTransitGatewayAttachment, CfnTransitGatewayConnect, CfnTransitGatewayMulticastDomain, CfnTransitGatewayMulticastDomainAssociation, CfnTransitGatewayMulticastGroupMember, CfnTransitGatewayMulticastGroupSource, CfnTransitGatewayPeeringAttachment, CfnTransitGatewayRoute, CfnTransitGatewayRouteTable, CfnTransitGatewayRouteTableAssociation, CfnTransitGatewayRouteTablePropagation, CfnTransitGatewayVpcAttachment, CfnVPC, CfnVPCBlockPublicAccessExclusion, CfnVPCBlockPublicAccessOptions, CfnVPCCidrBlock, CfnVPCDHCPOptionsAssociation, CfnVPCEndpoint, CfnVPCEndpointConnectionNotification, CfnVPCEndpointService, CfnVPCEndpointServicePermissions, CfnVPCGatewayAttachment, CfnVPCPeeringConnection, CfnVPNConnection, CfnVPNConnectionRoute, CfnVPNGateway, CfnVPNGatewayRoutePropagation, CfnVerifiedAccessEndpoint, CfnVerifiedAccessGroup, CfnVerifiedAccessInstance, CfnVerifiedAccessTrustProvider, CfnVolume, CfnVolumeAttachment, CfnPublicRepository, CfnPullThroughCacheRule, CfnRegistryPolicy, CfnReplicationConfiguration, CfnRepository, CfnRepositoryCreationTemplate, CfnCapacityProvider, CfnCluster, CfnClusterCapacityProviderAssociations, CfnPrimaryTaskSet, CfnService, CfnTaskDefinition, CfnTaskSet, CfnAccessPoint, CfnFileSystem, CfnMountTarget, CfnAccessEntry, CfnAddon, CfnCluster, CfnFargateProfile, CfnIdentityProviderConfig, CfnNodegroup, CfnPodIdentityAssociation, CfnCacheCluster, CfnGlobalReplicationGroup, CfnParameterGroup, CfnReplicationGroup, CfnSecurityGroup, CfnSecurityGroupIngress, CfnServerlessCache, CfnSubnetGroup, CfnUser, CfnUserGroup, CfnApplication, CfnApplicationVersion, CfnConfigurationTemplate, CfnEnvironment, CfnLoadBalancer, CfnListener, CfnListenerCertificate, CfnListenerRule, CfnLoadBalancer, CfnTargetGroup, CfnTrustStore, CfnTrustStoreRevocation, CfnDomain, CfnCluster, CfnInstanceFleetConfig, CfnInstanceGroupConfig, CfnSecurityConfiguration, CfnStep, CfnStudio, CfnStudioSessionMapping, CfnWALWorkspace, CfnVirtualCluster, CfnApplication, CfnIdMappingWorkflow, CfnIdNamespace, CfnMatchingWorkflow, CfnPolicyStatement, CfnSchemaMapping, CfnApiDestination, CfnArchive, CfnConnection, CfnEndpoint, CfnEventBus, CfnEventBusPolicy, CfnRule, CfnDiscoverer, CfnRegistry, CfnRegistryPolicy, CfnSchema, CfnExperiment, CfnFeature, CfnLaunch, CfnProject, CfnSegment, CfnEnvironment, CfnExperimentTemplate, CfnTargetAccountConfiguration, CfnNotificationChannel, CfnPolicy, CfnResourceSet, CfnDataset, CfnDatasetGroup, CfnDetector, CfnEntityType, CfnEventType, CfnLabel, CfnList, CfnOutcome, CfnVariable, CfnDataRepositoryAssociation, CfnFileSystem, CfnSnapshot, CfnStorageVirtualMachine, CfnVolume, CfnAlias, CfnBuild, CfnContainerFleet, CfnContainerGroupDefinition, CfnFleet, CfnGameServerGroup, CfnGameSessionQueue, CfnLocation, CfnMatchmakingConfiguration, CfnMatchmakingRuleSet, CfnScript, CfnApplication, CfnStreamGroup, CfnAccelerator, CfnCrossAccountAttachment, CfnEndpointGroup, CfnListener, CfnClassifier, CfnConnection, CfnCrawler, CfnCustomEntityType, CfnDataCatalogEncryptionSettings, CfnDataQualityRuleset, CfnDatabase, CfnDevEndpoint, CfnJob, CfnMLTransform, CfnPartition, CfnRegistry, CfnSchema, CfnSchemaVersion, CfnSchemaVersionMetadata, CfnSecurityConfiguration, CfnTable, CfnTableOptimizer, CfnTrigger, CfnUsageProfile, CfnWorkflow, CfnWorkspace, CfnConnectorDefinition, CfnConnectorDefinitionVersion, CfnCoreDefinition, CfnCoreDefinitionVersion, CfnDeviceDefinition, CfnDeviceDefinitionVersion, CfnFunctionDefinition, CfnFunctionDefinitionVersion, CfnGroup, CfnGroupVersion, CfnLoggerDefinition, CfnLoggerDefinitionVersion, CfnResourceDefinition, CfnResourceDefinitionVersion, CfnSubscriptionDefinition, CfnSubscriptionDefinitionVersion, CfnComponentVersion, CfnDeployment, CfnConfig, CfnDataflowEndpointGroup, CfnMissionProfile, CfnDetector, CfnFilter, CfnIPSet, CfnMalwareProtectionPlan, CfnMaster, CfnMember, CfnPublishingDestination, CfnThreatIntelSet, CfnDatastore, CfnFHIRDatastore, CfnAccessKey, CfnGroup, CfnGroupPolicy, CfnInstanceProfile, CfnManagedPolicy, CfnOIDCProvider, CfnPolicy, CfnRole, CfnRolePolicy, CfnSAMLProvider, CfnServerCertificate, CfnServiceLinkedRole, CfnUser, CfnUserPolicy, CfnUserToGroupAddition, CfnVirtualMFADevice, CfnGroup, CfnGroupMembership, CfnComponent, CfnContainerRecipe, CfnDistributionConfiguration, CfnImage, CfnImagePipeline, CfnImageRecipe, CfnInfrastructureConfiguration, CfnLifecyclePolicy, CfnWorkflow, CfnAssessmentTarget, CfnAssessmentTemplate, CfnResourceGroup, CfnCisScanConfiguration, CfnFilter, CfnMonitor, CfnInvoiceUnit, CfnAccountAuditConfiguration, CfnAuthorizer, CfnBillingGroup, CfnCACertificate, CfnCertificate, CfnCertificateProvider, CfnCommand, CfnCustomMetric, CfnDimension, CfnDomainConfiguration, CfnFleetMetric, CfnJobTemplate, CfnLogging, CfnMitigationAction, CfnPolicy, CfnPolicyPrincipalAttachment, CfnProvisioningTemplate, CfnResourceSpecificLogging, CfnRoleAlias, CfnScheduledAudit, CfnSecurityProfile, CfnSoftwarePackage, CfnSoftwarePackageVersion, CfnThing, CfnThingGroup, CfnThingPrincipalAttachment, CfnThingType, CfnTopicRule, CfnTopicRuleDestination, CfnChannel, CfnDataset, CfnDatastore, CfnPipeline, CfnSuiteDefinition, CfnAlarmModel, CfnDetectorModel, CfnInput, CfnApplication, CfnCampaign, CfnDecoderManifest, CfnFleet, CfnModelManifest, CfnSignalCatalog, CfnStateTemplate, CfnVehicle, CfnAccessPolicy, CfnAsset, CfnAssetModel, CfnDashboard, CfnDataset, CfnGateway, CfnPortal, CfnProject, CfnFlowTemplate, CfnComponentType, CfnEntity, CfnScene, CfnSyncJob, CfnWorkspace, CfnDestination, CfnDeviceProfile, CfnFuotaTask, CfnMulticastGroup, CfnNetworkAnalyzerConfiguration, CfnPartnerAccount, CfnServiceProfile, CfnTaskDefinition, CfnWirelessDevice, CfnWirelessDeviceImportTask, CfnWirelessGateway, CfnChannel, CfnEncoderConfiguration, CfnIngestConfiguration, CfnPlaybackKeyPair, CfnPlaybackRestrictionPolicy, CfnPublicKey, CfnRecordingConfiguration, CfnStage, CfnStorageConfiguration, CfnStreamKey, CfnLoggingConfiguration, CfnRoom, CfnConnector, CfnCustomPlugin, CfnWorkerConfiguration, CfnDataSource, CfnFaq, CfnIndex, CfnExecutionPlan, CfnResourcePolicy, CfnStream, CfnStreamConsumer, CfnApplication, CfnApplicationCloudWatchLoggingOptionV2, CfnApplicationOutput, CfnApplicationOutputV2, CfnApplicationReferenceDataSource, CfnApplicationReferenceDataSourceV2, CfnApplicationV2, CfnApplication, CfnApplicationCloudWatchLoggingOption, CfnApplicationOutput, CfnApplicationReferenceDataSource, CfnDeliveryStream, CfnSignalingChannel, CfnStream, CfnAlias, CfnKey, CfnReplicaKey, CfnDataCellsFilter, CfnDataLakeSettings, CfnPermissions, CfnPrincipalPermissions, CfnResource, CfnTag, CfnTagAssociation, CfnAlias, CfnCodeSigningConfig, CfnEventInvokeConfig, CfnEventSourceMapping, CfnFunction, CfnLayerVersion, CfnLayerVersionPermission, CfnPermission, CfnUrl, CfnVersion, CfnDeployment, CfnBot, CfnBotAlias, CfnBotVersion, CfnResourcePolicy, CfnGrant, CfnLicense, CfnAlarm, CfnBucket, CfnCertificate, CfnContainer, CfnDatabase, CfnDisk, CfnDistribution, CfnInstance, CfnLoadBalancer, CfnLoadBalancerTlsCertificate, CfnStaticIp, CfnAPIKey, CfnGeofenceCollection, CfnMap, CfnPlaceIndex, CfnRouteCalculator, CfnTracker, CfnTrackerConsumer, CfnAccountPolicy, CfnDelivery, CfnDeliveryDestination, CfnDeliverySource, CfnDestination, CfnIntegration, CfnLogAnomalyDetector, CfnLogGroup, CfnLogStream, CfnMetricFilter, CfnQueryDefinition, CfnResourcePolicy, CfnSubscriptionFilter, CfnTransformer, CfnInferenceScheduler, CfnAlert, CfnAnomalyDetector, CfnProject, CfnApplication, CfnDeployment, CfnEnvironment, CfnAllowList, CfnCustomDataIdentifier, CfnFindingsFilter, CfnSession, CfnAccessor, CfnMember, CfnNode, CfnBridge, CfnBridgeOutput, CfnBridgeSource, CfnFlow, CfnFlowEntitlement, CfnFlowOutput, CfnFlowSource, CfnFlowVpcInterface, CfnGateway, CfnJobTemplate, CfnPreset, CfnQueue, CfnChannel, CfnChannelPlacementGroup, CfnCloudWatchAlarmTemplate, CfnCloudWatchAlarmTemplateGroup, CfnCluster, CfnEventBridgeRuleTemplate, CfnEventBridgeRuleTemplateGroup, CfnInput, CfnInputSecurityGroup, CfnMultiplex, CfnMultiplexprogram, CfnNetwork, CfnSdiSource, CfnSignalMap, CfnAsset, CfnChannel, CfnOriginEndpoint, CfnPackagingConfiguration, CfnPackagingGroup, CfnChannel, CfnChannelGroup, CfnChannelPolicy, CfnOriginEndpoint, CfnOriginEndpointPolicy, CfnContainer, CfnChannel, CfnChannelPolicy, CfnLiveSource, CfnPlaybackConfiguration, CfnSourceLocation, CfnVodSource, CfnACL, CfnCluster, CfnMultiRegionCluster, CfnParameterGroup, CfnSubnetGroup, CfnUser, CfnBatchScramSecret, CfnCluster, CfnClusterPolicy, CfnConfiguration, CfnReplicator, CfnServerlessCluster, CfnVpcConnection, CfnEnvironment, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBParameterGroup, CfnDBSubnetGroup, CfnEventSubscription, CfnGraph, CfnPrivateGraphEndpoint, CfnFirewall, CfnFirewallPolicy, CfnLoggingConfiguration, CfnRuleGroup, CfnTLSInspectionConfiguration, CfnConnectAttachment, CfnConnectPeer, CfnCoreNetwork, CfnCustomerGatewayAssociation, CfnDevice, CfnDirectConnectGatewayAttachment, CfnGlobalNetwork, CfnLink, CfnLinkAssociation, CfnSite, CfnSiteToSiteVpnAttachment, CfnTransitGatewayPeering, CfnTransitGatewayRegistration, CfnTransitGatewayRouteTableAttachment, CfnVpcAttachment, CfnLaunchProfile, CfnStreamingImage, CfnStudio, CfnStudioComponent, CfnChannelAssociation, CfnEventRule, CfnManagedNotificationAccountContactAssociation, CfnManagedNotificationAdditionalChannelAssociation, CfnNotificationConfiguration, CfnNotificationHub, CfnEmailContact, CfnLink, CfnSink, CfnAnnotationStore, CfnReferenceStore, CfnRunGroup, CfnSequenceStore, CfnVariantStore, CfnWorkflow, CfnAccessPolicy, CfnCollection, CfnIndex, CfnLifecyclePolicy, CfnSecurityConfig, CfnSecurityPolicy, CfnVpcEndpoint, CfnApplication, CfnDomain, CfnApp, CfnElasticLoadBalancerAttachment, CfnInstance, CfnLayer, CfnStack, CfnUserProfile, CfnVolume, CfnServer, CfnAccount, CfnOrganization, CfnOrganizationalUnit, CfnPolicy, CfnResourcePolicy, CfnPipeline, CfnApplicationInstance, CfnPackage, CfnPackageVersion, CfnAlias, CfnKey, CfnConnector, CfnDirectoryRegistration, CfnServicePrincipalName, CfnTemplate, CfnTemplateGroupAccessControlEntry, CfnChallenge, CfnConnector, CfnCluster, CfnComputeNodeGroup, CfnQueue, CfnDataset, CfnDatasetGroup, CfnSchema, CfnSolution, CfnADMChannel, CfnAPNSChannel, CfnAPNSSandboxChannel, CfnAPNSVoipChannel, CfnAPNSVoipSandboxChannel, CfnApp, CfnApplicationSettings, CfnBaiduChannel, CfnCampaign, CfnEmailChannel, CfnEmailTemplate, CfnEventStream, CfnGCMChannel, CfnInAppTemplate, CfnPushTemplate, CfnSMSChannel, CfnSegment, CfnSmsTemplate, CfnVoiceChannel, CfnConfigurationSet, CfnConfigurationSetEventDestination, CfnDedicatedIpPool, CfnIdentity, CfnPipe, CfnEnvironmentAccountConnection, CfnEnvironmentTemplate, CfnServiceTemplate, CfnApplication, CfnDataAccessor, CfnDataSource, CfnIndex, CfnPermission, CfnPlugin, CfnRetriever, CfnWebExperience, CfnLedger, CfnStream, CfnAnalysis, CfnCustomPermissions, CfnDashboard, CfnDataSet, CfnDataSource, CfnFolder, CfnRefreshSchedule, CfnTemplate, CfnTheme, CfnTopic, CfnVPCConnection, CfnPermission, CfnResourceShare, CfnRule, CfnCustomDBEngineVersion, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBParameterGroup, CfnDBProxy, CfnDBProxyEndpoint, CfnDBProxyTargetGroup, CfnDBSecurityGroup, CfnDBSecurityGroupIngress, CfnDBShardGroup, CfnDBSubnetGroup, CfnEventSubscription, CfnGlobalCluster, CfnIntegration, CfnOptionGroup, CfnCluster, CfnClusterParameterGroup, CfnClusterSecurityGroup, CfnClusterSecurityGroupIngress, CfnClusterSubnetGroup, CfnEndpointAccess, CfnEndpointAuthorization, CfnEventSubscription, CfnIntegration, CfnScheduledAction, CfnNamespace, CfnWorkgroup, CfnApplication, CfnEnvironment, CfnRoute, CfnService, CfnCollection, CfnProject, CfnStreamProcessor, CfnApp, CfnResiliencyPolicy, CfnDefaultViewAssociation, CfnIndex, CfnView, CfnGroup, CfnTagSyncTask, CfnFleet, CfnRobot, CfnRobotApplication, CfnRobotApplicationVersion, CfnSimulationApplication, CfnSimulationApplicationVersion, CfnCRL, CfnProfile, CfnTrustAnchor, CfnCidrCollection, CfnDNSSEC, CfnHealthCheck, CfnHostedZone, CfnKeySigningKey, CfnRecordSet, CfnRecordSetGroup, CfnProfile, CfnProfileAssociation, CfnProfileResourceAssociation, CfnCluster, CfnControlPanel, CfnRoutingControl, CfnSafetyRule, CfnCell, CfnReadinessCheck, CfnRecoveryGroup, CfnResourceSet, CfnFirewallDomainList, CfnFirewallRuleGroup, CfnFirewallRuleGroupAssociation, CfnOutpostResolver, CfnResolverConfig, CfnResolverDNSSECConfig, CfnResolverEndpoint, CfnResolverQueryLoggingConfig, CfnResolverQueryLoggingConfigAssociation, CfnResolverRule, CfnResolverRuleAssociation, CfnAppMonitor, CfnAccessGrant, CfnAccessGrantsInstance, CfnAccessGrantsLocation, CfnAccessPoint, CfnBucket, CfnBucketPolicy, CfnMultiRegionAccessPoint, CfnMultiRegionAccessPointPolicy, CfnStorageLens, CfnStorageLensGroup, CfnBucketPolicy, CfnDirectoryBucket, CfnAccessPoint, CfnAccessPointPolicy, CfnAccessPoint, CfnBucket, CfnBucketPolicy, CfnEndpoint, CfnTableBucket, CfnTableBucketPolicy, CfnApp, CfnAppImageConfig, CfnCluster, CfnCodeRepository, CfnDataQualityJobDefinition, CfnDevice, CfnDeviceFleet, CfnDomain, CfnEndpoint, CfnEndpointConfig, CfnFeatureGroup, CfnImage, CfnImageVersion, CfnInferenceComponent, CfnInferenceExperiment, CfnMlflowTrackingServer, CfnModel, CfnModelBiasJobDefinition, CfnModelCard, CfnModelExplainabilityJobDefinition, CfnModelPackage, CfnModelPackageGroup, CfnModelQualityJobDefinition, CfnMonitoringSchedule, CfnNotebookInstance, CfnNotebookInstanceLifecycleConfig, CfnPartnerApp, CfnPipeline, CfnProject, CfnSpace, CfnStudioLifecycleConfig, CfnUserProfile, CfnWorkteam, CfnApi, CfnApplication, CfnFunction, CfnHttpApi, CfnLayerVersion, CfnSimpleTable, CfnStateMachine, CfnSchedule, CfnScheduleGroup, CfnDomain, CfnResourcePolicy, CfnRotationSchedule, CfnSecret, CfnSecretTargetAttachment, CfnAutomationRule, CfnConfigurationPolicy, CfnDelegatedAdmin, CfnFindingAggregator, CfnHub, CfnInsight, CfnOrganizationConfiguration, CfnPolicyAssociation, CfnProductSubscription, CfnSecurityControl, CfnStandard, CfnAwsLogSource, CfnDataLake, CfnSubscriber, CfnSubscriberNotification, CfnAcceptedPortfolioShare, CfnCloudFormationProduct, CfnCloudFormationProvisionedProduct, CfnLaunchNotificationConstraint, CfnLaunchRoleConstraint, CfnLaunchTemplateConstraint, CfnPortfolio, CfnPortfolioPrincipalAssociation, CfnPortfolioProductAssociation, CfnPortfolioShare, CfnResourceUpdateConstraint, CfnServiceAction, CfnServiceActionAssociation, CfnStackSetConstraint, CfnTagOption, CfnTagOptionAssociation, CfnApplication, CfnAttributeGroup, CfnAttributeGroupAssociation, CfnResourceAssociation, CfnHttpNamespace, CfnInstance, CfnPrivateDnsNamespace, CfnPublicDnsNamespace, CfnService, CfnConfigurationSet, CfnConfigurationSetEventDestination, CfnContactList, CfnDedicatedIpPool, CfnEmailIdentity, CfnMailManagerAddonInstance, CfnMailManagerAddonSubscription, CfnMailManagerArchive, CfnMailManagerIngressPoint, CfnMailManagerRelay, CfnMailManagerRuleSet, CfnMailManagerTrafficPolicy, CfnReceiptFilter, CfnReceiptRule, CfnReceiptRuleSet, CfnTemplate, CfnVdmAttributes, CfnDRTAccess, CfnProactiveEngagement, CfnProtection, CfnProtectionGroup, CfnProfilePermission, CfnSigningProfile, CfnSimulation, CfnSubscription, CfnTopic, CfnTopicInlinePolicy, CfnTopicPolicy, CfnQueue, CfnQueueInlinePolicy, CfnQueuePolicy, CfnAssociation, CfnDocument, CfnMaintenanceWindow, CfnMaintenanceWindowTarget, CfnMaintenanceWindowTask, CfnParameter, CfnPatchBaseline, CfnResourceDataSync, CfnResourcePolicy, CfnContact, CfnContactChannel, CfnPlan, CfnRotation, CfnReplicationSet, CfnResponsePlan, CfnConfigurationManager, CfnApplication, CfnApplicationAssignment, CfnAssignment, CfnInstance, CfnInstanceAccessControlAttributeConfiguration, CfnPermissionSet, CfnActivity, CfnStateMachine, CfnStateMachineAlias, CfnStateMachineVersion, CfnAccountAlias, CfnSlackChannelConfiguration, CfnSlackWorkspaceConfiguration, CfnCanary, CfnGroup, CfnApplication, CfnDatabase, CfnInfluxDBInstance, CfnScheduledQuery, CfnTable, CfnAgreement, CfnCertificate, CfnConnector, CfnProfile, CfnServer, CfnUser, CfnWebApp, CfnWorkflow, CfnIdentitySource, CfnPolicy, CfnPolicyStore, CfnPolicyTemplate, CfnDomain, CfnAccessLogSubscription, CfnAuthPolicy, CfnListener, CfnResourceConfiguration, CfnResourceGateway, CfnResourcePolicy, CfnRule, CfnService, CfnServiceNetwork, CfnServiceNetworkResourceAssociation, CfnServiceNetworkServiceAssociation, CfnServiceNetworkVpcAssociation, CfnTargetGroup, CfnByteMatchSet, CfnIPSet, CfnRule, CfnSizeConstraintSet, CfnSqlInjectionMatchSet, CfnWebACL, CfnXssMatchSet, CfnByteMatchSet, CfnGeoMatchSet, CfnIPSet, CfnRateBasedRule, CfnRegexPatternSet, CfnRule, CfnSizeConstraintSet, CfnSqlInjectionMatchSet, CfnWebACL, CfnWebACLAssociation, CfnXssMatchSet, CfnIPSet, CfnLoggingConfiguration, CfnRegexPatternSet, CfnRuleGroup, CfnWebACL, CfnWebACLAssociation, CfnAIAgent, CfnAIAgentVersion, CfnAIGuardrail, CfnAIGuardrailVersion, CfnAIPrompt, CfnAIPromptVersion, CfnAssistant, CfnAssistantAssociation, CfnKnowledgeBase, CfnMessageTemplate, CfnMessageTemplateVersion, CfnConnectionAlias, CfnWorkspace, CfnWorkspacesPool, CfnEnvironment, CfnBrowserSettings, CfnDataProtectionSettings, CfnIdentityProvider, CfnIpAccessSettings, CfnNetworkSettings, CfnPortal, CfnTrustStore, CfnUserAccessLoggingSettings, CfnUserSettings, CfnGroup, CfnResourcePolicy, CfnSamplingRule, CfnTransactionSearchConfig, CfnInclude, CfnCodeDeployBlueGreenHook, CfnCondition, CfnCustomResource, CfnGuardHook, CfnHook, CfnHookDefaultVersion, CfnHookTypeConfig, CfnHookVersion, CfnLambdaHook, CfnMacro, CfnMapping, CfnModuleDefaultVersion, CfnModuleVersion, CfnOutput, CfnParameter, CfnPublicTypeVersion, CfnPublisher, CfnResource, CfnResourceDefaultVersion, CfnResourceVersion, CfnRule, CfnStack, CfnStackSet, CfnTypeActivation, CfnWaitCondition, CfnWaitConditionHandle
An element of a CloudFormation stack.
Initializer
new CfnElement(scope: Construct, id: string)

Parameters

scope Construct  — The parent construct.
id string

Creates an entity and binds it to a tree.
Note that the root of the tree must be a Stack object (not just any Root).
Properties


NameTypeDescription


creationStackstring[]
logicalIdstringThe logical ID for this CloudFormation stack element.
nodeNodeThe tree node.
stackStackThe stack in which this element is defined.



creationStack
Type:
string[]

logicalId
Type:
string
The logical ID for this CloudFormation stack element.
The logical ID of the element
is calculated from the path of the resource node in the construct tree.
To override this value, use overrideLogicalId(newLogicalId).

node
Type:
Node
The tree node.

stack
Type:
Stack
The stack in which this element is defined.
CfnElements must be defined within a stack scope (directly or indirectly).
Methods


NameDescription


overrideLogicalId(newLogicalId)Overrides the auto-generated logical ID with a specific ID.
toString()Returns a string representation of this construct.
static isCfnElement(x)Returns true if a construct is a stack element (i.e. part of the synthesized cloudformation template).



overrideLogicalId(newLogicalId)
public overrideLogicalId(newLogicalId: string): void

Parameters

newLogicalId string  — The new logical ID to use for this stack element.

Overrides the auto-generated logical ID with a specific ID.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.

static isCfnElement(x)
public static isCfnElement(x: any): boolean

Parameters

x any

Returns

boolean

Returns true if a construct is a stack element (i.e. part of the synthesized cloudformation template).
Uses duck-typing instead of instanceof to allow stack elements from different
versions of this library to be included in the same stack.\n\n\n\nclass CfnRefElement


LanguageType name


 .NETAmazon.CDK.CfnRefElement
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CfnRefElement
 Javasoftware.amazon.awscdk.CfnRefElement
 Pythonaws_cdk.CfnRefElement
 TypeScript (source)aws-cdk-lib » CfnRefElement


Implements
IConstruct, IDependable
Extends
CfnElement
Implemented by
CfnSkill, CfnAnalyzer, CfnCertificate, CfnCertificateAuthority, CfnCertificateAuthorityActivation, CfnPermission, CfnBroker, CfnConfiguration, CfnConfigurationAssociation, CfnApp, CfnBranch, CfnDomain, CfnComponent, CfnForm, CfnTheme, CfnAccount, CfnApiKey, CfnAuthorizer, CfnBasePathMapping, CfnBasePathMappingV2, CfnClientCertificate, CfnDeployment, CfnDocumentationPart, CfnDocumentationVersion, CfnDomainName, CfnDomainNameAccessAssociation, CfnDomainNameV2, CfnGatewayResponse, CfnMethod, CfnModel, CfnRequestValidator, CfnResource, CfnRestApi, CfnStage, CfnUsagePlan, CfnUsagePlanKey, CfnVpcLink, CfnApi, CfnApiGatewayManagedOverrides, CfnApiMapping, CfnAuthorizer, CfnDeployment, CfnDomainName, CfnIntegration, CfnIntegrationResponse, CfnModel, CfnRoute, CfnRouteResponse, CfnStage, CfnVpcLink, CfnApplication, CfnConfigurationProfile, CfnDeployment, CfnDeploymentStrategy, CfnEnvironment, CfnExtension, CfnExtensionAssociation, CfnHostedConfigurationVersion, CfnConnector, CfnConnectorProfile, CfnFlow, CfnApplication, CfnDataIntegration, CfnEventIntegration, CfnScalableTarget, CfnScalingPolicy, CfnApplication, CfnDiscovery, CfnServiceLevelObjective, CfnGatewayRoute, CfnMesh, CfnRoute, CfnVirtualGateway, CfnVirtualNode, CfnVirtualRouter, CfnVirtualService, CfnAutoScalingConfiguration, CfnObservabilityConfiguration, CfnService, CfnVpcConnector, CfnVpcIngressConnection, CfnAppBlock, CfnAppBlockBuilder, CfnApplication, CfnApplicationEntitlementAssociation, CfnApplicationFleetAssociation, CfnDirectoryConfig, CfnEntitlement, CfnFleet, CfnImageBuilder, CfnStack, CfnStackFleetAssociation, CfnStackUserAssociation, CfnUser, CfnApi, CfnApiCache, CfnApiKey, CfnChannelNamespace, CfnDataSource, CfnDomainName, CfnDomainNameApiAssociation, CfnFunctionConfiguration, CfnGraphQLApi, CfnGraphQLSchema, CfnResolver, CfnSourceApiAssociation, CfnTestCase, CfnRuleGroupsNamespace, CfnScraper, CfnWorkspace, CfnAutoshiftObserverNotificationStatus, CfnZonalAutoshiftConfiguration, CfnCapacityReservation, CfnDataCatalog, CfnNamedQuery, CfnPreparedStatement, CfnWorkGroup, CfnAssessment, CfnAutoScalingGroup, CfnLaunchConfiguration, CfnLifecycleHook, CfnScalingPolicy, CfnScheduledAction, CfnWarmPool, CfnScalingPlan, CfnCapability, CfnPartnership, CfnProfile, CfnTransformer, CfnBackupPlan, CfnBackupSelection, CfnBackupVault, CfnFramework, CfnLogicallyAirGappedBackupVault, CfnReportPlan, CfnRestoreTestingPlan, CfnRestoreTestingSelection, CfnHypervisor, CfnComputeEnvironment, CfnConsumableResource, CfnJobDefinition, CfnJobQueue, CfnSchedulingPolicy, CfnExport, CfnAgent, CfnAgentAlias, CfnApplicationInferenceProfile, CfnBlueprint, CfnDataAutomationProject, CfnDataSource, CfnFlow, CfnFlowAlias, CfnFlowVersion, CfnGuardrail, CfnGuardrailVersion, CfnKnowledgeBase, CfnPrompt, CfnPromptVersion, CfnBillingGroup, CfnCustomLineItem, CfnPricingPlan, CfnPricingRule, CfnBudget, CfnBudgetsAction, CfnKeyspace, CfnTable, CfnType, CfnAnomalyMonitor, CfnAnomalySubscription, CfnCostCategory, CfnAccount, CfnCertificate, CfnCustomAction, CfnMicrosoftTeamsChannelConfiguration, CfnSlackChannelConfiguration, CfnAnalysisTemplate, CfnCollaboration, CfnConfiguredTable, CfnConfiguredTableAssociation, CfnIdMappingTable, CfnIdNamespaceAssociation, CfnMembership, CfnPrivacyBudgetTemplate, CfnTrainingDataset, CfnEnvironmentEC2, CfnCustomResource, CfnGuardHook, CfnHookDefaultVersion, CfnHookTypeConfig, CfnHookVersion, CfnLambdaHook, CfnMacro, CfnModuleDefaultVersion, CfnModuleVersion, CfnPublicTypeVersion, CfnPublisher, CfnResourceDefaultVersion, CfnResourceVersion, CfnStack, CfnStackSet, CfnTypeActivation, CfnWaitCondition, CfnWaitConditionHandle, CfnAnycastIpList, CfnCachePolicy, CfnCloudFrontOriginAccessIdentity, CfnContinuousDeploymentPolicy, CfnDistribution, CfnFunction, CfnKeyGroup, CfnKeyValueStore, CfnMonitoringSubscription, CfnOriginAccessControl, CfnOriginRequestPolicy, CfnPublicKey, CfnRealtimeLogConfig, CfnResponseHeadersPolicy, CfnStreamingDistribution, CfnVpcOrigin, CfnChannel, CfnDashboard, CfnEventDataStore, CfnResourcePolicy, CfnTrail, CfnAlarm, CfnAnomalyDetector, CfnCompositeAlarm, CfnDashboard, CfnInsightRule, CfnMetricStream, CfnDomain, CfnPackageGroup, CfnRepository, CfnFleet, CfnProject, CfnReportGroup, CfnSourceCredential, CfnRepository, CfnConnection, CfnApplication, CfnDeploymentConfig, CfnDeploymentGroup, CfnProfilingGroup, CfnRepositoryAssociation, CfnCustomActionType, CfnPipeline, CfnWebhook, CfnGitHubRepository, CfnConnection, CfnRepositoryLink, CfnSyncConfiguration, CfnNotificationRule, CfnIdentityPool, CfnIdentityPoolPrincipalTag, CfnIdentityPoolRoleAttachment, CfnLogDeliveryConfiguration, CfnManagedLoginBranding, CfnUserPool, CfnUserPoolClient, CfnUserPoolDomain, CfnUserPoolGroup, CfnUserPoolIdentityProvider, CfnUserPoolResourceServer, CfnUserPoolRiskConfigurationAttachment, CfnUserPoolUICustomizationAttachment, CfnUserPoolUser, CfnUserPoolUserToGroupAttachment, CfnDocumentClassifier, CfnFlywheel, CfnAggregationAuthorization, CfnConfigRule, CfnConfigurationAggregator, CfnConfigurationRecorder, CfnConformancePack, CfnDeliveryChannel, CfnOrganizationConfigRule, CfnOrganizationConformancePack, CfnRemediationConfiguration, CfnStoredQuery, CfnAgentStatus, CfnApprovedOrigin, CfnContactFlow, CfnContactFlowModule, CfnContactFlowVersion, CfnEmailAddress, CfnEvaluationForm, CfnHoursOfOperation, CfnInstance, CfnInstanceStorageConfig, CfnIntegrationAssociation, CfnPhoneNumber, CfnPredefinedAttribute, CfnPrompt, CfnQueue, CfnQuickConnect, CfnRoutingProfile, CfnRule, CfnSecurityKey, CfnSecurityProfile, CfnTaskTemplate, CfnTrafficDistributionGroup, CfnUser, CfnUserHierarchyGroup, CfnUserHierarchyStructure, CfnView, CfnViewVersion, CfnCampaign, CfnCampaign, CfnEnabledBaseline, CfnEnabledControl, CfnLandingZone, CfnReportDefinition, CfnCalculatedAttributeDefinition, CfnDomain, CfnEventStream, CfnEventTrigger, CfnIntegration, CfnObjectType, CfnSegmentDefinition, CfnDataset, CfnJob, CfnProject, CfnRecipe, CfnRuleset, CfnSchedule, CfnPipeline, CfnAgent, CfnLocationAzureBlob, CfnLocationEFS, CfnLocationFSxLustre, CfnLocationFSxONTAP, CfnLocationFSxOpenZFS, CfnLocationFSxWindows, CfnLocationHDFS, CfnLocationNFS, CfnLocationObjectStorage, CfnLocationS3, CfnLocationSMB, CfnStorageSystem, CfnTask, CfnConnection, CfnDataSource, CfnDomain, CfnEnvironment, CfnEnvironmentActions, CfnEnvironmentBlueprintConfiguration, CfnEnvironmentProfile, CfnGroupProfile, CfnProject, CfnProjectMembership, CfnSubscriptionTarget, CfnUserProfile, CfnCluster, CfnParameterGroup, CfnSubnetGroup, CfnFarm, CfnFleet, CfnLicenseEndpoint, CfnLimit, CfnMeteredProduct, CfnMonitor, CfnQueue, CfnQueueEnvironment, CfnQueueFleetAssociation, CfnQueueLimitAssociation, CfnStorageProfile, CfnGraph, CfnMemberInvitation, CfnOrganizationAdmin, CfnDevicePool, CfnInstanceProfile, CfnNetworkProfile, CfnProject, CfnTestGridProject, CfnVPCEConfiguration, CfnLogAnomalyDetectionIntegration, CfnNotificationChannel, CfnResourceCollection, CfnMicrosoftAD, CfnSimpleAD, CfnLifecyclePolicy, CfnCertificate, CfnDataMigration, CfnDataProvider, CfnEndpoint, CfnEventSubscription, CfnInstanceProfile, CfnMigrationProject, CfnReplicationConfig, CfnReplicationInstance, CfnReplicationSubnetGroup, CfnReplicationTask, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBSubnetGroup, CfnEventSubscription, CfnCluster, CfnCluster, CfnGlobalTable, CfnTable, CfnCapacityReservation, CfnCapacityReservationFleet, CfnCarrierGateway, CfnClientVpnAuthorizationRule, CfnClientVpnEndpoint, CfnClientVpnRoute, CfnClientVpnTargetNetworkAssociation, CfnCustomerGateway, CfnDHCPOptions, CfnEC2Fleet, CfnEIP, CfnEIPAssociation, CfnEgressOnlyInternetGateway, CfnEnclaveCertificateIamRoleAssociation, CfnFlowLog, CfnGatewayRouteTableAssociation, CfnHost, CfnIPAM, CfnIPAMAllocation, CfnIPAMPool, CfnIPAMPoolCidr, CfnIPAMResourceDiscovery, CfnIPAMResourceDiscoveryAssociation, CfnIPAMScope, CfnInstance, CfnInstanceConnectEndpoint, CfnInternetGateway, CfnKeyPair, CfnLaunchTemplate, CfnLocalGatewayRoute, CfnLocalGatewayRouteTable, CfnLocalGatewayRouteTableVPCAssociation, CfnLocalGatewayRouteTableVirtualInterfaceGroupAssociation, CfnNatGateway, CfnNetworkAcl, CfnNetworkAclEntry, CfnNetworkInsightsAccessScope, CfnNetworkInsightsAccessScopeAnalysis, CfnNetworkInsightsAnalysis, CfnNetworkInsightsPath, CfnNetworkInterface, CfnNetworkInterfaceAttachment, CfnNetworkInterfacePermission, CfnNetworkPerformanceMetricSubscription, CfnPlacementGroup, CfnPrefixList, CfnRoute, CfnRouteServer, CfnRouteServerAssociation, CfnRouteServerEndpoint, CfnRouteServerPeer, CfnRouteServerPropagation, CfnRouteTable, CfnSecurityGroup, CfnSecurityGroupEgress, CfnSecurityGroupIngress, CfnSecurityGroupVpcAssociation, CfnSnapshotBlockPublicAccess, CfnSpotFleet, CfnSubnet, CfnSubnetCidrBlock, CfnSubnetNetworkAclAssociation, CfnSubnetRouteTableAssociation, CfnTrafficMirrorFilter, CfnTrafficMirrorFilterRule, CfnTrafficMirrorSession, CfnTrafficMirrorTarget, CfnTransitGateway, CfnTransitGatewayAttachment, CfnTransitGatewayConnect, CfnTransitGatewayMulticastDomain, CfnTransitGatewayMulticastDomainAssociation, CfnTransitGatewayMulticastGroupMember, CfnTransitGatewayMulticastGroupSource, CfnTransitGatewayPeeringAttachment, CfnTransitGatewayRoute, CfnTransitGatewayRouteTable, CfnTransitGatewayRouteTableAssociation, CfnTransitGatewayRouteTablePropagation, CfnTransitGatewayVpcAttachment, CfnVPC, CfnVPCBlockPublicAccessExclusion, CfnVPCBlockPublicAccessOptions, CfnVPCCidrBlock, CfnVPCDHCPOptionsAssociation, CfnVPCEndpoint, CfnVPCEndpointConnectionNotification, CfnVPCEndpointService, CfnVPCEndpointServicePermissions, CfnVPCGatewayAttachment, CfnVPCPeeringConnection, CfnVPNConnection, CfnVPNConnectionRoute, CfnVPNGateway, CfnVPNGatewayRoutePropagation, CfnVerifiedAccessEndpoint, CfnVerifiedAccessGroup, CfnVerifiedAccessInstance, CfnVerifiedAccessTrustProvider, CfnVolume, CfnVolumeAttachment, CfnPublicRepository, CfnPullThroughCacheRule, CfnRegistryPolicy, CfnReplicationConfiguration, CfnRepository, CfnRepositoryCreationTemplate, CfnCapacityProvider, CfnCluster, CfnClusterCapacityProviderAssociations, CfnPrimaryTaskSet, CfnService, CfnTaskDefinition, CfnTaskSet, CfnAccessPoint, CfnFileSystem, CfnMountTarget, CfnAccessEntry, CfnAddon, CfnCluster, CfnFargateProfile, CfnIdentityProviderConfig, CfnNodegroup, CfnPodIdentityAssociation, CfnCacheCluster, CfnGlobalReplicationGroup, CfnParameterGroup, CfnReplicationGroup, CfnSecurityGroup, CfnSecurityGroupIngress, CfnServerlessCache, CfnSubnetGroup, CfnUser, CfnUserGroup, CfnApplication, CfnApplicationVersion, CfnConfigurationTemplate, CfnEnvironment, CfnLoadBalancer, CfnListener, CfnListenerCertificate, CfnListenerRule, CfnLoadBalancer, CfnTargetGroup, CfnTrustStore, CfnTrustStoreRevocation, CfnDomain, CfnCluster, CfnInstanceFleetConfig, CfnInstanceGroupConfig, CfnSecurityConfiguration, CfnStep, CfnStudio, CfnStudioSessionMapping, CfnWALWorkspace, CfnVirtualCluster, CfnApplication, CfnIdMappingWorkflow, CfnIdNamespace, CfnMatchingWorkflow, CfnPolicyStatement, CfnSchemaMapping, CfnApiDestination, CfnArchive, CfnConnection, CfnEndpoint, CfnEventBus, CfnEventBusPolicy, CfnRule, CfnDiscoverer, CfnRegistry, CfnRegistryPolicy, CfnSchema, CfnExperiment, CfnFeature, CfnLaunch, CfnProject, CfnSegment, CfnEnvironment, CfnExperimentTemplate, CfnTargetAccountConfiguration, CfnNotificationChannel, CfnPolicy, CfnResourceSet, CfnDataset, CfnDatasetGroup, CfnDetector, CfnEntityType, CfnEventType, CfnLabel, CfnList, CfnOutcome, CfnVariable, CfnDataRepositoryAssociation, CfnFileSystem, CfnSnapshot, CfnStorageVirtualMachine, CfnVolume, CfnAlias, CfnBuild, CfnContainerFleet, CfnContainerGroupDefinition, CfnFleet, CfnGameServerGroup, CfnGameSessionQueue, CfnLocation, CfnMatchmakingConfiguration, CfnMatchmakingRuleSet, CfnScript, CfnApplication, CfnStreamGroup, CfnAccelerator, CfnCrossAccountAttachment, CfnEndpointGroup, CfnListener, CfnClassifier, CfnConnection, CfnCrawler, CfnCustomEntityType, CfnDataCatalogEncryptionSettings, CfnDataQualityRuleset, CfnDatabase, CfnDevEndpoint, CfnJob, CfnMLTransform, CfnPartition, CfnRegistry, CfnSchema, CfnSchemaVersion, CfnSchemaVersionMetadata, CfnSecurityConfiguration, CfnTable, CfnTableOptimizer, CfnTrigger, CfnUsageProfile, CfnWorkflow, CfnWorkspace, CfnConnectorDefinition, CfnConnectorDefinitionVersion, CfnCoreDefinition, CfnCoreDefinitionVersion, CfnDeviceDefinition, CfnDeviceDefinitionVersion, CfnFunctionDefinition, CfnFunctionDefinitionVersion, CfnGroup, CfnGroupVersion, CfnLoggerDefinition, CfnLoggerDefinitionVersion, CfnResourceDefinition, CfnResourceDefinitionVersion, CfnSubscriptionDefinition, CfnSubscriptionDefinitionVersion, CfnComponentVersion, CfnDeployment, CfnConfig, CfnDataflowEndpointGroup, CfnMissionProfile, CfnDetector, CfnFilter, CfnIPSet, CfnMalwareProtectionPlan, CfnMaster, CfnMember, CfnPublishingDestination, CfnThreatIntelSet, CfnDatastore, CfnFHIRDatastore, CfnAccessKey, CfnGroup, CfnGroupPolicy, CfnInstanceProfile, CfnManagedPolicy, CfnOIDCProvider, CfnPolicy, CfnRole, CfnRolePolicy, CfnSAMLProvider, CfnServerCertificate, CfnServiceLinkedRole, CfnUser, CfnUserPolicy, CfnUserToGroupAddition, CfnVirtualMFADevice, CfnGroup, CfnGroupMembership, CfnComponent, CfnContainerRecipe, CfnDistributionConfiguration, CfnImage, CfnImagePipeline, CfnImageRecipe, CfnInfrastructureConfiguration, CfnLifecyclePolicy, CfnWorkflow, CfnAssessmentTarget, CfnAssessmentTemplate, CfnResourceGroup, CfnCisScanConfiguration, CfnFilter, CfnMonitor, CfnInvoiceUnit, CfnAccountAuditConfiguration, CfnAuthorizer, CfnBillingGroup, CfnCACertificate, CfnCertificate, CfnCertificateProvider, CfnCommand, CfnCustomMetric, CfnDimension, CfnDomainConfiguration, CfnFleetMetric, CfnJobTemplate, CfnLogging, CfnMitigationAction, CfnPolicy, CfnPolicyPrincipalAttachment, CfnProvisioningTemplate, CfnResourceSpecificLogging, CfnRoleAlias, CfnScheduledAudit, CfnSecurityProfile, CfnSoftwarePackage, CfnSoftwarePackageVersion, CfnThing, CfnThingGroup, CfnThingPrincipalAttachment, CfnThingType, CfnTopicRule, CfnTopicRuleDestination, CfnChannel, CfnDataset, CfnDatastore, CfnPipeline, CfnSuiteDefinition, CfnAlarmModel, CfnDetectorModel, CfnInput, CfnApplication, CfnCampaign, CfnDecoderManifest, CfnFleet, CfnModelManifest, CfnSignalCatalog, CfnStateTemplate, CfnVehicle, CfnAccessPolicy, CfnAsset, CfnAssetModel, CfnDashboard, CfnDataset, CfnGateway, CfnPortal, CfnProject, CfnFlowTemplate, CfnComponentType, CfnEntity, CfnScene, CfnSyncJob, CfnWorkspace, CfnDestination, CfnDeviceProfile, CfnFuotaTask, CfnMulticastGroup, CfnNetworkAnalyzerConfiguration, CfnPartnerAccount, CfnServiceProfile, CfnTaskDefinition, CfnWirelessDevice, CfnWirelessDeviceImportTask, CfnWirelessGateway, CfnChannel, CfnEncoderConfiguration, CfnIngestConfiguration, CfnPlaybackKeyPair, CfnPlaybackRestrictionPolicy, CfnPublicKey, CfnRecordingConfiguration, CfnStage, CfnStorageConfiguration, CfnStreamKey, CfnLoggingConfiguration, CfnRoom, CfnConnector, CfnCustomPlugin, CfnWorkerConfiguration, CfnDataSource, CfnFaq, CfnIndex, CfnExecutionPlan, CfnResourcePolicy, CfnStream, CfnStreamConsumer, CfnApplication, CfnApplicationCloudWatchLoggingOptionV2, CfnApplicationOutput, CfnApplicationOutputV2, CfnApplicationReferenceDataSource, CfnApplicationReferenceDataSourceV2, CfnApplicationV2, CfnApplication, CfnApplicationCloudWatchLoggingOption, CfnApplicationOutput, CfnApplicationReferenceDataSource, CfnDeliveryStream, CfnSignalingChannel, CfnStream, CfnAlias, CfnKey, CfnReplicaKey, CfnDataCellsFilter, CfnDataLakeSettings, CfnPermissions, CfnPrincipalPermissions, CfnResource, CfnTag, CfnTagAssociation, CfnAlias, CfnCodeSigningConfig, CfnEventInvokeConfig, CfnEventSourceMapping, CfnFunction, CfnLayerVersion, CfnLayerVersionPermission, CfnPermission, CfnUrl, CfnVersion, CfnDeployment, CfnBot, CfnBotAlias, CfnBotVersion, CfnResourcePolicy, CfnGrant, CfnLicense, CfnAlarm, CfnBucket, CfnCertificate, CfnContainer, CfnDatabase, CfnDisk, CfnDistribution, CfnInstance, CfnLoadBalancer, CfnLoadBalancerTlsCertificate, CfnStaticIp, CfnAPIKey, CfnGeofenceCollection, CfnMap, CfnPlaceIndex, CfnRouteCalculator, CfnTracker, CfnTrackerConsumer, CfnAccountPolicy, CfnDelivery, CfnDeliveryDestination, CfnDeliverySource, CfnDestination, CfnIntegration, CfnLogAnomalyDetector, CfnLogGroup, CfnLogStream, CfnMetricFilter, CfnQueryDefinition, CfnResourcePolicy, CfnSubscriptionFilter, CfnTransformer, CfnInferenceScheduler, CfnAlert, CfnAnomalyDetector, CfnProject, CfnApplication, CfnDeployment, CfnEnvironment, CfnAllowList, CfnCustomDataIdentifier, CfnFindingsFilter, CfnSession, CfnAccessor, CfnMember, CfnNode, CfnBridge, CfnBridgeOutput, CfnBridgeSource, CfnFlow, CfnFlowEntitlement, CfnFlowOutput, CfnFlowSource, CfnFlowVpcInterface, CfnGateway, CfnJobTemplate, CfnPreset, CfnQueue, CfnChannel, CfnChannelPlacementGroup, CfnCloudWatchAlarmTemplate, CfnCloudWatchAlarmTemplateGroup, CfnCluster, CfnEventBridgeRuleTemplate, CfnEventBridgeRuleTemplateGroup, CfnInput, CfnInputSecurityGroup, CfnMultiplex, CfnMultiplexprogram, CfnNetwork, CfnSdiSource, CfnSignalMap, CfnAsset, CfnChannel, CfnOriginEndpoint, CfnPackagingConfiguration, CfnPackagingGroup, CfnChannel, CfnChannelGroup, CfnChannelPolicy, CfnOriginEndpoint, CfnOriginEndpointPolicy, CfnContainer, CfnChannel, CfnChannelPolicy, CfnLiveSource, CfnPlaybackConfiguration, CfnSourceLocation, CfnVodSource, CfnACL, CfnCluster, CfnMultiRegionCluster, CfnParameterGroup, CfnSubnetGroup, CfnUser, CfnBatchScramSecret, CfnCluster, CfnClusterPolicy, CfnConfiguration, CfnReplicator, CfnServerlessCluster, CfnVpcConnection, CfnEnvironment, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBParameterGroup, CfnDBSubnetGroup, CfnEventSubscription, CfnGraph, CfnPrivateGraphEndpoint, CfnFirewall, CfnFirewallPolicy, CfnLoggingConfiguration, CfnRuleGroup, CfnTLSInspectionConfiguration, CfnConnectAttachment, CfnConnectPeer, CfnCoreNetwork, CfnCustomerGatewayAssociation, CfnDevice, CfnDirectConnectGatewayAttachment, CfnGlobalNetwork, CfnLink, CfnLinkAssociation, CfnSite, CfnSiteToSiteVpnAttachment, CfnTransitGatewayPeering, CfnTransitGatewayRegistration, CfnTransitGatewayRouteTableAttachment, CfnVpcAttachment, CfnLaunchProfile, CfnStreamingImage, CfnStudio, CfnStudioComponent, CfnChannelAssociation, CfnEventRule, CfnManagedNotificationAccountContactAssociation, CfnManagedNotificationAdditionalChannelAssociation, CfnNotificationConfiguration, CfnNotificationHub, CfnEmailContact, CfnLink, CfnSink, CfnAnnotationStore, CfnReferenceStore, CfnRunGroup, CfnSequenceStore, CfnVariantStore, CfnWorkflow, CfnAccessPolicy, CfnCollection, CfnIndex, CfnLifecyclePolicy, CfnSecurityConfig, CfnSecurityPolicy, CfnVpcEndpoint, CfnApplication, CfnDomain, CfnApp, CfnElasticLoadBalancerAttachment, CfnInstance, CfnLayer, CfnStack, CfnUserProfile, CfnVolume, CfnServer, CfnAccount, CfnOrganization, CfnOrganizationalUnit, CfnPolicy, CfnResourcePolicy, CfnPipeline, CfnApplicationInstance, CfnPackage, CfnPackageVersion, CfnAlias, CfnKey, CfnConnector, CfnDirectoryRegistration, CfnServicePrincipalName, CfnTemplate, CfnTemplateGroupAccessControlEntry, CfnChallenge, CfnConnector, CfnCluster, CfnComputeNodeGroup, CfnQueue, CfnDataset, CfnDatasetGroup, CfnSchema, CfnSolution, CfnADMChannel, CfnAPNSChannel, CfnAPNSSandboxChannel, CfnAPNSVoipChannel, CfnAPNSVoipSandboxChannel, CfnApp, CfnApplicationSettings, CfnBaiduChannel, CfnCampaign, CfnEmailChannel, CfnEmailTemplate, CfnEventStream, CfnGCMChannel, CfnInAppTemplate, CfnPushTemplate, CfnSMSChannel, CfnSegment, CfnSmsTemplate, CfnVoiceChannel, CfnConfigurationSet, CfnConfigurationSetEventDestination, CfnDedicatedIpPool, CfnIdentity, CfnPipe, CfnEnvironmentAccountConnection, CfnEnvironmentTemplate, CfnServiceTemplate, CfnApplication, CfnDataAccessor, CfnDataSource, CfnIndex, CfnPermission, CfnPlugin, CfnRetriever, CfnWebExperience, CfnLedger, CfnStream, CfnAnalysis, CfnCustomPermissions, CfnDashboard, CfnDataSet, CfnDataSource, CfnFolder, CfnRefreshSchedule, CfnTemplate, CfnTheme, CfnTopic, CfnVPCConnection, CfnPermission, CfnResourceShare, CfnRule, CfnCustomDBEngineVersion, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBParameterGroup, CfnDBProxy, CfnDBProxyEndpoint, CfnDBProxyTargetGroup, CfnDBSecurityGroup, CfnDBSecurityGroupIngress, CfnDBShardGroup, CfnDBSubnetGroup, CfnEventSubscription, CfnGlobalCluster, CfnIntegration, CfnOptionGroup, CfnCluster, CfnClusterParameterGroup, CfnClusterSecurityGroup, CfnClusterSecurityGroupIngress, CfnClusterSubnetGroup, CfnEndpointAccess, CfnEndpointAuthorization, CfnEventSubscription, CfnIntegration, CfnScheduledAction, CfnNamespace, CfnWorkgroup, CfnApplication, CfnEnvironment, CfnRoute, CfnService, CfnCollection, CfnProject, CfnStreamProcessor, CfnApp, CfnResiliencyPolicy, CfnDefaultViewAssociation, CfnIndex, CfnView, CfnGroup, CfnTagSyncTask, CfnFleet, CfnRobot, CfnRobotApplication, CfnRobotApplicationVersion, CfnSimulationApplication, CfnSimulationApplicationVersion, CfnCRL, CfnProfile, CfnTrustAnchor, CfnCidrCollection, CfnDNSSEC, CfnHealthCheck, CfnHostedZone, CfnKeySigningKey, CfnRecordSet, CfnRecordSetGroup, CfnProfile, CfnProfileAssociation, CfnProfileResourceAssociation, CfnCluster, CfnControlPanel, CfnRoutingControl, CfnSafetyRule, CfnCell, CfnReadinessCheck, CfnRecoveryGroup, CfnResourceSet, CfnFirewallDomainList, CfnFirewallRuleGroup, CfnFirewallRuleGroupAssociation, CfnOutpostResolver, CfnResolverConfig, CfnResolverDNSSECConfig, CfnResolverEndpoint, CfnResolverQueryLoggingConfig, CfnResolverQueryLoggingConfigAssociation, CfnResolverRule, CfnResolverRuleAssociation, CfnAppMonitor, CfnAccessGrant, CfnAccessGrantsInstance, CfnAccessGrantsLocation, CfnAccessPoint, CfnBucket, CfnBucketPolicy, CfnMultiRegionAccessPoint, CfnMultiRegionAccessPointPolicy, CfnStorageLens, CfnStorageLensGroup, CfnBucketPolicy, CfnDirectoryBucket, CfnAccessPoint, CfnAccessPointPolicy, CfnAccessPoint, CfnBucket, CfnBucketPolicy, CfnEndpoint, CfnTableBucket, CfnTableBucketPolicy, CfnApp, CfnAppImageConfig, CfnCluster, CfnCodeRepository, CfnDataQualityJobDefinition, CfnDevice, CfnDeviceFleet, CfnDomain, CfnEndpoint, CfnEndpointConfig, CfnFeatureGroup, CfnImage, CfnImageVersion, CfnInferenceComponent, CfnInferenceExperiment, CfnMlflowTrackingServer, CfnModel, CfnModelBiasJobDefinition, CfnModelCard, CfnModelExplainabilityJobDefinition, CfnModelPackage, CfnModelPackageGroup, CfnModelQualityJobDefinition, CfnMonitoringSchedule, CfnNotebookInstance, CfnNotebookInstanceLifecycleConfig, CfnPartnerApp, CfnPipeline, CfnProject, CfnSpace, CfnStudioLifecycleConfig, CfnUserProfile, CfnWorkteam, CfnApi, CfnApplication, CfnFunction, CfnHttpApi, CfnLayerVersion, CfnSimpleTable, CfnStateMachine, CfnSchedule, CfnScheduleGroup, CfnDomain, CfnResourcePolicy, CfnRotationSchedule, CfnSecret, CfnSecretTargetAttachment, CfnAutomationRule, CfnConfigurationPolicy, CfnDelegatedAdmin, CfnFindingAggregator, CfnHub, CfnInsight, CfnOrganizationConfiguration, CfnPolicyAssociation, CfnProductSubscription, CfnSecurityControl, CfnStandard, CfnAwsLogSource, CfnDataLake, CfnSubscriber, CfnSubscriberNotification, CfnAcceptedPortfolioShare, CfnCloudFormationProduct, CfnCloudFormationProvisionedProduct, CfnLaunchNotificationConstraint, CfnLaunchRoleConstraint, CfnLaunchTemplateConstraint, CfnPortfolio, CfnPortfolioPrincipalAssociation, CfnPortfolioProductAssociation, CfnPortfolioShare, CfnResourceUpdateConstraint, CfnServiceAction, CfnServiceActionAssociation, CfnStackSetConstraint, CfnTagOption, CfnTagOptionAssociation, CfnApplication, CfnAttributeGroup, CfnAttributeGroupAssociation, CfnResourceAssociation, CfnHttpNamespace, CfnInstance, CfnPrivateDnsNamespace, CfnPublicDnsNamespace, CfnService, CfnConfigurationSet, CfnConfigurationSetEventDestination, CfnContactList, CfnDedicatedIpPool, CfnEmailIdentity, CfnMailManagerAddonInstance, CfnMailManagerAddonSubscription, CfnMailManagerArchive, CfnMailManagerIngressPoint, CfnMailManagerRelay, CfnMailManagerRuleSet, CfnMailManagerTrafficPolicy, CfnReceiptFilter, CfnReceiptRule, CfnReceiptRuleSet, CfnTemplate, CfnVdmAttributes, CfnDRTAccess, CfnProactiveEngagement, CfnProtection, CfnProtectionGroup, CfnProfilePermission, CfnSigningProfile, CfnSimulation, CfnSubscription, CfnTopic, CfnTopicInlinePolicy, CfnTopicPolicy, CfnQueue, CfnQueueInlinePolicy, CfnQueuePolicy, CfnAssociation, CfnDocument, CfnMaintenanceWindow, CfnMaintenanceWindowTarget, CfnMaintenanceWindowTask, CfnParameter, CfnPatchBaseline, CfnResourceDataSync, CfnResourcePolicy, CfnContact, CfnContactChannel, CfnPlan, CfnRotation, CfnReplicationSet, CfnResponsePlan, CfnConfigurationManager, CfnApplication, CfnApplicationAssignment, CfnAssignment, CfnInstance, CfnInstanceAccessControlAttributeConfiguration, CfnPermissionSet, CfnActivity, CfnStateMachine, CfnStateMachineAlias, CfnStateMachineVersion, CfnAccountAlias, CfnSlackChannelConfiguration, CfnSlackWorkspaceConfiguration, CfnCanary, CfnGroup, CfnApplication, CfnDatabase, CfnInfluxDBInstance, CfnScheduledQuery, CfnTable, CfnAgreement, CfnCertificate, CfnConnector, CfnProfile, CfnServer, CfnUser, CfnWebApp, CfnWorkflow, CfnIdentitySource, CfnPolicy, CfnPolicyStore, CfnPolicyTemplate, CfnDomain, CfnAccessLogSubscription, CfnAuthPolicy, CfnListener, CfnResourceConfiguration, CfnResourceGateway, CfnResourcePolicy, CfnRule, CfnService, CfnServiceNetwork, CfnServiceNetworkResourceAssociation, CfnServiceNetworkServiceAssociation, CfnServiceNetworkVpcAssociation, CfnTargetGroup, CfnByteMatchSet, CfnIPSet, CfnRule, CfnSizeConstraintSet, CfnSqlInjectionMatchSet, CfnWebACL, CfnXssMatchSet, CfnByteMatchSet, CfnGeoMatchSet, CfnIPSet, CfnRateBasedRule, CfnRegexPatternSet, CfnRule, CfnSizeConstraintSet, CfnSqlInjectionMatchSet, CfnWebACL, CfnWebACLAssociation, CfnXssMatchSet, CfnIPSet, CfnLoggingConfiguration, CfnRegexPatternSet, CfnRuleGroup, CfnWebACL, CfnWebACLAssociation, CfnAIAgent, CfnAIAgentVersion, CfnAIGuardrail, CfnAIGuardrailVersion, CfnAIPrompt, CfnAIPromptVersion, CfnAssistant, CfnAssistantAssociation, CfnKnowledgeBase, CfnMessageTemplate, CfnMessageTemplateVersion, CfnConnectionAlias, CfnWorkspace, CfnWorkspacesPool, CfnEnvironment, CfnBrowserSettings, CfnDataProtectionSettings, CfnIdentityProvider, CfnIpAccessSettings, CfnNetworkSettings, CfnPortal, CfnTrustStore, CfnUserAccessLoggingSettings, CfnUserSettings, CfnGroup, CfnResourcePolicy, CfnSamplingRule, CfnTransactionSearchConfig, CfnCustomResource, CfnGuardHook, CfnHookDefaultVersion, CfnHookTypeConfig, CfnHookVersion, CfnLambdaHook, CfnMacro, CfnMapping, CfnModuleDefaultVersion, CfnModuleVersion, CfnPublicTypeVersion, CfnPublisher, CfnResource, CfnResourceDefaultVersion, CfnResourceVersion, CfnRule, CfnStack, CfnStackSet, CfnTypeActivation, CfnWaitCondition, CfnWaitConditionHandle
Base class for referencable CloudFormation constructs which are not Resources.
These constructs are things like Conditions and Parameters, can be
referenced by taking the .ref attribute.
Resource constructs do not inherit from CfnRefElement because they have their
own, more specific types returned from the .ref attribute. Also, some
resources aren't referencable at all (such as BucketPolicies or GatewayAttachments).
Initializer
new CfnRefElement(scope: Construct, id: string)

Parameters

scope Construct  — The parent construct.
id string

Creates an entity and binds it to a tree.
Note that the root of the tree must be a Stack object (not just any Root).
Properties


NameTypeDescription


creationStackstring[]
logicalIdstringThe logical ID for this CloudFormation stack element.
nodeNodeThe tree node.
refstringReturn a string that will be resolved to a CloudFormation { Ref } for this element.
stackStackThe stack in which this element is defined.



creationStack
Type:
string[]

logicalId
Type:
string
The logical ID for this CloudFormation stack element.
The logical ID of the element
is calculated from the path of the resource node in the construct tree.
To override this value, use overrideLogicalId(newLogicalId).

node
Type:
Node
The tree node.

ref
Type:
string
Return a string that will be resolved to a CloudFormation { Ref } for this element.
If, by any chance, the intrinsic reference of a resource is not a string, you could
coerce it to an IResolvable through Lazy.any({ produce: resource.ref }).

stack
Type:
Stack
The stack in which this element is defined.
CfnElements must be defined within a stack scope (directly or indirectly).
Methods


NameDescription


overrideLogicalId(newLogicalId)Overrides the auto-generated logical ID with a specific ID.
toString()Returns a string representation of this construct.



overrideLogicalId(newLogicalId)
public overrideLogicalId(newLogicalId: string): void

Parameters

newLogicalId string  — The new logical ID to use for this stack element.

Overrides the auto-generated logical ID with a specific ID.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.\n\nclass CfnRefElement


LanguageType name


 .NETAmazon.CDK.CfnRefElement
 Gogithub.com/aws/aws-cdk-go/awscdk/v2#CfnRefElement
 Javasoftware.amazon.awscdk.CfnRefElement
 Pythonaws_cdk.CfnRefElement
 TypeScript (source)aws-cdk-lib » CfnRefElement


Implements
IConstruct, IDependable
Extends
CfnElement
Implemented by
CfnSkill, CfnAnalyzer, CfnCertificate, CfnCertificateAuthority, CfnCertificateAuthorityActivation, CfnPermission, CfnBroker, CfnConfiguration, CfnConfigurationAssociation, CfnApp, CfnBranch, CfnDomain, CfnComponent, CfnForm, CfnTheme, CfnAccount, CfnApiKey, CfnAuthorizer, CfnBasePathMapping, CfnBasePathMappingV2, CfnClientCertificate, CfnDeployment, CfnDocumentationPart, CfnDocumentationVersion, CfnDomainName, CfnDomainNameAccessAssociation, CfnDomainNameV2, CfnGatewayResponse, CfnMethod, CfnModel, CfnRequestValidator, CfnResource, CfnRestApi, CfnStage, CfnUsagePlan, CfnUsagePlanKey, CfnVpcLink, CfnApi, CfnApiGatewayManagedOverrides, CfnApiMapping, CfnAuthorizer, CfnDeployment, CfnDomainName, CfnIntegration, CfnIntegrationResponse, CfnModel, CfnRoute, CfnRouteResponse, CfnStage, CfnVpcLink, CfnApplication, CfnConfigurationProfile, CfnDeployment, CfnDeploymentStrategy, CfnEnvironment, CfnExtension, CfnExtensionAssociation, CfnHostedConfigurationVersion, CfnConnector, CfnConnectorProfile, CfnFlow, CfnApplication, CfnDataIntegration, CfnEventIntegration, CfnScalableTarget, CfnScalingPolicy, CfnApplication, CfnDiscovery, CfnServiceLevelObjective, CfnGatewayRoute, CfnMesh, CfnRoute, CfnVirtualGateway, CfnVirtualNode, CfnVirtualRouter, CfnVirtualService, CfnAutoScalingConfiguration, CfnObservabilityConfiguration, CfnService, CfnVpcConnector, CfnVpcIngressConnection, CfnAppBlock, CfnAppBlockBuilder, CfnApplication, CfnApplicationEntitlementAssociation, CfnApplicationFleetAssociation, CfnDirectoryConfig, CfnEntitlement, CfnFleet, CfnImageBuilder, CfnStack, CfnStackFleetAssociation, CfnStackUserAssociation, CfnUser, CfnApi, CfnApiCache, CfnApiKey, CfnChannelNamespace, CfnDataSource, CfnDomainName, CfnDomainNameApiAssociation, CfnFunctionConfiguration, CfnGraphQLApi, CfnGraphQLSchema, CfnResolver, CfnSourceApiAssociation, CfnTestCase, CfnRuleGroupsNamespace, CfnScraper, CfnWorkspace, CfnAutoshiftObserverNotificationStatus, CfnZonalAutoshiftConfiguration, CfnCapacityReservation, CfnDataCatalog, CfnNamedQuery, CfnPreparedStatement, CfnWorkGroup, CfnAssessment, CfnAutoScalingGroup, CfnLaunchConfiguration, CfnLifecycleHook, CfnScalingPolicy, CfnScheduledAction, CfnWarmPool, CfnScalingPlan, CfnCapability, CfnPartnership, CfnProfile, CfnTransformer, CfnBackupPlan, CfnBackupSelection, CfnBackupVault, CfnFramework, CfnLogicallyAirGappedBackupVault, CfnReportPlan, CfnRestoreTestingPlan, CfnRestoreTestingSelection, CfnHypervisor, CfnComputeEnvironment, CfnConsumableResource, CfnJobDefinition, CfnJobQueue, CfnSchedulingPolicy, CfnExport, CfnAgent, CfnAgentAlias, CfnApplicationInferenceProfile, CfnBlueprint, CfnDataAutomationProject, CfnDataSource, CfnFlow, CfnFlowAlias, CfnFlowVersion, CfnGuardrail, CfnGuardrailVersion, CfnKnowledgeBase, CfnPrompt, CfnPromptVersion, CfnBillingGroup, CfnCustomLineItem, CfnPricingPlan, CfnPricingRule, CfnBudget, CfnBudgetsAction, CfnKeyspace, CfnTable, CfnType, CfnAnomalyMonitor, CfnAnomalySubscription, CfnCostCategory, CfnAccount, CfnCertificate, CfnCustomAction, CfnMicrosoftTeamsChannelConfiguration, CfnSlackChannelConfiguration, CfnAnalysisTemplate, CfnCollaboration, CfnConfiguredTable, CfnConfiguredTableAssociation, CfnIdMappingTable, CfnIdNamespaceAssociation, CfnMembership, CfnPrivacyBudgetTemplate, CfnTrainingDataset, CfnEnvironmentEC2, CfnCustomResource, CfnGuardHook, CfnHookDefaultVersion, CfnHookTypeConfig, CfnHookVersion, CfnLambdaHook, CfnMacro, CfnModuleDefaultVersion, CfnModuleVersion, CfnPublicTypeVersion, CfnPublisher, CfnResourceDefaultVersion, CfnResourceVersion, CfnStack, CfnStackSet, CfnTypeActivation, CfnWaitCondition, CfnWaitConditionHandle, CfnAnycastIpList, CfnCachePolicy, CfnCloudFrontOriginAccessIdentity, CfnContinuousDeploymentPolicy, CfnDistribution, CfnFunction, CfnKeyGroup, CfnKeyValueStore, CfnMonitoringSubscription, CfnOriginAccessControl, CfnOriginRequestPolicy, CfnPublicKey, CfnRealtimeLogConfig, CfnResponseHeadersPolicy, CfnStreamingDistribution, CfnVpcOrigin, CfnChannel, CfnDashboard, CfnEventDataStore, CfnResourcePolicy, CfnTrail, CfnAlarm, CfnAnomalyDetector, CfnCompositeAlarm, CfnDashboard, CfnInsightRule, CfnMetricStream, CfnDomain, CfnPackageGroup, CfnRepository, CfnFleet, CfnProject, CfnReportGroup, CfnSourceCredential, CfnRepository, CfnConnection, CfnApplication, CfnDeploymentConfig, CfnDeploymentGroup, CfnProfilingGroup, CfnRepositoryAssociation, CfnCustomActionType, CfnPipeline, CfnWebhook, CfnGitHubRepository, CfnConnection, CfnRepositoryLink, CfnSyncConfiguration, CfnNotificationRule, CfnIdentityPool, CfnIdentityPoolPrincipalTag, CfnIdentityPoolRoleAttachment, CfnLogDeliveryConfiguration, CfnManagedLoginBranding, CfnUserPool, CfnUserPoolClient, CfnUserPoolDomain, CfnUserPoolGroup, CfnUserPoolIdentityProvider, CfnUserPoolResourceServer, CfnUserPoolRiskConfigurationAttachment, CfnUserPoolUICustomizationAttachment, CfnUserPoolUser, CfnUserPoolUserToGroupAttachment, CfnDocumentClassifier, CfnFlywheel, CfnAggregationAuthorization, CfnConfigRule, CfnConfigurationAggregator, CfnConfigurationRecorder, CfnConformancePack, CfnDeliveryChannel, CfnOrganizationConfigRule, CfnOrganizationConformancePack, CfnRemediationConfiguration, CfnStoredQuery, CfnAgentStatus, CfnApprovedOrigin, CfnContactFlow, CfnContactFlowModule, CfnContactFlowVersion, CfnEmailAddress, CfnEvaluationForm, CfnHoursOfOperation, CfnInstance, CfnInstanceStorageConfig, CfnIntegrationAssociation, CfnPhoneNumber, CfnPredefinedAttribute, CfnPrompt, CfnQueue, CfnQuickConnect, CfnRoutingProfile, CfnRule, CfnSecurityKey, CfnSecurityProfile, CfnTaskTemplate, CfnTrafficDistributionGroup, CfnUser, CfnUserHierarchyGroup, CfnUserHierarchyStructure, CfnView, CfnViewVersion, CfnCampaign, CfnCampaign, CfnEnabledBaseline, CfnEnabledControl, CfnLandingZone, CfnReportDefinition, CfnCalculatedAttributeDefinition, CfnDomain, CfnEventStream, CfnEventTrigger, CfnIntegration, CfnObjectType, CfnSegmentDefinition, CfnDataset, CfnJob, CfnProject, CfnRecipe, CfnRuleset, CfnSchedule, CfnPipeline, CfnAgent, CfnLocationAzureBlob, CfnLocationEFS, CfnLocationFSxLustre, CfnLocationFSxONTAP, CfnLocationFSxOpenZFS, CfnLocationFSxWindows, CfnLocationHDFS, CfnLocationNFS, CfnLocationObjectStorage, CfnLocationS3, CfnLocationSMB, CfnStorageSystem, CfnTask, CfnConnection, CfnDataSource, CfnDomain, CfnEnvironment, CfnEnvironmentActions, CfnEnvironmentBlueprintConfiguration, CfnEnvironmentProfile, CfnGroupProfile, CfnProject, CfnProjectMembership, CfnSubscriptionTarget, CfnUserProfile, CfnCluster, CfnParameterGroup, CfnSubnetGroup, CfnFarm, CfnFleet, CfnLicenseEndpoint, CfnLimit, CfnMeteredProduct, CfnMonitor, CfnQueue, CfnQueueEnvironment, CfnQueueFleetAssociation, CfnQueueLimitAssociation, CfnStorageProfile, CfnGraph, CfnMemberInvitation, CfnOrganizationAdmin, CfnDevicePool, CfnInstanceProfile, CfnNetworkProfile, CfnProject, CfnTestGridProject, CfnVPCEConfiguration, CfnLogAnomalyDetectionIntegration, CfnNotificationChannel, CfnResourceCollection, CfnMicrosoftAD, CfnSimpleAD, CfnLifecyclePolicy, CfnCertificate, CfnDataMigration, CfnDataProvider, CfnEndpoint, CfnEventSubscription, CfnInstanceProfile, CfnMigrationProject, CfnReplicationConfig, CfnReplicationInstance, CfnReplicationSubnetGroup, CfnReplicationTask, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBSubnetGroup, CfnEventSubscription, CfnCluster, CfnCluster, CfnGlobalTable, CfnTable, CfnCapacityReservation, CfnCapacityReservationFleet, CfnCarrierGateway, CfnClientVpnAuthorizationRule, CfnClientVpnEndpoint, CfnClientVpnRoute, CfnClientVpnTargetNetworkAssociation, CfnCustomerGateway, CfnDHCPOptions, CfnEC2Fleet, CfnEIP, CfnEIPAssociation, CfnEgressOnlyInternetGateway, CfnEnclaveCertificateIamRoleAssociation, CfnFlowLog, CfnGatewayRouteTableAssociation, CfnHost, CfnIPAM, CfnIPAMAllocation, CfnIPAMPool, CfnIPAMPoolCidr, CfnIPAMResourceDiscovery, CfnIPAMResourceDiscoveryAssociation, CfnIPAMScope, CfnInstance, CfnInstanceConnectEndpoint, CfnInternetGateway, CfnKeyPair, CfnLaunchTemplate, CfnLocalGatewayRoute, CfnLocalGatewayRouteTable, CfnLocalGatewayRouteTableVPCAssociation, CfnLocalGatewayRouteTableVirtualInterfaceGroupAssociation, CfnNatGateway, CfnNetworkAcl, CfnNetworkAclEntry, CfnNetworkInsightsAccessScope, CfnNetworkInsightsAccessScopeAnalysis, CfnNetworkInsightsAnalysis, CfnNetworkInsightsPath, CfnNetworkInterface, CfnNetworkInterfaceAttachment, CfnNetworkInterfacePermission, CfnNetworkPerformanceMetricSubscription, CfnPlacementGroup, CfnPrefixList, CfnRoute, CfnRouteServer, CfnRouteServerAssociation, CfnRouteServerEndpoint, CfnRouteServerPeer, CfnRouteServerPropagation, CfnRouteTable, CfnSecurityGroup, CfnSecurityGroupEgress, CfnSecurityGroupIngress, CfnSecurityGroupVpcAssociation, CfnSnapshotBlockPublicAccess, CfnSpotFleet, CfnSubnet, CfnSubnetCidrBlock, CfnSubnetNetworkAclAssociation, CfnSubnetRouteTableAssociation, CfnTrafficMirrorFilter, CfnTrafficMirrorFilterRule, CfnTrafficMirrorSession, CfnTrafficMirrorTarget, CfnTransitGateway, CfnTransitGatewayAttachment, CfnTransitGatewayConnect, CfnTransitGatewayMulticastDomain, CfnTransitGatewayMulticastDomainAssociation, CfnTransitGatewayMulticastGroupMember, CfnTransitGatewayMulticastGroupSource, CfnTransitGatewayPeeringAttachment, CfnTransitGatewayRoute, CfnTransitGatewayRouteTable, CfnTransitGatewayRouteTableAssociation, CfnTransitGatewayRouteTablePropagation, CfnTransitGatewayVpcAttachment, CfnVPC, CfnVPCBlockPublicAccessExclusion, CfnVPCBlockPublicAccessOptions, CfnVPCCidrBlock, CfnVPCDHCPOptionsAssociation, CfnVPCEndpoint, CfnVPCEndpointConnectionNotification, CfnVPCEndpointService, CfnVPCEndpointServicePermissions, CfnVPCGatewayAttachment, CfnVPCPeeringConnection, CfnVPNConnection, CfnVPNConnectionRoute, CfnVPNGateway, CfnVPNGatewayRoutePropagation, CfnVerifiedAccessEndpoint, CfnVerifiedAccessGroup, CfnVerifiedAccessInstance, CfnVerifiedAccessTrustProvider, CfnVolume, CfnVolumeAttachment, CfnPublicRepository, CfnPullThroughCacheRule, CfnRegistryPolicy, CfnReplicationConfiguration, CfnRepository, CfnRepositoryCreationTemplate, CfnCapacityProvider, CfnCluster, CfnClusterCapacityProviderAssociations, CfnPrimaryTaskSet, CfnService, CfnTaskDefinition, CfnTaskSet, CfnAccessPoint, CfnFileSystem, CfnMountTarget, CfnAccessEntry, CfnAddon, CfnCluster, CfnFargateProfile, CfnIdentityProviderConfig, CfnNodegroup, CfnPodIdentityAssociation, CfnCacheCluster, CfnGlobalReplicationGroup, CfnParameterGroup, CfnReplicationGroup, CfnSecurityGroup, CfnSecurityGroupIngress, CfnServerlessCache, CfnSubnetGroup, CfnUser, CfnUserGroup, CfnApplication, CfnApplicationVersion, CfnConfigurationTemplate, CfnEnvironment, CfnLoadBalancer, CfnListener, CfnListenerCertificate, CfnListenerRule, CfnLoadBalancer, CfnTargetGroup, CfnTrustStore, CfnTrustStoreRevocation, CfnDomain, CfnCluster, CfnInstanceFleetConfig, CfnInstanceGroupConfig, CfnSecurityConfiguration, CfnStep, CfnStudio, CfnStudioSessionMapping, CfnWALWorkspace, CfnVirtualCluster, CfnApplication, CfnIdMappingWorkflow, CfnIdNamespace, CfnMatchingWorkflow, CfnPolicyStatement, CfnSchemaMapping, CfnApiDestination, CfnArchive, CfnConnection, CfnEndpoint, CfnEventBus, CfnEventBusPolicy, CfnRule, CfnDiscoverer, CfnRegistry, CfnRegistryPolicy, CfnSchema, CfnExperiment, CfnFeature, CfnLaunch, CfnProject, CfnSegment, CfnEnvironment, CfnExperimentTemplate, CfnTargetAccountConfiguration, CfnNotificationChannel, CfnPolicy, CfnResourceSet, CfnDataset, CfnDatasetGroup, CfnDetector, CfnEntityType, CfnEventType, CfnLabel, CfnList, CfnOutcome, CfnVariable, CfnDataRepositoryAssociation, CfnFileSystem, CfnSnapshot, CfnStorageVirtualMachine, CfnVolume, CfnAlias, CfnBuild, CfnContainerFleet, CfnContainerGroupDefinition, CfnFleet, CfnGameServerGroup, CfnGameSessionQueue, CfnLocation, CfnMatchmakingConfiguration, CfnMatchmakingRuleSet, CfnScript, CfnApplication, CfnStreamGroup, CfnAccelerator, CfnCrossAccountAttachment, CfnEndpointGroup, CfnListener, CfnClassifier, CfnConnection, CfnCrawler, CfnCustomEntityType, CfnDataCatalogEncryptionSettings, CfnDataQualityRuleset, CfnDatabase, CfnDevEndpoint, CfnJob, CfnMLTransform, CfnPartition, CfnRegistry, CfnSchema, CfnSchemaVersion, CfnSchemaVersionMetadata, CfnSecurityConfiguration, CfnTable, CfnTableOptimizer, CfnTrigger, CfnUsageProfile, CfnWorkflow, CfnWorkspace, CfnConnectorDefinition, CfnConnectorDefinitionVersion, CfnCoreDefinition, CfnCoreDefinitionVersion, CfnDeviceDefinition, CfnDeviceDefinitionVersion, CfnFunctionDefinition, CfnFunctionDefinitionVersion, CfnGroup, CfnGroupVersion, CfnLoggerDefinition, CfnLoggerDefinitionVersion, CfnResourceDefinition, CfnResourceDefinitionVersion, CfnSubscriptionDefinition, CfnSubscriptionDefinitionVersion, CfnComponentVersion, CfnDeployment, CfnConfig, CfnDataflowEndpointGroup, CfnMissionProfile, CfnDetector, CfnFilter, CfnIPSet, CfnMalwareProtectionPlan, CfnMaster, CfnMember, CfnPublishingDestination, CfnThreatIntelSet, CfnDatastore, CfnFHIRDatastore, CfnAccessKey, CfnGroup, CfnGroupPolicy, CfnInstanceProfile, CfnManagedPolicy, CfnOIDCProvider, CfnPolicy, CfnRole, CfnRolePolicy, CfnSAMLProvider, CfnServerCertificate, CfnServiceLinkedRole, CfnUser, CfnUserPolicy, CfnUserToGroupAddition, CfnVirtualMFADevice, CfnGroup, CfnGroupMembership, CfnComponent, CfnContainerRecipe, CfnDistributionConfiguration, CfnImage, CfnImagePipeline, CfnImageRecipe, CfnInfrastructureConfiguration, CfnLifecyclePolicy, CfnWorkflow, CfnAssessmentTarget, CfnAssessmentTemplate, CfnResourceGroup, CfnCisScanConfiguration, CfnFilter, CfnMonitor, CfnInvoiceUnit, CfnAccountAuditConfiguration, CfnAuthorizer, CfnBillingGroup, CfnCACertificate, CfnCertificate, CfnCertificateProvider, CfnCommand, CfnCustomMetric, CfnDimension, CfnDomainConfiguration, CfnFleetMetric, CfnJobTemplate, CfnLogging, CfnMitigationAction, CfnPolicy, CfnPolicyPrincipalAttachment, CfnProvisioningTemplate, CfnResourceSpecificLogging, CfnRoleAlias, CfnScheduledAudit, CfnSecurityProfile, CfnSoftwarePackage, CfnSoftwarePackageVersion, CfnThing, CfnThingGroup, CfnThingPrincipalAttachment, CfnThingType, CfnTopicRule, CfnTopicRuleDestination, CfnChannel, CfnDataset, CfnDatastore, CfnPipeline, CfnSuiteDefinition, CfnAlarmModel, CfnDetectorModel, CfnInput, CfnApplication, CfnCampaign, CfnDecoderManifest, CfnFleet, CfnModelManifest, CfnSignalCatalog, CfnStateTemplate, CfnVehicle, CfnAccessPolicy, CfnAsset, CfnAssetModel, CfnDashboard, CfnDataset, CfnGateway, CfnPortal, CfnProject, CfnFlowTemplate, CfnComponentType, CfnEntity, CfnScene, CfnSyncJob, CfnWorkspace, CfnDestination, CfnDeviceProfile, CfnFuotaTask, CfnMulticastGroup, CfnNetworkAnalyzerConfiguration, CfnPartnerAccount, CfnServiceProfile, CfnTaskDefinition, CfnWirelessDevice, CfnWirelessDeviceImportTask, CfnWirelessGateway, CfnChannel, CfnEncoderConfiguration, CfnIngestConfiguration, CfnPlaybackKeyPair, CfnPlaybackRestrictionPolicy, CfnPublicKey, CfnRecordingConfiguration, CfnStage, CfnStorageConfiguration, CfnStreamKey, CfnLoggingConfiguration, CfnRoom, CfnConnector, CfnCustomPlugin, CfnWorkerConfiguration, CfnDataSource, CfnFaq, CfnIndex, CfnExecutionPlan, CfnResourcePolicy, CfnStream, CfnStreamConsumer, CfnApplication, CfnApplicationCloudWatchLoggingOptionV2, CfnApplicationOutput, CfnApplicationOutputV2, CfnApplicationReferenceDataSource, CfnApplicationReferenceDataSourceV2, CfnApplicationV2, CfnApplication, CfnApplicationCloudWatchLoggingOption, CfnApplicationOutput, CfnApplicationReferenceDataSource, CfnDeliveryStream, CfnSignalingChannel, CfnStream, CfnAlias, CfnKey, CfnReplicaKey, CfnDataCellsFilter, CfnDataLakeSettings, CfnPermissions, CfnPrincipalPermissions, CfnResource, CfnTag, CfnTagAssociation, CfnAlias, CfnCodeSigningConfig, CfnEventInvokeConfig, CfnEventSourceMapping, CfnFunction, CfnLayerVersion, CfnLayerVersionPermission, CfnPermission, CfnUrl, CfnVersion, CfnDeployment, CfnBot, CfnBotAlias, CfnBotVersion, CfnResourcePolicy, CfnGrant, CfnLicense, CfnAlarm, CfnBucket, CfnCertificate, CfnContainer, CfnDatabase, CfnDisk, CfnDistribution, CfnInstance, CfnLoadBalancer, CfnLoadBalancerTlsCertificate, CfnStaticIp, CfnAPIKey, CfnGeofenceCollection, CfnMap, CfnPlaceIndex, CfnRouteCalculator, CfnTracker, CfnTrackerConsumer, CfnAccountPolicy, CfnDelivery, CfnDeliveryDestination, CfnDeliverySource, CfnDestination, CfnIntegration, CfnLogAnomalyDetector, CfnLogGroup, CfnLogStream, CfnMetricFilter, CfnQueryDefinition, CfnResourcePolicy, CfnSubscriptionFilter, CfnTransformer, CfnInferenceScheduler, CfnAlert, CfnAnomalyDetector, CfnProject, CfnApplication, CfnDeployment, CfnEnvironment, CfnAllowList, CfnCustomDataIdentifier, CfnFindingsFilter, CfnSession, CfnAccessor, CfnMember, CfnNode, CfnBridge, CfnBridgeOutput, CfnBridgeSource, CfnFlow, CfnFlowEntitlement, CfnFlowOutput, CfnFlowSource, CfnFlowVpcInterface, CfnGateway, CfnJobTemplate, CfnPreset, CfnQueue, CfnChannel, CfnChannelPlacementGroup, CfnCloudWatchAlarmTemplate, CfnCloudWatchAlarmTemplateGroup, CfnCluster, CfnEventBridgeRuleTemplate, CfnEventBridgeRuleTemplateGroup, CfnInput, CfnInputSecurityGroup, CfnMultiplex, CfnMultiplexprogram, CfnNetwork, CfnSdiSource, CfnSignalMap, CfnAsset, CfnChannel, CfnOriginEndpoint, CfnPackagingConfiguration, CfnPackagingGroup, CfnChannel, CfnChannelGroup, CfnChannelPolicy, CfnOriginEndpoint, CfnOriginEndpointPolicy, CfnContainer, CfnChannel, CfnChannelPolicy, CfnLiveSource, CfnPlaybackConfiguration, CfnSourceLocation, CfnVodSource, CfnACL, CfnCluster, CfnMultiRegionCluster, CfnParameterGroup, CfnSubnetGroup, CfnUser, CfnBatchScramSecret, CfnCluster, CfnClusterPolicy, CfnConfiguration, CfnReplicator, CfnServerlessCluster, CfnVpcConnection, CfnEnvironment, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBParameterGroup, CfnDBSubnetGroup, CfnEventSubscription, CfnGraph, CfnPrivateGraphEndpoint, CfnFirewall, CfnFirewallPolicy, CfnLoggingConfiguration, CfnRuleGroup, CfnTLSInspectionConfiguration, CfnConnectAttachment, CfnConnectPeer, CfnCoreNetwork, CfnCustomerGatewayAssociation, CfnDevice, CfnDirectConnectGatewayAttachment, CfnGlobalNetwork, CfnLink, CfnLinkAssociation, CfnSite, CfnSiteToSiteVpnAttachment, CfnTransitGatewayPeering, CfnTransitGatewayRegistration, CfnTransitGatewayRouteTableAttachment, CfnVpcAttachment, CfnLaunchProfile, CfnStreamingImage, CfnStudio, CfnStudioComponent, CfnChannelAssociation, CfnEventRule, CfnManagedNotificationAccountContactAssociation, CfnManagedNotificationAdditionalChannelAssociation, CfnNotificationConfiguration, CfnNotificationHub, CfnEmailContact, CfnLink, CfnSink, CfnAnnotationStore, CfnReferenceStore, CfnRunGroup, CfnSequenceStore, CfnVariantStore, CfnWorkflow, CfnAccessPolicy, CfnCollection, CfnIndex, CfnLifecyclePolicy, CfnSecurityConfig, CfnSecurityPolicy, CfnVpcEndpoint, CfnApplication, CfnDomain, CfnApp, CfnElasticLoadBalancerAttachment, CfnInstance, CfnLayer, CfnStack, CfnUserProfile, CfnVolume, CfnServer, CfnAccount, CfnOrganization, CfnOrganizationalUnit, CfnPolicy, CfnResourcePolicy, CfnPipeline, CfnApplicationInstance, CfnPackage, CfnPackageVersion, CfnAlias, CfnKey, CfnConnector, CfnDirectoryRegistration, CfnServicePrincipalName, CfnTemplate, CfnTemplateGroupAccessControlEntry, CfnChallenge, CfnConnector, CfnCluster, CfnComputeNodeGroup, CfnQueue, CfnDataset, CfnDatasetGroup, CfnSchema, CfnSolution, CfnADMChannel, CfnAPNSChannel, CfnAPNSSandboxChannel, CfnAPNSVoipChannel, CfnAPNSVoipSandboxChannel, CfnApp, CfnApplicationSettings, CfnBaiduChannel, CfnCampaign, CfnEmailChannel, CfnEmailTemplate, CfnEventStream, CfnGCMChannel, CfnInAppTemplate, CfnPushTemplate, CfnSMSChannel, CfnSegment, CfnSmsTemplate, CfnVoiceChannel, CfnConfigurationSet, CfnConfigurationSetEventDestination, CfnDedicatedIpPool, CfnIdentity, CfnPipe, CfnEnvironmentAccountConnection, CfnEnvironmentTemplate, CfnServiceTemplate, CfnApplication, CfnDataAccessor, CfnDataSource, CfnIndex, CfnPermission, CfnPlugin, CfnRetriever, CfnWebExperience, CfnLedger, CfnStream, CfnAnalysis, CfnCustomPermissions, CfnDashboard, CfnDataSet, CfnDataSource, CfnFolder, CfnRefreshSchedule, CfnTemplate, CfnTheme, CfnTopic, CfnVPCConnection, CfnPermission, CfnResourceShare, CfnRule, CfnCustomDBEngineVersion, CfnDBCluster, CfnDBClusterParameterGroup, CfnDBInstance, CfnDBParameterGroup, CfnDBProxy, CfnDBProxyEndpoint, CfnDBProxyTargetGroup, CfnDBSecurityGroup, CfnDBSecurityGroupIngress, CfnDBShardGroup, CfnDBSubnetGroup, CfnEventSubscription, CfnGlobalCluster, CfnIntegration, CfnOptionGroup, CfnCluster, CfnClusterParameterGroup, CfnClusterSecurityGroup, CfnClusterSecurityGroupIngress, CfnClusterSubnetGroup, CfnEndpointAccess, CfnEndpointAuthorization, CfnEventSubscription, CfnIntegration, CfnScheduledAction, CfnNamespace, CfnWorkgroup, CfnApplication, CfnEnvironment, CfnRoute, CfnService, CfnCollection, CfnProject, CfnStreamProcessor, CfnApp, CfnResiliencyPolicy, CfnDefaultViewAssociation, CfnIndex, CfnView, CfnGroup, CfnTagSyncTask, CfnFleet, CfnRobot, CfnRobotApplication, CfnRobotApplicationVersion, CfnSimulationApplication, CfnSimulationApplicationVersion, CfnCRL, CfnProfile, CfnTrustAnchor, CfnCidrCollection, CfnDNSSEC, CfnHealthCheck, CfnHostedZone, CfnKeySigningKey, CfnRecordSet, CfnRecordSetGroup, CfnProfile, CfnProfileAssociation, CfnProfileResourceAssociation, CfnCluster, CfnControlPanel, CfnRoutingControl, CfnSafetyRule, CfnCell, CfnReadinessCheck, CfnRecoveryGroup, CfnResourceSet, CfnFirewallDomainList, CfnFirewallRuleGroup, CfnFirewallRuleGroupAssociation, CfnOutpostResolver, CfnResolverConfig, CfnResolverDNSSECConfig, CfnResolverEndpoint, CfnResolverQueryLoggingConfig, CfnResolverQueryLoggingConfigAssociation, CfnResolverRule, CfnResolverRuleAssociation, CfnAppMonitor, CfnAccessGrant, CfnAccessGrantsInstance, CfnAccessGrantsLocation, CfnAccessPoint, CfnBucket, CfnBucketPolicy, CfnMultiRegionAccessPoint, CfnMultiRegionAccessPointPolicy, CfnStorageLens, CfnStorageLensGroup, CfnBucketPolicy, CfnDirectoryBucket, CfnAccessPoint, CfnAccessPointPolicy, CfnAccessPoint, CfnBucket, CfnBucketPolicy, CfnEndpoint, CfnTableBucket, CfnTableBucketPolicy, CfnApp, CfnAppImageConfig, CfnCluster, CfnCodeRepository, CfnDataQualityJobDefinition, CfnDevice, CfnDeviceFleet, CfnDomain, CfnEndpoint, CfnEndpointConfig, CfnFeatureGroup, CfnImage, CfnImageVersion, CfnInferenceComponent, CfnInferenceExperiment, CfnMlflowTrackingServer, CfnModel, CfnModelBiasJobDefinition, CfnModelCard, CfnModelExplainabilityJobDefinition, CfnModelPackage, CfnModelPackageGroup, CfnModelQualityJobDefinition, CfnMonitoringSchedule, CfnNotebookInstance, CfnNotebookInstanceLifecycleConfig, CfnPartnerApp, CfnPipeline, CfnProject, CfnSpace, CfnStudioLifecycleConfig, CfnUserProfile, CfnWorkteam, CfnApi, CfnApplication, CfnFunction, CfnHttpApi, CfnLayerVersion, CfnSimpleTable, CfnStateMachine, CfnSchedule, CfnScheduleGroup, CfnDomain, CfnResourcePolicy, CfnRotationSchedule, CfnSecret, CfnSecretTargetAttachment, CfnAutomationRule, CfnConfigurationPolicy, CfnDelegatedAdmin, CfnFindingAggregator, CfnHub, CfnInsight, CfnOrganizationConfiguration, CfnPolicyAssociation, CfnProductSubscription, CfnSecurityControl, CfnStandard, CfnAwsLogSource, CfnDataLake, CfnSubscriber, CfnSubscriberNotification, CfnAcceptedPortfolioShare, CfnCloudFormationProduct, CfnCloudFormationProvisionedProduct, CfnLaunchNotificationConstraint, CfnLaunchRoleConstraint, CfnLaunchTemplateConstraint, CfnPortfolio, CfnPortfolioPrincipalAssociation, CfnPortfolioProductAssociation, CfnPortfolioShare, CfnResourceUpdateConstraint, CfnServiceAction, CfnServiceActionAssociation, CfnStackSetConstraint, CfnTagOption, CfnTagOptionAssociation, CfnApplication, CfnAttributeGroup, CfnAttributeGroupAssociation, CfnResourceAssociation, CfnHttpNamespace, CfnInstance, CfnPrivateDnsNamespace, CfnPublicDnsNamespace, CfnService, CfnConfigurationSet, CfnConfigurationSetEventDestination, CfnContactList, CfnDedicatedIpPool, CfnEmailIdentity, CfnMailManagerAddonInstance, CfnMailManagerAddonSubscription, CfnMailManagerArchive, CfnMailManagerIngressPoint, CfnMailManagerRelay, CfnMailManagerRuleSet, CfnMailManagerTrafficPolicy, CfnReceiptFilter, CfnReceiptRule, CfnReceiptRuleSet, CfnTemplate, CfnVdmAttributes, CfnDRTAccess, CfnProactiveEngagement, CfnProtection, CfnProtectionGroup, CfnProfilePermission, CfnSigningProfile, CfnSimulation, CfnSubscription, CfnTopic, CfnTopicInlinePolicy, CfnTopicPolicy, CfnQueue, CfnQueueInlinePolicy, CfnQueuePolicy, CfnAssociation, CfnDocument, CfnMaintenanceWindow, CfnMaintenanceWindowTarget, CfnMaintenanceWindowTask, CfnParameter, CfnPatchBaseline, CfnResourceDataSync, CfnResourcePolicy, CfnContact, CfnContactChannel, CfnPlan, CfnRotation, CfnReplicationSet, CfnResponsePlan, CfnConfigurationManager, CfnApplication, CfnApplicationAssignment, CfnAssignment, CfnInstance, CfnInstanceAccessControlAttributeConfiguration, CfnPermissionSet, CfnActivity, CfnStateMachine, CfnStateMachineAlias, CfnStateMachineVersion, CfnAccountAlias, CfnSlackChannelConfiguration, CfnSlackWorkspaceConfiguration, CfnCanary, CfnGroup, CfnApplication, CfnDatabase, CfnInfluxDBInstance, CfnScheduledQuery, CfnTable, CfnAgreement, CfnCertificate, CfnConnector, CfnProfile, CfnServer, CfnUser, CfnWebApp, CfnWorkflow, CfnIdentitySource, CfnPolicy, CfnPolicyStore, CfnPolicyTemplate, CfnDomain, CfnAccessLogSubscription, CfnAuthPolicy, CfnListener, CfnResourceConfiguration, CfnResourceGateway, CfnResourcePolicy, CfnRule, CfnService, CfnServiceNetwork, CfnServiceNetworkResourceAssociation, CfnServiceNetworkServiceAssociation, CfnServiceNetworkVpcAssociation, CfnTargetGroup, CfnByteMatchSet, CfnIPSet, CfnRule, CfnSizeConstraintSet, CfnSqlInjectionMatchSet, CfnWebACL, CfnXssMatchSet, CfnByteMatchSet, CfnGeoMatchSet, CfnIPSet, CfnRateBasedRule, CfnRegexPatternSet, CfnRule, CfnSizeConstraintSet, CfnSqlInjectionMatchSet, CfnWebACL, CfnWebACLAssociation, CfnXssMatchSet, CfnIPSet, CfnLoggingConfiguration, CfnRegexPatternSet, CfnRuleGroup, CfnWebACL, CfnWebACLAssociation, CfnAIAgent, CfnAIAgentVersion, CfnAIGuardrail, CfnAIGuardrailVersion, CfnAIPrompt, CfnAIPromptVersion, CfnAssistant, CfnAssistantAssociation, CfnKnowledgeBase, CfnMessageTemplate, CfnMessageTemplateVersion, CfnConnectionAlias, CfnWorkspace, CfnWorkspacesPool, CfnEnvironment, CfnBrowserSettings, CfnDataProtectionSettings, CfnIdentityProvider, CfnIpAccessSettings, CfnNetworkSettings, CfnPortal, CfnTrustStore, CfnUserAccessLoggingSettings, CfnUserSettings, CfnGroup, CfnResourcePolicy, CfnSamplingRule, CfnTransactionSearchConfig, CfnCustomResource, CfnGuardHook, CfnHookDefaultVersion, CfnHookTypeConfig, CfnHookVersion, CfnLambdaHook, CfnMacro, CfnMapping, CfnModuleDefaultVersion, CfnModuleVersion, CfnPublicTypeVersion, CfnPublisher, CfnResource, CfnResourceDefaultVersion, CfnResourceVersion, CfnRule, CfnStack, CfnStackSet, CfnTypeActivation, CfnWaitCondition, CfnWaitConditionHandle
Base class for referencable CloudFormation constructs which are not Resources.
These constructs are things like Conditions and Parameters, can be
referenced by taking the .ref attribute.
Resource constructs do not inherit from CfnRefElement because they have their
own, more specific types returned from the .ref attribute. Also, some
resources aren't referencable at all (such as BucketPolicies or GatewayAttachments).
Initializer
new CfnRefElement(scope: Construct, id: string)

Parameters

scope Construct  — The parent construct.
id string

Creates an entity and binds it to a tree.
Note that the root of the tree must be a Stack object (not just any Root).
Properties


NameTypeDescription


creationStackstring[]
logicalIdstringThe logical ID for this CloudFormation stack element.
nodeNodeThe tree node.
refstringReturn a string that will be resolved to a CloudFormation { Ref } for this element.
stackStackThe stack in which this element is defined.



creationStack
Type:
string[]

logicalId
Type:
string
The logical ID for this CloudFormation stack element.
The logical ID of the element
is calculated from the path of the resource node in the construct tree.
To override this value, use overrideLogicalId(newLogicalId).

node
Type:
Node
The tree node.

ref
Type:
string
Return a string that will be resolved to a CloudFormation { Ref } for this element.
If, by any chance, the intrinsic reference of a resource is not a string, you could
coerce it to an IResolvable through Lazy.any({ produce: resource.ref }).

stack
Type:
Stack
The stack in which this element is defined.
CfnElements must be defined within a stack scope (directly or indirectly).
Methods


NameDescription


overrideLogicalId(newLogicalId)Overrides the auto-generated logical ID with a specific ID.
toString()Returns a string representation of this construct.



overrideLogicalId(newLogicalId)
public overrideLogicalId(newLogicalId: string): void

Parameters

newLogicalId string  — The new logical ID to use for this stack element.

Overrides the auto-generated logical ID with a specific ID.

toString()
public toString(): string

Returns

string

Returns a string representation of this construct.\n\n\n\n