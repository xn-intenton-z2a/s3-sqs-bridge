# .github/workflows/agent-issue-to-code.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: agent-issue-to-code
concurrency: agentic-lib-commit-main
run-name: "agent-issue-to-code [${{ github.ref_name }}]"

on:
  workflow_dispatch:
    inputs:
      issueNumber:
        description: 'The issue number to resolve. If not provided, the workflow will select one based on label. e.g. "123"'
        required: false
        type: string
        default: ''
      target:
        description: 'The source file whose content is used in the resolution prompt. e.g. "src/lib/main.js"'
        required: false
        type: string
        default: 'src/lib/main.js'
      testFile:
        description: 'The test file to run to validate the resolution. e.g. "tests/unit/main.test.js"'
        required: false
        type: string
        default: 'tests/unit/main.test.js'
      selectionLabel:
        description: 'Label used to filter issues for resolution. e.g. "automated"'
        required: false
        type: string
        default: 'automated'
  workflow_run:
    workflows:
      - agent-feature-to-issue
      - agent-prompt-to-issue
      - agent-linting-to-issue
      #- agent-issue-to-ready-issue
    types:
      - completed
  schedule:
    - cron: '50 */12 * * *' # schedule-1
    #- cron: '50 */4 * * *' # schedule-2
    #- cron: '50 */1 * * *' # schedule-3
    #- cron: '50 */1 * * *' # schedule-4

env:
  npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
  public: ${{ vars.public || 'public' }}
  s3BucketUrl: ${{ vars.s3BucketUrl || 's3://agentic-lib-telemetry-bucket/events/' }}
  s3WebsiteBucketUrl: ${{ vars.s3WebsiteBucketUrl || 's3://agentic-lib-public-website-stats-bucket/' }}
  iamActionsRoleArn: ${{ vars.iamActionsRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role' }}ยง
  iamStatsBucketWriterRoleArn: ${{ vars.iamStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role' }}
  iamPublicWebsiteStatsBucketWriterRoleArn: ${{ vars.iamPublicWebsiteStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role' }}

jobs:

  agentic-lib:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Configure npm for GitHub Packages
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Install dependencies
        run: npm ci

      - name: agentic-lib
        id: agentic-lib
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const yaml = require('js-yaml');

            // Default values
            let attemptsPerIssue = "2";
            let srcPath = "src/lib/";
            let testsPath = "tests/unit/";
            let docsPath = "docs/";
            let writeableFilepaths = [];

            // Check if agentic-lib.yml exists
            const configPath = path.join('.github', 'agentic-lib.yml');
            if (fs.existsSync(configPath)) {
              try {
                // Read and parse the YAML file
                const fileContents = fs.readFileSync(configPath, 'utf8');
                const config = yaml.load(fileContents);

                // Extract attemptsPerIssue
                if (config.attemptsPerIssue) {
                  attemptsPerIssue = config.attemptsPerIssue.toString();
                } else {
                  console.log(`Warning: attemptsPerIssue not found in .github/agentic-lib.yml, using default value: ${attemptsPerIssue}`);
                }

                // Extract src path from writeableFilepaths
                if (config.writeableFilepaths && config.writeableFilepaths.src) {
                  srcPath = config.writeableFilepaths.src.replace(/"/g, '');
                } else {
                  console.log(`Warning: src path not found in writeableFilepaths in .github/agentic-lib.yml, using default value: ${srcPath}`);
                }

                // Extract tests path from writeableFilepaths
                if (config.writeableFilepaths && config.writeableFilepaths.tests) {
                  testsPath = config.writeableFilepaths.tests.replace(/"/g, '');
                } else {
                  console.log(`Warning: tests path not found in writeableFilepaths in .github/agentic-lib.yml, using default value: ${testsPath}`);
                }

                // Extract docs path from writeableFilepaths
                if (config.writeableFilepaths && config.writeableFilepaths.docs) {
                  docsPath = config.writeableFilepaths.docs.replace(/"/g, '');
                } else {
                  console.log(`Warning: docs path not found in writeableFilepaths in .github/agentic-lib.yml, using default value: ${docsPath}`);
                }

                // Extract all writeable filepaths
                if (config.writeableFilepaths) {
                  writeableFilepaths = Object.values(config.writeableFilepaths)
                    .filter(value => value && value.trim() !== '')
                    .map(value => value.replace(/"/g, ''));
                }
              } catch (error) {
                console.log(`Error parsing .github/agentic-lib.yml: ${error.message}`);
                console.log(`Using default values: attemptsPerIssue=${attemptsPerIssue}, srcPath=${srcPath}, testsPath=${testsPath}, docsPath=${docsPath}`);
              }
            } else {
              console.log(`Warning: .github/agentic-lib.yml file not found, using default values: attemptsPerIssue=${attemptsPerIssue}, srcPath=${srcPath}, testsPath=${testsPath}, docsPath=${docsPath}`);
            }

            // Set outputs
            console.log(`attemptsPerIssue=${attemptsPerIssue}`);
            core.setOutput('attemptsPerIssue', attemptsPerIssue);

            console.log(`srcPath=${srcPath}`);
            core.setOutput('srcPath', srcPath);

            console.log(`testsPath=${testsPath}`);
            core.setOutput('testsPath', testsPath);

            console.log(`docsPath=${docsPath}`);
            core.setOutput('docsPath', docsPath);

            console.log(`writeableFilepaths=${JSON.stringify(writeableFilepaths)}`);
            core.setOutput('writeableFilepaths', JSON.stringify(writeableFilepaths));
    outputs:
      attemptsPerIssue: ${{ steps.agentic-lib.outputs.attemptsPerIssue }}
      writeableFilepaths: ${{ steps.agentic-lib.outputs.writeableFilepaths }}
      srcPath: ${{ steps.agentic-lib.outputs.srcPath }}
      testsPath: ${{ steps.agentic-lib.outputs.testsPath }}
      docsPath: ${{ steps.agentic-lib.outputs.docsPath }}

  select-issue:
    permissions:
      issues: read
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-select-issue.yml@3.15.0'
    with:
      issueNumber: ${{ inputs.issueNumber || '' }}
      selectionLabel: ${{ inputs.selectionLabel || 'automated' }}
    secrets:
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  needs-resolution:
    needs:
      - select-issue
    runs-on: ubuntu-latest
    steps:
      - name: todo
        shell: bash
        run: |
          echo "TODO: Check if this issue has been resolved already by examining the current state and recent commits"

  check-attempts-limit:
    needs:
      - agentic-lib
      - select-issue
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      id-token: write
    env:
      issueNumber: ${{ needs.select-issue.outputs.issueNumber }}
      attemptsPerIssue: ${{ needs.agentic-lib.outputs.attemptsPerIssue }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci
      - name: check
        id: check
        if: ${{ env.issueNumber != '' && env.attemptsPerIssue != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = "${{ env.issueNumber }}";
            const attemptsPerIssue = parseInt("${{ env.attemptsPerIssue }}");

            // If attempts to [work++fix] a branch exceed the limit as per agentic-lib.yml, then comment the issue and close it      
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            const issueLabelsStartingWithApplyFix = issue.labels.filter(label => label.name.startsWith("apply-fix-"));
            const issueLabelsStartingWithIssueWorker = issue.labels.filter(label => label.name.startsWith("issue-worker-"));
            const attemptsOnIssue = issueLabelsStartingWithApplyFix.length + issueLabelsStartingWithIssueWorker.length
            if(attemptsOnIssue >= attemptsPerIssue) {
               const message = `Reached the limit of ${attemptsPerIssue} attempts with ${attemptsOnIssue} attempts.`;

              // Comment the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: message
              });

              // Close the issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: "closed"
              });

              core.setFailure(`${message}`);
            }

            core.setOutput("attemptsOnIssue", attemptsOnIssue);
            core.info(`attemptsOnIssue: ${attemptsOnIssue}`);
    outputs:
      attemptsOnIssue: ${{ steps.check.outputs.attemptsOnIssue }}

  npm-test:
    name: 'npm test with coverage'
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci
      - run: npm run test:unit

  npm-build:
    name: 'npm run build'
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci
      - run: npm run build

  npm-run:
    name: 'npm run start'
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci
      - run: ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  check-branch:
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
      - npm-test
      - npm-build
      - npm-run
    if: ${{ needs.select-issue.outputs.issueNumber != '' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      branchPrefix: 'agentic-lib-'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - name: Ensure there isn't already a branch for this prefix
        shell: bash
        run: |
          git fetch origin
          if git branch -r | grep -q 'origin/${{ env.branchPrefix }}'; then
            echo "A branch with the prefix '${{ env.branchPrefix }}' already exists."
            exit 1
          else
            echo "No existing branch with the prefix found."
          fi

  label-issue-before-attempt:
    needs:
      - select-issue
      - check-attempts-limit
      - needs-resolution
      - npm-test
      - npm-build
      - npm-run
      - check-branch
    if: ${{ needs.select-issue.outputs.issueNumber != '' }}
    permissions:
      contents: write
      issues: write
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Add "issueWorker-<run-id>" and "in-progress" labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: "${{ needs.select-issue.outputs.issueNumber }}",
              labels: [`issue-worker-${{ github.run_id }}`, `in-progress`]
            });

  apply-issue-resolution:
    needs:
      - agentic-lib
      - select-issue
      - needs-resolution
      - check-attempts-limit
      - npm-test
      - npm-build
      - npm-run
      - check-branch
    if: ${{ needs.select-issue.outputs.issueNumber != '' }}
    permissions:
      contents: write
      issues: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-completion-apply-issue-resolution.yml@3.15.0'
    with:
      issueNumber: ${{ needs.select-issue.outputs.issueNumber }}
      target: ${{ inputs.target || format('{0}main.js', needs.agentic-lib.outputs.srcPath) }}
      testFile: ${{ inputs.testFile || format('{0}main.test.js', needs.agentic-lib.outputs.testsPath) }}
      readmeFile: 'README.md'
      docsFile: ${{ format('{0}USAGE.md', needs.agentic-lib.outputs.docsPath) }}
      missionFile: 'MISSION.md'
      contributingFile: 'CONTRIBUTING.md'
      dependenciesFile: 'package.json'
      formattingFile: '.prettierrc'
      lintingFile: 'eslint.config.js'
      branchPrefix: 'agentic-lib-issue-'
      buildScript: 'npm run build'
      testScript: 'npm test'
      mainScript: ${{ vars.MAIN_SCRIPT || 'npm run start' }}
      model: ${{ vars.CHATGPT_API_MODEL || 'o3-mini' }}
      npmAuthOrganisation: '@xn-intenton-z2a'
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
      allowedFilepathPatterns: ${{ needs.agentic-lib.outputs.writeableFilepaths }}
    secrets:
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  npm-test-after-issue-resolution:
    needs:
      - needs-resolution
      - check-attempts-limit
      - npm-test
      - npm-build
      - npm-run
      - apply-issue-resolution
    name: 'npm test with coverage'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.apply-issue-resolution.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.apply-issue-resolution.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci
      - run: npm run test:unit

  npm-build-after-issue-resolution:
    needs:
      - needs-resolution
      - check-attempts-limit
      - npm-test
      - npm-build
      - npm-run
      - apply-issue-resolution
    name: 'npm run build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.apply-issue-resolution.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.apply-issue-resolution.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci
      - run: npm run build

  npm-run-after-issue-resolution:
    needs:
      - needs-resolution
      - check-attempts-limit
      - npm-test
      - npm-build
      - npm-run
      - apply-issue-resolution
    name: 'npm run start'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.apply-issue-resolution.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.apply-issue-resolution.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci
      - run: ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  needs-fix-after-issue-resolution:
    needs:
      - needs-resolution
      - check-attempts-limit
      - npm-test
      - npm-build
      - npm-run
      - apply-issue-resolution
      - npm-test-after-issue-resolution
      - npm-build-after-issue-resolution
      - npm-run-after-issue-resolution
    if: >
      ${{ always() &&
         (
           needs.npm-test-after-issue-resolution.result != 'success' ||
           needs.npm-build-after-issue-resolution.result != 'success' ||
           needs.npm-run-after-issue-resolution.result != 'success'
         )
      }}
    runs-on: ubuntu-latest
    steps:
      - name: set-needs-fix
        id: set-needs-fix
        uses: actions/github-script@v7
        with:
          script: |
            const anySkipped = "${{ needs.npm-test-after-issue-resolution.result == 'skipped' || needs.npm-build-after-issue-resolution.result == 'skipped' || needs.npm-run-after-issue-resolution.result == 'skipped' }}" === "true";
            const anyDidntSucceed = "${{ needs.npm-test-after-issue-resolution.result != 'success' || needs.npm-build-after-issue-resolution.result != 'success' || needs.npm-run-after-issue-resolution.result != 'success' }}" === "true";
            const readyToMerge = !anySkipped && !anyDidntSucceed;

            core.setOutput("anySkipped", anySkipped);
            core.setOutput("anyDidntSucceed", anyDidntSucceed);
            core.setOutput("readyToMerge", readyToMerge);     

            core.info(`Any skipped: ${anySkipped}`);
            core.info(`Any didn't succeed: ${anyDidntSucceed}`);
            core.info(`Ready to merge: ${readyToMerge}`);

    outputs:
      allSkipped: ${{ steps.set-needs-fix.outputs.allSkipped }}
      anyDidntSucceed: ${{ steps.set-needs-fix.outputs.anyDidntSucceed }}
      readyToMerge: ${{ steps.set-needs-fix.outputs.readyToMerge }}

  create-pr:
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
      - apply-issue-resolution
      - needs-fix-after-issue-resolution
    if: ${{ needs.select-issue.outputs.issueNumber != '' && needs.apply-issue-resolution.outputs.fixApplied == 'true' && needs.needs-fix-after-issue-resolution.outputs.readyToMerge == 'true' }}
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
      checks: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-create-pr.yml@3.15.0'
    with:
      branch: '${{ needs.apply-issue-resolution.outputs.branch }}'
      baseBranch: 'main'
      gitCommitMessage: "${{ needs.apply-issue-resolution.outputs.message }} (fixes #${{ needs.select-issue.outputs.issueNumber }})"
      label: 'automerge'

  stats:
    needs:
      - select-issue
      - apply-issue-resolution
      - create-pr
    if: ${{ always() }}
    permissions:
      contents: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-stats-to-aws.yml@3.15.0'
    with:
      cache: 'npm'
      npmAuthOrganisation: "${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}"
      lastActivityName: "${{ github.workflow }}"
      lastActivityBranchName: "${{ github.ref_name }}"
      nextIssue: "[${{ needs.select-issue.outputs.issueNumber }}] ${{ needs.select-issue.outputs.issueTitle }} ${{ needs.select-issue.outputs.issueLabels }}"
      public: 'public'
      s3BucketUrl: "${{ vars.s3BucketUrl || 's3://agentic-lib-telemetry-bucket/events/' }}"
      s3WebsiteBucketUrl: "${{ vars.s3WebsiteBucketUrl || 's3://agentic-lib-public-website-stats-bucket/' }}"
      iamActionsRoleArn: "${{ vars.iamActionsRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role' }}"
      iamStatsBucketWriterRoleArn: "${{ vars.iamStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role' }}"
      iamPublicWebsiteStatsBucketWriterRoleArn: "${{ vars.iamPublicWebsiteStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role' }}"
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
