# .github/workflows/agent-flow-fix-code.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: flow-fix-code
concurrency: agentic-lib-main
run-name: "flow fix code [${{ github.ref_name }}]"

on:
  workflow_dispatch:
    inputs:
      branchPrefix:
        description: 'The prefix of the branch to scan for. e.g. "agentic-lib-"'
        required: false
        type: string
        default: 'agentic-lib-'
      applyFixEvenIfTestsPass:
        description: 'Apply the fix even if the tests pass. e.g. true'
        required: false
        type: boolean
        default: false
      scanForBranches:
        description: 'Scan for branches matching the pattern. e.g. true'
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      branchPrefix:
        description: 'The prefix of the branch to scan for. e.g. "agentic-lib-"'
        required: false
        type: string
        default: 'agentic-lib-'
      applyFixEvenIfTestsPass:
        description: 'Apply the fix even if the tests pass. e.g. true'
        required: false
        type: boolean
        default: false
      scanForBranches:
        description: 'Scan for branches matching the pattern. e.g. true'
        required: false
        type: boolean
        default: false
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
  #workflow_run:
  #  workflows:
  #    - seed-repository
  #  types:
  #    - completed
  schedule:
    - cron: '44 6 */28 * *' # schedule-1
    #- cron: '44 */4 * * *' # schedule-2
    #- cron: '44 * * * *' # schedule-3
    #- cron: '44 * * * *' # schedule-4

env:
  gitUserEmail: 'action@github.com'
  gitUserName: 'GitHub Actions[bot]'
  npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
  s3BucketUrl: ${{ vars.s3BucketUrl || 's3://agentic-lib-telemetry-bucket/events/' }}
  s3WebsiteBucketUrl: ${{ vars.s3WebsiteBucketUrl || 's3://agentic-lib-public-website-stats-bucket/' }}
  iamActionsRoleArn: ${{ vars.iamActionsRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role' }}
  iamStatsBucketWriterRoleArn: ${{ vars.iamStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role' }}
  iamPublicWebsiteStatsBucketWriterRoleArn: ${{ vars.iamPublicWebsiteStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role' }}

jobs:

  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check if CHATGPT_API_SECRET_KEY is available
        run: |
          if [ -z "${{ secrets.CHATGPT_API_SECRET_KEY }}" ]; then
            echo "::error::CHATGPT_API_SECRET_KEY is not available. Stopping workflow."
            exit 1
          fi
          echo "CHATGPT_API_SECRET_KEY is available."

  agentic-lib:
    needs:
      - check-secrets
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-agent-config.yml@6.10.1'
    with:
      configPath: ${{ vars.configPath || '.github/agents/agentic-lib.yml' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # GitHub Script job which checks if the target path starts with one of writeableFilepaths and fails out if not
  check-writeable-filepaths:
    needs:
      - agentic-lib
    runs-on: ubuntu-latest
    steps:
      - name: Check if target is writeable
        id: check-writeable-filepaths
        uses: actions/github-script@v7
        env:
          targetFilepath1: ${{ needs.agentic-lib.outputs.targetTestsPath }}
          targetFilepath2: ${{ needs.agentic-lib.outputs.targetSourcePath }}
          targetFilepath3: ${{ needs.agentic-lib.outputs.dependenciesFilepath }}
          targetFilepath4: ${{ needs.agentic-lib.outputs.documentationPath }}
          writeableFilepaths: ${{ needs.agentic-lib.outputs.writeableFilepaths }}
        with:
          script: |
            const writeableFilepaths = process.env.writeableFilepaths.split(';');
            let targetFilepath1;
            let targetFilepath2;
            let targetFilepath3;
            let targetFilepath4;
            targetFilepath1 = process.env.targetFilepath1;
            targetFilepath2 = process.env.targetFilepath2;
            targetFilepath3 = process.env.targetFilepath3;
            targetFilepath4 = process.env.targetFilepath4;
            if (!writeableFilepaths.some(path => targetFilepath1.startsWith(path) ||  targetFilepath2.startsWith(path) || targetFilepath3.startsWith(path) || targetFilepath4.startsWith(path))) {
              core.setFailed(`None of the targetFilepaths "${targetFilepath1}", "${targetFilepath2}", "${targetFilepath3}", and "${targetFilepath4}" are in the list of writeable filepaths.`);
              return;
            } else {
              core.info(`One of the targetFilepaths "${targetFilepath1}", "${targetFilepath2}", "${targetFilepath3}", or "${targetFilepath4}" is in the list of writeable filepaths.`);
            }

  select-branch:
    needs:
      - agentic-lib
      - check-writeable-filepaths
    runs-on: ubuntu-latest
    env:
      branchPrefix: ${{ inputs.branchPrefix || 'agentic-lib-' }}
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: |
          git fetch --all
          git branch -r

      - name: determine-branch and auto-resolve merge conflicts
        id: determine
        uses: actions/github-script@v7
        env:
          attemptsPerBranch: ${{ needs.agentic-lib.outputs.attemptsPerBranch }}
          scanForBranches: ${{ inputs.scanForBranches }}
        with:
          script: |
            const gitUserEmail = process.env.gitUserEmail;
            const gitUserName = process.env.gitUserName;
            const { execSync } = require('child_process');
            const attemptsPerBranch = process.env.attemptsPerBranch;
            // Use the branch prefix from env (ensure process.env.branchPrefix is defined)
            const prefix = process.env.branchPrefix || "agentic-lib-";
            const scanForBranches = process.env.scanForBranches;

            let branch;
            // Determine branch using schedule or ref
            if (context.eventName === "schedule" || context.eventName === "workflow_run" || scanForBranches === "true") {
              core.info("Schedule event detected. Scanning for matching branches.");
              const branchesResp = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              const matchingBranches = branchesResp.data
                .filter(b => new RegExp(`^${prefix}`).test(b.name))
                .map(b => b.name);
              core.info(`Matching branches: ${matchingBranches}`);

              // Check if any of the matching branches have a PR open
              const openPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
              });
              if (matchingBranches && matchingBranches.length <= 0) {
                core.info("No matching branches found.");
              } else {
                core.info(`Matching branches count: ${matchingBranches.length}`);
                if (openPRs.data.length <= 0) {
                  core.info("No open PRs found using first matching branch.");
                  branch = matchingBranches[0];
                } else {
                  core.info(`Open PRs: ${openPRs.data.map(pr => pr.head.ref)}`);
                  const matchingBranchesWithNoPRs = matchingBranches.filter(b => !openPRs.data.some(pr => pr.head.ref === b));
                  if(matchingBranchesWithNoPRs.length > 0) {
                    core.info(`Matching branches with ${prefix} and no PRs: ${matchingBranchesWithNoPRs}`);
                    branch = matchingBranchesWithNoPRs[0];
                  } else {
                    core.info(`No matching branches with ${prefix} but without PRs found.`);
                  }
                }
              }
            } else {
              branch = context.ref.startsWith("refs/heads/") ? context.ref.substring("refs/heads/".length) : context.ref;
            }
            core.info(`Selected branch: ${branch}`);
            core.setOutput("branch", branch);

            if (branch === "main") {
              core.info("Main branch selected. Skipping auto-resolution.");
              core.setOutput("issueNumber", undefined);
              core.info(`Issue number: no issue number attached to main`);
              core.setOutput("conflictsDetected", "false");
              core.setOutput("conflictsResolved", "true");
            } else if ( branch ){

              // Extract issue number from branch name using branchPrefix.
              const issueNumberMatch = branch.match(new RegExp(`${prefix}issue-(\\d+)`));
              const issueNumber = issueNumberMatch ? issueNumberMatch[1] : '';
              core.setOutput("issueNumber", issueNumber);
              core.info(`Issue number: ${issueNumber}`);

              core.info("Detect and resolve merge conflicts between the selected branch and main.");
              execSync(`git config --local user.email '${gitUserEmail}'`, { stdio: 'pipe' });
              execSync(`git config --local user.name '${gitUserName}'`, { stdio: 'pipe' });
              execSync("git status -v", { stdio: 'pipe' });
              execSync(`git checkout origin/${branch}`, { stdio: 'pipe' });
              try {
                core.info("Fetching main branch...");
                execSync("git fetch origin main", { stdio: 'pipe' });
                core.info("Attempting a dry-run merge of main into the branch...");
                // Attempt dry-run merge without committing.
                execSync("git merge origin/main --no-commit --no-ff", { stdio: 'pipe' });
                core.info("No merge conflicts detected.");
                // Abort the merge attempt.
                //execSync("git merge --abort", { stdio: 'pipe' });
                //core.setOutput("conflictsDetected", "false");
                //core.setOutput("conflictsResolved", "true");
              } catch (err) {
                core.info(`Merge conflicts detected. ${err.message}`);
                core.setOutput("conflictsDetected", "true");
                try {
                  core.info("Attempting auto-resolution by accepting main's changes...");
                  // Auto-resolve by checking out the version from main for all conflicting files.
                  execSync("git checkout --theirs .", { stdio: 'pipe' });
                  execSync("git add .", { stdio: 'pipe' });
                  execSync("git commit -m 'Auto-resolved merge conflicts: accepted main changes'", { stdio: 'pipe' });
                  core.info("Auto-resolution succeeded.");
                  core.setOutput("conflictsResolved", "true");
                } catch (e) {
                  core.error("Auto-resolution failed: " + e.message);
                  core.setOutput("conflictsResolved", "false");
                }
              }
            } else {
              core.info("No branch selected. Skipping auto-resolution.");
              core.setOutput("issueNumber", undefined);
              core.info(`Issue number: no branch found for issue number`);
              core.setOutput("conflictsDetected", "false");
              core.setOutput("conflictsResolved", "true");
            }
    outputs:
      branch: ${{ steps.determine.outputs.branch }}
      issueNumber: ${{ steps.determine.outputs.issueNumber }}

  check-attempts-limit:
    needs:
      - agentic-lib
      - select-branch
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      id-token: write
    env:
      issueNumber: ${{ needs.select-branch.outputs.issueNumber }}
      branch: ${{ needs.select-branch.outputs.branch }}
      attemptsPerBranch: ${{ needs.agentic-lib.outputs.attemptsPerBranch }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: |
          echo 'issueNumber: ${{ env.issueNumber }}'
          echo 'attemptsPerBranch: ${{ env.attemptsPerBranch }}'
          echo 'branch: ${{ env.branch }}'
      - id: validate-issue-number
        run: |
          issueNumber="${{ env.issueNumber }}"
          if [[ -n "$issueNumber" && "$issueNumber" =~ [0-9] ]]; then
            echo "[$issueNumber] is a valid issue number."
            echo "isValid=true" >> $GITHUB_OUTPUT
          else
            echo "[$issueNumber] is not a valid issue number."
            echo "isValid=false" >> $GITHUB_OUTPUT
          fi
      - name: check
        id: check
        if: ${{ steps.validate-issue-number.outputs.isValid == 'true' && env.attemptsPerBranch != '' && env.branch != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = process.env.issueNumber;
            const attemptsPerBranchStr = process.env.attemptsPerBranch;
            const attemptsPerBranch = (parseInt(attemptsPerBranchStr) ? parseInt(attemptsPerBranchStr) : "");
            const branch = process.env.branch;
            core.info(`Checking attempts limit for branch: ${branch} for issue number: ${issueNumber} with max attempts per branch: ${attemptsPerBranch}`);

            // If attempts to [work++fix] a branch exceed the limit as per agentic-lib.yml, then comment the issue and delete the branch.       
            core.info(`Retrieving issue ${issueNumber} details...`);
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            core.info(`Issue title: ${issue.title}`);
            const issueLabelsStartingWithApplyFix = issue.labels.filter(label => label.name.startsWith("apply-fix-"));
            const issueLabelsStartingWithIssueWorker = issue.labels.filter(label => label.name.startsWith("issue-worker-"));
            const attemptsOnBranch = issueLabelsStartingWithApplyFix.length + issueLabelsStartingWithIssueWorker.length
            if(attemptsPerBranch && attemptsOnBranch >= attemptsPerBranch) {
               const message = `${branch} has Reached the limit of ${attemptsPerBranch} attempts with ${attemptsOnBranch} attempts.`;

              // Delete the branch if it isn't main
              if (branch === "main") {
                core.info(`Skipping branch delete but ${message}`);
              } else {
                core.info(`Deleting branch ${branch} because ${message}`);
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branch}`
                });
                core.info(`Deleted branch ${branch}.`);
              }

              // Remove the issueLabelsStartingWithApplyFix labels now that the branch has been deleted
              for (const label of issueLabelsStartingWithApplyFix) {
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    name: label.name
                  });
              }

              // Comment the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: message
              });

              core.setFailed(`${message}`);
              return;
            }

            core.setOutput("attemptsOnBranch", attemptsOnBranch);
            core.info(`attemptsOnBranch: ${attemptsOnBranch}`);
    outputs:
      attemptsOnBranch: ${{ steps.check.outputs.attemptsOnBranch }}

  npm-test:
    needs:
      - select-branch
      - check-attempts-limit
    name: 'npm test with coverage'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: npm run test:unit

  npm-build:
    needs:
      - select-branch
      - check-attempts-limit
    name: 'npm run build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: npm run build

  npm-run:
    needs:
      - select-branch
      - check-attempts-limit
    name: 'npm run start'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  needs-fix:
    needs:
      - select-branch
      - check-attempts-limit
      - npm-test
      - npm-build
      - npm-run
    if: >
      ${{ !cancelled() &&
         (
           needs.npm-test.result != 'success' ||
           needs.npm-build.result != 'success' ||
           needs.npm-run.result != 'success' ||
           inputs.applyFixEvenIfTestsPass == true
         )
      }}
    runs-on: ubuntu-latest
    steps:
      - name: set-needs-fix
        id: set-needs-fix
        uses: actions/github-script@v7
        with:
          script: |
            const npmTestResult = "${{ needs.npm-test.result }}";
            const npmBuildResult = "${{ needs.npm-build.result }}";
            const npmRunResult = "${{ needs.npm-run.result }}";
            const applyFixEvenIfTestsPass = "${{ inputs.applyFixEvenIfTestsPass }}" === "true";
            const needsFix = npmTestResult !== "success" || npmBuildResult !== "success" || npmRunResult !== "success" || applyFixEvenIfTestsPass;
            core.info(`Needs Fix: ${needsFix}`);
            core.setOutput("needsFix", needsFix);
    outputs:
      needsFix: ${{ steps.set-needs-fix.outputs.needsFix }}

  validate-issue-number:
    needs:
      - select-branch
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    steps:
      - id: validate-issue-number
        run: |
          issueNumber="${{ needs.select-branch.outputs.issueNumber }}"
          if [[ -n "$issueNumber" && "$issueNumber" =~ [0-9] ]]; then
            echo "[$issueNumber] is a valid issue number."
            echo "isValid=true" >> $GITHUB_OUTPUT
          else
            echo "[$issueNumber] is not a valid issue number."
            echo "isValid=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      isValid: ${{ steps.validate-issue-number.outputs.isValid }}

  label-issue-before-attempt:
    needs:
      - select-branch
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - validate-issue-number
    if: ${{ !cancelled() && needs.needs-fix.outputs.needsFix == 'true' && needs.validate-issue-number.outputs.isValid == 'true' }}
    permissions:
      contents: write
      issues: write
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Add "issueWorker-<run-id>" label
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: "${{ needs.select-branch.outputs.issueNumber }}",
              labels: [`apply-fix-${{ github.run_id }}`]
            });

  branch-for-fix:
    needs:
      - select-branch
      - needs-fix
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    env:
      branchPrefix: 'agentic-lib-issue-'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.select-branch.outputs.branch }}
          fetch-depth: 0
      - name: create-branch-if-required
        id: create-branch-if-required
        run: |
          if [[ '${{ needs.select-branch.outputs.branch }}' == 'main' && '${{ needs.needs-fix.outputs.needsFix }}' == 'true' ]] ; then
            echo 'Creating or force pushing to branch: ${{ env.branchPrefix }}fix-main'
            git switch --force-create '${{ env.branchPrefix }}fix-main'
            git push -v --force origin '${{ env.branchPrefix }}fix-main'
            echo 'branch=${{ env.branchPrefix }}fix-main' >> $GITHUB_OUTPUT
          else
            echo 'Retaining existing branch: ${{ needs.select-branch.outputs.branch }}'
            echo 'branch=${{ needs.select-branch.outputs.branch }}' >> $GITHUB_OUTPUT
          fi
    outputs:
      branch: ${{ steps.create-branch-if-required.outputs.branch }}

  apply-fix:
    needs:
      - agentic-lib
      - branch-for-fix
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
    if: ${{ !cancelled() && needs.needs-fix.outputs.needsFix == 'true' }}
    permissions:
      contents: write
      issues: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-completion-generate-fix-for-code.yml@6.10.1'
    with:
      promptFilepath: '.github/agents/agent-apply-fix.md'
      agentConfigContent: ${{ needs.agentic-lib.outputs.agentConfigContent }}
      allSourcePaths: ${{ needs.agentic-lib.outputs.allSourcePaths }}
      targetSourcePath: ${{ needs.agentic-lib.outputs.targetSourcePath }}
      allTestsPaths: ${{ needs.agentic-lib.outputs.allTestsPaths }}
      targetTestsPath: ${{ needs.agentic-lib.outputs.targetTestsPath }}
      readmeFilepath: ${{ needs.agentic-lib.outputs.readmeFilepath }}
      documentationPath: ${{ needs.agentic-lib.outputs.documentationPath }}
      missionFilepath: ${{ needs.agentic-lib.outputs.missionFilepath }}
      contributingFilepath: ${{ needs.agentic-lib.outputs.contributingFilepath }}
      dependenciesFilepath: ${{ needs.agentic-lib.outputs.dependenciesFilepath }}
      formattingFilepath: ${{ needs.agentic-lib.outputs.formattingFilepath }}
      lintingFilepath: ${{ needs.agentic-lib.outputs.lintingFilepath }}
      buildScript: ${{ needs.agentic-lib.outputs.buildScript }}
      testScript: ${{ needs.agentic-lib.outputs.testScript }}
      mainScript: ${{ needs.agentic-lib.outputs.mainScript }}
      branch: ${{ needs.branch-for-fix.outputs.branch }}
      issueNumber: ${{ needs.select-branch.outputs.issueNumber }}
      writeableFilepaths: ${{ needs.agentic-lib.outputs.writeableFilepaths }}
      npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
      model: ${{ vars.CHATGPT_API_MODEL || 'o4-mini' }}
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    secrets:
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  log-intention-activity:
    needs:
      - agentic-lib
      - apply-fix
    runs-on: ubuntu-latest
    env:
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours

      - name: log-intention-activity
        id: log-intention-activity
        uses: actions/github-script@v7
        env:
          fixApplied: ${{ needs.apply-fix.outputs.fixApplied }}
          message: ${{ needs.apply-fix.outputs.message }}
          gitDiff: ${{ needs.apply-fix.outputs.gitDiff }}
          mainOutput: ${{ needs.apply-fix.outputs.mainOutput }}
          allValidationStepsSuccessful: ${{ needs.apply-fix.outputs.allValidationStepsSuccessful }}
          intentionFilepath: ${{ needs.agentic-lib.outputs.intentionFilepath }}
          usage: ${{ needs.apply-fix.outputs.usage }}
        with:
          script: |
            const fixApplied = process.env.fixApplied;
            const message = process.env.message;
            const gitDiff = process.env.gitDiff;
            const mainOutput = process.env.mainOutput;
            const allValidationStepsSuccessful = process.env.allValidationStepsSuccessful;
            const intentionFilepath = process.env.intentionFilepath;
            const usage = process.env.usage;

            const activity = `fixApplied: ${fixApplied} with message ${message}
              
              Git Diff:
              \`\`\`diff
              ${gitDiff}
              \`\`\`
              
              mainOutput:
              \`\`\`log
              ${mainOutput}
              \`\`\`
              
              [allValidationStepsSuccessful: ${allValidationStepsSuccessful}]`;

            core.info(`Activity: ${activity}`);
            core.info(`Seed discussion filepath: ${intentionFilepath}`);

            const fs = require('fs');
            const path = require('path');

            // Create trace file and the parent directory of intentionFilepath if it doesn't exist
            if (!fs.existsSync(path.dirname(intentionFilepath))) {
              fs.mkdirSync(path.dirname(intentionFilepath), { recursive: true });
            }
            const isoDate = new Date().toISOString();
            const activityLogContent = `
            ## Fixed Code at ${isoDate}
            
            Activity:
            
            ${activity}
            
            LLM API Usage:
            \`\`\`json
            ${usage}
            \`\`\`
            
            ---`;
            fs.appendFileSync(intentionFilepath, activityLogContent);
            core.info(`Activity logged to ${intentionFilepath}`);

      - name: Commit changes
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git add  ${{ needs.agentic-lib.outputs.intentionFilepath }}
          git commit -m "Activity logged by agent-flow-fix-code.yml" || echo "No changes to commit"
          git fetch origin ${{ github.ref_name }}
          git merge origin/${{ github.ref_name }} --no-ff --no-edit --strategy=recursive --strategy-option=ours
          git push -v origin ${{ github.ref_name }}

  npm-test-after-fix:
    needs:
      - branch-for-fix
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - apply-fix
    if: ${{ !cancelled() && needs.needs-fix.outputs.needsFix == 'true' }}
    name: 'npm test with coverage'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.branch-for-fix.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git pull --ff-only origin ${{ needs.branch-for-fix.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: npm run test:unit

  npm-build-after-fix:
    needs:
      - branch-for-fix
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - apply-fix
    if: ${{ !cancelled() && needs.needs-fix.outputs.needsFix == 'true' }}
    name: 'npm run build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.branch-for-fix.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git pull --ff-only origin ${{ needs.branch-for-fix.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: npm run build

  npm-run-after-fix:
    needs:
      - branch-for-fix
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - apply-fix
    if: ${{ !cancelled() && needs.needs-fix.outputs.needsFix == 'true' }}
    name: 'npm run start'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.branch-for-fix.outputs.branch }}
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git config --local pull.ff     false       # never fast-forward
          git config --local pull.rebase false       # never rebase on pull
          git pull --ff-only origin ${{ needs.branch-for-fix.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  needs-fix-after-fix:
    needs:
      - branch-for-fix
      - npm-test
      - npm-build
      - npm-run
      - needs-fix
      - apply-fix
      - npm-test-after-fix
      - npm-build-after-fix
      - npm-run-after-fix
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    steps:
      - name: set-needs-fix
        id: set-needs-fix
        uses: actions/github-script@v7
        env:
          testResult: ${{ needs.npm-test-after-issue-resolution.result }}
          buildResult: ${{ needs.npm-build-after-issue-resolution.result }}
          runResult: ${{ needs.npm-run-after-issue-resolution.result }}
          applyFixEvenIfTestsPass: ${{ inputs.applyFixEvenIfTestsPass }}
          needsFix: ${{ needs.needs-fix.outputs.needsFix }}
          anySkipped: ${{ needs.npm-test-after-fix.result == 'skipped' || needs.npm-build-after-fix.result == 'skipped' || needs.npm-run-after-fix.result == 'skipped' }}
          anyDidntSucceed: ${{ needs.npm-test-after-fix.result != 'success' || needs.npm-build-after-fix.result != 'success' || needs.npm-run-after-fix.result != 'success' }}
        with:
          script: |
            const testResult = process.env.testResult;
            const buildResult = process.env.buildResult;
            const runResult = process.env.runResult;
            const applyFixEvenIfTestsPass = process.env.applyFixEvenIfTestsPass === "true";
            const fixedFromTheBeginning = process.env.needsFix === "false";
            
            core.info(`Test result: ${testResult}`);
            core.info(`Build result: ${buildResult}`);
            core.info(`Run result: ${runResult}`);
            core.info(`Apply fix even if tests pass: ${applyFixEvenIfTestsPass}`);
            core.info(`Fixed from the beginning: ${fixedFromTheBeginning}`);
            
            const anySkipped = testResult == 'skipped' || buildResult == 'skipped' || runResult == 'skipped';
            const anyDidntSucceed = testResult != 'success' || buildResult != 'success' || runResult != 'success';
            
            const readyToMerge = applyFixEvenIfTestsPass || fixedFromTheBeginning || !anySkipped && !anyDidntSucceed;

            core.setOutput("applyFixEvenIfTestsPass", applyFixEvenIfTestsPass);
            core.setOutput("fixedFromTheBeginning", fixedFromTheBeginning);
            core.setOutput("anySkipped", anySkipped);
            core.setOutput("anyDidntSucceed", anyDidntSucceed);
            core.setOutput("readyToMerge", readyToMerge);     

            core.info(`Apply fix even if tests pass: ${applyFixEvenIfTestsPass}`);
            core.info(`Fixed from the beginning: ${fixedFromTheBeginning}`);
            core.info(`Any skipped: ${anySkipped}`);
            core.info(`Any didn't succeed: ${anyDidntSucceed}`);
            core.info(`Ready to merge: ${readyToMerge}`);

    outputs:
      applyFixEvenIfTestsPass: ${{ steps.set-needs-fix.outputs.applyFixEvenIfTestsPass }}
      fixedFromTheBeginning: ${{ steps.set-needs-fix.outputs.fixedFromTheBeginning }}
      allSkipped: ${{ steps.set-needs-fix.outputs.allSkipped }}
      anyDidntSucceed: ${{ steps.set-needs-fix.outputs.anyDidntSucceed }}
      readyToMerge: ${{ steps.set-needs-fix.outputs.readyToMerge }}

  create-pr:
    needs:
      - select-branch
      - branch-for-fix
      - npm-test
      - npm-build
      - npm-run
      - apply-fix
      - needs-fix
      - npm-test-after-fix
      - npm-build-after-fix
      - npm-run-after-fix
      - needs-fix-after-fix
    if: ${{ !cancelled() && needs.branch-for-fix.outputs.branch != 'main' && needs.branch-for-fix.outputs.branch != '' && needs.needs-fix-after-fix.outputs.readyToMerge == 'true' }}
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
      checks: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-create-pr.yml@6.10.1'
    with:
      branch: "${{ needs.branch-for-fix.outputs.branch }}"
      baseBranch: 'main'
      gitCommitMessage: "${{ needs.apply-fix.outputs.message }} (working on #${{ needs.select-branch.outputs.issueNumber }})"
      label: 'automerge'

  automerge-pr:
    needs:
      - create-pr
      - select-branch
      - branch-for-fix
      - npm-test
      - npm-build
      - npm-run
      - apply-fix
      - needs-fix
      - npm-test-after-fix
      - npm-build-after-fix
      - npm-run-after-fix
      - needs-fix-after-fix
    if: ${{ !cancelled() && needs.branch-for-fix.outputs.branch != 'main' && needs.branch-for-fix.outputs.branch != '' && needs.needs-fix-after-fix.outputs.readyToMerge == 'true' }}
    permissions:
      contents: write
      pull-requests: write
      checks: write
      issues: write
      id-token: write
      pages: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/ci-automerge.yml@6.10.1'
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}
