The REST API is now versioned. For more information, see "About API versioning."GitHub REST API documentation Create integrations, retrieve data, and automate your workflows with the GitHub REST API.Overview Quickstart Start hereView all About the REST APIGet oriented to the REST API documentation.Getting started with the REST APILearn how to use the GitHub REST API.Authenticating to the REST APIYou can authenticate to the REST API to access more endpoints and have a higher rate limit.Best practices for using the REST APIFollow these best practices when using GitHub's API.PopularRate limits for the REST APILearn about REST API rate limits, how to avoid exceeding them, and what to do if you do exceed them.Troubleshooting the REST APILearn how to diagnose and resolve common problems for the REST API.Scripting with the REST API and JavaScriptWrite a script using the Octokit.js SDK to interact with the REST API.Keeping your API credentials secureFollow these best practices to keep your API credentials and tokens secure.What's newView all Check if private vulnerability reporting is enabled via REST APIMarch 08New limits on scoped token creation for GitHub AppsFebruary 23Upcoming changes to repository insightsNovember 29GuidesDelivering deploymentsUsing the Deployments REST API, you can build custom tooling that interacts with your server and a third-party app.@GitHubUsing the REST API to interact with checksYou can use the REST API to build GitHub Apps that run powerful checks against code changes in a repository. You can create apps that perform continuous integration, code linting, or code scanning services and provide detailed feedback on commits.@GitHubUsing pagination in the REST APILearn how to navigate through paginated responses from the REST API.@GitHubExplore guides All REST API docsAbout the REST APIAbout the REST APIComparing GitHub's REST API and GraphQL APIAPI VersionsBreaking changesAbout the OpenAPI description for the REST APIUsing the REST APIGetting started with the REST APIRate limits for the REST APIUsing pagination in the REST APILibraries for the REST APIBest practices for using the REST APITroubleshooting the REST APITimezones and the REST APIUsing CORS and JSONP to make cross-origin requestsIssue event typesGitHub event typesAuthenticating to the REST APIAuthenticating to the REST APIKeeping your API credentials secureEndpoints available for GitHub App installation access tokensEndpoints available for GitHub App user access tokensEndpoints available for fine-grained personal access tokensPermissions required for GitHub AppsPermissions required for fine-grained personal access tokensGuidesScripting with the REST API and JavaScriptScripting with the REST API and RubyDiscovering resources for a userDelivering deploymentsRendering data as graphsWorking with commentsBuilding a CI serverUsing the REST API to interact with your Git databaseUsing the REST API to interact with checksEncrypting secrets for the REST APIREST API endpoints for GitHub ActionsREST API endpoints for GitHub Actions artifactsREST API endpoints for GitHub Actions cacheGitHub-hosted runnersREST API endpoints for GitHub Actions OIDCREST API endpoints for GitHub Actions permissionsREST API endpoints for GitHub Actions SecretsREST API endpoints for self-hosted runner groupsREST API endpoints for self-hosted runnersREST API endpoints for GitHub Actions variablesREST API endpoints for workflow jobsREST API endpoints for workflow runsREST API endpoints for workflowsREST API endpoints for activityREST API endpoints for eventsREST API endpoints for feedsREST API endpoints for notificationsREST API endpoints for starringREST API endpoints for watchingREST API endpoints for appsREST API endpoints for GitHub AppsREST API endpoints for GitHub App installationsREST API endpoints for GitHub MarketplaceREST API endpoints for OAuth authorizationsREST API endpoints for GitHub App webhooksREST API endpoints for billingREST API endpoints for billingEnhanced billing platformREST API endpoints for branches and their settingsREST API endpoints for branchesREST API endpoints for protected branchesREST API endpoints for security campaignsREST API endpoints for security campaignsREST API endpoints for checksREST API endpoints for check runsREST API endpoints for check suitesREST API endpoints for GitHub ClassroomREST API endpoints for GitHub ClassroomREST API endpoints for code scanningREST API endpoints for code scanningSecurity settingsConfigurationsREST API endpoints for codes of conductREST API endpoints for codes of conductREST API endpoints for CodespacesREST API endpoints for CodespacesREST API endpoints for Codespaces organizationsREST API endpoints for Codespaces organization secretsREST API endpoints for Codespaces machinesREST API endpoints for Codespaces repository secretsREST API endpoints for Codespaces user secretsREST API endpoints for collaboratorsREST API endpoints for collaboratorsREST API endpoints for repository invitationsREST API endpoints for commitsREST API endpoints for commitsREST API endpoints for commit commentsREST API endpoints for commit statusesREST API endpoints for CopilotREST API endpoints for Copilot metricsREST API endpoints for Copilot user managementREST API endpoints for DependabotREST API endpoints for Dependabot alertsREST API endpoints for Dependabot secretsREST API endpoints for the dependency graphREST API endpoints for dependency reviewREST API endpoints for dependency submissionREST API endpoints for software bill of materials (SBOM)REST API endpoints for deploy keysREST API endpoints for deploy keysREST API endpoints for deploymentsREST API endpoints for deployment branch policiesREST API endpoints for deploymentsREST API endpoints for deployment environmentsREST API endpoints for protection rulesREST API endpoints for deployment statusesREST API endpoints for emojisREST API endpoints for emojisREST API endpoints for gists and gist commentsREST API endpoints for gistsREST API endpoints for gist commentsREST API endpoints for Git databaseREST API endpoints for Git blobsREST API endpoints for Git commitsREST API endpoints for Git referencesREST API endpoints for Git tagsREST API endpoints for Git treesREST API endpoints for gitignoreREST API endpoints for gitignoreREST API endpoints for interactionsREST API endpoints for organization interactionsREST API endpoints for repository interactionsREST API endpoints for user interactionsREST API endpoints for issuesREST API endpoints for issue assigneesREST API endpoints for issue commentsREST API endpoints for issue eventsREST API endpoints for issuesREST API endpoints for labelsREST API endpoints for milestonesREST API endpoints for sub-issuesREST API endpoints for timeline eventsREST API endpoints for licensesREST API endpoints for licensesREST API endpoints for MarkdownREST API endpoints for MarkdownREST API endpoints for meta dataREST API endpoints for meta dataREST API endpoints for metricsREST API endpoints for community metricsREST API endpoints for repository statisticsREST API endpoints for repository trafficREST API endpoints for migrationsREST API endpoints for organization migrationsREST API endpoints for source importsREST API endpoints for user migrationsREST API endpoints for organizationsREST API endpoints for API InsightsREST API endpoints for blocking usersREST API endpoints for custom propertiesREST API endpoints for issue typesREST API endpoints for organization membersREST API endpoints for network configurationsREST API endpoints for organization rolesREST API endpoints for organizationsREST API endpoints for outside collaboratorsREST API endpoints for personal access tokensREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for security managersREST API endpoints for organization webhooksREST API endpoints for packagesREST API endpoints for packagesREST API endpoints for GitHub PagesREST API endpoints for GitHub PagesPrivate registriesOrganization configurationsREST API endpoints for Projects (classic)REST API endpoints for Projects (classic)REST API endpoints for Project (classic) cardsREST API endpoints for Project (classic) collaboratorsREST API endpoints for Project (classic) columnsREST API endpoints for pull requestsREST API endpoints for pull requestsREST API endpoints for pull request review commentsREST API endpoints for review requestsREST API endpoints for pull request reviewsREST API endpoints for rate limitsREST API endpoints for rate limitsREST API endpoints for reactionsREST API endpoints for reactionsREST API endpoints for releases and release assetsREST API endpoints for releasesREST API endpoints for release assetsREST API endpoints for repositoriesREST API endpoints for repository autolinksREST API endpoints for repository contentsREST API endpoints for custom propertiesREST API endpoints for forksREST API endpoints for repositoriesREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for repository tagsREST API endpoints for repository webhooksREST API endpoints for searchREST API endpoints for searchREST API endpoints for secret scanningREST API endpoints for secret scanningREST API endpoints for security advisoriesREST API endpoints for global security advisoriesREST API endpoints for repository security advisoriesREST API endpoints for teamsREST API endpoints for teamsREST API endpoints for team discussion commentsREST API endpoints for team discussionsREST API endpoints for team membersREST API endpoints for usersREST API endpoints for artifact attestationsREST API endpoints for blocking usersREST API endpoints for emailsREST API endpoints for followersREST API endpoints for GPG keysREST API endpoints for Git SSH keysREST API endpoints for social accountsREST API endpoints for SSH signing keysREST API endpoints for users\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."GitHub REST API documentation Create integrations, retrieve data, and automate your workflows with the GitHub REST API.Overview Quickstart Start hereView all About the REST APIGet oriented to the REST API documentation.Getting started with the REST APILearn how to use the GitHub REST API.Authenticating to the REST APIYou can authenticate to the REST API to access more endpoints and have a higher rate limit.Best practices for using the REST APIFollow these best practices when using GitHub's API.PopularRate limits for the REST APILearn about REST API rate limits, how to avoid exceeding them, and what to do if you do exceed them.Troubleshooting the REST APILearn how to diagnose and resolve common problems for the REST API.Scripting with the REST API and JavaScriptWrite a script using the Octokit.js SDK to interact with the REST API.Keeping your API credentials secureFollow these best practices to keep your API credentials and tokens secure.What's newView all Check if private vulnerability reporting is enabled via REST APIMarch 08New limits on scoped token creation for GitHub AppsFebruary 23Upcoming changes to repository insightsNovember 29GuidesDelivering deploymentsUsing the Deployments REST API, you can build custom tooling that interacts with your server and a third-party app.@GitHubUsing the REST API to interact with checksYou can use the REST API to build GitHub Apps that run powerful checks against code changes in a repository. You can create apps that perform continuous integration, code linting, or code scanning services and provide detailed feedback on commits.@GitHubUsing pagination in the REST APILearn how to navigate through paginated responses from the REST API.@GitHubExplore guides All REST API docsAbout the REST APIAbout the REST APIComparing GitHub's REST API and GraphQL APIAPI VersionsBreaking changesAbout the OpenAPI description for the REST APIUsing the REST APIGetting started with the REST APIRate limits for the REST APIUsing pagination in the REST APILibraries for the REST APIBest practices for using the REST APITroubleshooting the REST APITimezones and the REST APIUsing CORS and JSONP to make cross-origin requestsIssue event typesGitHub event typesAuthenticating to the REST APIAuthenticating to the REST APIKeeping your API credentials secureEndpoints available for GitHub App installation access tokensEndpoints available for GitHub App user access tokensEndpoints available for fine-grained personal access tokensPermissions required for GitHub AppsPermissions required for fine-grained personal access tokensGuidesScripting with the REST API and JavaScriptScripting with the REST API and RubyDiscovering resources for a userDelivering deploymentsRendering data as graphsWorking with commentsBuilding a CI serverUsing the REST API to interact with your Git databaseUsing the REST API to interact with checksEncrypting secrets for the REST APIREST API endpoints for GitHub ActionsREST API endpoints for GitHub Actions artifactsREST API endpoints for GitHub Actions cacheGitHub-hosted runnersREST API endpoints for GitHub Actions OIDCREST API endpoints for GitHub Actions permissionsREST API endpoints for GitHub Actions SecretsREST API endpoints for self-hosted runner groupsREST API endpoints for self-hosted runnersREST API endpoints for GitHub Actions variablesREST API endpoints for workflow jobsREST API endpoints for workflow runsREST API endpoints for workflowsREST API endpoints for activityREST API endpoints for eventsREST API endpoints for feedsREST API endpoints for notificationsREST API endpoints for starringREST API endpoints for watchingREST API endpoints for appsREST API endpoints for GitHub AppsREST API endpoints for GitHub App installationsREST API endpoints for GitHub MarketplaceREST API endpoints for OAuth authorizationsREST API endpoints for GitHub App webhooksREST API endpoints for billingREST API endpoints for billingEnhanced billing platformREST API endpoints for branches and their settingsREST API endpoints for branchesREST API endpoints for protected branchesREST API endpoints for security campaignsREST API endpoints for security campaignsREST API endpoints for checksREST API endpoints for check runsREST API endpoints for check suitesREST API endpoints for GitHub ClassroomREST API endpoints for GitHub ClassroomREST API endpoints for code scanningREST API endpoints for code scanningSecurity settingsConfigurationsREST API endpoints for codes of conductREST API endpoints for codes of conductREST API endpoints for CodespacesREST API endpoints for CodespacesREST API endpoints for Codespaces organizationsREST API endpoints for Codespaces organization secretsREST API endpoints for Codespaces machinesREST API endpoints for Codespaces repository secretsREST API endpoints for Codespaces user secretsREST API endpoints for collaboratorsREST API endpoints for collaboratorsREST API endpoints for repository invitationsREST API endpoints for commitsREST API endpoints for commitsREST API endpoints for commit commentsREST API endpoints for commit statusesREST API endpoints for CopilotREST API endpoints for Copilot metricsREST API endpoints for Copilot user managementREST API endpoints for DependabotREST API endpoints for Dependabot alertsREST API endpoints for Dependabot secretsREST API endpoints for the dependency graphREST API endpoints for dependency reviewREST API endpoints for dependency submissionREST API endpoints for software bill of materials (SBOM)REST API endpoints for deploy keysREST API endpoints for deploy keysREST API endpoints for deploymentsREST API endpoints for deployment branch policiesREST API endpoints for deploymentsREST API endpoints for deployment environmentsREST API endpoints for protection rulesREST API endpoints for deployment statusesREST API endpoints for emojisREST API endpoints for emojisREST API endpoints for gists and gist commentsREST API endpoints for gistsREST API endpoints for gist commentsREST API endpoints for Git databaseREST API endpoints for Git blobsREST API endpoints for Git commitsREST API endpoints for Git referencesREST API endpoints for Git tagsREST API endpoints for Git treesREST API endpoints for gitignoreREST API endpoints for gitignoreREST API endpoints for interactionsREST API endpoints for organization interactionsREST API endpoints for repository interactionsREST API endpoints for user interactionsREST API endpoints for issuesREST API endpoints for issue assigneesREST API endpoints for issue commentsREST API endpoints for issue eventsREST API endpoints for issuesREST API endpoints for labelsREST API endpoints for milestonesREST API endpoints for sub-issuesREST API endpoints for timeline eventsREST API endpoints for licensesREST API endpoints for licensesREST API endpoints for MarkdownREST API endpoints for MarkdownREST API endpoints for meta dataREST API endpoints for meta dataREST API endpoints for metricsREST API endpoints for community metricsREST API endpoints for repository statisticsREST API endpoints for repository trafficREST API endpoints for migrationsREST API endpoints for organization migrationsREST API endpoints for source importsREST API endpoints for user migrationsREST API endpoints for organizationsREST API endpoints for API InsightsREST API endpoints for blocking usersREST API endpoints for custom propertiesREST API endpoints for issue typesREST API endpoints for organization membersREST API endpoints for network configurationsREST API endpoints for organization rolesREST API endpoints for organizationsREST API endpoints for outside collaboratorsREST API endpoints for personal access tokensREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for security managersREST API endpoints for organization webhooksREST API endpoints for packagesREST API endpoints for packagesREST API endpoints for GitHub PagesREST API endpoints for GitHub PagesPrivate registriesOrganization configurationsREST API endpoints for Projects (classic)REST API endpoints for Projects (classic)REST API endpoints for Project (classic) cardsREST API endpoints for Project (classic) collaboratorsREST API endpoints for Project (classic) columnsREST API endpoints for pull requestsREST API endpoints for pull requestsREST API endpoints for pull request review commentsREST API endpoints for review requestsREST API endpoints for pull request reviewsREST API endpoints for rate limitsREST API endpoints for rate limitsREST API endpoints for reactionsREST API endpoints for reactionsREST API endpoints for releases and release assetsREST API endpoints for releasesREST API endpoints for release assetsREST API endpoints for repositoriesREST API endpoints for repository autolinksREST API endpoints for repository contentsREST API endpoints for custom propertiesREST API endpoints for forksREST API endpoints for repositoriesREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for repository tagsREST API endpoints for repository webhooksREST API endpoints for searchREST API endpoints for searchREST API endpoints for secret scanningREST API endpoints for secret scanningREST API endpoints for security advisoriesREST API endpoints for global security advisoriesREST API endpoints for repository security advisoriesREST API endpoints for teamsREST API endpoints for teamsREST API endpoints for team discussion commentsREST API endpoints for team discussionsREST API endpoints for team membersREST API endpoints for usersREST API endpoints for artifact attestationsREST API endpoints for blocking usersREST API endpoints for emailsREST API endpoints for followersREST API endpoints for GPG keysREST API endpoints for Git SSH keysREST API endpoints for social accountsREST API endpoints for SSH signing keysREST API endpoints for users\n\n\n\nGitHub DocsHelp for wherever you are on your GitHub journey.Get startedGet startedMigrationsAccount and profileAuthenticationBilling and paymentsSite policyCollaborative codingCodespacesRepositoriesPull requestsGitHub DiscussionsGitHub CopilotGitHub CopilotGet code suggestionsPrompt engineeringChat in GitHubCopilot Chat CookbookExtensions quickstartCI/CD and DevOpsGitHub ActionsGitHub PackagesGitHub PagesSecuritySecure codingSecret scanningSupply chain securityDependabotCode scanningSecurity advisoriesClient appsGitHub CLIGitHub MobileGitHub DesktopProject managementGitHub IssuesProjectsSearch on GitHubEnterprise and TeamsOrganizationsSecure your organizationEnterprise onboardingEnterprise administratorsGitHub Well-ArchitectedDevelopersAppsREST APIGraphQL APIWebhooksBuild Copilot ExtensionsGitHub ModelsCommunityBuilding communitiesGitHub SponsorsGitHub EducationGitHub for NonprofitsGitHub SupportContribute to GitHub DocsMore docsCodeQL query writingElectronnpmGetting startedSet up GitAt the heart of GitHub is an open-source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.Connecting to GitHub with SSHYou can connect to GitHub using the Secure Shell Protocol (SSH), which provides a secure channel over an unsecured network.Creating and managing repositoriesYou can create a repository on GitHub to store and collaborate on your project's files, then manage the repository's name and location.Basic writing and formatting syntaxCreate sophisticated formatting for your prose and code on GitHub with simple syntax.PopularAbout pull requestsLearn about pull requests and draft pull requests on GitHub. Pull requests communicate changes to a branch in a repository. Once a pull request is opened, you can review changes with collaborators and add follow-up commits.Authentication documentationKeep your account and data secure with features like two-factor authentication, SSH, and commit signature verification.Getting code suggestions in your IDE with GitHub CopilotUse GitHub Copilot to get code suggestions in your editor.Managing remote repositoriesLearn to work with your local repositories on your computer and remote repositories hosted on GitHub.\n\n\n\nREST API/QuickstartQuickstart for GitHub REST APILearn how to get started with the GitHub REST API.Tool navigationGitHub CLIcurlJavaScriptIn this articleIntroductionUsing GitHub CLI in the command lineUsing GitHub CLI in GitHub ActionsUsing Octokit.jsUsing Octokit.js in GitHub ActionsUsing curl in the command lineUsing curl commands in GitHub ActionsNext stepsIntroduction
This article describes how to quickly get started with the GitHub REST API using GitHub CLI, curl, or JavaScript. For a more detailed guide, see Getting started with the REST API.

Using GitHub CLI in the command line
GitHub CLI is the easiest way to use the GitHub REST API from the command line.


Install GitHub CLI on macOS, Windows, or Linux. For more information, see Installation in the GitHub CLI repository.


To authenticate to GitHub, run the following command from your terminal.
gh auth login



Select where you want to authenticate to:

If you access GitHub at GitHub.com, select GitHub.com.
If you access GitHub at a different domain, select Other, then enter your hostname (for example: octocorp.ghe.com).



Follow the rest of the on-screen prompts.
GitHub CLI automatically stores your Git credentials for you when you choose HTTPS as your preferred protocol for Git operations and answer "yes" to the prompt asking if you would like to authenticate to Git with your GitHub credentials. This can be useful as it allows you to use Git commands like git push and git pull without needing to set up a separate credential manager or use SSH.


Make a request using the GitHub CLI api subcommand, followed by the path. Use the --method or -X flag to specify the method. For more information, see the GitHub CLI api documentation.
This example makes a request to the "Get Octocat" endpoint, which uses the method GET and the path /octocat. For the full reference documentation for this endpoint, see REST API endpoints for meta data.
Shellgh api /octocat --method GET
gh api /octocat --method GET



Using GitHub CLI in GitHub Actions
You can also use GitHub CLI in your GitHub Actions workflows. For more information, see Using GitHub CLI in workflows.
Authenticating with an access token
Instead of using the gh auth login command, pass an access token as an environment variable called GH_TOKEN. GitHub recommends that you use the built-in GITHUB_TOKEN instead of creating a token. If this is not possible, store your token as a secret and replace GITHUB_TOKEN in the example below with the name of your secret. For more information about GITHUB_TOKEN, see Automatic token authentication. For more information about secrets, see Using secrets in GitHub Actions.
The following example workflow uses the List repository issues endpoint, and requests a list of issues in the octocat/Spoon-Knife repository.
YAMLon:
  workflow_dispatch:
jobs:
  use_api:
    runs-on: ubuntu-latest
    permissions:
      issues: read
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api https://api.github.com/repos/octocat/Spoon-Knife/issues
on:
  workflow_dispatch:
jobs:
  use_api:
    runs-on: ubuntu-latest
    permissions:
      issues: read
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api https://api.github.com/repos/octocat/Spoon-Knife/issues

Authenticating with a GitHub App
If you are authenticating with a GitHub App, you can create an installation access token within your workflow:


Store your GitHub App's ID as a configuration variable. In the following example, replace APP_ID with the name of the configuration variable. You can find your app ID on the settings page for your app or through the API. For more information, see REST API endpoints for GitHub Apps. For more information about configuration variables, see Store information in variables.


Generate a private key for your app. Store the contents of the resulting file as a secret. (Store the entire contents of the file, including -----BEGIN RSA PRIVATE KEY----- and -----END RSA PRIVATE KEY-----.) In the following example, replace APP_PEM with the name of the secret. For more information, see Managing private keys for GitHub Apps. For more information about secrets, see Using secrets in GitHub Actions.


Add a step to generate a token, and use that token instead of GITHUB_TOKEN. Note that this token will expire after 60 minutes. For example:
YAMLon:
  workflow_dispatch:
jobs:
  track_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}
      - name: Use API
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api https://api.github.com/repos/octocat/Spoon-Knife/issues
on:
  workflow_dispatch:
jobs:
  track_pr:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}
      - name: Use API
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          gh api https://api.github.com/repos/octocat/Spoon-Knife/issues





Using Octokit.js
You can use Octokit.js to interact with the GitHub REST API in your JavaScript scripts. For more information, see Scripting with the REST API and JavaScript.


Create an access token. For example, create a personal access token or a GitHub App user access token. You will use this token to authenticate your request, so you should give it any scopes or permissions that are required to access that endpoint. For more information, see Authenticating to the REST API or Identifying and authorizing users for GitHub Apps.
Warning

Treat your access token like a password.
To keep your token secure, you can store your token as a secret and run your script through GitHub Actions. For more information, see the Using Octokit.js in GitHub Actions section.

You can also store your token as a Codespaces secret and run your script in Codespaces. For more information, see Managing encrypted secrets for your codespaces.

If these options are not possible, consider using another CLI service to store your token securely.



Install octokit. For example, npm install octokit. For other ways to install or load octokit, see the Octokit.js README.


Import octokit in your script. For example, import { Octokit } from "octokit";. For other ways to import octokit, see the Octokit.js README.


Create an instance of Octokit with your token. Replace YOUR-TOKEN with your token.
JavaScriptconst octokit = new Octokit({ 
  auth: 'YOUR-TOKEN'
});
const octokit = new Octokit({ 
  auth: 'YOUR-TOKEN'
});



Use octokit.request to execute your request. Send the HTTP method and path as the first argument. Specify any path, query, and body parameters in an object as the second argument. For more information about parameters, see Getting started with the REST API.
For example, in the following request the HTTP method is GET, the path is /repos/{owner}/{repo}/issues, and the parameters are owner: "octocat" and repo: "Spoon-Knife".
JavaScriptawait octokit.request("GET /repos/{owner}/{repo}/issues", {
  owner: "octocat",
  repo: "Spoon-Knife",
});
await octokit.request("GET /repos/{owner}/{repo}/issues", {
  owner: "octocat",
  repo: "Spoon-Knife",
});



Using Octokit.js in GitHub Actions
You can also execute your JavaScript scripts in your GitHub Actions workflows. For more information, see Workflow syntax for GitHub Actions.
Authenticating with an access token
GitHub recommends that you use the built-in GITHUB_TOKEN instead of creating a token. If this is not possible, store your token as a secret and replace GITHUB_TOKEN in the example below with the name of your secret. For more information about GITHUB_TOKEN, see Automatic token authentication. For more information about secrets, see Using secrets in GitHub Actions.
The following example workflow:

Checks out the repository content
Sets up Node.js
Installs octokit
Stores the value of GITHUB_TOKEN as an environment variable called TOKEN and runs .github/actions-scripts/use-the-api.mjs, which can access that environment variable as process.env.TOKEN

on:
  workflow_dispatch:
jobs:
  use_api_via_script:
    runs-on: ubuntu-latest
    permissions:
      issues: read
    steps:
      - name: Check out repo content
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '16.17.0'
          cache: npm

      - name: Install dependencies
        run: npm install octokit

      - name: Run script
        run: |
          node .github/actions-scripts/use-the-api.mjs
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}

The following is an example JavaScript script with the file path .github/actions-scripts/use-the-api.mjs.
import { Octokit } from "octokit"

const octokit = new Octokit({ 
  auth: process.env.TOKEN
});

try {
  const result = await octokit.request("GET /repos/{owner}/{repo}/issues", {
      owner: "octocat",
      repo: "Spoon-Knife",
    });

  const titleAndAuthor = result.data.map(issue => {title: issue.title, authorID: issue.user.id})

  console.log(titleAndAuthor)

} catch (error) {
  console.log(`Error! Status: ${error.status}. Message: ${error.response.data.message}`)
}

Authenticating with a GitHub App
If you are authenticating with a GitHub App, you can create an installation access token within your workflow:


Store your GitHub App's ID as a configuration variable. In the following example, replace APP_ID with the name of the configuration variable. You can find your app ID on the settings page for your app or through the App API. For more information, see REST API endpoints for GitHub Apps. For more information about configuration variables, see Store information in variables.


Generate a private key for your app. Store the contents of the resulting file as a secret. (Store the entire contents of the file, including -----BEGIN RSA PRIVATE KEY----- and -----END RSA PRIVATE KEY-----.) In the following example, replace APP_PEM with the name of the secret. For more information, see Managing private keys for GitHub Apps. For more information about secrets, see Using secrets in GitHub Actions.


Add a step to generate a token, and use that token instead of GITHUB_TOKEN. Note that this token will expire after 60 minutes. For example:
on:
  workflow_dispatch:
jobs:
  use_api_via_script:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo content
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '16.17.0'
          cache: npm

      - name: Install dependencies
        run: npm install octokit

      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}

      - name: Run script
        run: |
          node .github/actions-scripts/use-the-api.mjs
        env:
          TOKEN: ${{ steps.generate-token.outputs.token }}






Using curl in the command line
Note

If you want to make API requests from the command line, GitHub recommends that you use GitHub CLI, which simplifies authentication and requests. For more information about getting started with the REST API using GitHub CLI, see the GitHub CLI version of this article.



Install curl if it isn't already installed on your machine. To check if curl is installed, execute curl --version in the command line. If the output provides information about the version of curl, that means curl is installed. If you get a message similar to command not found: curl, you need to download and install curl. For more information, see the curl project download page.


Create an access token. For example, create a personal access token or a GitHub App user access token. You will use this token to authenticate your request, so you should give it any scopes or permissions that are required to access the endpoint. For more information, see Authenticating to the REST API.
Warning

Treat your access token like a password.
To keep your token secure, you can store your token as a Codespaces secret and use the command line through Codespaces. For more information, see Managing encrypted secrets for your codespaces.


You can also use GitHub CLI instead of curl. GitHub CLI will take care of authentication for you. For more information, see the GitHub CLI version of this page.
If these options are not possible, consider using another CLI service to store your token securely.



Use the curl command to make your request. Pass your token in an Authorization header. Replace YOUR-TOKEN with your token.
Shellcurl --request GET \
--url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
--header "Accept: application/vnd.github+json" \
--header "Authorization: Bearer YOUR-TOKEN"
curl --request GET \
--url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
--header "Accept: application/vnd.github+json" \
--header "Authorization: Bearer YOUR-TOKEN"

Note

In most cases, you can use Authorization: Bearer or Authorization: token to pass a token. However, if you are passing a JSON web token (JWT), you must use Authorization: Bearer.



Using curl commands in GitHub Actions
You can also use curl commands in your GitHub Actions workflows.
Authenticating with an access token
GitHub recommends that you use the built-in GITHUB_TOKEN instead of creating a token. If this is not possible, store your token as a secret and replace GITHUB_TOKEN in the example below with the name of your secret. For more information about GITHUB_TOKEN, see Automatic token authentication. For more information about secrets, see Using secrets in GitHub Actions.
YAMLon:
  workflow_dispatch:
jobs:
  use_api:
    runs-on: ubuntu-latest
    permissions:
      issues: read
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --request GET \
          --url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: Bearer $GH_TOKEN"
on:
  workflow_dispatch:
jobs:
  use_api:
    runs-on: ubuntu-latest
    permissions:
      issues: read
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --request GET \
          --url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: Bearer $GH_TOKEN"

Authenticating with a GitHub App
If you are authenticating with a GitHub App, you can create an installation access token within your workflow:


Store your GitHub App's ID as a configuration variable. In the following example, replace APP_ID with the name of the configuration variable. You can find your app ID on the settings page for your app or through the App API. For more information, see REST API endpoints for GitHub Apps. For more information about configuration variables, see Store information in variables.


Generate a private key for your app. Store the contents of the resulting file as a secret. (Store the entire contents of the file, including -----BEGIN RSA PRIVATE KEY----- and -----END RSA PRIVATE KEY-----.) In the following example, replace APP_PEM with the name of the secret. For more information, see Managing private keys for GitHub Apps. For more information about storing secrets, see Using secrets in GitHub Actions.


Add a step to generate a token, and use that token instead of GITHUB_TOKEN. Note that this token will expire after 60 minutes. For example:
YAMLon:
  workflow_dispatch:
jobs:
  use_api:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}

      - name: Use API
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          curl --request GET \
          --url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: Bearer $GH_TOKEN"

on:
  workflow_dispatch:
jobs:
  use_api:
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}

      - name: Use API
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          curl --request GET \
          --url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: Bearer $GH_TOKEN"





Next steps
For a more detailed guide, see Getting started with the REST API.\n\n\n\nREST API/About the REST API/About the REST APIAbout the REST APIGet oriented to the REST API documentation.In this articleGetting started with the REST APIFurther readingYou can use GitHub's API to build scripts and applications that automate processes, integrate with GitHub, and extend GitHub. For example, you could use the API to triage issues, build an analytics dashboard, or manage releases.
Each REST API endpoint is documented individually, and the endpoints are categorized by the resource that they primarily affect. For example, you can find endpoints relating to issues in REST API endpoints for issues.
Getting started with the REST API
If you are new to REST APIs, you may find it helpful to refer to the Quickstart or Getting Started guide for an introduction. For more information, see:

Quickstart for GitHub REST API
Getting started with the REST API

If you are familiar with REST APIs but new to GitHub's REST API, you may find it helpful to refer to the authentication documentation. For more information, see:

Authenticating to the REST API

If you are building scripts or applications that use the REST API, you may find some of the following guides helpful. For examples of scripting with the REST API, see:

Scripting with the REST API and JavaScript
Scripting with the REST API and Ruby
Building a GitHub App that responds to webhook events
Building a CLI with a GitHub App
Automatically redelivering failed deliveries for a repository webhook

For a list of libraries to facilitate scripting with the REST API, see Libraries for the REST API.
If you are building scripts or applications that use the REST API, you might also be interested in using webhooks to get notified about events or a GitHub App to access resources on behalf of a user or in an organization. For more information, see About webhooks and Deciding when to build a GitHub App.
Further reading

Comparing GitHub's REST API and GraphQL API
Best practices for using the REST API
Keeping your API credentials secure
Troubleshooting the REST API\n\n\n\nREST API/About the REST API/Comparing GitHub's APIsComparing GitHub's REST API and GraphQL APILearn about GitHub's APIs to extend and customize your GitHub experience.In this articleAbout GitHub's APIsChoosing the GraphQL APIChoosing the REST APIAbout GitHub's APIs
GitHub provides two APIs: a REST API and a GraphQL API. You can interact with both APIs using GitHub CLI, curl, the official Octokit libraries, and third party libraries. Occasionally, a feature may be supported on one API but not the other.
You should use the API that best aligns with your needs and that you are most comfortable using. You don't need to exclusively use one API over the other. Node IDs let you move between the REST API and GraphQL API. For more information, see Using global node IDs.
This article discusses the benefits of each API. For more information about the GraphQL API, see About the GraphQL API. For more information about the REST API, see About the REST API.
Choosing the GraphQL API
The GraphQL API returns exactly the data that you request. GraphQL also returns the data in a pre-known structure based on your request. In contrast, the REST API returns more data than you requested and returns it in a pre-determined structure. You can also accomplish the equivalent of multiple REST API request in a single GraphQL request. The ability to make fewer requests and fetch less data makes GraphQL appealing to developers of mobile applications.
For example, to get the GitHub login of ten of your followers, and the login of ten followers of each of your followers, you can send a single request like:
{
  viewer {
    followers(first: 10) {
      nodes {
        login
        followers(first: 10) {
          nodes {
            login
          }
        }
      }
    }
  }
}

The response will be a JSON object that follows the structure of your request.
In contrast, to get this same information from the REST API, you would need to first make a request to GET /user/followers. The API would return the login of each follower, along with other data about the followers that you don't need. Then, for each follower, you would need to make a request to GET /users/{username}/followers. In total, you would need to make 11 requests to get the same information that you could get from a single GraphQL request, and you would receive excess data.
Choosing the REST API
Because REST APIs have been around for longer than GraphQL APIs, some developers are more comfortable with the REST API. Since REST APIs use standard HTTP verbs and concepts, many developers are already familiar with the basic concepts to use the REST API.
For example, to create an issue in the octocat/Spoon-Knife repository, you would need to send a request to POST /repos/octocat/Spoon-Knife/issues with a JSON request body:
{
  "title": "Bug with feature X",
  "body": "If you do A, then B happens"
}

In contrast, to make an issue using the GraphQL API, you would need to get the node ID of the octocat/Spoon-Knife repository and then send a request like:
mutation {
  createIssue(
    input: {
      repositoryId: "MDEwOlJlcG9zaXRvcnkxMzAwMTky"
      title: "Bug with feature X"
      body: "If you do A, then B happens"}
  ) {
    issue {
      number
      url
    }
  }
}\n\n\n\nREST API/About the REST API/API VersionsAPI VersionsLearn how to specify which REST API version to use whenever you make a request to the REST API.In this articleAbout API versioningSpecifying an API versionUpgrading to a new API versionSupported API versionsAbout API versioning
The GitHub REST API is versioned. The API version name is based on the date when the API version was released. For example, the API version 2022-11-28 was released on Mon, 28 Nov 2022.
Any breaking changes will be released in a new API version. Breaking changes are changes that can potentially break an integration. Breaking changes include:

Removing an entire operation
Removing or renaming a parameter
Removing or renaming a response field
Adding a new required parameter
Making a previously optional parameter required
Changing the type of a parameter or response field
Removing enum values
Adding a new validation rule to an existing parameter
Changing authentication or authorization requirements

Any additive (non-breaking) changes will be available in all supported API versions. Additive changes are changes that should not break an integration. Additive changes include:

Adding an operation
Adding an optional parameter
Adding an optional request header
Adding a response field
Adding a response header
Adding enum values

When a new REST API version is released, the previous API version will be supported for at least 24 more months following the release of the new API version.
Specifying an API version
You should use the X-GitHub-Api-Version header to specify an API version. For example:
curl --header "X-GitHub-Api-Version:2022-11-28" https://api.github.com/zen

Requests without the X-GitHub-Api-Version header will default to use the 2022-11-28 version.
If you specify an API version that is no longer supported, you will receive a 400 error.
Upgrading to a new API version
Before upgrading to a new REST API version, you should read the changelog of breaking changes for the new API version to understand what breaking changes are included and to learn more about how to upgrade to that specific API version. For more information, see Breaking changes.
When you update your integration to specify the new API version in the X-GitHub-Api-Version header, you'll also need to make any changes required for your integration to work with the new API version.
Once your integration is updated, test your integration to verify that it works with the new API version.
Supported API versions
The following REST API versions are currently supported:
2022-11-28
You can also make an API request to get all of the supported API versions. For more information, see REST API endpoints for meta data.\n\n\n\nREST API/About the REST API/Breaking changesBreaking changesLearn about breaking changes that were introduced in each REST API version.In this articleAbout breaking changes in the REST APIUpgrading to a new API versionBreaking changes for 2022-11-28About breaking changes in the REST API
The GitHub REST API is versioned. The API version name is based on the date when the API version was released. For example, the API version 2022-11-28 was released on Mon, 28 Nov 2022.
Any breaking changes will be released in a new API version. Breaking changes are changes that can potentially break an integration. Breaking changes include:

Removing an entire operation
Removing or renaming a parameter
Removing or renaming a response field
Adding a new required parameter
Making a previously optional parameter required
Changing the type of a parameter or response field
Removing enum values
Adding a new validation rule to an existing parameter
Changing authentication or authorization requirements

Any additive (non-breaking) changes will be available in all supported API versions. Additive changes are changes that should not break an integration. Additive changes include:

Adding an operation
Adding an optional parameter
Adding an optional request header
Adding a response field
Adding a response header
Adding enum values

When a new REST API version is released, the previous API version will be supported for at least 24 more months following the release of the new API version.
For more information about API versions, see API Versions.
Upgrading to a new API version
Before upgrading to a new REST API version, you should read the section on this page that corresponds to the new API version to understand what breaking changes are included and to learn more about how to upgrade to that API version.
When you update your integration to specify the new API version in the X-GitHub-Api-Version header, you'll also need to make any changes required for your integration to work with the new API version.
Once your integration is updated, test your integration to verify that it works with the new API version.
Breaking changes for 2022-11-28
Version 2022-11-28 is the first version of the GitHub REST API after date-based versioning was introduced. This version does not include any breaking changes.\n\n\n\nREST API/About the REST API/OpenAPI descriptionAbout the OpenAPI description for the REST APIThe GitHub REST API is fully described in an OpenAPI compliant document.In this articleAbout OpenAPIAbout GitHub's OpenAPI descriptionUsing the GitHub OpenAPI descriptionAbout OpenAPI
OpenAPI is a specification for describing REST API interfaces. It describes the API without requiring access to the source code or additional documentation. The specification is both human and machine readable. For more information, see the OpenAPI specification documentation.
About GitHub's OpenAPI description
GitHub's OpenAPI description of the REST API is publicly available. You can find the description in the open source github/rest-api-description repository.
GitHub provides both 3.0 and 3.1 OpenAPI descriptions.
For each description, there is a version for each product: GitHub Free/GitHub Pro/GitHub Team (api.github.com), GitHub Enterprise Cloud (ghec), and each version of GitHub Enterprise Server (ghes-X.X).
For each product, if date-based versioning is supported, there is also a description for each date-based version. For more information, see API Versions.
Each description is available in a bundled or in a dereferenced format. The bundled format uses $ref to refer to OpenAPI components that are shared between endpoints. The dereferenced format includes the fully expanded description.
Using the GitHub OpenAPI description
Because the OpenAPI description is machine readable, you can use it to do things like:

Generate libraries to facilitate using the REST API
Validate and test an integration that uses the REST API
Explore and interact with the REST API using third-party tools, such as Insomnia or Postman

For example, GitHub uses the OpenAPI description to generate the Octokit SDKs. GitHub also uses the OpenAPI description to generate the REST API reference documentation for each endpoint.\n\n\n\nREST API/Using the REST API/Getting startedGetting started with the REST APILearn how to use the GitHub REST API.Tool navigationGitHub CLIcurlJavaScriptIn this articleIntroductionAbout requests to the REST APIMaking a requestUsing the responseNext stepsIntroduction
This article describes how to use the GitHub REST API with GitHub CLI, curl, or JavaScript. For a quickstart guide, see Quickstart for GitHub REST API.


About requests to the REST API
This section describes the elements that make up an API request:

HTTP method
Path
Headers
Media types
Authentication
Parameters

Every request to the REST API includes an HTTP method and a path. Depending on the REST API endpoint, you might also need to specify request headers, authentication information, query parameters, or body parameters.
The REST API reference documentation describes the HTTP method, path, and parameters for every endpoint. It also displays example requests and responses for each endpoint. For more information, see the REST reference documentation.
HTTP method
The HTTP method of an endpoint defines the type of action it performs on a given resource. Some common HTTP methods are GET, POST, DELETE, and PATCH. The REST API reference documentation provides the HTTP method for every endpoint.
For example, the HTTP method for the "List repository issues" endpoint is GET."
Where possible, the GitHub REST API strives to use an appropriate HTTP method for each action.

GET: Used for retrieving resources.
POST: Used for creating resources.
PATCH: Used for updating properties of resources.
PUT: Used for replacing resources or collections of resources.
DELETE: Used for deleting resources.

Path
Each endpoint has a path. The REST API reference documentation gives the path for every endpoint. For example, the path for the "List repository issues" endpoint is /repos/{owner}/{repo}/issues.
The curly brackets {} in a path denote path parameters that you need to specify. Path parameters modify the endpoint path and are required in your request. For example, the path parameters for the "List repository issues" endpoint are {owner} and {repo}. To use this path in your API request, replace {repo} with the name of the repository where you would like to request a list of issues, and replace {owner} with the name of the account that owns the repository.
Headers
Headers provide extra information about the request and the desired response. Following are some examples of headers that you can use in your requests to the GitHub REST API. For an example of a request that uses headers, see Making a request.
Accept
Most GitHub REST API endpoints specify that you should pass an Accept header with a value of application/vnd.github+json. The value of the Accept header is a media type. For more information about media types, see Media types.
X-GitHub-Api-Version
You should use this header to specify a version of the REST API to use for your request. For more information, see API Versions.
User-Agent
All API requests must include a valid User-Agent header. The User-Agent header identifies the user or application that is making the request.

By default, GitHub CLI sends a valid User-Agent header. However, GitHub recommends using your GitHub username, or the name of your application, for the User-Agent header value. This allows GitHub to contact you if there are problems.


By default, curl sends a valid User-Agent header. However GitHub recommends using your GitHub username, or the name of your application, for the User-Agent header value. This allows GitHub to contact you if there are problems.


If you use the Octokit.js SDK, the SDK will send a valid User-Agent header for you. However, GitHub recommends using your GitHub username, or the name of your application, for the User-Agent header value. This allows GitHub to contact you if there are problems.

The following is an example User-Agent for an app named Awesome-Octocat-App:
User-Agent: Awesome-Octocat-App

Requests with no User-Agent header will be rejected. If you provide an invalid User-Agent header, you will receive a 403 Forbidden response.

Media types
You can specify one or more media types by adding them to the Accept header of your request. For more information about the Accept header, see Accept.
Media types specify the format of the data you want to consume from the API. Media types are specific to resources, allowing them to change independently and support formats that other resources don't. The documentation for each GitHub REST API endpoint will describe the media types that it supports. For more information, see the GitHub REST API documentation.
The most common media types supported by the GitHub REST API are application/vnd.github+json and application/json.
There are custom media types that you can use with some endpoints. For example, the REST API to manage commits and pull requests support the media types diff, patch, and sha. The media types full, raw, text, or html are used by some other endpoints.
All custom media types for GitHub look like this: application/vnd.github.PARAM+json, where PARAM is the name of the media type. For example, to specify the raw media type, you would use application/vnd.github.raw+json.
For an example of a request that uses media types, see Making a request.
Authentication
Many endpoints require authentication or return additional information if you are authenticated. Additionally, you can make more requests per hour when you are authenticated.

To authenticate your request, you will need to provide an authentication token with the required scopes or permissions. There a few different ways to get a token: You can create a personal access token, generate a token with a GitHub App, or use the built-in GITHUB_TOKEN in a GitHub Actions workflow. For more information, see Authenticating to the REST API.
For an example of a request that uses an authentication token, see Making a request.
Note

If you don't want to create a token, you can use GitHub CLI. GitHub CLI will take care of authentication for you, and help keep your account secure. For more information, see the GitHub CLI version of this page.

Warning

Treat your access token the same way you would treat your passwords or other sensitive credentials. For more information, see Keeping your API credentials secure.



Although some REST API endpoints are accessible without authentication, GitHub CLI requires you to authenticate before you can use the api subcommand to make an API request. Use the auth login subcommand to authenticate to GitHub. For more information, see Making a request.


To authenticate your request, you will need to provide an authentication token with the required scopes or permissions. There a few different ways to get a token: You can create a personal access token, generate a token with a GitHub App, or use the built-in GITHUB_TOKEN in a GitHub Actions workflow. For more information, see Authenticating to the REST API.
For an example of a request that uses an authentication token, see Making a request.
Warning

Treat your access token the same way you would treat your passwords or other sensitive credentials. For more information, see Keeping your API credentials secure.


Parameters
Many API methods require or allow you to send additional information in parameters in your request. There are a few different types of parameters: Path parameters, body parameters, and query parameters.
Path parameters
Path parameters modify the endpoint path. These parameters are required in your request. For more information, see Path.
Body parameters
Body parameters allow you to pass additional data to the API. These parameters can be optional or required, depending on the endpoint. For example, a body parameter may allow you to specify an issue title when creating a new issue, or specify certain settings when enabling or disabling a feature. The documentation for each GitHub REST API endpoint will describe the body parameters that it supports. For more information, see the GitHub REST API documentation.
For example, the "Create an issue" endpoint requires that you specify a title for the new issue in your request. It also allows you to optionally specify other information, such as text to put in the issue body, users to assign to the new issue, or labels to apply to the new issue. For an example of a request that uses body parameters, see Making a request.
You must authenticate your request to pass body parameters. For more information, see Authenticating.
Query parameters
Query parameters allow you to control what data is returned for a request. These parameters are usually optional. The documentation for each GitHub REST API endpoint will describe any query parameters that it supports. For more information, see the GitHub REST API documentation.
For example, the "List public events" endpoint returns thirty issues by default. You can use the per_page query parameter to return two issues instead of 30. You can use the page query parameter to fetch only the first page of results. For an example of a request that uses query parameters, see Making a request.
Making a request

This section demonstrates how to make an authenticated request to the GitHub REST API using GitHub CLI.
1. Setup
Install GitHub CLI on macOS, Windows, or Linux. For more information, see Installation in the GitHub CLI repository.
2. Authenticate


To authenticate to GitHub, run the following command from your terminal.
gh auth login

You can use the --scopes option to specify what scopes you want. If you want to authenticate with a token that you created, you can use the --with-token option. For more information, see the GitHub CLI auth login documentation.


Select where you want to authenticate to:

If you access GitHub at GitHub.com, select GitHub.com.
If you access GitHub at a different domain, select Other, then enter your hostname (for example: octocorp.ghe.com).



Follow the rest of the on-screen prompts.
GitHub CLI automatically stores your Git credentials for you when you choose HTTPS as your preferred protocol for Git operations and answer "yes" to the prompt asking if you would like to authenticate to Git with your GitHub credentials. This can be useful as it allows you to use Git commands like git push and git pull without needing to set up a separate credential manager or use SSH.


3. Choose an endpoint for your request


Choose an endpoint to make a request to. You can explore GitHub's REST API documentation to discover endpoints that you can use to interact with GitHub.


Identify the HTTP method and path of the endpoint. You will send these with your request. For more information, see HTTP method and Path.
For example, the "Create an issue" endpoint uses the HTTP method POST and the path /repos/{owner}/{repo}/issues.


Identify any required path parameters. Required path parameters appear in curly brackets {} in the path of the endpoint. Replace each parameter placeholder with the desired value. For more information, see Path.
For example, the "Create an issue" endpoint uses the path /repos/{owner}/{repo}/issues, and the path parameters are {owner} and {repo}. To use this path in your API request, replace {repo} with the name of the repository where you would like to create a new issue, and replace {owner} with the name of the account that owns the repository.


4. Make a request with GitHub CLI
Use the GitHub CLI api subcommand to make your API request. For more information, see the GitHub CLI api documentation.
In your request, specify the following options and values:


--method followed by the HTTP method and the path of the endpoint. For more information, see HTTP method and Path.


--header:

Accept: Pass the media type in an Accept header. To pass multiple media types in an Accept header, separate the media types with a comma: Accept: application/vnd.github+json,application/vnd.github.diff. For more information, see Accept and Media types.
X-GitHub-Api-Version: Pass the API version in a X-GitHub-Api-Version header. For more information, see X-GitHub-Api-Version.



-f or -F followed by any body parameters or query parameters in key=value format. Use the -F option to pass a parameter that is a number, Boolean, or null. Use the -f option to pass string parameters.
Some endpoints use query parameters that are arrays. To send an array in the query string, use the query parameter once per array item, and append [] after the query parameter name. For example, to provide an array of two repository IDs, use -f repository_ids[]=REPOSITORY_A_ID -f repository_ids[]=REPOSITORY_B_ID.
If you do not need to specify any body parameters or query parameters in your request, omit this option. For more information, see Body parameters and Query parameters. For examples, see Example request using body parameters and Example request using query parameters.


Example request
The following example request uses the "Get Octocat" endpoint to return the octocat as ASCII art.
Shellgh api --method GET /octocat \
--header 'Accept: application/vnd.github+json' \
--header "X-GitHub-Api-Version: 2022-11-28"
gh api --method GET /octocat \
--header 'Accept: application/vnd.github+json' \
--header "X-GitHub-Api-Version: 2022-11-28"

Example request using query parameters
The "List public events" endpoint returns thirty issues by default. The following example uses the per_page query parameter to return two issues instead of 30, and the page query parameter to fetch only the first page of results.
Shellgh api --method GET /events -F per_page=2 -F page=1
--header 'Accept: application/vnd.github+json' \
gh api --method GET /events -F per_page=2 -F page=1
--header 'Accept: application/vnd.github+json' \

Example request using body parameters
The following example uses the "Create an issue" endpoint to create a new issue in the octocat/Spoon-Knife repository. In the response, find the html_url of your issue, and navigate to your issue in the browser.
Shellgh api --method POST /repos/octocat/Spoon-Knife/issues \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28" \
-f title='Created with the REST API' \
-f body='This is a test issue created by the REST API' \
gh api --method POST /repos/octocat/Spoon-Knife/issues \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28" \
-f title='Created with the REST API' \
-f body='This is a test issue created by the REST API' \



This section demonstrates how to make an authenticated request to the GitHub REST API using curl.
1. Setup
You must have curl installed on your machine. To check if curl is already installed, run curl --version on the command line.

If the output provides information about the version of curl, that means curl is installed.
If you get a message similar to command not found: curl, that means curl is not installed. Download and install curl. For more information, see the curl download page.

2. Choose an endpoint for your request


Choose an endpoint to make a request to. You can explore GitHub's REST API documentation to discover endpoints that you can use to interact with GitHub.


Identify the HTTP method and path of the endpoint. You will send these with your request. For more information, see HTTP method and Path.
For example, the "Create an issue" endpoint uses the HTTP method POST and the path /repos/{owner}/{repo}/issues.


Identify any required path parameters. Required path parameters appear in curly brackets {} in the path of the endpoint. Replace each parameter placeholder with the desired value. For more information, see Path.
For example, the "Create an issue" endpoint uses the path /repos/{owner}/{repo}/issues, and the path parameters are {owner} and {repo}. To use this path in your API request, replace {repo} with the name of the repository where you would like to create a new issue, and replace {owner} with the name of the account that owns the repository.


3. Create authentication credentials
Create an access token to authenticate your request. You can save your token and use it for multiple requests. Give the token any scopes or permissions that are required to access the endpoint. You will send this token in an Authorization header with your request. For more information, see Authentication.
4. Make a curl request
Use the curl command to make your request. For more information, see the curl documentation.
Specify the following options and values in your request:


--request or -X followed by the HTTP method as the value. For more information, see HTTP method.


--url followed by the full path as the value. The full path is a URL that includes the base URL for the GitHub REST API (https://api.github.com) and the path of the endpoint, like this: https://api.github.com/PATH. Replace PATH with the path of the endpoint. For more information, see Path.
To use query parameters, add a ? to the end of the path, then append your query parameter name and value in the form parameter_name=value. Separate multiple query parameters with &. If you need to send an array in the query string, use the query parameter once per array item, and append [] after the query parameter name. For example, to provide an array of two repository IDs, use ?repository_ids[]=REPOSITORY_A_ID&repository_ids[]=REPOSITORY_B_ID. For more information, see Query parameters. For an example, see Example request using query parameters.


--header or -H:

Accept: Pass the media type in an Accept header. To pass multiple media types in an Accept header, separate the media types with a comma, for example: Accept: application/vnd.github+json,application/vnd.github.diff. For more information, see Accept and Media types.
X-GitHub-Api-Version: Pass the API version in a X-GitHub-Api-Version header. For more information, see X-GitHub-Api-Version.
Authorization: Pass your authentication token in an Authorization header. Note that in most cases you can use Authorization: Bearer or Authorization: token to pass a token. However, if you are passing a JSON web token (JWT), you must use Authorization: Bearer. For more information, see Authentication. For an example of a request that uses an Authorization header, see Example request using body parameters.



--data or -d followed by any body parameters within a JSON object. If you do not need to specify any body parameters in your request, omit this option. For more information, see Body parameters. For an example, see Example request using body parameters.


Example request
The following example request uses the "Get Octocat" endpoint to return the octocat as ASCII art.
Shellcurl --request GET \
--url "https://api.github.com/octocat" \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28"
curl --request GET \
--url "https://api.github.com/octocat" \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28"

Example request using query parameters
The "List public events" endpoint returns thirty issues by default. The following example uses the per_page query parameter to return two issues instead of 30, and the page query parameter to fetch only the first page of results.
Shellcurl --request GET \
--url "https://api.github.com/events?per_page=2&page=1" \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/events
curl --request GET \
--url "https://api.github.com/events?per_page=2&page=1" \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/events

Example request using body parameters
The following example uses the Create an issue endpoint to create a new issue in the octocat/Spoon-Knife repository. Replace YOUR-TOKEN with the authentication token you created in a previous step.
Note

If you are using a fine-grained personal access token, you must replace octocat/Spoon-Knife with a repository that you own or that is owned by an organization that you are a member of. Your token must have access to that repository and have read and write permissions for repository issues. For more information, see Managing your personal access tokens.

Shellcurl \
--request POST \
--url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28" \
--header "Authorization: Bearer YOUR-TOKEN" \
--data '{
  "title": "Created with the REST API",
  "body": "This is a test issue created by the REST API"
}'
curl \
--request POST \
--url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28" \
--header "Authorization: Bearer YOUR-TOKEN" \
--data '{
  "title": "Created with the REST API",
  "body": "This is a test issue created by the REST API"
}'



This section demonstrates how to make a request to the GitHub REST API using JavaScript and Octokit.js. For a more detailed guide, see Scripting with the REST API and JavaScript.
1. Setup
You must install octokit to use the Octokit.js library shown in the following examples.

Install octokit. For example, npm install octokit. For other ways to install or load octokit, see the Octokit.js README.

2. Choose an endpoint for your request


Choose an endpoint to make a request to. You can explore GitHub's REST API documentation to discover endpoints that you can use to interact with GitHub.


Identify the HTTP method and path of the endpoint. You will send these with your request. For more information, see HTTP method and Path.
For example, the "Create an issue" endpoint uses the HTTP method POST and the path /repos/{owner}/{repo}/issues.


Identify any required path parameters. Required path parameters appear in curly brackets {} in the path of the endpoint. Replace each parameter placeholder with the desired value. For more information, see Path.
For example, the "Create an issue" endpoint uses the path /repos/{owner}/{repo}/issues, and the path parameters are {owner} and {repo}. To use this path in your API request, replace {repo} with the name of the repository where you would like to create a new issue, and replace {owner} with the name of the account that owns the repository.


3. Create an access token
Create an access token to authenticate your request. You can save your token and use it for multiple requests. Give the token any scopes or permissions that are required to access the endpoint. You will send this token in an Authorization header with your request. For more information, see Authentication.
4. Make a request with Octokit.js


Import octokit in your script. For example, import { Octokit } from "octokit";. For other ways to import octokit, see the Octokit.js README.


Create an instance of Octokit with your token. Replace YOUR-TOKEN with your token.
JavaScriptconst octokit = new Octokit({ 
  auth: 'YOUR-TOKEN'
});
const octokit = new Octokit({ 
  auth: 'YOUR-TOKEN'
});



Use octokit.request to execute your request.

Send the HTTP method and path as the first argument to the request method. For more information, see HTTP method and Path.
Specify all path, query, and body parameters in an object as the second argument to the request method. For more information, see Parameters.

In the following example request, the HTTP method is POST, the path is /repos/{owner}/{repo}/issues, the path parameters are owner: "octocat" and repo: "Spoon-Knife", and the body parameters are title: "Created with the REST API" and body: "This is a test issue created by the REST API".
Note

If you are using a fine-grained personal access token, you must replace octocat/Spoon-Knife with a repository that you own or that is owned by an organization that you are a member of. Your token must have access to that repository and have read and write permissions for repository issues. For more information, see Managing your personal access tokens.

JavaScriptawait octokit.request("POST /repos/{owner}/{repo}/issues", {
  owner: "octocat",
  repo: "Spoon-Knife",
  title: "Created with the REST API",
  body: "This is a test issue created by the REST API",
});
await octokit.request("POST /repos/{owner}/{repo}/issues", {
  owner: "octocat",
  repo: "Spoon-Knife",
  title: "Created with the REST API",
  body: "This is a test issue created by the REST API",
});

The request method automatically passes the Accept: application/vnd.github+json header. To pass additional headers or a different Accept header, add a headers property to the object that is passed as a second argument. The value of the headers property is an object with the header names as keys and header values as values.
For example, the following code will send a content-type header with a value of text/plain and a X-GitHub-Api-Version header with a value of 2022-11-28.
JavaScriptawait octokit.request("GET /octocat", {
  headers: {
    "content-type": "text/plain",
    "X-GitHub-Api-Version": "2022-11-28",
  },
});
await octokit.request("GET /octocat", {
  headers: {
    "content-type": "text/plain",
    "X-GitHub-Api-Version": "2022-11-28",
  },
});




Using the response
After you make a request, the API will return the response status code, response headers, and potentially a response body.
About the response code and headers
Every request will return an HTTP status code that indicates the success of the response. For more information about response codes, see the MDN HTTP response status code documentation.
Additionally, the response will include headers that give more details about the response. Headers that start with X- or x- are custom to GitHub. For example, the x-ratelimit-remaining and x-ratelimit-reset headers tell you how many requests you can make in a time period.

To view the status code and headers, use the --include or --i option when you send your request.
For example, this request gets a list of issues in the octocat/Spoon-Knife repository:
gh api \
--header 'Accept: application/vnd.github+json' \
--method GET /repos/octocat/Spoon-Knife/issues \
-F per_page=2 --include

And it returns a response code and headers that look something like this:
HTTP/2.0 200 OK
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, Location, Retry-After, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset
Cache-Control: private, max-age=60, s-maxage=60
Content-Security-Policy: default-src 'none'
Content-Type: application/json; charset=utf-8
Date: Thu, 04 Aug 2022 19:56:41 GMT
Etag: W/"a63dfbcfdb73621e9d2e89551edcf9856731ced534bd7f1e114a5da1f5f73418"
Link: <https://api.github.com/repositories/1300192/issues?per_page=1&page=2>; rel="next", <https://api.github.com/repositories/1300192/issues?per_page=1&page=14817>; rel="last"
Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
Server: GitHub.com
Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
Vary: Accept, Authorization, Cookie, Accept-Encoding, Accept, X-Requested-With
X-Accepted-Oauth-Scopes: repo
X-Content-Type-Options: nosniff
X-Frame-Options: deny
X-Github-Api-Version-Selected: 2022-08-09
X-Github-Media-Type: github.v3; format=json
X-Github-Request-Id: 1C73:26D4:E2E500:1EF78F4:62EC2479
X-Oauth-Client-Id: 178c6fc778ccc68e1d6a
X-Oauth-Scopes: gist, read:org, repo, workflow
X-Ratelimit-Limit: 15000
X-Ratelimit-Remaining: 14996
X-Ratelimit-Reset: 1659645499
X-Ratelimit-Resource: core
X-Ratelimit-Used: 4
X-Xss-Protection: 0

In this example, the response code is 200, which indicates a successful request.


When you make a request with Octokit.js, the request method returns a promise. If the request was successful, the promise resolves to an object that includes the HTTP status code of the response (status) and the response headers (headers). If an error occurs, the promise resolves to an object that includes the HTTP status code of the response (status) and the response headers (response.headers).
You can use a try/catch block to catch an error if it occurs. For example, if the request in the following script is successful, the script will log the status code and the value of the x-ratelimit-remaining header. If the request was not successful, the script will log the status code, the value of the x-ratelimit-remaining header, and the error message.
In the following example, replace REPO-OWNER with the name of the account that owns the repository, and REPO-NAME with the name of the repository.
JavaScripttry {
  const result = await octokit.request("GET /repos/{owner}/{repo}/issues", {
    owner: "REPO-OWNER",
    repo: "REPO-NAME",
    per_page: 2,
  });

  console.log(`Success! Status: ${result.status}. Rate limit remaining: ${result.headers["x-ratelimit-remaining"]}`)

} catch (error) {
  console.log(`Error! Status: ${error.status}. Rate limit remaining: ${error.headers["x-ratelimit-remaining"]}. Message: ${error.response.data.message}`)
}
try {
  const result = await octokit.request("GET /repos/{owner}/{repo}/issues", {
    owner: "REPO-OWNER",
    repo: "REPO-NAME",
    per_page: 2,
  });

  console.log(`Success! Status: ${result.status}. Rate limit remaining: ${result.headers["x-ratelimit-remaining"]}`)

} catch (error) {
  console.log(`Error! Status: ${error.status}. Rate limit remaining: ${error.headers["x-ratelimit-remaining"]}. Message: ${error.response.data.message}`)
}



To view the status code and headers, use the --include or --i option when you send your request.
For example, this request gets a list of issues in the octocat/Spoon-Knife repository:
curl --request GET \
--url "https://api.github.com/repos/octocat/Spoon-Knife/issues?per_page=2" \
--header "Accept: application/vnd.github+json" \
--header "Authorization: Bearer YOUR-TOKEN" \
--include

And it returns a response code and headers that look something like this:
HTTP/2 200
server: GitHub.com
date: Thu, 04 Aug 2022 20:07:51 GMT
content-type: application/json; charset=utf-8
cache-control: public, max-age=60, s-maxage=60
vary: Accept, Accept-Encoding, Accept, X-Requested-With
etag: W/"7fceb7e8c958d3ec4d02524b042578dcc7b282192e6c939070f4a70390962e18"
x-github-media-type: github.v3; format=json
link: <https://api.github.com/repositories/1300192/issues?per_page=2&sort=updated&direction=asc&page=2>; rel="next", <https://api.github.com/repositories/1300192/issues?per_page=2&sort=updated&direction=asc&page=7409>; rel="last"
access-control-expose-headers: ETag, Link, Location, Retry-After, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset
access-control-allow-origin: *
strict-transport-security: max-age=31536000; includeSubdomains; preload
x-frame-options: deny
x-content-type-options: nosniff
x-xss-protection: 0
referrer-policy: origin-when-cross-origin, strict-origin-when-cross-origin
content-security-policy: default-src 'none'
x-ratelimit-limit: 15000
x-ratelimit-remaining: 14996
x-ratelimit-reset: 1659645535
x-ratelimit-resource: core
x-ratelimit-used: 4
accept-ranges: bytes
content-length: 4936
x-github-request-id: 14E0:4BC6:F1B8BA:208E317:62EC2715

In this example, the response code is 200, which indicates a successful request.

About the response body
Many endpoints will return a response body. Unless otherwise specified, the response body is in JSON format. Blank fields are included as null instead of being omitted. All timestamps return in UTC time, ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
Unlike the GraphQL API where you specify what information you want, the REST API typically returns more information than you need. If desired, you can parse the response to pull out specific pieces of information.

For example, you can use > to redirect the response to a file. In the following example, replace REPO-OWNER with the name of the account that owns the repository, and REPO-NAME with the name of the repository.
Shellgh api \
--header 'Accept: application/vnd.github+json' \
--method GET /repos/REPO-OWNER/REPO-NAME/issues \
-F per_page=2 > data.json
gh api \
--header 'Accept: application/vnd.github+json' \
--method GET /repos/REPO-OWNER/REPO-NAME/issues \
-F per_page=2 > data.json

Then you can use jq to get the title and author ID of each issue:
Shelljq '.[] | {title: .title, authorID: .user.id}' data.json
jq '.[] | {title: .title, authorID: .user.id}' data.json

The previous two commands return something like:
{
  "title": "Update index.html",
  "authorID": 10701255
}
{
  "title": "Edit index file",
  "authorID": 53709285
}

For more information about jq, see the jq documentation.


For example, you can get the title and author ID of each issue. In the following example, replace REPO-OWNER with the name of the account that owns the repository, and REPO-NAME with the name of the repository.
JavaScripttry {
  const result = await octokit.request("GET /repos/{owner}/{repo}/issues", {
    owner: "REPO-OWNER",
    repo: "REPO-NAME",
    per_page: 2,
  });

  const titleAndAuthor = result.data.map(issue => {title: issue.title, authorID: issue.user.id})

  console.log(titleAndAuthor)

} catch (error) {
  console.log(`Error! Status: ${error.status}. Message: ${error.response.data.message}`)
}
try {
  const result = await octokit.request("GET /repos/{owner}/{repo}/issues", {
    owner: "REPO-OWNER",
    repo: "REPO-NAME",
    per_page: 2,
  });

  const titleAndAuthor = result.data.map(issue => {title: issue.title, authorID: issue.user.id})

  console.log(titleAndAuthor)

} catch (error) {
  console.log(`Error! Status: ${error.status}. Message: ${error.response.data.message}`)
}



For example, you can use > to redirect the response to a file. In the following example, replace REPO-OWNER with the name of the account that owns the repository, and REPO-NAME with the name of the repository.
Shellcurl --request GET \
--url "https://api.github.com/repos/REPO-OWNER/REPO-NAME/issues?per_page=2" \
--header "Accept: application/vnd.github+json" \
--header "Authorization: Bearer YOUR-TOKEN" > data.json
curl --request GET \
--url "https://api.github.com/repos/REPO-OWNER/REPO-NAME/issues?per_page=2" \
--header "Accept: application/vnd.github+json" \
--header "Authorization: Bearer YOUR-TOKEN" > data.json

Then you can use jq to get the title and author ID of each issue:
Shelljq '.[] | {title: .title, authorID: .user.id}' data.json
jq '.[] | {title: .title, authorID: .user.id}' data.json

The previous two commands return something like:
{
  "title": "Update index.html",
  "authorID": 10701255
}
{
  "title": "Edit index file",
  "authorID": 53709285
}

For more information about jq, see the jq documentation.

Detailed versus summary representations
A response can include all attributes for a resource or only a subset of attributes, depending on whether you fetch an individual resource or a list of resources.

When you fetch an individual resource, like a specific repository, the response will typically include all attributes for that resource. This is the "detailed" representation of the resource.
When you fetch a list of resources, like a list of multiple repositories, the response will only include a subset of the attributes for each resource. This is the "summary" representation of the resource.

Note that authorization sometimes influences the amount of detail included in a representation.
The reason for this is because some attributes are computationally expensive for the API to provide, so GitHub excludes those attributes from the summary representation. To obtain those attributes, you can fetch the detailed representation.
The documentation provides an example response for each API method. The example response illustrates all attributes that are returned by that method.
Hypermedia
All resources may have one or more *_url properties linking to other resources. These are meant to provide explicit URLs so that proper API clients don't need to construct URLs on their own. It is highly recommended that API clients use these. Doing so will make future upgrades of the API easier for developers. All URLs are expected to be proper RFC 6570 URI templates.
You can then expand these templates using something like the uri_template gem:
>> tmpl = URITemplate.new('/notifications{?since,all,participating}')
>> tmpl.expand
=> "/notifications"

>> tmpl.expand all: 1
=> "/notifications?all=1"

>> tmpl.expand all: 1, participating: 1
=> "/notifications?all=1&participating=1"

Next steps
This article demonstrated how to list and create issues in a repository. For more practice, try to comment on an issue, edit the title of an issue, or close an issue. For more information, see the "Create an issue comment" endpoint and the "Update an issue" endpoint.
For more information about other endpoints that you can use, see the REST reference documentation.\n\n\n\nREST API/Using the REST API/Rate limitsRate limits for the REST APILearn about REST API rate limits, how to avoid exceeding them, and what to do if you do exceed them.In this articleAbout primary rate limitsAbout secondary rate limitsChecking the status of your rate limitExceeding the rate limitStaying under the rate limitGetting a higher rate limitAbout primary rate limits
GitHub limits the number of REST API requests that you can make within a specific amount of time. This limit helps prevent abuse and denial-of-service attacks, and ensures that the API remains available for all users.
Some endpoints, like the search endpoints, have more restrictive limits. For more information about these endpoints, see REST API endpoints for rate limits. The GraphQL API also has a separate primary rate limit. See Rate limits and node limits for the GraphQL API.
In general, you can calculate your primary rate limit for the REST API based on your method of authentication, as described below.
Primary rate limit for unauthenticated users
You can make unauthenticated requests if you are only fetching public data. Unauthenticated requests are associated with the originating IP address, not with the user or application that made the request.
The primary rate limit for unauthenticated requests is 60 requests per hour.
Primary rate limit for authenticated users
You can use a personal access token to make API requests. Additionally, you can authorize a GitHub App or OAuth app, which can then make API requests on your behalf.
All of these requests count towards your personal rate limit of 5,000 requests per hour. Requests made on your behalf by a GitHub App that is owned by a GitHub Enterprise Cloud organization have a higher rate limit of 15,000 requests per hour. Similarly, requests made on your behalf by a OAuth app that is owned or approved by a GitHub Enterprise Cloud organization have a higher rate limit of 15,000 requests per hour if you are a member of the GitHub Enterprise Cloud organization.
Primary rate limit for GitHub App installations
GitHub Apps authenticating with an installation access token use the installation's minimum rate limit of 5,000 requests per hour. If the installation is on a GitHub Enterprise Cloud organization, the installation has a rate limit of 15,000 requests per hour.
For installations that are not on a GitHub Enterprise Cloud organization, the rate limit for the installation will scale with the number of users and repositories. Installations that have more than 20 repositories receive another 50 requests per hour for each repository. Installations that are on an organization that have more than 20 users receive another 50 requests per hour for each user. The rate limit cannot increase beyond 12,500 requests per hour.
Primary rate limits for GitHub App user access tokens (as opposed to installation access tokens) are dictated by the primary rate limits for the authenticated user. This rate limit is combined with any requests that another GitHub App or OAuth app makes on that user's behalf and any requests that the user makes with a personal access token. See Primary rate limit for authenticated users.
Primary rate limit for OAuth apps
Primary rate limits for OAuth access tokens generated by a OAuth app are dictated by the primary rate limits for authenticated users. This rate limit is combined with any requests that another GitHub App or OAuth app makes on that user's behalf and any requests that the user makes with a personal access token. See Primary rate limit for authenticated users.
OAuth apps can also use their client ID and client secret to fetch public data. For example:
curl -u YOUR_CLIENT_ID:YOUR_CLIENT_SECRET -I https://api.github.com/meta

For these requests, the rate limit is 5,000 requests per hour per OAuth app. If the app is owned by a GitHub Enterprise Cloud organization, the rate limit is 15,000 requests per hour.
Note

Never include your app's client secret in client-side code or in code that runs on a user device. The client secret can be used to generate OAuth access tokens for users who have authorized your app, so you should always keep the client secret secure.

Primary rate limit for GITHUB_TOKEN in GitHub Actions
You can use the built-in GITHUB_TOKEN to authenticate requests in GitHub Actions workflows. See Automatic token authentication.
The rate limit for GITHUB_TOKEN is 1,000 requests per hour per repository. For requests to resources that belong to a GitHub Enterprise Cloud account, the limit is 15,000 requests per hour per repository.
About secondary rate limits
In addition to primary rate limits, GitHub enforces secondary rate limits in order to prevent abuse and keep the API available for all users.
You may encounter a secondary rate limit if you:

Make too many concurrent requests. No more than 100 concurrent requests are allowed. This limit is shared across the REST API and GraphQL API.
Make too many requests to a single endpoint per minute. No more than 900 points per minute are allowed for REST API endpoints, and no more than 2,000 points per minute are allowed for the GraphQL API endpoint. For more information about points, see Calculating points for the secondary rate limit.
Make too many requests per minute. No more than 90 seconds of CPU time per 60 seconds of real time is allowed. No more than 60 seconds of this CPU time may be for the GraphQL API. You can roughly estimate the CPU time by measuring the total response time for your API requests.
Make too many requests that consume excessive compute resources in a short period of time.
Create too much content on GitHub in a short amount of time. In general, no more than 80 content-generating requests per minute and no more than 500 content-generating requests per hour are allowed. Some endpoints have lower content creation limits. Content creation limits include actions taken on the GitHub web interface as well as via the REST API and GraphQL API.

These secondary rate limits are subject to change without notice. You may also encounter a secondary rate limit for undisclosed reasons.
Calculating points for the secondary rate limit
Some secondary rate limits are determined by the point values of requests. For GraphQL requests, these point values are separate from the point value calculations for the primary rate limit.

























RequestPointsGraphQL requests without mutations1GraphQL requests with mutations5Most REST API GET, HEAD, and OPTIONS requests1Most REST API POST, PATCH, PUT, or DELETE requests5
Some REST API endpoints have a different point cost that is not shared publicly.
Checking the status of your rate limit
You can use the headers that are sent with each response to determine the current status of your primary rate limit.





























Header nameDescriptionx-ratelimit-limitThe maximum number of requests that you can make per hourx-ratelimit-remainingThe number of requests remaining in the current rate limit windowx-ratelimit-usedThe number of requests you have made in the current rate limit windowx-ratelimit-resetThe time at which the current rate limit window resets, in UTC epoch secondsx-ratelimit-resourceThe rate limit resource that the request counted against. For more information about the different resources, see REST API endpoints for rate limits.
You can also call the GET /rate_limit endpoint to check your rate limit. Calling this endpoint does not count against your primary rate limit, but it can count against your secondary rate limit. See REST API endpoints for rate limits. When possible, you should use the rate limit response headers instead of calling the API to check your rate limit.
There is not a way to check the status of your secondary rate limit.
Exceeding the rate limit
If you exceed your primary rate limit, you will receive a 403 or 429 response, and the x-ratelimit-remaining header will be 0. You should not retry your request until after the time specified by the x-ratelimit-reset header.
If you exceed a secondary rate limit, you will receive a 403 or 429 response and an error message that indicates that you exceeded a secondary rate limit. If the retry-after response header is present, you should not retry your request until after that many seconds has elapsed. If the x-ratelimit-remaining header is 0, you should not retry your request until after the time, in UTC epoch seconds, specified by the x-ratelimit-reset header. Otherwise, wait for at least one minute before retrying. If your request continues to fail due to a secondary rate limit, wait for an exponentially increasing amount of time between retries, and throw an error after a specific number of retries.
Continuing to make requests while you are rate limited may result in the banning of your integration.
Staying under the rate limit
You should follow best practices to help you stay under the rate limits. See Best practices for using the REST API.
Getting a higher rate limit
If you want a higher primary rate limit, consider making authenticated requests instead of unauthenticated requests. Authenticated requests have a significantly higher rate limit than unauthenticated requests.
If you are using a personal access token for automation in your organization, consider whether a GitHub App will work instead. The rate limit for GitHub Apps using an installation access token scales with the number of repositories and number of organization users. See About creating GitHub Apps.
If you are using GitHub Apps or OAuth apps, consider upgrading to GitHub Enterprise Cloud. GitHub Apps or OAuth apps have higher rate limits for organizations that use GitHub Enterprise Cloud.\n\n\n\nREST API/Using the REST API/PaginationUsing pagination in the REST APILearn how to navigate through paginated responses from the REST API.In this articleAbout paginationUsing link headersChanging the number of items per pageScripting with paginationAbout pagination
When a response from the REST API would include many results, GitHub will paginate the results and return a subset of the results. For example, GET /repos/octocat/Spoon-Knife/issues will only return 30 issues from the octocat/Spoon-Knife repository even though the repository includes over 1600 open issues. This makes the response easier to handle for servers and for people.
You can use the link header from the response to request additional pages of data. If an endpoint supports the per_page query parameter, you can control how many results are returned on a page.
This article demonstrates how to request additional pages of results for paginated responses, how to change the number of results returned on each page, and how to write a script to fetch multiple pages of results.
Using link headers
When a response is paginated, the response headers will include a link header. If the endpoint does not support pagination, or if all results fit on a single page, the link header will be omitted.
The link header contains URLs that you can use to fetch additional pages of results. For example, the previous, next, first, and last page of results.
To see the response headers for a particular endpoint, you can use curl, GitHub CLI, or a library you're using to make requests. To see the response headers if you are using a library to make requests, follow the documentation for that library. To see the response headers if you are using curl or GitHub CLI, pass the --include flag with your request. For example:
curl --include --request GET \
--url "https://api.github.com/repos/octocat/Spoon-Knife/issues" \
--header "Accept: application/vnd.github+json"

If the response is paginated, the link header will look something like this:
link: <https://api.github.com/repositories/1300192/issues?page=2>; rel="prev", <https://api.github.com/repositories/1300192/issues?page=4>; rel="next", <https://api.github.com/repositories/1300192/issues?page=515>; rel="last", <https://api.github.com/repositories/1300192/issues?page=1>; rel="first"

The link header provides the URL for the previous, next, first, and last page of results:

The URL for the previous page is followed by rel="prev".
The URL for the next page is followed by rel="next".
The URL for the last page is followed by rel="last".
The URL for the first page is followed by rel="first".

In some cases, only a subset of these links are available. For example, the link to the previous page won't be included if you are on the first page of results, and the link to the last page won't be included if it can't be calculated.
You can use the URLs from the link header to request another page of results. For example, to request the last page of results based on the previous example:
curl --include --request GET \
--url "https://api.github.com/repositories/1300192/issues?page=515" \
--header "Accept: application/vnd.github+json"

The URLs in the link header use query parameters to indicate which page of results to return. The query parameters in the link URLs may differ between endpoints, however each paginated endpoint will use the page, before/after, or since query parameters. (Some endpoints use the since parameter for something other than pagination.) In all cases, you can use the URLs in the link header to fetch additional pages of results. For more information about query parameters see Getting started with the REST API.
Changing the number of items per page
If an endpoint supports the per_page query parameter, then you can control how many results are returned on a page. For more information about query parameters see Getting started with the REST API.
For example, this request uses the per_page query parameter to return two items per page:
curl --include --request GET \
--url "https://api.github.com/repos/octocat/Spoon-Knife/issues?per_page=2" \
--header "Accept: application/vnd.github+json"

The per_page parameter will automatically be included in the link header. For example:
link: <https://api.github.com/repositories/1300192/issues?per_page=2&page=2>; rel="next", <https://api.github.com/repositories/1300192/issues?per_page=2&page=7715>; rel="last"

Scripting with pagination
Instead of manually copying URLs from the link header, you can write a script to fetch multiple pages of results.
The following examples use JavaScript and GitHub's Octokit.js library. For more information about Octokit.js, see Getting started with the REST API and the Octokit.js README.
Example using the Octokit.js pagination method
To fetch paginated results with Octokit.js, you can use octokit.paginate(). octokit.paginate() will fetch the next page of results until it reaches the last page and then return all of the results as a single array. A few endpoints return paginated results as array in an object, as opposed to returning the paginated results as an array. octokit.paginate() always returns an array of items even if the raw result was an object.
For example, this script gets all of the issues from the octocat/Spoon-Knife repository. Although it requests 100 issues at a time, the function won't return until the last page of data is reached.
JavaScriptimport { Octokit } from "octokit";

const octokit = new Octokit({ });

const data = await octokit.paginate("GET /repos/{owner}/{repo}/issues", {
  owner: "octocat",
  repo: "Spoon-Knife",
  per_page: 100,
  headers: {
    "X-GitHub-Api-Version": "2022-11-28",
  },
});

console.log(data)
import { Octokit } from "octokit";

const octokit = new Octokit({ });

const data = await octokit.paginate("GET /repos/{owner}/{repo}/issues", {
  owner: "octocat",
  repo: "Spoon-Knife",
  per_page: 100,
  headers: {
    "X-GitHub-Api-Version": "2022-11-28",
  },
});

console.log(data)

You can pass an optional map function to octokit.paginate() to end pagination before the last page is reached or to reduce memory usage by keeping only a subset of the response. You can also use octokit.paginate.iterator() to iterate through a single page at a time instead of requesting every page. For more information, see the Octokit.js documentation.
Example creating a pagination method
If you are using another language or library that doesn't have a pagination method, you can build your own pagination method. This example still uses the Octokit.js library to make requests, but does not rely on octokit.paginate().
The getPaginatedData function makes a request to an endpoint with octokit.request(). The data from the response is processed by parseData, which handles cases where no data is returned or cases where the data that is returned is an object instead of an array. The processed data is then appended to a list that contains all of the paginated data collected so far. If the response includes a link header and if the link header includes a link for the next page, then the function uses a RegEx pattern (nextPattern) to get the URL for the next page. The function then repeats the previous steps, now using this new URL. Once the link header no longer includes a link to the next page, all of the results are returned.
JavaScriptimport { Octokit } from "octokit";

const octokit = new Octokit({ });

async function getPaginatedData(url) {
  const nextPattern = /(?<=<)([\S]*)(?=>; rel="Next")/i;
  let pagesRemaining = true;
  let data = [];

  while (pagesRemaining) {
    const response = await octokit.request(`GET ${url}`, {
      per_page: 100,
      headers: {
        "X-GitHub-Api-Version":
          "2022-11-28",
      },
    });

    const parsedData = parseData(response.data)
    data = [...data, ...parsedData];

    const linkHeader = response.headers.link;

    pagesRemaining = linkHeader && linkHeader.includes(`rel=\"next\"`);

    if (pagesRemaining) {
      url = linkHeader.match(nextPattern)[0];
    }
  }

  return data;
}

function parseData(data) {
  // If the data is an array, return that
    if (Array.isArray(data)) {
      return data
    }

  // Some endpoints respond with 204 No Content instead of empty array
  //   when there is no data. In that case, return an empty array.
  if (!data) {
    return []
  }

  // Otherwise, the array of items that we want is in an object
  // Delete keys that don't include the array of items
  delete data.incomplete_results;
  delete data.repository_selection;
  delete data.total_count;
  // Pull out the array of items
  const namespaceKey = Object.keys(data)[0];
  data = data[namespaceKey];

  return data;
}

const data = await getPaginatedData("/repos/octocat/Spoon-Knife/issues");

console.log(data);
import { Octokit } from "octokit";

const octokit = new Octokit({ });

async function getPaginatedData(url) {
  const nextPattern = /(?<=<)([\S]*)(?=>; rel="Next")/i;
  let pagesRemaining = true;
  let data = [];

  while (pagesRemaining) {
    const response = await octokit.request(`GET ${url}`, {
      per_page: 100,
      headers: {
        "X-GitHub-Api-Version":
          "2022-11-28",
      },
    });

    const parsedData = parseData(response.data)
    data = [...data, ...parsedData];

    const linkHeader = response.headers.link;

    pagesRemaining = linkHeader && linkHeader.includes(`rel=\"next\"`);

    if (pagesRemaining) {
      url = linkHeader.match(nextPattern)[0];
    }
  }

  return data;
}

function parseData(data) {
  // If the data is an array, return that
    if (Array.isArray(data)) {
      return data
    }

  // Some endpoints respond with 204 No Content instead of empty array
  //   when there is no data. In that case, return an empty array.
  if (!data) {
    return []
  }

  // Otherwise, the array of items that we want is in an object
  // Delete keys that don't include the array of items
  delete data.incomplete_results;
  delete data.repository_selection;
  delete data.total_count;
  // Pull out the array of items
  const namespaceKey = Object.keys(data)[0];
  data = data[namespaceKey];

  return data;
}

const data = await getPaginatedData("/repos/octocat/Spoon-Knife/issues");

console.log(data);\n\n\n\nREST API/Using the REST API/LibrariesLibraries for the REST APIYou can use the official Octokit libraries and other third-party libraries to extend and simplify how you use the GitHub API.In this articleAbout librariesOfficial GitHub librariesThird-party librariesAbout libraries
You can use libraries to extend and simplify the way your application interacts with GitHub's API. Each library provides pre-built code for a specific programming language. After integrating a library into your project, you can use the pre-built code modules to interact with GitHub's API via a specific programming language.
GitHub maintains official Octokit libraries for some languages. There are also third-party libraries that you can use with GitHub's API, which are not maintained by GitHub.
Official GitHub libraries
GitHub maintains these official client libraries for the GitHub API. These repositories are open source, and community contributions are welcome.
For more information, see Scripting with the REST API and JavaScript and Scripting with the REST API and Ruby.

JavaScript: octokit.js
Ruby: octokit.rb
.NET: octokit.net
Terraform: terraform-provider-github

Third-party libraries
The following are examples of third-party libraries that you can use to interact with the GitHub API in various programming languages.
These third-party libraries are not maintained by GitHub. Libraries provided by third parties are governed by separate terms of service, privacy policy, and support documentation.
Clojure

Tentacles: clj-commons/tentacles

Dart

github.dart: SpinlockLabs/github.dart

Emacs Lisp

gh.el: sigma/gh.el

Go

go-github: google/go-github

Haskell

haskell-github: haskell-github/github

Java

GitHub API for Java, an object oriented representation of the GitHub API: hub4j/github-api
JCabi GitHub API, based on Java7 JSON API (JSR-353), simplifies tests with a runtime GitHub stub, and covers the entire API: github.jcabi.com (Personal Website)

JavaScript

NodeJS GitHub library: pksunkara/octonode
Github.js wrapper around the GitHub API: github-tools/github
Promise-Based CoffeeScript library for the Browser or NodeJS: philschatz/github-client

Julia

GitHub.jl: JuliaWeb/GitHub.jl

OCaml

ocaml-github: mirage/ocaml-github

Perl

Pithub: plu/Pithub
Net::GitHub: fayland/perl-net-github

PHP

PHP GitHub API: KnpLabs/php-github-api
GitHub Joomla! Package: joomla-framework/github-api
GitHub bridge for Laravel: GrahamCampbell/Laravel-GitHub

PowerShell

PowerShellForGitHub: microsoft/PowerShellForGitHub

Python

gidgethub: gidgethub/gidgethub
ghapi: fastai/ghapi
PyGithub: PyGithub/PyGithub
libsaas: duckboard/libsaas
github3.py: sigmavirus24/github3.py
agithub: mozilla/agithub
github-flask: github-flask (Official Website)
githubkit: yanyongyu/githubkit
octokit.py: khornberg/octokit.py

Ruby

GitHub API Gem: piotrmurach/github

Rust

Octocrab: XAMPPRocky/octocrab
Octocat: octocat-rs/octocat-rs

Scala

Github4s: 47deg/github4s

Shell

ok.sh: whiteinge/ok.sh\n\n\n\nREST API/Using the REST API/Best practicesBest practices for using the REST APIFollow these best practices when using GitHub's API.In this articleAvoid pollingMake authenticated requestsAvoid concurrent requestsPause between mutative requestsHandle rate limit errors appropriatelyFollow redirectsDo not manually parse URLsUse conditional requests if appropriateDo not ignore errorsFurther readingAvoid polling
You should subscribe to webhook events instead of polling the API for data. This will help your integration stay within the API rate limit. For more information, see Webhooks documentation.
Make authenticated requests
Authenticated requests have a higher primary rate limit than unauthenticated requests. To avoid exceeding the rate limit, you should make authenticated requests. For more information, see Rate limits for the REST API.
Avoid concurrent requests
To avoid exceeding secondary rate limits, you should make requests serially instead of concurrently. To achieve this, you can implement a queue system for requests.
Pause between mutative requests
If you are making a large number of POST, PATCH, PUT, or DELETE requests, wait at least one second between each request. This will help you avoid secondary rate limits.
Handle rate limit errors appropriately
If you receive a rate limit error, you should stop making requests temporarily according to these guidelines:

If the retry-after response header is present, you should not retry your request until after that many seconds has elapsed.
If the x-ratelimit-remaining header is 0, you should not make another request until after the time specified by the x-ratelimit-reset header. The x-ratelimit-reset header is in UTC epoch seconds.
Otherwise, wait for at least one minute before retrying. If your request continues to fail due to a secondary rate limit, wait for an exponentially increasing amount of time between retries, and throw an error after a specific number of retries.

Continuing to make requests while you are rate limited may result in the banning of your integration.
Follow redirects
The GitHub REST API uses HTTP redirection where appropriate. You should assume that any
request may result in a redirection. Receiving an HTTP redirection is not an error, and you should follow the redirect.
A 301 status code indicates permanent redirection. You should repeat your request to the URL specified by the location header. Additionally, you should update your code to use this URL for future requests.
A 302 or 307 status code indicates temporary redirection. You should repeat your request to the URL specified by the location header. However, you should not update your code to use this URL for future requests.
Other redirection status codes may be used in accordance with HTTP specifications.
Do not manually parse URLs
Many API endpoints return URL values for fields in the response body. You should not try to parse these URLs or to predict the structure of future URLs. This can cause your integration to break if GitHub changes the structure of the URL in the future. Instead, you should look for a field that contains the information that you need. For example, the endpoint to create an issue returns an html_url field with a value like https://github.com/octocat/Hello-World/issues/1347 and a number field with a value like 1347. If you need to know the number of the issue, use the number field instead of parsing the html_url field.
Similarly, you should not try to manually construct pagination queries. Instead, you should use the link headers to determine what pages of results you can request. For more information, see Using pagination in the REST API.
Use conditional requests if appropriate
Most endpoints return an etag header, and many endpoints return a last-modified header. You can use the values of these headers to make conditional GET requests. If the response has not changed, you will receive a 304 Not Modified response. Making a conditional request does not count against your primary rate limit if a 304 response is returned.
For example, if a previous request returned an etag header value of 644b5b0155e6404a9cc4bd9d8b1ae730, you can use the if-none-match header in a future request:
curl https://api.github.com/meta --include --header 'if-none-match: "644b5b0155e6404a9cc4bd9d8b1ae730"'

For example, if a previous request returned a last-modified header value of Wed, 25 Oct 2023 19:17:59 GMT, you can use the if-modified-since header in a future request:
curl https://api.github.com/repos/github/docs --include --header 'if-modified-since: Wed, 25 Oct 2023 19:17:59 GMT'

Conditional requests for unsafe methods, such as POST, PUT, PATCH, and DELETE are not supported unless otherwise noted in the documentation for a specific endpoint.
Do not ignore errors
You should not ignore repeated 4xx and 5xx error codes. Instead, you should ensure that you are correctly interacting with the API. For example, if an endpoint requests a string and you are passing it a numeric value, you will receive a validation error. Similarly, attempting to access an unauthorized or nonexistent endpoint will result in a 4xx error.
Intentionally ignoring repeated validation errors may result in the suspension of your app for abuse.
Further reading

Best practices for using webhooks
Best practices for creating a GitHub App\n\n\n\nREST API/Using the REST API/TroubleshootingTroubleshooting the REST APILearn how to diagnose and resolve common problems for the REST API.In this articleRate limit errors404 Not Found for an existing resourceMissing resultsRequires authentication when using basic authenticationTimeoutsResource not accessibleProblems parsing JSONBody should be a JSON objectInvalid requestValidation FailedNot a supported versionUser agent requiredOther errorsFurther readingRate limit errors
GitHub enforces rate limits to ensure that the API stays available for all users. For more information, see Rate limits for the REST API.
If you exceed your primary rate limit, you will receive a 403 Forbidden or 429 Too Many Requests  response, and the x-ratelimit-remaining header will be 0. If you exceed a secondary rate limit, you will receive a 403 Forbidden or 429 Too Many Requests  response and an error message that indicates that you exceeded a secondary rate limit.
If you receive a rate limit error, you should stop making requests temporarily according to these guidelines:

If the retry-after response header is present, you should not retry your request until after that many seconds has elapsed.
If the x-ratelimit-remaining header is 0, you should not make another request until after the time specified by the x-ratelimit-reset header. The x-ratelimit-reset header is in UTC epoch seconds.
Otherwise, wait for at least one minute before retrying. If your request continues to fail due to a secondary rate limit, wait for an exponentially increasing amount of time between retries, and throw an error after a specific number of retries.

Continuing to make requests while you are rate limited may result in the banning of your integration.
For more information about how to avoid exceeding the rate limits, see Best practices for using the REST API.
404 Not Found for an existing resource
If you make a request to access a private resource and your request isn't properly authenticated, you will receive a 404 Not Found response. GitHub uses a 404 Not Found response instead of a 403 Forbidden response to avoid confirming the existence of private repositories.
If you get a 404 Not Found response when you know that the resource that you are requesting exists, you should check your authentication. For example:

If you are using a personal access token (classic), you should ensure that:

The token has the scopes that are required to use the endpoint. For more information, see Scopes for OAuth apps and Managing your personal access tokens.
The owner of the token has any permissions that are required to use the endpoint. For example, if an endpoint can only be used by organization owners, only users that are owners of the affected organization can use the endpoint.
The token has not been expired or revoked. For more information, see Token expiration and revocation.


If you are using a fine-grained personal access token, you should ensure that:

The token has the permissions that are required to use the endpoint. For more information about the required permissions, see the documentation for the endpoint.
The resource owner that was specified for the token matches the owner of the resource that the endpoint will affect. For more information, see Managing your personal access tokens.
The token has access to any private repositories that the endpoint will affect. For more information, see Managing your personal access tokens.
The owner of the token has any permissions that are required to use the endpoint. For example, if an endpoint can only be used by organization owners, only users that are owners of the affected organization can use the endpoint.
The token has not been expired or revoked. For more information, see Token expiration and revocation.


If you are using a GitHub App installation access token, you should ensure that:

The GitHub App has the permissions that are required to use the endpoint. For more information about the required permissions, see the documentation for the endpoint.
The endpoint is only affecting resources owned by the account where the GitHub App is installed.
The GitHub App has access to any repositories that the endpoint will affect.
The token has not been expired or revoked. For more information, see Token expiration and revocation.


If you are using a GitHub App user access token, you should ensure that:

The GitHub App has the permissions that are required to use the endpoint. For more information about the required permissions, see the documentation for the endpoint.
The user that authorized the token has any permissions that are required to use the endpoint. For example, if an endpoint can only be used by organization owners, only users that are owners of the affected organization can use the endpoint.
The GitHub App has access to any repositories that the endpoint will affect.
The user has access to any repositories that the endpoint will affect.
The user has approved any updated permissions for your GitHub App. For more information, see Approving updated permissions for a GitHub App.


If you are using an OAuth app user access token, you should ensure that:

The token has the scopes that are required to use the endpoint. For more information, see Scopes for OAuth apps.
The user that authorized the token has any permissions that are required to use the endpoint. For example, if an endpoint can only be used by organization owners, only users that are owners of the affected organization can use the endpoint.
The organization has not blocked OAuth app access, if you are using an endpoint that will affect resources owned by an organization. App owners cannot see whether their app is blocked, but they can instruct users of the app to check this. For more information, see About OAuth app access restrictions.
The token has not been expired or revoked. For more information, see Token expiration and revocation.


If you are using GITHUB_TOKEN in a GitHub Actions workflow, you should ensure that:

The endpoint is only affecting resources owned by the repository where the workflow is running. If you need to access resources outside of that repository, such as resources owned by an organization or resources owned by another repository, you should use a personal access token or an access token for a GitHub App.



For more information about authentication, see Authenticating to the REST API.
You should also check for typos in your URL. For example, adding a trailing slash to the endpoint will result in a 404 Not Found. You can refer to the reference documentation for the endpoint to confirm that you have the correct URL.
Additionally, any path parameters must be URL encoded. For example, any slashes in the parameter value must be replaced with %2F. If you don't properly encode any slashes in the parameter name, the endpoint URL will be misinterpreted.
Missing results
Most endpoints that return a list of resources support pagination. For most of these endpoints, only the first 30 resources are returned by default. In order to see all of the resources, you need to paginate through the results. For more information, see Using pagination in the REST API.
If you are using pagination correctly and still do not see all of the results that you expect, you should confirm that the authentication credentials that you used have access to all of the expected resources. For example, if you are using a GitHub App installation access token, if the installation was only granted access to a subset of repositories in an organization, any request for all repositories in that organization will return only the repositories that the app installation can access.
Requires authentication when using basic authentication
Basic authentication with your username and password is not supported. Instead, you should use a personal access token or an access token for a GitHub App or OAuth app. For more information, see Authenticating to the REST API.
Timeouts
If GitHub takes more than 10 seconds to process an API request, GitHub will terminate the request and you will receive a timeout response and a "Server Error" message.
GitHub reserves the right to change the timeout window to protect the speed and reliability of the API.
You can check the status of the REST API at githubstatus.com to determine whether the timeout is due to a problem with the API. You can also try to simplify your request or try your request later. For example, if you are requesting 100 items on a page, you can try requesting fewer items.
Resource not accessible
If you are using a GitHub App or fine-grained personal access token and you receive a "Resource not accessible by integration" or "Resource not accessible by personal access token" error, then your token has insufficient permissions. For more information about the required permissions, see the documentation for the endpoint.
You can use the X-Accepted-GitHub-Permissions header to identify the permissions that are required to access the REST API endpoint.
The value of the X-Accepted-GitHub-Permissions header is a comma separated list of the permissions that are required to use the endpoint. Occasionally, you can choose from multiple permission sets. In these cases, multiple comma-separated lists will be separated by a semicolon.
For example:

X-Accepted-GitHub-Permissions: contents=read means that your GitHub App or fine-grained personal access token needs read access to the contents permission.
X-Accepted-GitHub-Permissions: pull_requests=write,contents=read means that your GitHub App or fine-grained personal access token needs write access to the pull request permission and read access to the contents permission.
X-Accepted-GitHub-Permissions: pull_requests=read,contents=read; issues=read,contents=read means that your GitHub App or fine-grained personal access token needs either read access to the pull request permission and read access to the contents permission, or read access to the issues permission and read access to the contents permission.

Problems parsing JSON
If you send invalid JSON in the request body, you may receive a 400 Bad Request response and a "Problems parsing JSON" error message. You can use a linter or JSON validator to help you identify errors in your JSON.
Body should be a JSON object
If the endpoint expects a JSON object and you do not format your request body as a JSON object, you may receive a 400 Bad Request response and a "Body should be a JSON object" error message.
Invalid request
If you omit required parameters or you use the wrong type for a parameter, you may receive a 422 Unprocessable Entity response and an "Invalid request" error message. For example, you will get this error if you specify a parameter value as an array but the endpoint is expecting a string. You can refer to the reference documentation for the endpoint to verify that you are using the correct parameter types and that you are including all of the required parameters.
Validation Failed
If your request could not be processed, you may receive a 422 Unprocessable Entity response and a "Validation Failed" error message. The response body will include an errors property, which includes a code property to help you diagnose the problem.

































CodeDescriptionmissingA resource does not exist.missing_fieldA parameter that was required was not specified. Review the documentation for the endpoint to see what parameters are required.invalidThe formatting of a parameter is invalid. Review the endpoint documentation for more specific information.already_existsAnother resource has the same value as one of your parameters. This can happen in resources that must have some unique key (such as label names).unprocessableThe parameters that were provided were invalid.customRefer to the message property to diagnose the error.
Not a supported version
You should use the X-GitHub-Api-Version header to specify an API version. For example:
curl --header "X-GitHub-Api-Version:2022-11-28" https://api.github.com/zen

If you specify a version that does not exist, you will receive a 400 Bad Request error and a message about the version not being supported.
For more information, see API Versions.
User agent required
Requests without a valid User-Agent header will be rejected. You should use your username or the name of your application for the User-Agent value.
curl sends a valid User-Agent header by default.
Other errors
If you observe an error that is not addressed here, you should refer to the error message that the API gives you. Most error messages will provide a clue about what is wrong and a link to relevant documentation.
If you observe unexpected failures, you can use githubstatus.com or the GitHub status API to check for incidents affecting the API.
Further reading

Best practices for using the REST API
Troubleshooting webhooks
Best practices for creating a GitHub App\n\n\n\nREST API/Using the REST API/TimezonesTimezones and the REST APISome REST API endpoints allow you to specify timezone information with your request.Some requests that create new data, such as creating a new commit, allow you to provide timezone information when specifying or generating timestamps.
Note that these rules apply only to data passed to the API, not to data returned by the API. Timestamps returned by the API are in UTC time, ISO 8601 format.
Determining the timezone for a request
To determine timezone information for applicable API calls, we apply these rules in order of priority:

Explicitly providing an ISO 8601 timestamp with timezone information
Using the Time-Zone header
Using the last known timezone for the user
Defaulting to UTC without other timezone information

Explicitly providing an ISO 8601 timestamp with timezone information
For API calls that allow for a timestamp to be specified, we use that exact timestamp. These timestamps look something like 2014-02-27T15:05:06+01:00.
An example of this is the API to manage commits. For more information, see REST API endpoints for Git commits.
Using the Time-Zone header
It is possible to supply a Time-Zone header, which defines a timezone according to the list of names from the Olson database.
curl -H "Time-Zone: Europe/Amsterdam" -X POST https://api.github.com/repos/github-linguist/linguist/contents/new_file.md

This means that we generate a timestamp for the moment your API call is made, in the timezone this header defines.
For example, the API to manage contents generates a git commit for each addition or change, and it uses the current time as the timestamp. For more information, see REST API endpoints for repository contents. The Time-Zone header will determine the timezone used for generating that current timestamp.
Using the last known timezone for the user
If no Time-Zone header is specified and you make an authenticated call to the API, we use the last known timezone for the authenticated user. The last known timezone is updated whenever you browse the GitHub website.
Defaulting to UTC without other timezone information
If the steps above don't result in any information, we use UTC as the timezone.\n\n\n\nREST API/Using the REST API/CORS and JSONPUsing CORS and JSONP to make cross-origin requestsYou can make API requests across domains using cross-origin resource sharing (CORS) and JSONP callbacks.In this articleAbout cross-origin requestsCross-origin resource sharing (CORS)JSON-P callbacksAbout cross-origin requests
A cross-origin request is a request made to a different domain than the one originating the request. For security reasons, most web browsers block cross-origin requests. However, you can use cross-origin resource sharing (CORS) and JSONP callbacks to make cross-origin requests.
Cross-origin resource sharing (CORS)
The REST API supports cross-origin resource sharing (CORS) for AJAX requests from any origin. For more information, see the CORS W3C Recommendation and the HTML 5 Security Guide
Here's a sample request sent from a browser hitting
http://example.com:
$ curl -I https://api.github.com -H "Origin: http://example.com"
HTTP/2 302
Access-Control-Allow-Origin: *
Access-Control-Expose-Headers: ETag, Link, x-ratelimit-limit, x-ratelimit-remaining, x-ratelimit-reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval

This is what the CORS preflight request looks like:
$ curl -I https://api.github.com -H "Origin: http://example.com" -X OPTIONS
HTTP/2 204
Access-Control-Allow-Origin: *
Access-Control-Allow-Headers: Authorization, Content-Type, If-Match, If-Modified-Since, If-None-Match, If-Unmodified-Since, X-Requested-With
Access-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE
Access-Control-Expose-Headers: ETag, Link, x-ratelimit-limit, x-ratelimit-remaining, x-ratelimit-reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval
Access-Control-Max-Age: 86400

JSON-P callbacks
You can send a ?callback parameter to any GET call to have the results
wrapped in a JSON function. This is typically used when browsers want to embed GitHub content in web pages and avoid cross-domain problems. The response includes the same data output as the regular API, plus the relevant HTTP Header information.
$ curl https://api.github.com?callback=foo

> /**/foo({
>   "meta": {
>     "status": 200,
>     "x-ratelimit-limit": "5000",
>     "x-ratelimit-remaining": "4966",
>     "x-ratelimit-reset": "1372700873",
>     "Link": [ // pagination headers and other links
>       ["https://api.github.com?page=2", {"rel": "next"}]
>     ]
>   },
>   "data": {
>     // the data
>   }
> })

You can write a JavaScript handler to process the callback. Here's a minimal example you can try:
<html>
<head>
<script type="text/javascript">
function foo(response) {
  var meta = response.meta;
  var data = response.data;
  console.log(meta);
  console.log(data);
}

var script = document.createElement('script');
script.src = 'https://api.github.com?callback=foo';

document.getElementsByTagName('head')[0].appendChild(script);
</script>
</head>

<body>
  <p>Open up your browser's console.</p>
</body>
</html>

All of the headers have the same string value as the HTTP Headers, except Link. Link headers are pre-parsed for you and come through as an array of [url, options] tuples.
For example, a link that looks like this:
Link: <url1>; rel="next", <url2>; rel="foo"; bar="baz"

will look like this in the Callback output:
{
  "Link": [
    [
      "url1",
      {
        "rel": "next"
      }
    ],
    [
      "url2",
      {
        "rel": "foo",
        "bar": "baz"
      }
    ]
  ]
}\n\n\n\nREST API/Using the REST API/Issue event typesIssue event typesFor the REST APIs for issue events and timeline events, learn about each event type, the triggering action on GitHub, and each event's unique properties.In this articleIssue event object common propertiesassignedautomatic_base_change_failedautomatic_base_change_succeededbase_ref_changedclosedcommentedcommittedconnectedconvert_to_draftconverted_to_discussioncross-referenceddemilestoneddeployeddeployment_environment_changeddisconnectedhead_ref_deletedhead_ref_restoredhead_ref_force_pushedlabeledlockedmentionedmarked_as_duplicatemergedmilestonedpinnedready_for_reviewreferencedrenamedreopenedreview_dismissedreview_requestedreview_request_removedreviewedsubscribedtransferredunassignedunlabeledunlockedunmarked_as_duplicateunpinnedunsubscribeduser_blockedIssue events are triggered by activity in issues and pull requests and are available in the REST API for Issue events and Timeline events. Each event type specifies whether the event is available in the REST API for issue events or timeline events.
GitHub's REST API considers every pull request to be an issue, but not every issue is a pull request. For this reason, the Issue Events and Timeline Events endpoints may return both issues and pull requests in the response. Pull requests have a pull_request property in the issue object. Because pull requests are issues, issue and pull request numbers do not overlap in a repository. For example, if you open your first issue in a repository, the number will be 1. If you then open a pull request, the number will be 2. Each event type specifies if the event occurs in pull request, issues, or both.
Issue event object common properties
Issue events all have the same object structure, except events that are only available in the REST API for timeline events. Some events also include additional properties that provide more context about the event resources. Refer to the specific event for details about any properties that differ from this object format.


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
assigned
The issue or pull request was assigned to a user.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for assigned




























































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.assigneeobjectThe person assigned to this issue.assignerobjectThe person who performed the assignment for this issue. This field is available in the REST API for issue events but not the REST API for timeline events.
automatic_base_change_failed
GitHub unsuccessfully attempted to automatically change the base branch of the pull request.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for automatic_base_change_failed


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
automatic_base_change_succeeded
GitHub successfully attempted to automatically change the base branch of the pull request.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for automatic_base_change_succeeded


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
base_ref_changed
The base reference branch of the pull request changed.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for base_ref_changed


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
closed
The issue or pull request was closed. When the commit_id is present, it identifies the commit that closed the issue using "closes / fixes" syntax. For more information about the syntax, see Linking a pull request to an issue.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for closed


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
commented
A comment was added to the issue or pull request.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for commented
This events properties do not use the same structure as the issue event object common properties. The following properties are returned for this event.






































































NameTypeDescriptionurlstringThe REST API URL to retrieve the issue comment.html_urlstringThe HTML URL of the issue comment.issue_urlstringThe HTML URL of the issue.idintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.userobjectThe person who commented on the issue.created_atstringThe timestamp indicating when the comment was added.updated_atstringThe timestamp indicating when the comment was updated or created, if the comment is never updated.author_associationstringThe permissions the user has in the issue's repository. For example, the value would be "OWNER" if the owner of repository created a comment.bodystringThe comment body text.eventstringThe event value is "commented".actorobjectThe person who generated the event.
committed
A commit was added to the pull request's HEAD branch.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for committed
This events properties do not use the same structure as the issue event object common properties. The following properties are returned for this event.

































































NameTypeDescriptionshastringThe SHA of the commit in the pull request.node_idstringThe Global Node ID of the event.urlstringThe REST API URL to retrieve the commit.html_urlstringThe HTML URL of the commit.authorobjectThe person who authored the commit.committerobjectThe person who committed the commit on behalf of the author.treeobjectThe Git tree of the commit.messagestringThe commit message.parentsarray of objectsA list of parent commits.verificationobjectThe result of verifying the commit's signature. For more information, see REST API endpoints for Git commits.eventstringThe event value is "committed".
connected
The issue or pull request was linked to another issue or pull request. For more information, see Linking a pull request to an issue.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for connected


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
convert_to_draft
The pull request was converted to draft mode.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for convert_to_draft


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
converted_to_discussion
The issue was closed and converted to a discussion.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsIssues

Properties for converted_to_discussion


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
cross-referenced
The issue or pull request was referenced from another issue or pull request.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for cross-referenced
This events properties do not use the same structure as the issue event object common properties. The following properties are returned for this event.













































NameTypeDescriptionactorobjectThe person who generated the event.created_atstringThe timestamp indicating when the cross-reference was added.updated_atstringThe timestamp indicating when the cross-reference was updated or created, if the cross-reference is never updated.sourceobjectThe issue or pull request that added a cross-reference.source[type]stringThis value will always be "issue" because pull requests are of type issue. Only cross-reference events triggered by issues or pull requests are returned in the REST API for timeline events. To determine if the issue that triggered the event is a pull request, you can check if the source[issue][pull_request] object exists.source[issue]objectThe issue object that added the cross-reference.eventstringThe event value is "cross-referenced".
demilestoned
The issue or pull request was removed from a milestone.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for demilestoned




























































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.milestoneobjectThe milestone object.milestone[title]stringThe title of the milestone.
deployed
The pull request was deployed.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for deployed


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
deployment_environment_changed
The pull request deployment environment was changed.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for deployment_environment_changed


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
disconnected
The issue or pull request was unlinked from another issue or pull request. For more information, see Linking a pull request to an issue.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for disconnected


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
head_ref_deleted
The pull request's HEAD branch was deleted.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for head_ref_deleted


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
head_ref_restored
The pull request's HEAD branch was restored to the last known commit.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

head_ref_force_pushed
The pull request's HEAD branch was force pushed.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for head_ref_force_pushed


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
labeled
A label was added to the issue or pull request.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for labeled

































































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.labelobjectThe label added or removed from the issuelabel[name]stringThe name of the label.label[color]stringThe hex color code.
locked
The issue or pull request was locked.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for locked























































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.lock_reasonstringThe reason an issue or pull request conversation was locked, if one was provided.
mentioned
The actor was @mentioned in an issue or pull request body.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for mentioned


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
marked_as_duplicate
A user with write permissions marked an issue as a duplicate of another issue, or a pull request as a duplicate of another pull request.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for marked_as_duplicate


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
merged
The pull request was merged. The commit_id attribute is the SHA1 of the HEAD commit that was merged. The commit_repository is always the same as the main repository.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for merged


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
milestoned
The issue or pull request was added to a milestone.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for milestoned




























































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.milestoneobjectThe milestone object.milestone[title]stringThe title of the milestone.
pinned
The issue was pinned.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsIssues

Properties for pinned


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
ready_for_review
A draft pull request was marked as ready for review.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for ready_for_review


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
referenced
The issue was referenced from a commit message. The commit_id attribute is the commit SHA1 of where that happened and the commit_repository is where that commit was pushed.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for referenced


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
renamed
The issue or pull request title was changed.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for renamed

































































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.renameobjectThe name details.rename[from]stringThe previous name.rename[to]stringThe new name.
reopened
The issue or pull request was reopened.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for reopened


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
review_dismissed
The pull request review was dismissed.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for review_dismissed











































































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.dismissed_reviewobjectThe information for the dismissed review.dismissed_review[state]stringThe state the pull request was in when it was dismissed. Can be one of: commented, approved, or changes_requested.dismissed_review[review_id]stringThe unique identifier of the pull request's review.dismissed_review[dismissal_message]stringThe message the user included when dismissing the review.dismissed_review[dismissal_commit_id]stringThe unique identifier of the commit that dismissed the review if one exists.
review_requested
A pull request review was requested.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for review_requested




























































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.requested_reviewerobjectThe person requested to review the pull request.review_requesterobjectThe person who requested a review.
review_request_removed
A pull request review request was removed.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for review_request_removed




























































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.requested_reviewerobjectThe person requested to review the pull request.review_requesterobjectThe person who requested a review.
reviewed
The pull request was reviewed.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsPull requests

Properties for reviewed
This events properties do not use the same structure as the issue event object common properties. The following properties are returned for this event.






































































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.userobjectThe person who commented on the issue.bodystringThe review summary text.commit_idstringThe SHA of the latest commit in the pull request at the time of the review.submitted_atstringThe timestamp indicating when the review was submitted.statestringThe state of the submitted review. Can be one of: commented, changes_requested, approved or dismissed.html_urlstringThe HTML URL of the review.pull_request_urlstringThe REST API URL to retrieve the pull request.author_associationstringThe permissions the user has in the issue's repository. For example, the value would be "OWNER" if the owner of repository created a comment._linksobjectThe html_url and pull_request_url.eventstringThe event value is "reviewed".
subscribed
Someone subscribed to receive notifications for an issue or pull request.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for subscribed


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
transferred
The issue was transferred to another repository.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsIssues

Properties for transferred


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
unassigned
A user was unassigned from the issue.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for unassigned




























































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.assigneeobjectThe person unassigned from this issue.assignerobjectThe person who performed the unassignment for this issue. This field is available in the REST API for issue events but not the REST API for timeline events.
unlabeled
A label was removed from the issue.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for unlabeled

































































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.labelobjectThe label added or removed from the issuelabel[name]stringThe name of the label.label[color]stringThe hex color code.
unlocked
The issue was unlocked.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for unlocked























































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.lock_reasonstringThe reason an issue or pull request conversation was locked, if one was provided.
unmarked_as_duplicate
An issue that a user had previously marked as a duplicate of another issue is no longer considered a duplicate, or a pull request that a user had previously marked as a duplicate of another pull request is no longer considered a duplicate.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for unmarked_as_duplicate


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
unpinned
The issue was unpinned.
This event is available for the following issue types.
















REST API for issue eventsREST API for timeline eventsIssues

Properties for unpinned


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
unsubscribed
Someone unsubscribed from receiving notifications for an issue or pull request.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for unsubscribed


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.
user_blocked
An organization owner blocked a user from the organization. This was done through one of the blocked user's comments on the issue.
This event is available for the following issue types.





















REST API for issue eventsREST API for timeline eventsIssuesPull requests

Properties for user_blocked


















































NameTypeDescriptionidintegerThe unique identifier of the event.node_idstringThe Global Node ID of the event.urlstringThe REST API URL for fetching the event.actorobjectThe person who generated the event.eventstringIdentifies the actual type of event that occurred.commit_idstringThe SHA of the commit that referenced this issue.commit_urlstringThe GitHub REST API link to the commit that referenced this issue.created_atstringThe timestamp indicating when the event occurred.\n\n\n\nREST API/Using the REST API/GitHub event typesGitHub event typesFor the GitHub Events API, learn about each event type, the triggering action on GitHub, and each event's unique properties.In this articleEvent object common propertiesCommitCommentEventCreateEventDeleteEventForkEventGollumEventIssueCommentEventIssuesEventMemberEventPublicEventPullRequestEventPullRequestReviewEventPullRequestReviewCommentEventPullRequestReviewThreadEventPushEventReleaseEventSponsorshipEventWatchEventThe Events API can return different types of events triggered by activity on GitHub. Each event response contains shared properties, but has a unique payload object determined by its event type. The Event object common properties describes the properties shared by all events, and each event type describes the payload properties that are unique to the specific event.
Event object common properties
The event objects returned from the Events API endpoints have the same structure.
























































































































Event API attribute nameTypeDescriptionidintegerUnique identifier for the event.typestringThe type of event. Events uses PascalCase for the name.actorobjectThe user that triggered the event.actor.idintegerThe unique identifier for the actor.actor.loginstringThe username of the actor.actor.display_loginstringThe specific display format of the username.actor.gravatar_idstringThe unique identifier of the Gravatar profile for the actor.actor.urlstringThe REST API URL used to retrieve the user object, which includes additional user information.actor.avatar_urlstringThe URL of the actor's profile image.repoobjectThe repository object where the event occurred.repo.idintegerThe unique identifier of the repository.repo.namestringThe name of the repository, which includes the owner and repository name. For example, octocat/hello-world is the name of the hello-world repository owned by the octocat personal account.repo.urlstringThe REST API URL used to retrieve the repository object, which includes additional repository information.payloadobjectThe event payload object is unique to the event type. See the event type below for the event API payload object.publicbooleanWhether the event is visible to all users.created_atstringThe date and time when the event was triggered. It is formatted according to ISO 8601.orgobjectThe organization that was chosen by the actor to perform action that triggers the event.The property appears in the event object only if it is applicable.org.idintegerThe unique identifier for the organization.org.loginstringThe name of the organization.org.gravatar_idstringThe unique identifier of the Gravatar profile for the organization.org.urlstringThe REST API URL used to retrieve the organization object, which includes additional organization information.org.avatar_urlstringThe URL of the organization's profile image.
Example WatchEvent event object
This example shows the format of the WatchEvent response when using the Events API.
HTTP/2 200
Link: <https://api.github.com/resource?page=2>; rel="next",
      <https://api.github.com/resource?page=5>; rel="last"

[
  {
    "type": "WatchEvent",
    "public": false,
    "payload": {
    },
    "repo": {
      "id": 3,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "actor": {
      "id": 1,
      "login": "octocat",
      "gravatar_id": "",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "url": "https://api.github.com/users/octocat"
    },
    "org": {
      "id": 1,
      "login": "github",
      "gravatar_id": "",
      "url": "https://api.github.com/orgs/github",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif"
    },
    "created_at": "2011-09-06T17:26:27Z",
    "id": "12345"
  }
]

CommitCommentEvent
A commit comment is created. The type of activity is specified in the action property of the payload object. For more information, see REST API endpoints for commit comments.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for CommitCommentEvent




















KeyTypeDescriptionactionstringThe action performed. Can be created.commentobjectThe commit comment resource.
CreateEvent
A Git branch or tag is created. For more information, see REST API endpoints for Git database.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for CreateEvent



































KeyTypeDescriptionrefstringThe git ref resource, or null if ref_type is repository.ref_typestringThe type of Git ref object created in the repository. Can be either branch, tag, or repository.master_branchstringThe name of the repository's default branch (usually main).descriptionstringThe repository's current description.pusher_typestringCan be either user or a deploy key.
DeleteEvent
A Git branch or tag is deleted. For more information, see the REST API endpoints for Git database REST API.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for DeleteEvent




















KeyTypeDescriptionrefstringThe git ref resource.ref_typestringThe type of Git ref object deleted in the repository. Can be either branch or tag.
ForkEvent
A user forks a repository. For more information, see REST API endpoints for repositories.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for ForkEvent















KeyTypeDescriptionforkeeobjectThe created repository resource.
GollumEvent
A wiki page is created or updated. For more information, see About wikis.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for GollumEvent








































KeyTypeDescriptionpagesarrayThe pages that were updated.pages[][page_name]stringThe name of the page.pages[][title]stringThe current page title.pages[][action]stringThe action that was performed on the page. Can be created or edited.pages[][sha]stringThe latest commit SHA of the page.pages[][html_url]stringPoints to the HTML wiki page.
IssueCommentEvent
Activity related to an issue or pull request comment. The type of activity is specified in the action property of the payload object. For more information, see the REST API endpoints for issues.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for IssueCommentEvent



































KeyTypeDescriptionactionstringThe action that was performed on the comment. Can be one of created, edited, or deleted.changesobjectThe changes to the comment if the action was edited.changes[body][from]stringThe previous version of the body if the action was edited.issueobjectThe issue the comment belongs to.commentobjectThe comment itself.
IssuesEvent
Activity related to an issue. The type of activity is specified in the action property of the payload object. For more information, see the REST API endpoints for issues.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for IssuesEvent













































KeyTypeDescriptionactionstringThe action that was performed. Can be one of opened, edited, closed, reopened, assigned, unassigned, labeled, or unlabeled.issueobjectThe issue itself.changesobjectThe changes to the issue if the action was edited.changes[title][from]stringThe previous version of the title if the action was edited.changes[body][from]stringThe previous version of the body if the action was edited.assigneeobjectThe optional user who was assigned or unassigned from the issue.labelobjectThe optional label that was added or removed from the issue.
MemberEvent
Activity related to repository collaborators. The type of activity is specified in the action property of the payload object. For more information, see REST API endpoints for collaborators.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for MemberEvent






























KeyTypeDescriptionactionstringThe action that was performed. Can be added to indicate a user accepted an invitation to a repository.memberobjectThe user that was added.changesobjectThe changes to the collaborator permissions if the action was edited.changes[old_permission][from]stringThe previous permissions of the collaborator if the action was edited.
PublicEvent
When a private repository is made public.
Event payload object for PublicEvent
This event returns an empty payload object.
PullRequestEvent
Activity related to pull requests. The type of activity is specified in the action property of the payload object. For more information, see REST API endpoints for pull requests.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for PullRequestEvent













































KeyTypeDescriptionactionstringThe action that was performed. Can be one of opened, edited, closed, reopened, assigned, unassigned, review_requested, review_request_removed, labeled, unlabeled, and synchronize.numberintegerThe pull request number.changesobjectThe changes to the comment if the action was edited.changes[title][from]stringThe previous version of the title if the action was edited.changes[body][from]stringThe previous version of the body if the action was edited.pull_requestobjectThe pull request itself.reasonstringThe reason the pull request was removed from a merge queue if the action was dequeued.
PullRequestReviewEvent
Activity related to pull request reviews. The type of activity is specified in the action property of the payload object. For more information, see REST API endpoints for pull requests.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for PullRequestReviewEvent

























KeyTypeDescriptionactionstringThe action that was performed. Can be created.pull_requestobjectThe pull request the review pertains to.reviewobjectThe review that was affected.
PullRequestReviewCommentEvent
Activity related to pull request review comments in the pull request's unified diff. The type of activity is specified in the action property of the payload object. For more information, see REST API endpoints for pull requests.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for PullRequestReviewCommentEvent



































KeyTypeDescriptionactionstringThe action that was performed on the comment. Can be created.changesobjectThe changes to the comment if the action was edited.changes[body][from]stringThe previous version of the body if the action was edited.pull_requestobjectThe pull request the comment belongs to.commentobjectThe comment itself.
PullRequestReviewThreadEvent
Activity related to a comment thread on a pull request being marked as resolved or unresolved. The type of activity is specified in the action property of the payload object.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for PullRequestReviewThreadEvent

























KeyTypeDescriptionactionstringThe action that was performed. Can be one of:resolved - A comment thread on a pull request was marked as resolved.unresolved - A previously resolved comment thread on a pull request was marked as unresolved.pull_requestobjectThe pull request the thread pertains to.threadobjectThe thread that was affected.
PushEvent
One or more commits are pushed to a repository branch or tag.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for PushEvent
















































































KeyTypeDescriptionpush_idintegerUnique identifier for the push.sizeintegerThe number of commits in the push.distinct_sizeintegerThe number of distinct commits in the push.refstringThe full git ref that was pushed. Example: refs/heads/main.headstringThe SHA of the most recent commit on ref after the push.beforestringThe SHA of the most recent commit on ref before the push.commitsarrayAn array of commit objects describing the pushed commits. (The array includes a maximum of 20 commits. If necessary, you can use the Commits API to fetch additional commits. This limit is applied to timeline events only and isn't applied to webhook deliveries.)commits[][sha]stringThe SHA of the commit.commits[][message]stringThe commit message.commits[][author]objectThe git author of the commit.commits[][author][name]stringThe git author's name.commits[][author][email]stringThe git author's email address.commits[][url]urlURL that points to the commit API resource.commits[][distinct]booleanWhether this commit is distinct from any that have been pushed before.
ReleaseEvent
Activity related to a release. The type of activity is specified in the action property of the payload object. For more information, see the REST API endpoints for releases and release assets REST API.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for ReleaseEvent






























KeyTypeDescriptionactionstringThe action that was performed. Can be published.changes[body][from]stringThe previous version of the body if the action was edited.changes[name][from]stringThe previous version of the name if the action was edited.releaseobjectThe release object.
SponsorshipEvent
Activity related to a sponsorship listing. The type of activity is specified in the action property of the payload object. For more information, see About GitHub Sponsors.
Event payload object for SponsorshipEvent






























KeyTypeDescriptionactionstringThe action that was performed. This can be created.effective_datestringThe pending_cancellation and pending_tier_change event types will include the date the cancellation or tier change will take effect.changes[tier][from]objectThe tier_changed and pending_tier_change will include the original tier before the change or pending change. For more information, see the pending tier change payload.changes[privacy_level][from]stringThe edited event types include the details about the change when someone edits a sponsorship to change the privacy.
WatchEvent
When someone stars a repository. The type of activity is specified in the action property of the payload object. For more information, see REST API endpoints for activity.
The event object includes properties that are common for all events. Each event object includes a payload property and the value is unique to each event type. The payload object for this event is described below.
Event payload object for WatchEvent















KeyTypeDescriptionactionstringThe action that was performed. Currently, can only be started.\n\n\n\nREST API/Authentication/AuthenticatingAuthenticating to the REST APIYou can authenticate to the REST API to access more endpoints and have a higher rate limit.In this articleAbout authenticationAuthenticating with a personal access tokenAuthenticating with a token generated by an appAuthenticating in a GitHub Actions workflowAuthenticating with username and passwordFurther readingAbout authentication
Many REST API endpoints require authentication or return additional information if you are authenticated. Additionally, you can make more requests per hour when you are authenticated.
To authenticate your request, you will need to provide an authentication token with the required scopes or permissions. There a few different ways to get a token: You can create a personal access token, generate a token with a GitHub App, or use the built-in GITHUB_TOKEN in a GitHub Actions workflow.
After creating a token, you can authenticate your request by sending the token in the Authorization header of your request. For example, in the following request, replace YOUR-TOKEN with a reference to your token:
curl --request GET \
--url "https://api.github.com/octocat" \
--header "Authorization: Bearer YOUR-TOKEN" \
--header "X-GitHub-Api-Version: 2022-11-28"

Note

In most cases, you can use Authorization: Bearer or Authorization: token to pass a token. However, if you are passing a JSON web token (JWT), you must use Authorization: Bearer.

Failed login limit
If you try to use a REST API endpoint without a token or with a token that has insufficient permissions, you will receive a 404 Not Found or 403 Forbidden response. Authenticating with invalid credentials will initially return a 401 Unauthorized response.
After detecting several requests with invalid credentials within a short period, the API will temporarily reject all authentication attempts for that user (including ones with valid credentials) with a 403 Forbidden response. For more information, see Rate limits for the REST API.
Authenticating with a personal access token
If you want to use the GitHub REST API for personal use, you can create a personal access token. If possible, GitHub recommends that you use a fine-grained personal access token instead of a personal access token (classic). For more information about creating a personal access token, see Managing your personal access tokens.
If you are using a fine-grained personal access token, your fine-grained personal access token requires specific permissions in order to access each REST API endpoint. The REST API reference document for each endpoint states whether the endpoint works with fine-grained personal access tokens and states what permissions are required in order for the token to use the endpoint. Some endpoints may require multiple permissions, and some endpoints may require one of multiple permissions. For an overview of which REST API endpoints a fine-grained personal access token can access with each permission, see Permissions required for fine-grained personal access tokens.
If you are using a personal access token (classic), it requires specific scopes in order to access each REST API endpoint. For general guidance about what scopes to choose, see Scopes for OAuth apps.
Personal access tokens and SAML SSO
If you use a personal access token (classic) to access an organization that enforces SAML single sign-on (SSO) for authentication, you will need to authorize your token after creation. Fine-grained personal access tokens are authorized during token creation, before access to the organization is granted. For more information, see Authorizing a personal access token for use with SAML single sign-on.
If you do not authorize your personal access token (classic) for SAML SSO before you try to use it to access a single organization that enforces SAML SSO, you may receive a 404 Not Found or a 403 Forbidden error. If you receive a 403 Forbidden error, the X-GitHub-SSO header will include a URL that you can follow to authorize your token. The URL expires after one hour.
If you do not authorize your personal access token (classic) for SAML SSO before you try to use it to access multiple organizations, the API will not return results from the organizations that require SAML SSO and the X-GitHub-SSO header will indicate the ID of the organizations that require SAML SSO authorization of your personal access token (classic). For example: X-GitHub-SSO: partial-results; organizations=21955855,20582480.
Authenticating with a token generated by an app
If you want to use the API for an organization or on behalf of another user, GitHub recommends that you use a GitHub App. For more information, see About authentication with a GitHub App.
The REST API reference documentation for each endpoint states whether the endpoint works with GitHub Apps and states what permissions are required in order for the app to use the endpoint. Some endpoints may require multiple permissions, and some endpoints may require one of multiple permissions. For an overview of which REST API endpoints a GitHub App can access with each permission, see Permissions required for GitHub Apps.
You can also create an OAuth token with an OAuth app to access the REST API. However, GitHub recommends that you use a GitHub App instead. GitHub Apps allow more control over the access and permission that the app has.
Access tokens created by apps are automatically authorized for SAML SSO.
Using basic authentication
Some REST API endpoints for GitHub Apps and OAuth apps require you to use basic authentication to access the endpoint. You will use the app's client ID as the username and the app's client secret as the password.
For example:
curl --request POST \
--url "https://api.github.com/applications/YOUR_CLIENT_ID/token" \
--user "YOUR_CLIENT_ID:YOUR_CLIENT_SECRET" \
--header "Accept: application/vnd.github+json" \
--header "X-GitHub-Api-Version: 2022-11-28" \
--data '{
  "access_token": "ACCESS_TOKEN_TO_CHECK"
}'

The client ID and client secret are associated with the app, not with the owner of the app or a user who authorized the app. They are used to perform operations on behalf of the app, such as creating access tokens.
If you are the owner of a GitHub App or OAuth app, or if you are an app manager for a GitHub App, you can find the client ID and generate a client secret on the settings page for your app. To navigate to your app's settings page:

In the upper-right corner of any page on GitHub, click your profile photo.
Navigate to your account settings.

For an app owned by a personal account, click Settings.
For an app owned by an organization:

Click Your organizations.
To the right of the organization, click Settings.




In the left sidebar, click  Developer settings.
In the left sidebar, click GitHub Apps or OAuth apps.
For GitHub Apps, to the right of the GitHub App you want to access, click Edit. For OAuth apps, click the app that you want to access.
Next to Client ID, you will see the client ID for your app.
Next to Client secrets, click Generate a new client secret to generate a client secret for your app.

Authenticating in a GitHub Actions workflow
If you want to use the API in a GitHub Actions workflow, GitHub recommends that you authenticate with the built-in GITHUB_TOKEN instead of creating a token. You can grant permissions to the GITHUB_TOKEN with the permissions key. For more information, see Automatic token authentication.
If this is not possible, you can store your token as a secret and use the name of your secret in your GitHub Actions workflow. For more information about secrets, see Using secrets in GitHub Actions.
Authenticating in a GitHub Actions workflow using GitHub CLI
To make an authenticated request to the API in a GitHub Actions workflow using GitHub CLI, you can store the value of GITHUB_TOKEN as an environment variable, and use the run keyword to execute the GitHub CLI api subcommand. For more information about the run keyword, see Workflow syntax for GitHub Actions.
In the following example workflow, replace PATH with the path of the endpoint. For more information about the path, see Getting started with the REST API.
jobs:
  use_api:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api /PATH

Authenticating in a GitHub Actions workflow using curl
To make an authenticated request to the API in a GitHub Actions workflow using curl, you can store the value of GITHUB_TOKEN as an environment variable, and use the run keyword to execute a curl request to the API. For more information about the run keyword, see Workflow syntax for GitHub Actions.
In the following example workflow, replace PATH with the path of the endpoint. For more information about the path, see Getting started with the REST API.
YAMLjobs:
  use_api:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --request GET \
          --url "https://api.github.com/PATH" \
          --header "Authorization: Bearer $GH_TOKEN"
jobs:
  use_api:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl --request GET \
          --url "https://api.github.com/PATH" \
          --header "Authorization: Bearer $GH_TOKEN"

Authenticating in a GitHub Actions workflow using JavaScript
For an example of how to authenticate in a GitHub Actions workflow using JavaScript, see Scripting with the REST API and JavaScript.
Authenticating with username and password
Authentication with username and password is not supported. If you try to authenticate with user name and password, you will receive a 4xx error.
Further reading

Keeping your API credentials secure
Getting started with the REST API\n\n\n\nREST API/Authentication/Keeping API credentials secureKeeping your API credentials secureFollow these best practices to keep your API credentials and tokens secure.In this articleChoose an appropriate authentication methodLimit the permissions of your credentialsStore your authentication credentials securelyLimit who can access your authentication credentialsUse authentication credentials securely in your codePrepare a remediation planChoose an appropriate authentication method
You should choose an authentication method that is appropriate for the task you want to accomplish.

To use the API for personal use, you can create a personal access token.
To use the API on behalf of an organization or another user, you should create a GitHub App.
To use the API in a GitHub Actions workflow, you should authenticate with the built-in GITHUB_TOKEN.

For more information, see About authentication to GitHub.
Limit the permissions of your credentials
When creating a personal access token, only select the minimum permissions or scopes needed, and set an expiration date for the minimum amount of time you'll need to use the token. GitHub recommends that you use fine-grained personal access tokens instead of personal access tokens (classic). For more information, see Managing your personal access tokens.
A token has the same capabilities to access resources and perform actions on those resources that the owner of the token has, and is further limited by any scopes or permissions granted to the token. A token cannot grant additional access capabilities to a user.
When creating a GitHub App, select the minimum permissions that your GitHub App will need. For more information, see Best practices for creating a GitHub App.
When authenticating with GITHUB_TOKEN in a GitHub Actions workflow, only give the minimum amount of permissions needed. For more information, see Automatic token authentication.
Store your authentication credentials securely
Treat authentication credentials the same way you would treat your passwords or other sensitive credentials.

Don't share authentication credentials using an unencrypted messaging or email system.
Don't pass your personal access token as plain text in the command line. For more information, see Managing your personal access tokens.
Don't push unencrypted authentication credentials like tokens or keys to any repository, even if the repository is private. Instead consider using a GitHub Actions secret or Codespaces secret. For more information, see Using secrets in GitHub Actions and Managing your account-specific secrets for GitHub Codespaces.
You can use secret scanning to discover tokens, private keys, and other secrets that were pushed to a repository, or to block future pushes that contain secrets. For more information, see About secret scanning.

Limit who can access your authentication credentials
Don't share your personal access token with others. Instead of sharing a personal access token, consider creating a GitHub App. For more information, see About creating GitHub Apps.
If you need to share credentials with a team, store the credentials in a secure shared system. For example, you could store and share passwords securely using 1Password, or you could store keys in Azure KeyVault and manage access with your IAM (Identity and access management).
If you're creating a GitHub Actions workflow that needs to access the API, you can store your credentials in an encrypted secret, and access the encrypted secret from the workflow. For more information, see Using secrets in GitHub Actions and Making authenticated API requests with a GitHub App in a GitHub Actions workflow.
Use authentication credentials securely in your code
Never hardcode authentication credentials like tokens, keys, or app-related secrets into your code. Instead, consider using a secret manager such as Azure Key Vault or HashiCorp Vault. For more information about securing GitHub App credentials, see Best practices for creating a GitHub App.
When using a personal access token in a script, consider storing your token as a GitHub Actions secret and running your script through GitHub Actions. You can also store your token as a Codespaces secret and run your script in Codespaces. For more information, see Using secrets in GitHub Actions and Managing your account-specific secrets for GitHub Codespaces.
If none of these options are possible, you can store authentication credentials in a .env file. Make sure to encrypt your .env file, and never push it to any repository.
Prepare a remediation plan
You should create a plan to handle any security breaches in a timely manner. In the event that your token or other authentication credential is leaked, you will need to:

Generate a new credential.
Replace the old credential with the new one everywhere that you are storing or accessing the credential.
Delete the old compromised credential.

For information about rotating compromised credentials for a GitHub App, see Best practices for creating a GitHub App.
For information about creating and deleting personal access tokens, see Managing your personal access tokens.\n\n\n\nREST API/Authentication/Endpoints for GitHub App installation tokensEndpoints available for GitHub App installation access tokensYour GitHub App can make requests to the following REST endpoints with an installation access token.Who can use this feature?You can use an installation access token to access these endpoints using your GitHub App. For more information, see Authenticating as a GitHub App installation.In this articleactionsactivityappsbillingbranchescampaignscheckscode-scanningcode-securitycodes-of-conductcodespacescollaboratorscommitscopilotdependabotdependency-graphdeploy-keysdeploymentsemojisgitgitignoreinteractionsissueslicensesmarkdownmetametricsorgspackagespagesprivate-registriesprojectspullsrate-limitreactionsreleasesrepossearchsecret-scanningsecurity-advisoriesteamsusersactionsGET /orgs/{org}/actions/cache/usageGET /orgs/{org}/actions/cache/usage-by-repositoryGET /orgs/{org}/actions/hosted-runnersPOST /orgs/{org}/actions/hosted-runnersGET /orgs/{org}/actions/hosted-runners/images/github-ownedGET /orgs/{org}/actions/hosted-runners/images/partnerGET /orgs/{org}/actions/hosted-runners/limitsGET /orgs/{org}/actions/hosted-runners/machine-sizesGET /orgs/{org}/actions/hosted-runners/platformsGET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}GET /orgs/{org}/actions/oidc/customization/subPUT /orgs/{org}/actions/oidc/customization/subGET /orgs/{org}/actions/permissionsPUT /orgs/{org}/actions/permissionsGET /orgs/{org}/actions/permissions/repositoriesPUT /orgs/{org}/actions/permissions/repositoriesPUT /orgs/{org}/actions/permissions/repositories/{repository_id}DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}GET /orgs/{org}/actions/permissions/selected-actionsPUT /orgs/{org}/actions/permissions/selected-actionsGET /orgs/{org}/actions/permissions/workflowPUT /orgs/{org}/actions/permissions/workflowGET /orgs/{org}/actions/runner-groupsPOST /orgs/{org}/actions/runner-groupsGET /orgs/{org}/actions/runner-groups/{runner_group_id}PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runnersGET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriesPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriesPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runnersPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runnersPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}GET /orgs/{org}/actions/runnersGET /orgs/{org}/actions/runners/downloadsPOST /orgs/{org}/actions/runners/generate-jitconfigPOST /orgs/{org}/actions/runners/registration-tokenPOST /orgs/{org}/actions/runners/remove-tokenGET /orgs/{org}/actions/runners/{runner_id}DELETE /orgs/{org}/actions/runners/{runner_id}GET /orgs/{org}/actions/runners/{runner_id}/labelsPOST /orgs/{org}/actions/runners/{runner_id}/labelsPUT /orgs/{org}/actions/runners/{runner_id}/labelsDELETE /orgs/{org}/actions/runners/{runner_id}/labelsDELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}GET /orgs/{org}/actions/secretsGET /orgs/{org}/actions/secrets/public-keyGET /orgs/{org}/actions/secrets/{secret_name}PUT /orgs/{org}/actions/secrets/{secret_name}DELETE /orgs/{org}/actions/secrets/{secret_name}GET /orgs/{org}/actions/secrets/{secret_name}/repositoriesPUT /orgs/{org}/actions/secrets/{secret_name}/repositoriesPUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}GET /orgs/{org}/actions/variablesPOST /orgs/{org}/actions/variablesGET /orgs/{org}/actions/variables/{name}PATCH /orgs/{org}/actions/variables/{name}DELETE /orgs/{org}/actions/variables/{name}GET /orgs/{org}/actions/variables/{name}/repositoriesPUT /orgs/{org}/actions/variables/{name}/repositoriesPUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}GET /repos/{owner}/{repo}/actions/artifactsGET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}GET /repos/{owner}/{repo}/actions/cache/usageGET /repos/{owner}/{repo}/actions/cachesDELETE /repos/{owner}/{repo}/actions/cachesDELETE /repos/{owner}/{repo}/actions/caches/{cache_id}GET /repos/{owner}/{repo}/actions/jobs/{job_id}GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logsPOST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerunGET /repos/{owner}/{repo}/actions/oidc/customization/subPUT /repos/{owner}/{repo}/actions/oidc/customization/subGET /repos/{owner}/{repo}/actions/organization-secretsGET /repos/{owner}/{repo}/actions/organization-variablesGET /repos/{owner}/{repo}/actions/permissionsPUT /repos/{owner}/{repo}/actions/permissionsGET /repos/{owner}/{repo}/actions/permissions/accessPUT /repos/{owner}/{repo}/actions/permissions/accessGET /repos/{owner}/{repo}/actions/permissions/selected-actionsPUT /repos/{owner}/{repo}/actions/permissions/selected-actionsGET /repos/{owner}/{repo}/actions/permissions/workflowPUT /repos/{owner}/{repo}/actions/permissions/workflowGET /repos/{owner}/{repo}/actions/runnersGET /repos/{owner}/{repo}/actions/runners/downloadsPOST /repos/{owner}/{repo}/actions/runners/generate-jitconfigPOST /repos/{owner}/{repo}/actions/runners/registration-tokenPOST /repos/{owner}/{repo}/actions/runners/remove-tokenGET /repos/{owner}/{repo}/actions/runners/{runner_id}DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsPOST /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsPUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}GET /repos/{owner}/{repo}/actions/runsGET /repos/{owner}/{repo}/actions/runs/{run_id}DELETE /repos/{owner}/{repo}/actions/runs/{run_id}GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvalsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/approveGET /repos/{owner}/{repo}/actions/runs/{run_id}/artifactsGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/cancelPOST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rulePOST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancelGET /repos/{owner}/{repo}/actions/runs/{run_id}/jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/logsDELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logsGET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerunPOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/timingGET /repos/{owner}/{repo}/actions/secretsGET /repos/{owner}/{repo}/actions/secrets/public-keyGET /repos/{owner}/{repo}/actions/secrets/{secret_name}PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}GET /repos/{owner}/{repo}/actions/variablesPOST /repos/{owner}/{repo}/actions/variablesGET /repos/{owner}/{repo}/actions/variables/{name}PATCH /repos/{owner}/{repo}/actions/variables/{name}DELETE /repos/{owner}/{repo}/actions/variables/{name}GET /repos/{owner}/{repo}/actions/workflowsGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disablePOST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatchesPUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enableGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runsGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timingGET /repos/{owner}/{repo}/environments/{environment_name}/secretsGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-keyGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}GET /repos/{owner}/{repo}/environments/{environment_name}/variablesPOST /repos/{owner}/{repo}/environments/{environment_name}/variablesGET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}activityGET /eventsGET /feedsGET /networks/{owner}/{repo}/eventsGET /orgs/{org}/eventsGET /repos/{owner}/{repo}/eventsGET /repos/{owner}/{repo}/stargazersGET /repos/{owner}/{repo}/subscribersGET /users/{username}/eventsGET /users/{username}/events/publicGET /users/{username}/received_eventsGET /users/{username}/received_events/publicGET /users/{username}/starredGET /users/{username}/subscriptionsappsGET /apps/{app_slug}GET /installation/repositoriesDELETE /installation/tokenbillingGET /organizations/{org}/settings/billing/usageGET /orgs/{org}/settings/billing/actionsGET /orgs/{org}/settings/billing/packagesGET /orgs/{org}/settings/billing/shared-storagebranchesGET /repos/{owner}/{repo}/branchesGET /repos/{owner}/{repo}/branches/{branch}GET /repos/{owner}/{repo}/branches/{branch}/protectionPUT /repos/{owner}/{repo}/branches/{branch}/protectionDELETE /repos/{owner}/{repo}/branches/{branch}/protectionGET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsPOST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsGET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsPATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsGET /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesPOST /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksPATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsPOST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsPUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictionsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictionsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPOST /repos/{owner}/{repo}/branches/{branch}/renamePOST /repos/{owner}/{repo}/merge-upstreamPOST /repos/{owner}/{repo}/mergescampaignsGET /orgs/{org}/campaignsPOST /orgs/{org}/campaignsGET /orgs/{org}/campaigns/{campaign_number}PATCH /orgs/{org}/campaigns/{campaign_number}DELETE /orgs/{org}/campaigns/{campaign_number}checksPOST /repos/{owner}/{repo}/check-runsGET /repos/{owner}/{repo}/check-runs/{check_run_id}PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotationsPOST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequestPOST /repos/{owner}/{repo}/check-suitesPATCH /repos/{owner}/{repo}/check-suites/preferencesGET /repos/{owner}/{repo}/check-suites/{check_suite_id}GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runsPOST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequestGET /repos/{owner}/{repo}/commits/{ref}/check-runsGET /repos/{owner}/{repo}/commits/{ref}/check-suitescode-scanningGET /orgs/{org}/code-scanning/alertsGET /repos/{owner}/{repo}/code-scanning/alertsGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixPOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixPOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commitsGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instancesGET /repos/{owner}/{repo}/code-scanning/analysesGET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}GET /repos/{owner}/{repo}/code-scanning/codeql/databasesGET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analysesGET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}GET /repos/{owner}/{repo}/code-scanning/default-setupPATCH /repos/{owner}/{repo}/code-scanning/default-setupPOST /repos/{owner}/{repo}/code-scanning/sarifsGET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}code-securityGET /orgs/{org}/code-security/configurationsPOST /orgs/{org}/code-security/configurationsGET /orgs/{org}/code-security/configurations/defaultsDELETE /orgs/{org}/code-security/configurations/detachGET /orgs/{org}/code-security/configurations/{configuration_id}PATCH /orgs/{org}/code-security/configurations/{configuration_id}DELETE /orgs/{org}/code-security/configurations/{configuration_id}POST /orgs/{org}/code-security/configurations/{configuration_id}/attachPUT /orgs/{org}/code-security/configurations/{configuration_id}/defaultsGET /orgs/{org}/code-security/configurations/{configuration_id}/repositoriesGET /repos/{owner}/{repo}/code-security-configurationcodes-of-conductGET /codes_of_conductGET /codes_of_conduct/{key}codespacesGET /orgs/{org}/codespacesPUT /orgs/{org}/codespaces/accessPOST /orgs/{org}/codespaces/access/selected_usersDELETE /orgs/{org}/codespaces/access/selected_usersGET /orgs/{org}/codespaces/secretsGET /orgs/{org}/codespaces/secrets/public-keyGET /orgs/{org}/codespaces/secrets/{secret_name}PUT /orgs/{org}/codespaces/secrets/{secret_name}DELETE /orgs/{org}/codespaces/secrets/{secret_name}GET /orgs/{org}/codespaces/secrets/{secret_name}/repositoriesPUT /orgs/{org}/codespaces/secrets/{secret_name}/repositoriesPUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}GET /orgs/{org}/members/{username}/codespacesDELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stopGET /repos/{owner}/{repo}/codespaces/devcontainersGET /repos/{owner}/{repo}/codespaces/machinesGET /repos/{owner}/{repo}/codespaces/secretsGET /repos/{owner}/{repo}/codespaces/secrets/public-keyGET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}collaboratorsGET /repos/{owner}/{repo}/collaboratorsGET /repos/{owner}/{repo}/collaborators/{username}PUT /repos/{owner}/{repo}/collaborators/{username}DELETE /repos/{owner}/{repo}/collaborators/{username}GET /repos/{owner}/{repo}/collaborators/{username}/permissionGET /repos/{owner}/{repo}/invitationsPATCH /repos/{owner}/{repo}/invitations/{invitation_id}DELETE /repos/{owner}/{repo}/invitations/{invitation_id}commitsGET /repos/{owner}/{repo}/commentsGET /repos/{owner}/{repo}/comments/{comment_id}PATCH /repos/{owner}/{repo}/comments/{comment_id}DELETE /repos/{owner}/{repo}/comments/{comment_id}GET /repos/{owner}/{repo}/commitsGET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-headGET /repos/{owner}/{repo}/commits/{commit_sha}/commentsPOST /repos/{owner}/{repo}/commits/{commit_sha}/commentsGET /repos/{owner}/{repo}/commits/{commit_sha}/pullsGET /repos/{owner}/{repo}/commits/{ref}GET /repos/{owner}/{repo}/commits/{ref}/statusGET /repos/{owner}/{repo}/commits/{ref}/statusesGET /repos/{owner}/{repo}/compare/{basehead}POST /repos/{owner}/{repo}/statuses/{sha}copilotGET /orgs/{org}/copilot/billingGET /orgs/{org}/copilot/billing/seatsPOST /orgs/{org}/copilot/billing/selected_teamsDELETE /orgs/{org}/copilot/billing/selected_teamsPOST /orgs/{org}/copilot/billing/selected_usersDELETE /orgs/{org}/copilot/billing/selected_usersGET /orgs/{org}/copilot/metricsGET /orgs/{org}/members/{username}/copilotGET /orgs/{org}/team/{team_slug}/copilot/metricsdependabotGET /orgs/{org}/dependabot/alertsGET /orgs/{org}/dependabot/secretsGET /orgs/{org}/dependabot/secrets/public-keyGET /orgs/{org}/dependabot/secrets/{secret_name}PUT /orgs/{org}/dependabot/secrets/{secret_name}DELETE /orgs/{org}/dependabot/secrets/{secret_name}GET /orgs/{org}/dependabot/secrets/{secret_name}/repositoriesPUT /orgs/{org}/dependabot/secrets/{secret_name}/repositoriesPUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}GET /repos/{owner}/{repo}/dependabot/alertsGET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}GET /repos/{owner}/{repo}/dependabot/secretsGET /repos/{owner}/{repo}/dependabot/secrets/public-keyGET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}dependency-graphGET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}GET /repos/{owner}/{repo}/dependency-graph/sbomPOST /repos/{owner}/{repo}/dependency-graph/snapshotsdeploy-keysGET /repos/{owner}/{repo}/keysPOST /repos/{owner}/{repo}/keysGET /repos/{owner}/{repo}/keys/{key_id}DELETE /repos/{owner}/{repo}/keys/{key_id}deploymentsGET /repos/{owner}/{repo}/deploymentsPOST /repos/{owner}/{repo}/deploymentsGET /repos/{owner}/{repo}/deployments/{deployment_id}DELETE /repos/{owner}/{repo}/deployments/{deployment_id}GET /repos/{owner}/{repo}/deployments/{deployment_id}/statusesPOST /repos/{owner}/{repo}/deployments/{deployment_id}/statusesGET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}GET /repos/{owner}/{repo}/environmentsGET /repos/{owner}/{repo}/environments/{environment_name}PUT /repos/{owner}/{repo}/environments/{environment_name}DELETE /repos/{owner}/{repo}/environments/{environment_name}GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policiesPOST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policiesGET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rulesPOST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rulesGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/appsGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}emojisGET /emojisgitPOST /repos/{owner}/{repo}/git/blobsGET /repos/{owner}/{repo}/git/blobs/{file_sha}POST /repos/{owner}/{repo}/git/commitsGET /repos/{owner}/{repo}/git/commits/{commit_sha}GET /repos/{owner}/{repo}/git/matching-refs/{ref}GET /repos/{owner}/{repo}/git/ref/{ref}POST /repos/{owner}/{repo}/git/refsPATCH /repos/{owner}/{repo}/git/refs/{ref}DELETE /repos/{owner}/{repo}/git/refs/{ref}POST /repos/{owner}/{repo}/git/tagsGET /repos/{owner}/{repo}/git/tags/{tag_sha}POST /repos/{owner}/{repo}/git/treesGET /repos/{owner}/{repo}/git/trees/{tree_sha}gitignoreGET /gitignore/templatesGET /gitignore/templates/{name}interactionsGET /orgs/{org}/interaction-limitsPUT /orgs/{org}/interaction-limitsDELETE /orgs/{org}/interaction-limitsGET /repos/{owner}/{repo}/interaction-limitsPUT /repos/{owner}/{repo}/interaction-limitsDELETE /repos/{owner}/{repo}/interaction-limitsissuesGET /repos/{owner}/{repo}/assigneesGET /repos/{owner}/{repo}/assignees/{assignee}GET /repos/{owner}/{repo}/issuesPOST /repos/{owner}/{repo}/issuesGET /repos/{owner}/{repo}/issues/commentsGET /repos/{owner}/{repo}/issues/comments/{comment_id}PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}GET /repos/{owner}/{repo}/issues/eventsGET /repos/{owner}/{repo}/issues/events/{event_id}GET /repos/{owner}/{repo}/issues/{issue_number}PATCH /repos/{owner}/{repo}/issues/{issue_number}POST /repos/{owner}/{repo}/issues/{issue_number}/assigneesDELETE /repos/{owner}/{repo}/issues/{issue_number}/assigneesGET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}GET /repos/{owner}/{repo}/issues/{issue_number}/commentsPOST /repos/{owner}/{repo}/issues/{issue_number}/commentsGET /repos/{owner}/{repo}/issues/{issue_number}/eventsGET /repos/{owner}/{repo}/issues/{issue_number}/labelsPOST /repos/{owner}/{repo}/issues/{issue_number}/labelsPUT /repos/{owner}/{repo}/issues/{issue_number}/labelsDELETE /repos/{owner}/{repo}/issues/{issue_number}/labelsDELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}PUT /repos/{owner}/{repo}/issues/{issue_number}/lockDELETE /repos/{owner}/{repo}/issues/{issue_number}/lockDELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issueGET /repos/{owner}/{repo}/issues/{issue_number}/sub_issuesPOST /repos/{owner}/{repo}/issues/{issue_number}/sub_issuesPATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priorityGET /repos/{owner}/{repo}/issues/{issue_number}/timelineGET /repos/{owner}/{repo}/labelsPOST /repos/{owner}/{repo}/labelsGET /repos/{owner}/{repo}/labels/{name}PATCH /repos/{owner}/{repo}/labels/{name}DELETE /repos/{owner}/{repo}/labels/{name}GET /repos/{owner}/{repo}/milestonesPOST /repos/{owner}/{repo}/milestonesGET /repos/{owner}/{repo}/milestones/{milestone_number}PATCH /repos/{owner}/{repo}/milestones/{milestone_number}DELETE /repos/{owner}/{repo}/milestones/{milestone_number}GET /repos/{owner}/{repo}/milestones/{milestone_number}/labelslicensesGET /licensesGET /licenses/{license}GET /repos/{owner}/{repo}/licensemarkdownPOST /markdownPOST /markdown/rawmetaGET /GET /metaGET /octocatGET /versionsGET /zenmetricsGET /repos/{owner}/{repo}/community/profileGET /repos/{owner}/{repo}/stats/code_frequencyGET /repos/{owner}/{repo}/stats/commit_activityGET /repos/{owner}/{repo}/stats/contributorsGET /repos/{owner}/{repo}/stats/participationGET /repos/{owner}/{repo}/stats/punch_cardGET /repos/{owner}/{repo}/traffic/clonesGET /repos/{owner}/{repo}/traffic/popular/pathsGET /repos/{owner}/{repo}/traffic/popular/referrersGET /repos/{owner}/{repo}/traffic/viewsorgsGET /organizationsGET /orgs/{org}PATCH /orgs/{org}DELETE /orgs/{org}GET /orgs/{org}/attestations/{subject_digest}GET /orgs/{org}/blocksGET /orgs/{org}/blocks/{username}PUT /orgs/{org}/blocks/{username}DELETE /orgs/{org}/blocks/{username}GET /orgs/{org}/failed_invitationsGET /orgs/{org}/hooksPOST /orgs/{org}/hooksGET /orgs/{org}/hooks/{hook_id}PATCH /orgs/{org}/hooks/{hook_id}DELETE /orgs/{org}/hooks/{hook_id}GET /orgs/{org}/hooks/{hook_id}/configPATCH /orgs/{org}/hooks/{hook_id}/configGET /orgs/{org}/hooks/{hook_id}/deliveriesGET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attemptsPOST /orgs/{org}/hooks/{hook_id}/pingsGET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/subject-statsGET /orgs/{org}/insights/api/summary-statsGET /orgs/{org}/insights/api/summary-stats/users/{user_id}GET /orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/time-statsGET /orgs/{org}/insights/api/time-stats/users/{user_id}GET /orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/user-stats/{user_id}GET /orgs/{org}/installationsGET /orgs/{org}/invitationsPOST /orgs/{org}/invitationsDELETE /orgs/{org}/invitations/{invitation_id}GET /orgs/{org}/invitations/{invitation_id}/teamsGET /orgs/{org}/issue-typesPOST /orgs/{org}/issue-typesPUT /orgs/{org}/issue-types/{issue_type_id}DELETE /orgs/{org}/issue-types/{issue_type_id}GET /orgs/{org}/membersGET /orgs/{org}/members/{username}DELETE /orgs/{org}/members/{username}GET /orgs/{org}/memberships/{username}PUT /orgs/{org}/memberships/{username}DELETE /orgs/{org}/memberships/{username}GET /orgs/{org}/organization-rolesDELETE /orgs/{org}/organization-roles/teams/{team_slug}PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}DELETE /orgs/{org}/organization-roles/users/{username}PUT /orgs/{org}/organization-roles/users/{username}/{role_id}DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}GET /orgs/{org}/organization-roles/{role_id}GET /orgs/{org}/organization-roles/{role_id}/teamsGET /orgs/{org}/organization-roles/{role_id}/usersGET /orgs/{org}/outside_collaboratorsPUT /orgs/{org}/outside_collaborators/{username}DELETE /orgs/{org}/outside_collaborators/{username}GET /orgs/{org}/personal-access-token-requestsPOST /orgs/{org}/personal-access-token-requestsPOST /orgs/{org}/personal-access-token-requests/{pat_request_id}GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositoriesGET /orgs/{org}/personal-access-tokensPOST /orgs/{org}/personal-access-tokensPOST /orgs/{org}/personal-access-tokens/{pat_id}GET /orgs/{org}/personal-access-tokens/{pat_id}/repositoriesGET /orgs/{org}/properties/schemaPATCH /orgs/{org}/properties/schemaGET /orgs/{org}/properties/schema/{custom_property_name}PUT /orgs/{org}/properties/schema/{custom_property_name}DELETE /orgs/{org}/properties/schema/{custom_property_name}GET /orgs/{org}/properties/valuesPATCH /orgs/{org}/properties/valuesGET /orgs/{org}/public_membersGET /orgs/{org}/public_members/{username}GET /orgs/{org}/rulesetsPOST /orgs/{org}/rulesetsGET /orgs/{org}/rulesets/rule-suitesGET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}GET /orgs/{org}/rulesets/{ruleset_id}PUT /orgs/{org}/rulesets/{ruleset_id}DELETE /orgs/{org}/rulesets/{ruleset_id}GET /orgs/{org}/rulesets/{ruleset_id}/historyGET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}GET /orgs/{org}/security-managersPUT /orgs/{org}/security-managers/teams/{team_slug}DELETE /orgs/{org}/security-managers/teams/{team_slug}GET /orgs/{org}/settings/network-configurationsPOST /orgs/{org}/settings/network-configurationsGET /orgs/{org}/settings/network-configurations/{network_configuration_id}PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}GET /orgs/{org}/settings/network-settings/{network_settings_id}POST /orgs/{org}/{security_product}/{enablement}GET /users/{username}/orgspackagesGET /orgs/{org}/docker/conflictsGET /orgs/{org}/packagesGET /orgs/{org}/packages/{package_type}/{package_name}DELETE /orgs/{org}/packages/{package_type}/{package_name}POST /orgs/{org}/packages/{package_type}/{package_name}/restoreGET /orgs/{org}/packages/{package_type}/{package_name}/versionsGET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restoreGET /user/packagesGET /user/packages/{package_type}/{package_name}DELETE /user/packages/{package_type}/{package_name}POST /user/packages/{package_type}/{package_name}/restoreGET /user/packages/{package_type}/{package_name}/versionsGET /user/packages/{package_type}/{package_name}/versions/{package_version_id}DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restoreGET /users/{username}/docker/conflictsGET /users/{username}/packagesGET /users/{username}/packages/{package_type}/{package_name}DELETE /users/{username}/packages/{package_type}/{package_name}POST /users/{username}/packages/{package_type}/{package_name}/restoreGET /users/{username}/packages/{package_type}/{package_name}/versionsGET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restorepagesGET /repos/{owner}/{repo}/pagesPOST /repos/{owner}/{repo}/pagesPUT /repos/{owner}/{repo}/pagesDELETE /repos/{owner}/{repo}/pagesGET /repos/{owner}/{repo}/pages/buildsPOST /repos/{owner}/{repo}/pages/buildsGET /repos/{owner}/{repo}/pages/builds/latestGET /repos/{owner}/{repo}/pages/builds/{build_id}POST /repos/{owner}/{repo}/pages/deploymentsGET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancelGET /repos/{owner}/{repo}/pages/healthprivate-registriesGET /orgs/{org}/private-registriesPOST /orgs/{org}/private-registriesGET /orgs/{org}/private-registries/public-keyGET /orgs/{org}/private-registries/{secret_name}PATCH /orgs/{org}/private-registries/{secret_name}DELETE /orgs/{org}/private-registries/{secret_name}projectsGET /orgs/{org}/projectsPOST /orgs/{org}/projectsGET /projects/columns/cards/{card_id}PATCH /projects/columns/cards/{card_id}DELETE /projects/columns/cards/{card_id}POST /projects/columns/cards/{card_id}/movesGET /projects/columns/{column_id}PATCH /projects/columns/{column_id}DELETE /projects/columns/{column_id}GET /projects/columns/{column_id}/cardsPOST /projects/columns/{column_id}/cardsPOST /projects/columns/{column_id}/movesGET /projects/{project_id}PATCH /projects/{project_id}DELETE /projects/{project_id}GET /projects/{project_id}/collaboratorsPUT /projects/{project_id}/collaborators/{username}DELETE /projects/{project_id}/collaborators/{username}GET /projects/{project_id}/collaborators/{username}/permissionGET /projects/{project_id}/columnsPOST /projects/{project_id}/columnsGET /repos/{owner}/{repo}/projectsPOST /repos/{owner}/{repo}/projectspullsGET /repos/{owner}/{repo}/pullsPOST /repos/{owner}/{repo}/pullsGET /repos/{owner}/{repo}/pulls/commentsGET /repos/{owner}/{repo}/pulls/comments/{comment_id}PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}GET /repos/{owner}/{repo}/pulls/{pull_number}PATCH /repos/{owner}/{repo}/pulls/{pull_number}GET /repos/{owner}/{repo}/pulls/{pull_number}/commentsPOST /repos/{owner}/{repo}/pulls/{pull_number}/commentsPOST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/repliesGET /repos/{owner}/{repo}/pulls/{pull_number}/commitsGET /repos/{owner}/{repo}/pulls/{pull_number}/filesGET /repos/{owner}/{repo}/pulls/{pull_number}/mergePUT /repos/{owner}/{repo}/pulls/{pull_number}/mergeGET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersPOST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersDELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersGET /repos/{owner}/{repo}/pulls/{pull_number}/reviewsPOST /repos/{owner}/{repo}/pulls/{pull_number}/reviewsGET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/commentsPUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissalsPOST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/eventsPUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branchrate-limitGET /rate_limitreactionsDELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}GET /repos/{owner}/{repo}/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/issues/{issue_number}/reactionsPOST /repos/{owner}/{repo}/issues/{issue_number}/reactionsDELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/releases/{release_id}/reactionsPOST /repos/{owner}/{repo}/releases/{release_id}/reactionsDELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}releasesGET /repos/{owner}/{repo}/releasesPOST /repos/{owner}/{repo}/releasesGET /repos/{owner}/{repo}/releases/assets/{asset_id}PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}POST /repos/{owner}/{repo}/releases/generate-notesGET /repos/{owner}/{repo}/releases/latestGET /repos/{owner}/{repo}/releases/tags/{tag}GET /repos/{owner}/{repo}/releases/{release_id}PATCH /repos/{owner}/{repo}/releases/{release_id}DELETE /repos/{owner}/{repo}/releases/{release_id}GET /repos/{owner}/{repo}/releases/{release_id}/assetsreposGET /orgs/{org}/reposPOST /orgs/{org}/reposGET /repos/{owner}/{repo}PATCH /repos/{owner}/{repo}DELETE /repos/{owner}/{repo}GET /repos/{owner}/{repo}/activityPOST /repos/{owner}/{repo}/attestationsGET /repos/{owner}/{repo}/attestations/{subject_digest}GET /repos/{owner}/{repo}/autolinksPOST /repos/{owner}/{repo}/autolinksGET /repos/{owner}/{repo}/autolinks/{autolink_id}DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}GET /repos/{owner}/{repo}/automated-security-fixesPUT /repos/{owner}/{repo}/automated-security-fixesDELETE /repos/{owner}/{repo}/automated-security-fixesGET /repos/{owner}/{repo}/codeowners/errorsGET /repos/{owner}/{repo}/contents/{path}PUT /repos/{owner}/{repo}/contents/{path}DELETE /repos/{owner}/{repo}/contents/{path}GET /repos/{owner}/{repo}/contributorsPOST /repos/{owner}/{repo}/dispatchesGET /repos/{owner}/{repo}/forksPOST /repos/{owner}/{repo}/forksGET /repos/{owner}/{repo}/hooksPOST /repos/{owner}/{repo}/hooksGET /repos/{owner}/{repo}/hooks/{hook_id}PATCH /repos/{owner}/{repo}/hooks/{hook_id}DELETE /repos/{owner}/{repo}/hooks/{hook_id}GET /repos/{owner}/{repo}/hooks/{hook_id}/configPATCH /repos/{owner}/{repo}/hooks/{hook_id}/configGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveriesGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attemptsPOST /repos/{owner}/{repo}/hooks/{hook_id}/pingsPOST /repos/{owner}/{repo}/hooks/{hook_id}/testsGET /repos/{owner}/{repo}/languagesGET /repos/{owner}/{repo}/private-vulnerability-reportingPUT /repos/{owner}/{repo}/private-vulnerability-reportingDELETE /repos/{owner}/{repo}/private-vulnerability-reportingGET /repos/{owner}/{repo}/properties/valuesPATCH /repos/{owner}/{repo}/properties/valuesGET /repos/{owner}/{repo}/rules/branches/{branch}GET /repos/{owner}/{repo}/rulesetsPOST /repos/{owner}/{repo}/rulesetsGET /repos/{owner}/{repo}/rulesets/rule-suitesGET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}GET /repos/{owner}/{repo}/rulesets/{ruleset_id}PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/historyGET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}GET /repos/{owner}/{repo}/tagsGET /repos/{owner}/{repo}/tags/protectionPOST /repos/{owner}/{repo}/tags/protectionDELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}GET /repos/{owner}/{repo}/tarball/{ref}GET /repos/{owner}/{repo}/teamsGET /repos/{owner}/{repo}/topicsPUT /repos/{owner}/{repo}/topicsGET /repos/{owner}/{repo}/vulnerability-alertsPUT /repos/{owner}/{repo}/vulnerability-alertsDELETE /repos/{owner}/{repo}/vulnerability-alertsGET /repos/{owner}/{repo}/zipball/{ref}POST /repos/{template_owner}/{template_repo}/generateGET /repositoriesGET /users/{username}/repossearchGET /search/codeGET /search/commitsGET /search/issuesGET /search/labelsGET /search/repositoriesGET /search/topicsGET /search/userssecret-scanningGET /orgs/{org}/secret-scanning/alertsGET /repos/{owner}/{repo}/secret-scanning/alertsGET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locationsGET /repos/{owner}/{repo}/secret-scanning/scan-historysecurity-advisoriesGET /advisoriesGET /advisories/{ghsa_id}GET /orgs/{org}/security-advisoriesGET /repos/{owner}/{repo}/security-advisoriesPOST /repos/{owner}/{repo}/security-advisoriesPOST /repos/{owner}/{repo}/security-advisories/reportsGET /repos/{owner}/{repo}/security-advisories/{ghsa_id}PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cvePOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forksteamsGET /orgs/{org}/teamsPOST /orgs/{org}/teamsGET /orgs/{org}/teams/{team_slug}/projectsGET /orgs/{org}/teams/{team_slug}/projects/{project_id}PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}GET /teams/{team_id}/members/{username}PUT /teams/{team_id}/members/{username}DELETE /teams/{team_id}/members/{username}usersGET /usersGET /users/{username}/attestations/{subject_digest}GET /users/{username}/followersGET /users/{username}/followingGET /users/{username}/following/{target_user}GET /users/{username}/gpg_keysGET /users/{username}/keysGET /users/{username}/social_accountsGET /users/{username}/ssh_signing_keys\n\n\n\nREST API/Authentication/Endpoints for GitHub App user tokensEndpoints available for GitHub App user access tokensYour GitHub App can make requests to the following REST endpoints with a user access token.Who can use this feature?You can use a user access token to access these endpoints using your GitHub App. For more information, see Authenticating with a GitHub App on behalf of a user.In this articleactionsactivityappsbillingbranchescampaignschecksclassroomcode-scanningcode-securitycodes-of-conductcodespacescollaboratorscommitscopilotdependabotdependency-graphdeploy-keysdeploymentsemojisgistsgitgitignoreinteractionsissueslicensesmarkdownmetametricsmigrationsorgspackagespagesprivate-registriesprojectspullsrate-limitreactionsreleasesrepossearchsecret-scanningsecurity-advisoriesteamsusersactionsGET /orgs/{org}/actions/cache/usageGET /orgs/{org}/actions/cache/usage-by-repositoryGET /orgs/{org}/actions/hosted-runnersPOST /orgs/{org}/actions/hosted-runnersGET /orgs/{org}/actions/hosted-runners/images/github-ownedGET /orgs/{org}/actions/hosted-runners/images/partnerGET /orgs/{org}/actions/hosted-runners/limitsGET /orgs/{org}/actions/hosted-runners/machine-sizesGET /orgs/{org}/actions/hosted-runners/platformsGET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}GET /orgs/{org}/actions/oidc/customization/subPUT /orgs/{org}/actions/oidc/customization/subGET /orgs/{org}/actions/permissionsPUT /orgs/{org}/actions/permissionsGET /orgs/{org}/actions/permissions/repositoriesPUT /orgs/{org}/actions/permissions/repositoriesPUT /orgs/{org}/actions/permissions/repositories/{repository_id}DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}GET /orgs/{org}/actions/permissions/selected-actionsPUT /orgs/{org}/actions/permissions/selected-actionsGET /orgs/{org}/actions/permissions/workflowPUT /orgs/{org}/actions/permissions/workflowGET /orgs/{org}/actions/runner-groupsPOST /orgs/{org}/actions/runner-groupsGET /orgs/{org}/actions/runner-groups/{runner_group_id}PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runnersGET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriesPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriesPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runnersPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runnersPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}GET /orgs/{org}/actions/runnersGET /orgs/{org}/actions/runners/downloadsPOST /orgs/{org}/actions/runners/generate-jitconfigPOST /orgs/{org}/actions/runners/registration-tokenPOST /orgs/{org}/actions/runners/remove-tokenGET /orgs/{org}/actions/runners/{runner_id}DELETE /orgs/{org}/actions/runners/{runner_id}GET /orgs/{org}/actions/runners/{runner_id}/labelsPOST /orgs/{org}/actions/runners/{runner_id}/labelsPUT /orgs/{org}/actions/runners/{runner_id}/labelsDELETE /orgs/{org}/actions/runners/{runner_id}/labelsDELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}GET /orgs/{org}/actions/secretsGET /orgs/{org}/actions/secrets/public-keyGET /orgs/{org}/actions/secrets/{secret_name}PUT /orgs/{org}/actions/secrets/{secret_name}DELETE /orgs/{org}/actions/secrets/{secret_name}GET /orgs/{org}/actions/secrets/{secret_name}/repositoriesPUT /orgs/{org}/actions/secrets/{secret_name}/repositoriesPUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}GET /orgs/{org}/actions/variablesPOST /orgs/{org}/actions/variablesGET /orgs/{org}/actions/variables/{name}PATCH /orgs/{org}/actions/variables/{name}DELETE /orgs/{org}/actions/variables/{name}GET /orgs/{org}/actions/variables/{name}/repositoriesPUT /orgs/{org}/actions/variables/{name}/repositoriesPUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}GET /repos/{owner}/{repo}/actions/artifactsGET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}GET /repos/{owner}/{repo}/actions/cache/usageGET /repos/{owner}/{repo}/actions/cachesDELETE /repos/{owner}/{repo}/actions/cachesDELETE /repos/{owner}/{repo}/actions/caches/{cache_id}GET /repos/{owner}/{repo}/actions/jobs/{job_id}GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logsPOST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerunGET /repos/{owner}/{repo}/actions/oidc/customization/subPUT /repos/{owner}/{repo}/actions/oidc/customization/subGET /repos/{owner}/{repo}/actions/organization-secretsGET /repos/{owner}/{repo}/actions/organization-variablesGET /repos/{owner}/{repo}/actions/permissionsPUT /repos/{owner}/{repo}/actions/permissionsGET /repos/{owner}/{repo}/actions/permissions/accessPUT /repos/{owner}/{repo}/actions/permissions/accessGET /repos/{owner}/{repo}/actions/permissions/selected-actionsPUT /repos/{owner}/{repo}/actions/permissions/selected-actionsGET /repos/{owner}/{repo}/actions/permissions/workflowPUT /repos/{owner}/{repo}/actions/permissions/workflowGET /repos/{owner}/{repo}/actions/runnersGET /repos/{owner}/{repo}/actions/runners/downloadsPOST /repos/{owner}/{repo}/actions/runners/generate-jitconfigPOST /repos/{owner}/{repo}/actions/runners/registration-tokenPOST /repos/{owner}/{repo}/actions/runners/remove-tokenGET /repos/{owner}/{repo}/actions/runners/{runner_id}DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsPOST /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsPUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}GET /repos/{owner}/{repo}/actions/runsGET /repos/{owner}/{repo}/actions/runs/{run_id}DELETE /repos/{owner}/{repo}/actions/runs/{run_id}GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvalsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/approveGET /repos/{owner}/{repo}/actions/runs/{run_id}/artifactsGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/cancelPOST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancelGET /repos/{owner}/{repo}/actions/runs/{run_id}/jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/logsDELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logsGET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerunPOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/timingGET /repos/{owner}/{repo}/actions/secretsGET /repos/{owner}/{repo}/actions/secrets/public-keyGET /repos/{owner}/{repo}/actions/secrets/{secret_name}PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}GET /repos/{owner}/{repo}/actions/variablesPOST /repos/{owner}/{repo}/actions/variablesGET /repos/{owner}/{repo}/actions/variables/{name}PATCH /repos/{owner}/{repo}/actions/variables/{name}DELETE /repos/{owner}/{repo}/actions/variables/{name}GET /repos/{owner}/{repo}/actions/workflowsGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disablePOST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatchesPUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enableGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runsGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timingGET /repos/{owner}/{repo}/environments/{environment_name}/secretsGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-keyGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}GET /repos/{owner}/{repo}/environments/{environment_name}/variablesPOST /repos/{owner}/{repo}/environments/{environment_name}/variablesGET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}activityGET /eventsGET /feedsGET /networks/{owner}/{repo}/eventsGET /orgs/{org}/eventsGET /repos/{owner}/{repo}/eventsGET /repos/{owner}/{repo}/stargazersGET /repos/{owner}/{repo}/subscribersGET /user/starredGET /user/starred/{owner}/{repo}PUT /user/starred/{owner}/{repo}DELETE /user/starred/{owner}/{repo}GET /user/subscriptionsGET /users/{username}/eventsGET /users/{username}/events/orgs/{org}GET /users/{username}/events/publicGET /users/{username}/received_eventsGET /users/{username}/received_events/publicGET /users/{username}/starredGET /users/{username}/subscriptionsappsGET /apps/{app_slug}GET /user/installationsGET /user/installations/{installation_id}/repositoriesGET /user/marketplace_purchasesGET /user/marketplace_purchases/stubbedbillingGET /organizations/{org}/settings/billing/usageGET /orgs/{org}/settings/billing/actionsGET /orgs/{org}/settings/billing/packagesGET /orgs/{org}/settings/billing/shared-storageGET /users/{username}/settings/billing/actionsGET /users/{username}/settings/billing/packagesGET /users/{username}/settings/billing/shared-storagebranchesGET /repos/{owner}/{repo}/branchesGET /repos/{owner}/{repo}/branches/{branch}GET /repos/{owner}/{repo}/branches/{branch}/protectionPUT /repos/{owner}/{repo}/branches/{branch}/protectionDELETE /repos/{owner}/{repo}/branches/{branch}/protectionGET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsPOST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsGET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsPATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsGET /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesPOST /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksPATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsPOST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsPUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictionsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictionsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPOST /repos/{owner}/{repo}/branches/{branch}/renamePOST /repos/{owner}/{repo}/merge-upstreamPOST /repos/{owner}/{repo}/mergescampaignsGET /orgs/{org}/campaignsPOST /orgs/{org}/campaignsGET /orgs/{org}/campaigns/{campaign_number}PATCH /orgs/{org}/campaigns/{campaign_number}DELETE /orgs/{org}/campaigns/{campaign_number}checksPOST /repos/{owner}/{repo}/check-runsGET /repos/{owner}/{repo}/check-runs/{check_run_id}PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotationsPOST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequestPOST /repos/{owner}/{repo}/check-suitesPATCH /repos/{owner}/{repo}/check-suites/preferencesGET /repos/{owner}/{repo}/check-suites/{check_suite_id}GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runsPOST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequestGET /repos/{owner}/{repo}/commits/{ref}/check-runsGET /repos/{owner}/{repo}/commits/{ref}/check-suitesclassroomGET /assignments/{assignment_id}GET /assignments/{assignment_id}/accepted_assignmentsGET /assignments/{assignment_id}/gradesGET /classroomsGET /classrooms/{classroom_id}GET /classrooms/{classroom_id}/assignmentscode-scanningGET /orgs/{org}/code-scanning/alertsGET /repos/{owner}/{repo}/code-scanning/alertsGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixPOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixPOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commitsGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instancesGET /repos/{owner}/{repo}/code-scanning/analysesGET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}GET /repos/{owner}/{repo}/code-scanning/codeql/databasesGET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analysesGET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}GET /repos/{owner}/{repo}/code-scanning/default-setupPATCH /repos/{owner}/{repo}/code-scanning/default-setupPOST /repos/{owner}/{repo}/code-scanning/sarifsGET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}code-securityGET /orgs/{org}/code-security/configurationsPOST /orgs/{org}/code-security/configurationsGET /orgs/{org}/code-security/configurations/defaultsDELETE /orgs/{org}/code-security/configurations/detachGET /orgs/{org}/code-security/configurations/{configuration_id}PATCH /orgs/{org}/code-security/configurations/{configuration_id}DELETE /orgs/{org}/code-security/configurations/{configuration_id}POST /orgs/{org}/code-security/configurations/{configuration_id}/attachPUT /orgs/{org}/code-security/configurations/{configuration_id}/defaultsGET /orgs/{org}/code-security/configurations/{configuration_id}/repositoriesGET /repos/{owner}/{repo}/code-security-configurationcodes-of-conductGET /codes_of_conductGET /codes_of_conduct/{key}codespacesGET /orgs/{org}/codespacesPUT /orgs/{org}/codespaces/accessPOST /orgs/{org}/codespaces/access/selected_usersDELETE /orgs/{org}/codespaces/access/selected_usersGET /orgs/{org}/codespaces/secretsGET /orgs/{org}/codespaces/secrets/public-keyGET /orgs/{org}/codespaces/secrets/{secret_name}PUT /orgs/{org}/codespaces/secrets/{secret_name}DELETE /orgs/{org}/codespaces/secrets/{secret_name}GET /orgs/{org}/codespaces/secrets/{secret_name}/repositoriesPUT /orgs/{org}/codespaces/secrets/{secret_name}/repositoriesPUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}GET /orgs/{org}/members/{username}/codespacesDELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stopGET /repos/{owner}/{repo}/codespacesPOST /repos/{owner}/{repo}/codespacesGET /repos/{owner}/{repo}/codespaces/devcontainersGET /repos/{owner}/{repo}/codespaces/machinesGET /repos/{owner}/{repo}/codespaces/newGET /repos/{owner}/{repo}/codespaces/permissions_checkGET /repos/{owner}/{repo}/codespaces/secretsGET /repos/{owner}/{repo}/codespaces/secrets/public-keyGET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}POST /repos/{owner}/{repo}/pulls/{pull_number}/codespacesGET /user/codespacesPOST /user/codespacesGET /user/codespaces/secretsGET /user/codespaces/secrets/public-keyGET /user/codespaces/secrets/{secret_name}PUT /user/codespaces/secrets/{secret_name}DELETE /user/codespaces/secrets/{secret_name}GET /user/codespaces/secrets/{secret_name}/repositoriesPUT /user/codespaces/secrets/{secret_name}/repositoriesPUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}GET /user/codespaces/{codespace_name}PATCH /user/codespaces/{codespace_name}DELETE /user/codespaces/{codespace_name}POST /user/codespaces/{codespace_name}/exportsGET /user/codespaces/{codespace_name}/exports/{export_id}GET /user/codespaces/{codespace_name}/machinesPOST /user/codespaces/{codespace_name}/publishPOST /user/codespaces/{codespace_name}/startPOST /user/codespaces/{codespace_name}/stopcollaboratorsGET /repos/{owner}/{repo}/collaboratorsGET /repos/{owner}/{repo}/collaborators/{username}PUT /repos/{owner}/{repo}/collaborators/{username}DELETE /repos/{owner}/{repo}/collaborators/{username}GET /repos/{owner}/{repo}/collaborators/{username}/permissionGET /repos/{owner}/{repo}/invitationsPATCH /repos/{owner}/{repo}/invitations/{invitation_id}DELETE /repos/{owner}/{repo}/invitations/{invitation_id}GET /user/repository_invitationsPATCH /user/repository_invitations/{invitation_id}DELETE /user/repository_invitations/{invitation_id}commitsGET /repos/{owner}/{repo}/commentsGET /repos/{owner}/{repo}/comments/{comment_id}PATCH /repos/{owner}/{repo}/comments/{comment_id}DELETE /repos/{owner}/{repo}/comments/{comment_id}GET /repos/{owner}/{repo}/commitsGET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-headGET /repos/{owner}/{repo}/commits/{commit_sha}/commentsPOST /repos/{owner}/{repo}/commits/{commit_sha}/commentsGET /repos/{owner}/{repo}/commits/{commit_sha}/pullsGET /repos/{owner}/{repo}/commits/{ref}GET /repos/{owner}/{repo}/commits/{ref}/statusGET /repos/{owner}/{repo}/commits/{ref}/statusesGET /repos/{owner}/{repo}/compare/{basehead}POST /repos/{owner}/{repo}/statuses/{sha}copilotGET /orgs/{org}/copilot/billingGET /orgs/{org}/copilot/billing/seatsPOST /orgs/{org}/copilot/billing/selected_teamsDELETE /orgs/{org}/copilot/billing/selected_teamsPOST /orgs/{org}/copilot/billing/selected_usersDELETE /orgs/{org}/copilot/billing/selected_usersGET /orgs/{org}/copilot/metricsGET /orgs/{org}/members/{username}/copilotGET /orgs/{org}/team/{team_slug}/copilot/metricsdependabotGET /orgs/{org}/dependabot/alertsGET /orgs/{org}/dependabot/secretsGET /orgs/{org}/dependabot/secrets/public-keyGET /orgs/{org}/dependabot/secrets/{secret_name}PUT /orgs/{org}/dependabot/secrets/{secret_name}DELETE /orgs/{org}/dependabot/secrets/{secret_name}GET /orgs/{org}/dependabot/secrets/{secret_name}/repositoriesPUT /orgs/{org}/dependabot/secrets/{secret_name}/repositoriesPUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}GET /repos/{owner}/{repo}/dependabot/alertsGET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}GET /repos/{owner}/{repo}/dependabot/secretsGET /repos/{owner}/{repo}/dependabot/secrets/public-keyGET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}dependency-graphGET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}GET /repos/{owner}/{repo}/dependency-graph/sbomPOST /repos/{owner}/{repo}/dependency-graph/snapshotsdeploy-keysGET /repos/{owner}/{repo}/keysPOST /repos/{owner}/{repo}/keysGET /repos/{owner}/{repo}/keys/{key_id}DELETE /repos/{owner}/{repo}/keys/{key_id}deploymentsGET /repos/{owner}/{repo}/deploymentsPOST /repos/{owner}/{repo}/deploymentsGET /repos/{owner}/{repo}/deployments/{deployment_id}DELETE /repos/{owner}/{repo}/deployments/{deployment_id}GET /repos/{owner}/{repo}/deployments/{deployment_id}/statusesPOST /repos/{owner}/{repo}/deployments/{deployment_id}/statusesGET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}GET /repos/{owner}/{repo}/environmentsGET /repos/{owner}/{repo}/environments/{environment_name}PUT /repos/{owner}/{repo}/environments/{environment_name}DELETE /repos/{owner}/{repo}/environments/{environment_name}GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policiesPOST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policiesGET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rulesPOST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rulesGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/appsGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}emojisGET /emojisgistsGET /gistsPOST /gistsGET /gists/publicGET /gists/starredGET /gists/{gist_id}PATCH /gists/{gist_id}DELETE /gists/{gist_id}GET /gists/{gist_id}/commentsPOST /gists/{gist_id}/commentsGET /gists/{gist_id}/comments/{comment_id}PATCH /gists/{gist_id}/comments/{comment_id}DELETE /gists/{gist_id}/comments/{comment_id}GET /gists/{gist_id}/commitsGET /gists/{gist_id}/forksPOST /gists/{gist_id}/forksGET /gists/{gist_id}/starPUT /gists/{gist_id}/starDELETE /gists/{gist_id}/starGET /gists/{gist_id}/{sha}GET /users/{username}/gistsgitPOST /repos/{owner}/{repo}/git/blobsGET /repos/{owner}/{repo}/git/blobs/{file_sha}POST /repos/{owner}/{repo}/git/commitsGET /repos/{owner}/{repo}/git/commits/{commit_sha}GET /repos/{owner}/{repo}/git/matching-refs/{ref}GET /repos/{owner}/{repo}/git/ref/{ref}POST /repos/{owner}/{repo}/git/refsPATCH /repos/{owner}/{repo}/git/refs/{ref}DELETE /repos/{owner}/{repo}/git/refs/{ref}POST /repos/{owner}/{repo}/git/tagsGET /repos/{owner}/{repo}/git/tags/{tag_sha}POST /repos/{owner}/{repo}/git/treesGET /repos/{owner}/{repo}/git/trees/{tree_sha}gitignoreGET /gitignore/templatesGET /gitignore/templates/{name}interactionsGET /orgs/{org}/interaction-limitsPUT /orgs/{org}/interaction-limitsDELETE /orgs/{org}/interaction-limitsGET /repos/{owner}/{repo}/interaction-limitsPUT /repos/{owner}/{repo}/interaction-limitsDELETE /repos/{owner}/{repo}/interaction-limitsGET /user/interaction-limitsPUT /user/interaction-limitsDELETE /user/interaction-limitsissuesGET /issuesGET /orgs/{org}/issuesGET /repos/{owner}/{repo}/assigneesGET /repos/{owner}/{repo}/assignees/{assignee}GET /repos/{owner}/{repo}/issuesPOST /repos/{owner}/{repo}/issuesGET /repos/{owner}/{repo}/issues/commentsGET /repos/{owner}/{repo}/issues/comments/{comment_id}PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}GET /repos/{owner}/{repo}/issues/eventsGET /repos/{owner}/{repo}/issues/events/{event_id}GET /repos/{owner}/{repo}/issues/{issue_number}PATCH /repos/{owner}/{repo}/issues/{issue_number}POST /repos/{owner}/{repo}/issues/{issue_number}/assigneesDELETE /repos/{owner}/{repo}/issues/{issue_number}/assigneesGET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}GET /repos/{owner}/{repo}/issues/{issue_number}/commentsPOST /repos/{owner}/{repo}/issues/{issue_number}/commentsGET /repos/{owner}/{repo}/issues/{issue_number}/eventsGET /repos/{owner}/{repo}/issues/{issue_number}/labelsPOST /repos/{owner}/{repo}/issues/{issue_number}/labelsPUT /repos/{owner}/{repo}/issues/{issue_number}/labelsDELETE /repos/{owner}/{repo}/issues/{issue_number}/labelsDELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}PUT /repos/{owner}/{repo}/issues/{issue_number}/lockDELETE /repos/{owner}/{repo}/issues/{issue_number}/lockDELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issueGET /repos/{owner}/{repo}/issues/{issue_number}/sub_issuesPOST /repos/{owner}/{repo}/issues/{issue_number}/sub_issuesPATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priorityGET /repos/{owner}/{repo}/issues/{issue_number}/timelineGET /repos/{owner}/{repo}/labelsPOST /repos/{owner}/{repo}/labelsGET /repos/{owner}/{repo}/labels/{name}PATCH /repos/{owner}/{repo}/labels/{name}DELETE /repos/{owner}/{repo}/labels/{name}GET /repos/{owner}/{repo}/milestonesPOST /repos/{owner}/{repo}/milestonesGET /repos/{owner}/{repo}/milestones/{milestone_number}PATCH /repos/{owner}/{repo}/milestones/{milestone_number}DELETE /repos/{owner}/{repo}/milestones/{milestone_number}GET /repos/{owner}/{repo}/milestones/{milestone_number}/labelsGET /user/issueslicensesGET /licensesGET /licenses/{license}GET /repos/{owner}/{repo}/licensemarkdownPOST /markdownPOST /markdown/rawmetaGET /GET /metaGET /octocatGET /versionsGET /zenmetricsGET /repos/{owner}/{repo}/community/profileGET /repos/{owner}/{repo}/stats/code_frequencyGET /repos/{owner}/{repo}/stats/commit_activityGET /repos/{owner}/{repo}/stats/contributorsGET /repos/{owner}/{repo}/stats/participationGET /repos/{owner}/{repo}/stats/punch_cardGET /repos/{owner}/{repo}/traffic/clonesGET /repos/{owner}/{repo}/traffic/popular/pathsGET /repos/{owner}/{repo}/traffic/popular/referrersGET /repos/{owner}/{repo}/traffic/viewsmigrationsGET /repos/{owner}/{repo}/importPUT /repos/{owner}/{repo}/importPATCH /repos/{owner}/{repo}/importDELETE /repos/{owner}/{repo}/importGET /repos/{owner}/{repo}/import/authorsPATCH /repos/{owner}/{repo}/import/authors/{author_id}GET /repos/{owner}/{repo}/import/large_filesPATCH /repos/{owner}/{repo}/import/lfsorgsGET /organizationsGET /orgs/{org}PATCH /orgs/{org}DELETE /orgs/{org}GET /orgs/{org}/attestations/{subject_digest}GET /orgs/{org}/blocksGET /orgs/{org}/blocks/{username}PUT /orgs/{org}/blocks/{username}DELETE /orgs/{org}/blocks/{username}GET /orgs/{org}/failed_invitationsGET /orgs/{org}/hooksPOST /orgs/{org}/hooksGET /orgs/{org}/hooks/{hook_id}PATCH /orgs/{org}/hooks/{hook_id}DELETE /orgs/{org}/hooks/{hook_id}GET /orgs/{org}/hooks/{hook_id}/configPATCH /orgs/{org}/hooks/{hook_id}/configGET /orgs/{org}/hooks/{hook_id}/deliveriesGET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attemptsPOST /orgs/{org}/hooks/{hook_id}/pingsGET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/subject-statsGET /orgs/{org}/insights/api/summary-statsGET /orgs/{org}/insights/api/summary-stats/users/{user_id}GET /orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/time-statsGET /orgs/{org}/insights/api/time-stats/users/{user_id}GET /orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/user-stats/{user_id}GET /orgs/{org}/installationsGET /orgs/{org}/invitationsPOST /orgs/{org}/invitationsDELETE /orgs/{org}/invitations/{invitation_id}GET /orgs/{org}/invitations/{invitation_id}/teamsGET /orgs/{org}/issue-typesPOST /orgs/{org}/issue-typesPUT /orgs/{org}/issue-types/{issue_type_id}DELETE /orgs/{org}/issue-types/{issue_type_id}GET /orgs/{org}/membersGET /orgs/{org}/members/{username}DELETE /orgs/{org}/members/{username}GET /orgs/{org}/memberships/{username}PUT /orgs/{org}/memberships/{username}DELETE /orgs/{org}/memberships/{username}GET /orgs/{org}/organization-rolesDELETE /orgs/{org}/organization-roles/teams/{team_slug}PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}DELETE /orgs/{org}/organization-roles/users/{username}PUT /orgs/{org}/organization-roles/users/{username}/{role_id}DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}GET /orgs/{org}/organization-roles/{role_id}GET /orgs/{org}/organization-roles/{role_id}/teamsGET /orgs/{org}/organization-roles/{role_id}/usersGET /orgs/{org}/outside_collaboratorsPUT /orgs/{org}/outside_collaborators/{username}DELETE /orgs/{org}/outside_collaborators/{username}GET /orgs/{org}/personal-access-token-requestsPOST /orgs/{org}/personal-access-token-requestsPOST /orgs/{org}/personal-access-token-requests/{pat_request_id}GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositoriesGET /orgs/{org}/personal-access-tokensPOST /orgs/{org}/personal-access-tokensPOST /orgs/{org}/personal-access-tokens/{pat_id}GET /orgs/{org}/personal-access-tokens/{pat_id}/repositoriesGET /orgs/{org}/properties/schemaPATCH /orgs/{org}/properties/schemaGET /orgs/{org}/properties/schema/{custom_property_name}PUT /orgs/{org}/properties/schema/{custom_property_name}DELETE /orgs/{org}/properties/schema/{custom_property_name}GET /orgs/{org}/properties/valuesPATCH /orgs/{org}/properties/valuesGET /orgs/{org}/public_membersGET /orgs/{org}/public_members/{username}PUT /orgs/{org}/public_members/{username}DELETE /orgs/{org}/public_members/{username}GET /orgs/{org}/rulesetsPOST /orgs/{org}/rulesetsGET /orgs/{org}/rulesets/rule-suitesGET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}GET /orgs/{org}/rulesets/{ruleset_id}PUT /orgs/{org}/rulesets/{ruleset_id}DELETE /orgs/{org}/rulesets/{ruleset_id}GET /orgs/{org}/rulesets/{ruleset_id}/historyGET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}GET /orgs/{org}/security-managersPUT /orgs/{org}/security-managers/teams/{team_slug}DELETE /orgs/{org}/security-managers/teams/{team_slug}GET /orgs/{org}/settings/network-configurationsPOST /orgs/{org}/settings/network-configurationsGET /orgs/{org}/settings/network-configurations/{network_configuration_id}PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}GET /orgs/{org}/settings/network-settings/{network_settings_id}POST /orgs/{org}/{security_product}/{enablement}GET /user/memberships/orgsGET /user/memberships/orgs/{org}PATCH /user/memberships/orgs/{org}GET /user/orgsGET /users/{username}/orgspackagesGET /orgs/{org}/docker/conflictsGET /orgs/{org}/packagesGET /orgs/{org}/packages/{package_type}/{package_name}DELETE /orgs/{org}/packages/{package_type}/{package_name}GET /orgs/{org}/packages/{package_type}/{package_name}/versionsGET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}GET /user/docker/conflictsGET /user/packagesGET /user/packages/{package_type}/{package_name}DELETE /user/packages/{package_type}/{package_name}GET /user/packages/{package_type}/{package_name}/versionsGET /user/packages/{package_type}/{package_name}/versions/{package_version_id}GET /users/{username}/docker/conflictsGET /users/{username}/packagesGET /users/{username}/packages/{package_type}/{package_name}DELETE /users/{username}/packages/{package_type}/{package_name}GET /users/{username}/packages/{package_type}/{package_name}/versionsGET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}pagesGET /repos/{owner}/{repo}/pagesPOST /repos/{owner}/{repo}/pagesPUT /repos/{owner}/{repo}/pagesDELETE /repos/{owner}/{repo}/pagesGET /repos/{owner}/{repo}/pages/buildsPOST /repos/{owner}/{repo}/pages/buildsGET /repos/{owner}/{repo}/pages/builds/latestGET /repos/{owner}/{repo}/pages/builds/{build_id}POST /repos/{owner}/{repo}/pages/deploymentsGET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancelGET /repos/{owner}/{repo}/pages/healthprivate-registriesGET /orgs/{org}/private-registriesPOST /orgs/{org}/private-registriesGET /orgs/{org}/private-registries/public-keyGET /orgs/{org}/private-registries/{secret_name}PATCH /orgs/{org}/private-registries/{secret_name}DELETE /orgs/{org}/private-registries/{secret_name}projectsGET /orgs/{org}/projectsPOST /orgs/{org}/projectsGET /projects/columns/cards/{card_id}PATCH /projects/columns/cards/{card_id}DELETE /projects/columns/cards/{card_id}POST /projects/columns/cards/{card_id}/movesGET /projects/columns/{column_id}PATCH /projects/columns/{column_id}DELETE /projects/columns/{column_id}GET /projects/columns/{column_id}/cardsPOST /projects/columns/{column_id}/cardsPOST /projects/columns/{column_id}/movesGET /projects/{project_id}PATCH /projects/{project_id}DELETE /projects/{project_id}GET /projects/{project_id}/collaboratorsPUT /projects/{project_id}/collaborators/{username}DELETE /projects/{project_id}/collaborators/{username}GET /projects/{project_id}/collaborators/{username}/permissionGET /projects/{project_id}/columnsPOST /projects/{project_id}/columnsGET /repos/{owner}/{repo}/projectsPOST /repos/{owner}/{repo}/projectspullsGET /repos/{owner}/{repo}/pullsPOST /repos/{owner}/{repo}/pullsGET /repos/{owner}/{repo}/pulls/commentsGET /repos/{owner}/{repo}/pulls/comments/{comment_id}PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}GET /repos/{owner}/{repo}/pulls/{pull_number}PATCH /repos/{owner}/{repo}/pulls/{pull_number}GET /repos/{owner}/{repo}/pulls/{pull_number}/commentsPOST /repos/{owner}/{repo}/pulls/{pull_number}/commentsPOST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/repliesGET /repos/{owner}/{repo}/pulls/{pull_number}/commitsGET /repos/{owner}/{repo}/pulls/{pull_number}/filesGET /repos/{owner}/{repo}/pulls/{pull_number}/mergePUT /repos/{owner}/{repo}/pulls/{pull_number}/mergeGET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersPOST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersDELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersGET /repos/{owner}/{repo}/pulls/{pull_number}/reviewsPOST /repos/{owner}/{repo}/pulls/{pull_number}/reviewsGET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/commentsPUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissalsPOST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/eventsPUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branchrate-limitGET /rate_limitreactionsDELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}GET /repos/{owner}/{repo}/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/issues/{issue_number}/reactionsPOST /repos/{owner}/{repo}/issues/{issue_number}/reactionsDELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/releases/{release_id}/reactionsPOST /repos/{owner}/{repo}/releases/{release_id}/reactionsDELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}releasesGET /repos/{owner}/{repo}/releasesPOST /repos/{owner}/{repo}/releasesGET /repos/{owner}/{repo}/releases/assets/{asset_id}PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}POST /repos/{owner}/{repo}/releases/generate-notesGET /repos/{owner}/{repo}/releases/latestGET /repos/{owner}/{repo}/releases/tags/{tag}GET /repos/{owner}/{repo}/releases/{release_id}PATCH /repos/{owner}/{repo}/releases/{release_id}DELETE /repos/{owner}/{repo}/releases/{release_id}GET /repos/{owner}/{repo}/releases/{release_id}/assetsreposGET /orgs/{org}/reposPOST /orgs/{org}/reposGET /repos/{owner}/{repo}PATCH /repos/{owner}/{repo}DELETE /repos/{owner}/{repo}GET /repos/{owner}/{repo}/activityPOST /repos/{owner}/{repo}/attestationsGET /repos/{owner}/{repo}/attestations/{subject_digest}GET /repos/{owner}/{repo}/autolinksPOST /repos/{owner}/{repo}/autolinksGET /repos/{owner}/{repo}/autolinks/{autolink_id}DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}GET /repos/{owner}/{repo}/automated-security-fixesPUT /repos/{owner}/{repo}/automated-security-fixesDELETE /repos/{owner}/{repo}/automated-security-fixesGET /repos/{owner}/{repo}/codeowners/errorsGET /repos/{owner}/{repo}/contents/{path}PUT /repos/{owner}/{repo}/contents/{path}DELETE /repos/{owner}/{repo}/contents/{path}GET /repos/{owner}/{repo}/contributorsPOST /repos/{owner}/{repo}/dispatchesGET /repos/{owner}/{repo}/forksPOST /repos/{owner}/{repo}/forksGET /repos/{owner}/{repo}/hooksPOST /repos/{owner}/{repo}/hooksGET /repos/{owner}/{repo}/hooks/{hook_id}PATCH /repos/{owner}/{repo}/hooks/{hook_id}DELETE /repos/{owner}/{repo}/hooks/{hook_id}GET /repos/{owner}/{repo}/hooks/{hook_id}/configPATCH /repos/{owner}/{repo}/hooks/{hook_id}/configGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveriesGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attemptsPOST /repos/{owner}/{repo}/hooks/{hook_id}/pingsPOST /repos/{owner}/{repo}/hooks/{hook_id}/testsGET /repos/{owner}/{repo}/languagesGET /repos/{owner}/{repo}/private-vulnerability-reportingPUT /repos/{owner}/{repo}/private-vulnerability-reportingDELETE /repos/{owner}/{repo}/private-vulnerability-reportingGET /repos/{owner}/{repo}/properties/valuesPATCH /repos/{owner}/{repo}/properties/valuesGET /repos/{owner}/{repo}/rules/branches/{branch}GET /repos/{owner}/{repo}/rulesetsPOST /repos/{owner}/{repo}/rulesetsGET /repos/{owner}/{repo}/rulesets/rule-suitesGET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}GET /repos/{owner}/{repo}/rulesets/{ruleset_id}PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/historyGET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}GET /repos/{owner}/{repo}/tagsGET /repos/{owner}/{repo}/tags/protectionPOST /repos/{owner}/{repo}/tags/protectionDELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}GET /repos/{owner}/{repo}/tarball/{ref}GET /repos/{owner}/{repo}/teamsGET /repos/{owner}/{repo}/topicsPUT /repos/{owner}/{repo}/topicsPOST /repos/{owner}/{repo}/transferGET /repos/{owner}/{repo}/vulnerability-alertsPUT /repos/{owner}/{repo}/vulnerability-alertsDELETE /repos/{owner}/{repo}/vulnerability-alertsGET /repos/{owner}/{repo}/zipball/{ref}POST /repos/{template_owner}/{template_repo}/generateGET /repositoriesGET /user/reposPOST /user/reposGET /users/{username}/repossearchGET /search/codeGET /search/commitsGET /search/issuesGET /search/labelsGET /search/repositoriesGET /search/topicsGET /search/userssecret-scanningGET /orgs/{org}/secret-scanning/alertsGET /repos/{owner}/{repo}/secret-scanning/alertsGET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locationsPOST /repos/{owner}/{repo}/secret-scanning/push-protection-bypassesGET /repos/{owner}/{repo}/secret-scanning/scan-historysecurity-advisoriesGET /advisoriesGET /advisories/{ghsa_id}GET /orgs/{org}/security-advisoriesGET /repos/{owner}/{repo}/security-advisoriesPOST /repos/{owner}/{repo}/security-advisoriesPOST /repos/{owner}/{repo}/security-advisories/reportsGET /repos/{owner}/{repo}/security-advisories/{ghsa_id}PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cvePOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forksteamsGET /orgs/{org}/teamsPOST /orgs/{org}/teamsGET /orgs/{org}/teams/{team_slug}/projectsGET /orgs/{org}/teams/{team_slug}/projects/{project_id}PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}GET /teams/{team_id}/members/{username}PUT /teams/{team_id}/members/{username}DELETE /teams/{team_id}/members/{username}GET /user/teamsusersGET /userPATCH /userGET /user/blocksGET /user/blocks/{username}PUT /user/blocks/{username}DELETE /user/blocks/{username}PATCH /user/email/visibilityGET /user/emailsPOST /user/emailsDELETE /user/emailsGET /user/followersGET /user/followingGET /user/following/{username}PUT /user/following/{username}DELETE /user/following/{username}GET /user/gpg_keysPOST /user/gpg_keysGET /user/gpg_keys/{gpg_key_id}DELETE /user/gpg_keys/{gpg_key_id}GET /user/keysPOST /user/keysGET /user/keys/{key_id}DELETE /user/keys/{key_id}GET /user/public_emailsGET /user/social_accountsPOST /user/social_accountsDELETE /user/social_accountsGET /user/ssh_signing_keysPOST /user/ssh_signing_keysGET /user/ssh_signing_keys/{ssh_signing_key_id}DELETE /user/ssh_signing_keys/{ssh_signing_key_id}GET /usersGET /users/{username}/attestations/{subject_digest}GET /users/{username}/followersGET /users/{username}/followingGET /users/{username}/following/{target_user}GET /users/{username}/gpg_keysGET /users/{username}/keysGET /users/{username}/social_accountsGET /users/{username}/ssh_signing_keys\n\n\n\nREST API/Authentication/Endpoints for fine-grained PATsEndpoints available for fine-grained personal access tokensYour fine-grained personal access token can make requests to the following REST endpoints.In this articleactionsactivityappsbillingbranchescampaignschecksclassroomcode-scanningcode-securitycodes-of-conductcodespacescollaboratorscommitscopilotdependabotdependency-graphdeploy-keysdeploymentsemojisgistsgitgitignoreinteractionsissueslicensesmarkdownmetametricsmigrationsorgspackagespagesprivate-registriesprojectspullsrate-limitreactionsreleasesrepossearchsecret-scanningsecurity-advisoriesteamsusersactionsGET /orgs/{org}/actions/cache/usageGET /orgs/{org}/actions/cache/usage-by-repositoryGET /orgs/{org}/actions/hosted-runnersPOST /orgs/{org}/actions/hosted-runnersGET /orgs/{org}/actions/hosted-runners/images/github-ownedGET /orgs/{org}/actions/hosted-runners/images/partnerGET /orgs/{org}/actions/hosted-runners/limitsGET /orgs/{org}/actions/hosted-runners/machine-sizesGET /orgs/{org}/actions/hosted-runners/platformsGET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}GET /orgs/{org}/actions/oidc/customization/subPUT /orgs/{org}/actions/oidc/customization/subGET /orgs/{org}/actions/permissionsPUT /orgs/{org}/actions/permissionsGET /orgs/{org}/actions/permissions/repositoriesPUT /orgs/{org}/actions/permissions/repositoriesPUT /orgs/{org}/actions/permissions/repositories/{repository_id}DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}GET /orgs/{org}/actions/permissions/selected-actionsPUT /orgs/{org}/actions/permissions/selected-actionsGET /orgs/{org}/actions/permissions/workflowPUT /orgs/{org}/actions/permissions/workflowGET /orgs/{org}/actions/runner-groupsPOST /orgs/{org}/actions/runner-groupsGET /orgs/{org}/actions/runner-groups/{runner_group_id}PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runnersGET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriesPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriesPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runnersPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runnersPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}GET /orgs/{org}/actions/runnersGET /orgs/{org}/actions/runners/downloadsPOST /orgs/{org}/actions/runners/generate-jitconfigPOST /orgs/{org}/actions/runners/registration-tokenPOST /orgs/{org}/actions/runners/remove-tokenGET /orgs/{org}/actions/runners/{runner_id}DELETE /orgs/{org}/actions/runners/{runner_id}GET /orgs/{org}/actions/runners/{runner_id}/labelsPOST /orgs/{org}/actions/runners/{runner_id}/labelsPUT /orgs/{org}/actions/runners/{runner_id}/labelsDELETE /orgs/{org}/actions/runners/{runner_id}/labelsDELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}GET /orgs/{org}/actions/secretsGET /orgs/{org}/actions/secrets/public-keyGET /orgs/{org}/actions/secrets/{secret_name}PUT /orgs/{org}/actions/secrets/{secret_name}DELETE /orgs/{org}/actions/secrets/{secret_name}GET /orgs/{org}/actions/secrets/{secret_name}/repositoriesPUT /orgs/{org}/actions/secrets/{secret_name}/repositoriesPUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}GET /orgs/{org}/actions/variablesPOST /orgs/{org}/actions/variablesGET /orgs/{org}/actions/variables/{name}PATCH /orgs/{org}/actions/variables/{name}DELETE /orgs/{org}/actions/variables/{name}GET /orgs/{org}/actions/variables/{name}/repositoriesPUT /orgs/{org}/actions/variables/{name}/repositoriesPUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}GET /repos/{owner}/{repo}/actions/artifactsGET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}GET /repos/{owner}/{repo}/actions/cache/usageGET /repos/{owner}/{repo}/actions/cachesDELETE /repos/{owner}/{repo}/actions/cachesDELETE /repos/{owner}/{repo}/actions/caches/{cache_id}GET /repos/{owner}/{repo}/actions/jobs/{job_id}GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logsPOST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerunGET /repos/{owner}/{repo}/actions/oidc/customization/subPUT /repos/{owner}/{repo}/actions/oidc/customization/subGET /repos/{owner}/{repo}/actions/organization-secretsGET /repos/{owner}/{repo}/actions/organization-variablesGET /repos/{owner}/{repo}/actions/permissionsPUT /repos/{owner}/{repo}/actions/permissionsGET /repos/{owner}/{repo}/actions/permissions/accessPUT /repos/{owner}/{repo}/actions/permissions/accessGET /repos/{owner}/{repo}/actions/permissions/selected-actionsPUT /repos/{owner}/{repo}/actions/permissions/selected-actionsGET /repos/{owner}/{repo}/actions/permissions/workflowPUT /repos/{owner}/{repo}/actions/permissions/workflowGET /repos/{owner}/{repo}/actions/runnersGET /repos/{owner}/{repo}/actions/runners/downloadsPOST /repos/{owner}/{repo}/actions/runners/generate-jitconfigPOST /repos/{owner}/{repo}/actions/runners/registration-tokenPOST /repos/{owner}/{repo}/actions/runners/remove-tokenGET /repos/{owner}/{repo}/actions/runners/{runner_id}DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsPOST /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsPUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}GET /repos/{owner}/{repo}/actions/runsGET /repos/{owner}/{repo}/actions/runs/{run_id}DELETE /repos/{owner}/{repo}/actions/runs/{run_id}GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvalsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/approveGET /repos/{owner}/{repo}/actions/runs/{run_id}/artifactsGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/cancelPOST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancelGET /repos/{owner}/{repo}/actions/runs/{run_id}/jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/logsDELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logsGET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerunPOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobsGET /repos/{owner}/{repo}/actions/runs/{run_id}/timingGET /repos/{owner}/{repo}/actions/secretsGET /repos/{owner}/{repo}/actions/secrets/public-keyGET /repos/{owner}/{repo}/actions/secrets/{secret_name}PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}GET /repos/{owner}/{repo}/actions/variablesPOST /repos/{owner}/{repo}/actions/variablesGET /repos/{owner}/{repo}/actions/variables/{name}PATCH /repos/{owner}/{repo}/actions/variables/{name}DELETE /repos/{owner}/{repo}/actions/variables/{name}GET /repos/{owner}/{repo}/actions/workflowsGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disablePOST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatchesPUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enableGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runsGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timingGET /repos/{owner}/{repo}/environments/{environment_name}/secretsGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-keyGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}GET /repos/{owner}/{repo}/environments/{environment_name}/variablesPOST /repos/{owner}/{repo}/environments/{environment_name}/variablesGET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}activityGET /eventsGET /feedsGET /networks/{owner}/{repo}/eventsGET /orgs/{org}/eventsGET /repos/{owner}/{repo}/eventsGET /repos/{owner}/{repo}/stargazersGET /repos/{owner}/{repo}/subscribersGET /user/starredGET /user/starred/{owner}/{repo}PUT /user/starred/{owner}/{repo}DELETE /user/starred/{owner}/{repo}GET /user/subscriptionsGET /users/{username}/eventsGET /users/{username}/events/orgs/{org}GET /users/{username}/events/publicGET /users/{username}/received_eventsGET /users/{username}/received_events/publicGET /users/{username}/starredGET /users/{username}/subscriptionsappsGET /apps/{app_slug}GET /user/installationsGET /user/installations/{installation_id}/repositoriesGET /user/marketplace_purchasesGET /user/marketplace_purchases/stubbedbillingGET /organizations/{org}/settings/billing/usageGET /orgs/{org}/settings/billing/actionsGET /orgs/{org}/settings/billing/packagesGET /orgs/{org}/settings/billing/shared-storageGET /users/{username}/settings/billing/actionsGET /users/{username}/settings/billing/packagesGET /users/{username}/settings/billing/shared-storagebranchesGET /repos/{owner}/{repo}/branchesGET /repos/{owner}/{repo}/branches/{branch}GET /repos/{owner}/{repo}/branches/{branch}/protectionPUT /repos/{owner}/{repo}/branches/{branch}/protectionDELETE /repos/{owner}/{repo}/branches/{branch}/protectionGET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsPOST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsGET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsPATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsGET /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesPOST /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksPATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsPOST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsPUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictionsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictionsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersPOST /repos/{owner}/{repo}/branches/{branch}/renamePOST /repos/{owner}/{repo}/merge-upstreamPOST /repos/{owner}/{repo}/mergescampaignsGET /orgs/{org}/campaignsPOST /orgs/{org}/campaignsGET /orgs/{org}/campaigns/{campaign_number}PATCH /orgs/{org}/campaigns/{campaign_number}DELETE /orgs/{org}/campaigns/{campaign_number}checksPOST /repos/{owner}/{repo}/check-runsGET /repos/{owner}/{repo}/check-runs/{check_run_id}PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotationsPOST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequestPOST /repos/{owner}/{repo}/check-suitesPATCH /repos/{owner}/{repo}/check-suites/preferencesGET /repos/{owner}/{repo}/check-suites/{check_suite_id}GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runsPOST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequestGET /repos/{owner}/{repo}/commits/{ref}/check-runsGET /repos/{owner}/{repo}/commits/{ref}/check-suitesclassroomGET /assignments/{assignment_id}GET /assignments/{assignment_id}/accepted_assignmentsGET /assignments/{assignment_id}/gradesGET /classroomsGET /classrooms/{classroom_id}GET /classrooms/{classroom_id}/assignmentscode-scanningGET /orgs/{org}/code-scanning/alertsGET /repos/{owner}/{repo}/code-scanning/alertsGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixPOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixPOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commitsGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instancesGET /repos/{owner}/{repo}/code-scanning/analysesGET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}GET /repos/{owner}/{repo}/code-scanning/codeql/databasesGET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analysesGET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}GET /repos/{owner}/{repo}/code-scanning/default-setupPATCH /repos/{owner}/{repo}/code-scanning/default-setupPOST /repos/{owner}/{repo}/code-scanning/sarifsGET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}code-securityGET /orgs/{org}/code-security/configurationsPOST /orgs/{org}/code-security/configurationsGET /orgs/{org}/code-security/configurations/defaultsDELETE /orgs/{org}/code-security/configurations/detachGET /orgs/{org}/code-security/configurations/{configuration_id}PATCH /orgs/{org}/code-security/configurations/{configuration_id}DELETE /orgs/{org}/code-security/configurations/{configuration_id}POST /orgs/{org}/code-security/configurations/{configuration_id}/attachPUT /orgs/{org}/code-security/configurations/{configuration_id}/defaultsGET /orgs/{org}/code-security/configurations/{configuration_id}/repositoriesGET /repos/{owner}/{repo}/code-security-configurationcodes-of-conductGET /codes_of_conductGET /codes_of_conduct/{key}codespacesGET /orgs/{org}/codespacesPUT /orgs/{org}/codespaces/accessPOST /orgs/{org}/codespaces/access/selected_usersDELETE /orgs/{org}/codespaces/access/selected_usersGET /orgs/{org}/codespaces/secretsGET /orgs/{org}/codespaces/secrets/public-keyGET /orgs/{org}/codespaces/secrets/{secret_name}PUT /orgs/{org}/codespaces/secrets/{secret_name}DELETE /orgs/{org}/codespaces/secrets/{secret_name}GET /orgs/{org}/codespaces/secrets/{secret_name}/repositoriesPUT /orgs/{org}/codespaces/secrets/{secret_name}/repositoriesPUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}GET /orgs/{org}/members/{username}/codespacesDELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stopGET /repos/{owner}/{repo}/codespacesPOST /repos/{owner}/{repo}/codespacesGET /repos/{owner}/{repo}/codespaces/devcontainersGET /repos/{owner}/{repo}/codespaces/machinesGET /repos/{owner}/{repo}/codespaces/newGET /repos/{owner}/{repo}/codespaces/permissions_checkGET /repos/{owner}/{repo}/codespaces/secretsGET /repos/{owner}/{repo}/codespaces/secrets/public-keyGET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}POST /repos/{owner}/{repo}/pulls/{pull_number}/codespacesGET /user/codespacesPOST /user/codespacesGET /user/codespaces/secretsGET /user/codespaces/secrets/public-keyGET /user/codespaces/secrets/{secret_name}PUT /user/codespaces/secrets/{secret_name}DELETE /user/codespaces/secrets/{secret_name}GET /user/codespaces/secrets/{secret_name}/repositoriesPUT /user/codespaces/secrets/{secret_name}/repositoriesPUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}GET /user/codespaces/{codespace_name}PATCH /user/codespaces/{codespace_name}DELETE /user/codespaces/{codespace_name}POST /user/codespaces/{codespace_name}/exportsGET /user/codespaces/{codespace_name}/exports/{export_id}GET /user/codespaces/{codespace_name}/machinesPOST /user/codespaces/{codespace_name}/publishPOST /user/codespaces/{codespace_name}/startPOST /user/codespaces/{codespace_name}/stopcollaboratorsGET /repos/{owner}/{repo}/collaboratorsGET /repos/{owner}/{repo}/collaborators/{username}PUT /repos/{owner}/{repo}/collaborators/{username}DELETE /repos/{owner}/{repo}/collaborators/{username}GET /repos/{owner}/{repo}/collaborators/{username}/permissionGET /repos/{owner}/{repo}/invitationsPATCH /repos/{owner}/{repo}/invitations/{invitation_id}DELETE /repos/{owner}/{repo}/invitations/{invitation_id}GET /user/repository_invitationsPATCH /user/repository_invitations/{invitation_id}DELETE /user/repository_invitations/{invitation_id}commitsGET /repos/{owner}/{repo}/commentsGET /repos/{owner}/{repo}/comments/{comment_id}PATCH /repos/{owner}/{repo}/comments/{comment_id}DELETE /repos/{owner}/{repo}/comments/{comment_id}GET /repos/{owner}/{repo}/commitsGET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-headGET /repos/{owner}/{repo}/commits/{commit_sha}/commentsPOST /repos/{owner}/{repo}/commits/{commit_sha}/commentsGET /repos/{owner}/{repo}/commits/{commit_sha}/pullsGET /repos/{owner}/{repo}/commits/{ref}GET /repos/{owner}/{repo}/commits/{ref}/statusGET /repos/{owner}/{repo}/commits/{ref}/statusesGET /repos/{owner}/{repo}/compare/{basehead}POST /repos/{owner}/{repo}/statuses/{sha}copilotGET /orgs/{org}/copilot/billingGET /orgs/{org}/copilot/billing/seatsPOST /orgs/{org}/copilot/billing/selected_teamsDELETE /orgs/{org}/copilot/billing/selected_teamsPOST /orgs/{org}/copilot/billing/selected_usersDELETE /orgs/{org}/copilot/billing/selected_usersGET /orgs/{org}/copilot/metricsGET /orgs/{org}/members/{username}/copilotGET /orgs/{org}/team/{team_slug}/copilot/metricsdependabotGET /orgs/{org}/dependabot/alertsGET /orgs/{org}/dependabot/secretsGET /orgs/{org}/dependabot/secrets/public-keyGET /orgs/{org}/dependabot/secrets/{secret_name}PUT /orgs/{org}/dependabot/secrets/{secret_name}DELETE /orgs/{org}/dependabot/secrets/{secret_name}GET /orgs/{org}/dependabot/secrets/{secret_name}/repositoriesPUT /orgs/{org}/dependabot/secrets/{secret_name}/repositoriesPUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}GET /repos/{owner}/{repo}/dependabot/alertsGET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}GET /repos/{owner}/{repo}/dependabot/secretsGET /repos/{owner}/{repo}/dependabot/secrets/public-keyGET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}dependency-graphGET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}GET /repos/{owner}/{repo}/dependency-graph/sbomPOST /repos/{owner}/{repo}/dependency-graph/snapshotsdeploy-keysGET /repos/{owner}/{repo}/keysPOST /repos/{owner}/{repo}/keysGET /repos/{owner}/{repo}/keys/{key_id}DELETE /repos/{owner}/{repo}/keys/{key_id}deploymentsGET /repos/{owner}/{repo}/deploymentsPOST /repos/{owner}/{repo}/deploymentsGET /repos/{owner}/{repo}/deployments/{deployment_id}DELETE /repos/{owner}/{repo}/deployments/{deployment_id}GET /repos/{owner}/{repo}/deployments/{deployment_id}/statusesPOST /repos/{owner}/{repo}/deployments/{deployment_id}/statusesGET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}GET /repos/{owner}/{repo}/environmentsGET /repos/{owner}/{repo}/environments/{environment_name}PUT /repos/{owner}/{repo}/environments/{environment_name}DELETE /repos/{owner}/{repo}/environments/{environment_name}GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policiesPOST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policiesGET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rulesPOST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rulesGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/appsGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}emojisGET /emojisgistsGET /gistsPOST /gistsGET /gists/publicGET /gists/starredGET /gists/{gist_id}PATCH /gists/{gist_id}DELETE /gists/{gist_id}GET /gists/{gist_id}/commentsPOST /gists/{gist_id}/commentsGET /gists/{gist_id}/comments/{comment_id}PATCH /gists/{gist_id}/comments/{comment_id}DELETE /gists/{gist_id}/comments/{comment_id}GET /gists/{gist_id}/commitsGET /gists/{gist_id}/forksPOST /gists/{gist_id}/forksGET /gists/{gist_id}/starPUT /gists/{gist_id}/starDELETE /gists/{gist_id}/starGET /gists/{gist_id}/{sha}GET /users/{username}/gistsgitPOST /repos/{owner}/{repo}/git/blobsGET /repos/{owner}/{repo}/git/blobs/{file_sha}POST /repos/{owner}/{repo}/git/commitsGET /repos/{owner}/{repo}/git/commits/{commit_sha}GET /repos/{owner}/{repo}/git/matching-refs/{ref}GET /repos/{owner}/{repo}/git/ref/{ref}POST /repos/{owner}/{repo}/git/refsPATCH /repos/{owner}/{repo}/git/refs/{ref}DELETE /repos/{owner}/{repo}/git/refs/{ref}POST /repos/{owner}/{repo}/git/tagsGET /repos/{owner}/{repo}/git/tags/{tag_sha}POST /repos/{owner}/{repo}/git/treesGET /repos/{owner}/{repo}/git/trees/{tree_sha}gitignoreGET /gitignore/templatesGET /gitignore/templates/{name}interactionsGET /orgs/{org}/interaction-limitsPUT /orgs/{org}/interaction-limitsDELETE /orgs/{org}/interaction-limitsGET /repos/{owner}/{repo}/interaction-limitsPUT /repos/{owner}/{repo}/interaction-limitsDELETE /repos/{owner}/{repo}/interaction-limitsGET /user/interaction-limitsPUT /user/interaction-limitsDELETE /user/interaction-limitsissuesGET /issuesGET /orgs/{org}/issuesGET /repos/{owner}/{repo}/assigneesGET /repos/{owner}/{repo}/assignees/{assignee}GET /repos/{owner}/{repo}/issuesPOST /repos/{owner}/{repo}/issuesGET /repos/{owner}/{repo}/issues/commentsGET /repos/{owner}/{repo}/issues/comments/{comment_id}PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}GET /repos/{owner}/{repo}/issues/eventsGET /repos/{owner}/{repo}/issues/events/{event_id}GET /repos/{owner}/{repo}/issues/{issue_number}PATCH /repos/{owner}/{repo}/issues/{issue_number}POST /repos/{owner}/{repo}/issues/{issue_number}/assigneesDELETE /repos/{owner}/{repo}/issues/{issue_number}/assigneesGET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}GET /repos/{owner}/{repo}/issues/{issue_number}/commentsPOST /repos/{owner}/{repo}/issues/{issue_number}/commentsGET /repos/{owner}/{repo}/issues/{issue_number}/eventsGET /repos/{owner}/{repo}/issues/{issue_number}/labelsPOST /repos/{owner}/{repo}/issues/{issue_number}/labelsPUT /repos/{owner}/{repo}/issues/{issue_number}/labelsDELETE /repos/{owner}/{repo}/issues/{issue_number}/labelsDELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}PUT /repos/{owner}/{repo}/issues/{issue_number}/lockDELETE /repos/{owner}/{repo}/issues/{issue_number}/lockDELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issueGET /repos/{owner}/{repo}/issues/{issue_number}/sub_issuesPOST /repos/{owner}/{repo}/issues/{issue_number}/sub_issuesPATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priorityGET /repos/{owner}/{repo}/issues/{issue_number}/timelineGET /repos/{owner}/{repo}/labelsPOST /repos/{owner}/{repo}/labelsGET /repos/{owner}/{repo}/labels/{name}PATCH /repos/{owner}/{repo}/labels/{name}DELETE /repos/{owner}/{repo}/labels/{name}GET /repos/{owner}/{repo}/milestonesPOST /repos/{owner}/{repo}/milestonesGET /repos/{owner}/{repo}/milestones/{milestone_number}PATCH /repos/{owner}/{repo}/milestones/{milestone_number}DELETE /repos/{owner}/{repo}/milestones/{milestone_number}GET /repos/{owner}/{repo}/milestones/{milestone_number}/labelsGET /user/issueslicensesGET /licensesGET /licenses/{license}GET /repos/{owner}/{repo}/licensemarkdownPOST /markdownPOST /markdown/rawmetaGET /GET /metaGET /octocatGET /versionsGET /zenmetricsGET /repos/{owner}/{repo}/community/profileGET /repos/{owner}/{repo}/stats/code_frequencyGET /repos/{owner}/{repo}/stats/commit_activityGET /repos/{owner}/{repo}/stats/contributorsGET /repos/{owner}/{repo}/stats/participationGET /repos/{owner}/{repo}/stats/punch_cardGET /repos/{owner}/{repo}/traffic/clonesGET /repos/{owner}/{repo}/traffic/popular/pathsGET /repos/{owner}/{repo}/traffic/popular/referrersGET /repos/{owner}/{repo}/traffic/viewsmigrationsGET /repos/{owner}/{repo}/importPUT /repos/{owner}/{repo}/importPATCH /repos/{owner}/{repo}/importDELETE /repos/{owner}/{repo}/importGET /repos/{owner}/{repo}/import/authorsPATCH /repos/{owner}/{repo}/import/authors/{author_id}GET /repos/{owner}/{repo}/import/large_filesPATCH /repos/{owner}/{repo}/import/lfsorgsGET /organizationsGET /orgs/{org}PATCH /orgs/{org}DELETE /orgs/{org}GET /orgs/{org}/attestations/{subject_digest}GET /orgs/{org}/blocksGET /orgs/{org}/blocks/{username}PUT /orgs/{org}/blocks/{username}DELETE /orgs/{org}/blocks/{username}GET /orgs/{org}/failed_invitationsGET /orgs/{org}/hooksPOST /orgs/{org}/hooksGET /orgs/{org}/hooks/{hook_id}PATCH /orgs/{org}/hooks/{hook_id}DELETE /orgs/{org}/hooks/{hook_id}GET /orgs/{org}/hooks/{hook_id}/configPATCH /orgs/{org}/hooks/{hook_id}/configGET /orgs/{org}/hooks/{hook_id}/deliveriesGET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attemptsPOST /orgs/{org}/hooks/{hook_id}/pingsGET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/subject-statsGET /orgs/{org}/insights/api/summary-statsGET /orgs/{org}/insights/api/summary-stats/users/{user_id}GET /orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/time-statsGET /orgs/{org}/insights/api/time-stats/users/{user_id}GET /orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}GET /orgs/{org}/insights/api/user-stats/{user_id}GET /orgs/{org}/installationsGET /orgs/{org}/invitationsPOST /orgs/{org}/invitationsDELETE /orgs/{org}/invitations/{invitation_id}GET /orgs/{org}/invitations/{invitation_id}/teamsGET /orgs/{org}/issue-typesPOST /orgs/{org}/issue-typesPUT /orgs/{org}/issue-types/{issue_type_id}DELETE /orgs/{org}/issue-types/{issue_type_id}GET /orgs/{org}/membersGET /orgs/{org}/members/{username}DELETE /orgs/{org}/members/{username}GET /orgs/{org}/memberships/{username}PUT /orgs/{org}/memberships/{username}DELETE /orgs/{org}/memberships/{username}GET /orgs/{org}/organization-rolesDELETE /orgs/{org}/organization-roles/teams/{team_slug}PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}DELETE /orgs/{org}/organization-roles/users/{username}PUT /orgs/{org}/organization-roles/users/{username}/{role_id}DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}GET /orgs/{org}/organization-roles/{role_id}GET /orgs/{org}/organization-roles/{role_id}/teamsGET /orgs/{org}/organization-roles/{role_id}/usersGET /orgs/{org}/outside_collaboratorsPUT /orgs/{org}/outside_collaborators/{username}DELETE /orgs/{org}/outside_collaborators/{username}GET /orgs/{org}/personal-access-token-requestsPOST /orgs/{org}/personal-access-token-requestsPOST /orgs/{org}/personal-access-token-requests/{pat_request_id}GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositoriesGET /orgs/{org}/personal-access-tokensPOST /orgs/{org}/personal-access-tokensPOST /orgs/{org}/personal-access-tokens/{pat_id}GET /orgs/{org}/personal-access-tokens/{pat_id}/repositoriesGET /orgs/{org}/properties/schemaPATCH /orgs/{org}/properties/schemaGET /orgs/{org}/properties/schema/{custom_property_name}PUT /orgs/{org}/properties/schema/{custom_property_name}DELETE /orgs/{org}/properties/schema/{custom_property_name}GET /orgs/{org}/properties/valuesPATCH /orgs/{org}/properties/valuesGET /orgs/{org}/public_membersGET /orgs/{org}/public_members/{username}PUT /orgs/{org}/public_members/{username}DELETE /orgs/{org}/public_members/{username}GET /orgs/{org}/rulesetsPOST /orgs/{org}/rulesetsGET /orgs/{org}/rulesets/rule-suitesGET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}GET /orgs/{org}/rulesets/{ruleset_id}PUT /orgs/{org}/rulesets/{ruleset_id}DELETE /orgs/{org}/rulesets/{ruleset_id}GET /orgs/{org}/rulesets/{ruleset_id}/historyGET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}GET /orgs/{org}/security-managersPUT /orgs/{org}/security-managers/teams/{team_slug}DELETE /orgs/{org}/security-managers/teams/{team_slug}GET /orgs/{org}/settings/network-configurationsPOST /orgs/{org}/settings/network-configurationsGET /orgs/{org}/settings/network-configurations/{network_configuration_id}PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}GET /orgs/{org}/settings/network-settings/{network_settings_id}POST /orgs/{org}/{security_product}/{enablement}GET /user/memberships/orgsGET /user/memberships/orgs/{org}PATCH /user/memberships/orgs/{org}GET /user/orgsGET /users/{username}/orgspackagesGET /orgs/{org}/docker/conflictsGET /orgs/{org}/packagesGET /orgs/{org}/packages/{package_type}/{package_name}DELETE /orgs/{org}/packages/{package_type}/{package_name}GET /orgs/{org}/packages/{package_type}/{package_name}/versionsGET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}GET /user/docker/conflictsGET /user/packagesGET /user/packages/{package_type}/{package_name}DELETE /user/packages/{package_type}/{package_name}GET /user/packages/{package_type}/{package_name}/versionsGET /user/packages/{package_type}/{package_name}/versions/{package_version_id}GET /users/{username}/docker/conflictsGET /users/{username}/packagesGET /users/{username}/packages/{package_type}/{package_name}DELETE /users/{username}/packages/{package_type}/{package_name}GET /users/{username}/packages/{package_type}/{package_name}/versionsGET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}pagesGET /repos/{owner}/{repo}/pagesPOST /repos/{owner}/{repo}/pagesPUT /repos/{owner}/{repo}/pagesDELETE /repos/{owner}/{repo}/pagesGET /repos/{owner}/{repo}/pages/buildsPOST /repos/{owner}/{repo}/pages/buildsGET /repos/{owner}/{repo}/pages/builds/latestGET /repos/{owner}/{repo}/pages/builds/{build_id}POST /repos/{owner}/{repo}/pages/deploymentsGET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancelGET /repos/{owner}/{repo}/pages/healthprivate-registriesGET /orgs/{org}/private-registriesPOST /orgs/{org}/private-registriesGET /orgs/{org}/private-registries/public-keyGET /orgs/{org}/private-registries/{secret_name}PATCH /orgs/{org}/private-registries/{secret_name}DELETE /orgs/{org}/private-registries/{secret_name}projectsGET /orgs/{org}/projectsPOST /orgs/{org}/projectsGET /projects/columns/cards/{card_id}PATCH /projects/columns/cards/{card_id}DELETE /projects/columns/cards/{card_id}POST /projects/columns/cards/{card_id}/movesGET /projects/columns/{column_id}PATCH /projects/columns/{column_id}DELETE /projects/columns/{column_id}GET /projects/columns/{column_id}/cardsPOST /projects/columns/{column_id}/cardsPOST /projects/columns/{column_id}/movesGET /projects/{project_id}PATCH /projects/{project_id}DELETE /projects/{project_id}GET /projects/{project_id}/collaboratorsPUT /projects/{project_id}/collaborators/{username}DELETE /projects/{project_id}/collaborators/{username}GET /projects/{project_id}/collaborators/{username}/permissionGET /projects/{project_id}/columnsPOST /projects/{project_id}/columnsGET /repos/{owner}/{repo}/projectsPOST /repos/{owner}/{repo}/projectspullsGET /repos/{owner}/{repo}/pullsPOST /repos/{owner}/{repo}/pullsGET /repos/{owner}/{repo}/pulls/commentsGET /repos/{owner}/{repo}/pulls/comments/{comment_id}PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}GET /repos/{owner}/{repo}/pulls/{pull_number}PATCH /repos/{owner}/{repo}/pulls/{pull_number}GET /repos/{owner}/{repo}/pulls/{pull_number}/commentsPOST /repos/{owner}/{repo}/pulls/{pull_number}/commentsPOST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/repliesGET /repos/{owner}/{repo}/pulls/{pull_number}/commitsGET /repos/{owner}/{repo}/pulls/{pull_number}/filesGET /repos/{owner}/{repo}/pulls/{pull_number}/mergePUT /repos/{owner}/{repo}/pulls/{pull_number}/mergeGET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersPOST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersDELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersGET /repos/{owner}/{repo}/pulls/{pull_number}/reviewsPOST /repos/{owner}/{repo}/pulls/{pull_number}/reviewsGET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/commentsPUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissalsPOST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/eventsPUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branchrate-limitGET /rate_limitreactionsDELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}GET /repos/{owner}/{repo}/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/issues/{issue_number}/reactionsPOST /repos/{owner}/{repo}/issues/{issue_number}/reactionsDELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionsPOST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionsDELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}GET /repos/{owner}/{repo}/releases/{release_id}/reactionsPOST /repos/{owner}/{repo}/releases/{release_id}/reactionsDELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}releasesGET /repos/{owner}/{repo}/releasesPOST /repos/{owner}/{repo}/releasesGET /repos/{owner}/{repo}/releases/assets/{asset_id}PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}POST /repos/{owner}/{repo}/releases/generate-notesGET /repos/{owner}/{repo}/releases/latestGET /repos/{owner}/{repo}/releases/tags/{tag}GET /repos/{owner}/{repo}/releases/{release_id}PATCH /repos/{owner}/{repo}/releases/{release_id}DELETE /repos/{owner}/{repo}/releases/{release_id}GET /repos/{owner}/{repo}/releases/{release_id}/assetsreposGET /orgs/{org}/reposPOST /orgs/{org}/reposGET /repos/{owner}/{repo}PATCH /repos/{owner}/{repo}DELETE /repos/{owner}/{repo}GET /repos/{owner}/{repo}/activityPOST /repos/{owner}/{repo}/attestationsGET /repos/{owner}/{repo}/attestations/{subject_digest}GET /repos/{owner}/{repo}/autolinksPOST /repos/{owner}/{repo}/autolinksGET /repos/{owner}/{repo}/autolinks/{autolink_id}DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}GET /repos/{owner}/{repo}/automated-security-fixesPUT /repos/{owner}/{repo}/automated-security-fixesDELETE /repos/{owner}/{repo}/automated-security-fixesGET /repos/{owner}/{repo}/codeowners/errorsGET /repos/{owner}/{repo}/contents/{path}PUT /repos/{owner}/{repo}/contents/{path}DELETE /repos/{owner}/{repo}/contents/{path}GET /repos/{owner}/{repo}/contributorsPOST /repos/{owner}/{repo}/dispatchesGET /repos/{owner}/{repo}/forksPOST /repos/{owner}/{repo}/forksGET /repos/{owner}/{repo}/hooksPOST /repos/{owner}/{repo}/hooksGET /repos/{owner}/{repo}/hooks/{hook_id}PATCH /repos/{owner}/{repo}/hooks/{hook_id}DELETE /repos/{owner}/{repo}/hooks/{hook_id}GET /repos/{owner}/{repo}/hooks/{hook_id}/configPATCH /repos/{owner}/{repo}/hooks/{hook_id}/configGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveriesGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attemptsPOST /repos/{owner}/{repo}/hooks/{hook_id}/pingsPOST /repos/{owner}/{repo}/hooks/{hook_id}/testsGET /repos/{owner}/{repo}/languagesGET /repos/{owner}/{repo}/private-vulnerability-reportingPUT /repos/{owner}/{repo}/private-vulnerability-reportingDELETE /repos/{owner}/{repo}/private-vulnerability-reportingGET /repos/{owner}/{repo}/properties/valuesPATCH /repos/{owner}/{repo}/properties/valuesGET /repos/{owner}/{repo}/rules/branches/{branch}GET /repos/{owner}/{repo}/rulesetsPOST /repos/{owner}/{repo}/rulesetsGET /repos/{owner}/{repo}/rulesets/rule-suitesGET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}GET /repos/{owner}/{repo}/rulesets/{ruleset_id}PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/historyGET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}GET /repos/{owner}/{repo}/tagsGET /repos/{owner}/{repo}/tags/protectionPOST /repos/{owner}/{repo}/tags/protectionDELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}GET /repos/{owner}/{repo}/tarball/{ref}GET /repos/{owner}/{repo}/teamsGET /repos/{owner}/{repo}/topicsPUT /repos/{owner}/{repo}/topicsPOST /repos/{owner}/{repo}/transferGET /repos/{owner}/{repo}/vulnerability-alertsPUT /repos/{owner}/{repo}/vulnerability-alertsDELETE /repos/{owner}/{repo}/vulnerability-alertsGET /repos/{owner}/{repo}/zipball/{ref}POST /repos/{template_owner}/{template_repo}/generateGET /repositoriesGET /user/reposPOST /user/reposGET /users/{username}/repossearchGET /search/codeGET /search/commitsGET /search/issuesGET /search/labelsGET /search/repositoriesGET /search/topicsGET /search/userssecret-scanningGET /orgs/{org}/secret-scanning/alertsGET /repos/{owner}/{repo}/secret-scanning/alertsGET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locationsPOST /repos/{owner}/{repo}/secret-scanning/push-protection-bypassesGET /repos/{owner}/{repo}/secret-scanning/scan-historysecurity-advisoriesGET /advisoriesGET /advisories/{ghsa_id}GET /orgs/{org}/security-advisoriesGET /repos/{owner}/{repo}/security-advisoriesPOST /repos/{owner}/{repo}/security-advisoriesPOST /repos/{owner}/{repo}/security-advisories/reportsGET /repos/{owner}/{repo}/security-advisories/{ghsa_id}PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cvePOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forksteamsGET /orgs/{org}/teamsPOST /orgs/{org}/teamsGET /orgs/{org}/teams/{team_slug}/projectsGET /orgs/{org}/teams/{team_slug}/projects/{project_id}PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}GET /teams/{team_id}/members/{username}PUT /teams/{team_id}/members/{username}DELETE /teams/{team_id}/members/{username}GET /user/teamsusersGET /userPATCH /userGET /user/blocksGET /user/blocks/{username}PUT /user/blocks/{username}DELETE /user/blocks/{username}PATCH /user/email/visibilityGET /user/emailsPOST /user/emailsDELETE /user/emailsGET /user/followersGET /user/followingGET /user/following/{username}PUT /user/following/{username}DELETE /user/following/{username}GET /user/gpg_keysPOST /user/gpg_keysGET /user/gpg_keys/{gpg_key_id}DELETE /user/gpg_keys/{gpg_key_id}GET /user/keysPOST /user/keysGET /user/keys/{key_id}DELETE /user/keys/{key_id}GET /user/public_emailsGET /user/social_accountsPOST /user/social_accountsDELETE /user/social_accountsGET /user/ssh_signing_keysPOST /user/ssh_signing_keysGET /user/ssh_signing_keys/{ssh_signing_key_id}DELETE /user/ssh_signing_keys/{ssh_signing_key_id}GET /usersGET /users/{username}/attestations/{subject_digest}GET /users/{username}/followersGET /users/{username}/followingGET /users/{username}/following/{target_user}GET /users/{username}/gpg_keysGET /users/{username}/keysGET /users/{username}/social_accountsGET /users/{username}/ssh_signing_keys\n\n\n\nREST API/Authentication/Permissions for GitHub AppsPermissions required for GitHub AppsFor each permission granted to a GitHub App, these are the REST API endpoints that the app can use.In this articleAbout GitHub App permissionsOrganization permissions for "API Insights"Organization permissions for "Administration"Organization permissions for "Blocking users"Organization permissions for "Campaigns"Organization permissions for "Custom organization roles"Organization permissions for "Custom properties"Organization permissions for "Events"Organization permissions for "GitHub Copilot Business"Organization permissions for "Issue Types"Organization permissions for "Members"Organization permissions for "Network configurations"Organization permissions for "Organization codespaces secrets"Organization permissions for "Organization codespaces settings"Organization permissions for "Organization codespaces"Organization permissions for "Organization dependabot secrets"Organization permissions for "Organization private registries"Organization permissions for "Personal access token requests"Organization permissions for "Personal access tokens"Organization permissions for "Projects"Organization permissions for "Secrets"Organization permissions for "Self-hosted runners"Organization permissions for "Team discussions"Organization permissions for "Variables"Organization permissions for "Webhooks"Repository permissions for "Actions"Repository permissions for "Administration"Repository permissions for "Attestations"Repository permissions for "Checks"Repository permissions for "Code scanning alerts"Repository permissions for "Codespaces lifecycle admin"Repository permissions for "Codespaces metadata"Repository permissions for "Codespaces secrets"Repository permissions for "Codespaces"Repository permissions for "Commit statuses"Repository permissions for "Contents"Repository permissions for "Custom properties"Repository permissions for "Dependabot alerts"Repository permissions for "Dependabot secrets"Repository permissions for "Deployments"Repository permissions for "Environments"Repository permissions for "Issues"Repository permissions for "Metadata"Repository permissions for "Pages"Repository permissions for "Projects"Repository permissions for "Pull requests"Repository permissions for "Repository security advisories"Repository permissions for "Secret scanning alerts"Repository permissions for "Secrets"Repository permissions for "Variables"Repository permissions for "Webhooks"Repository permissions for "Workflows"User permissions for "Block another user"User permissions for "Codespaces user secrets"User permissions for "Email addresses"User permissions for "Followers"User permissions for "GPG keys"User permissions for "Gists"User permissions for "Git SSH keys"User permissions for "Interaction limits"User permissions for "Plan"User permissions for "Profile"User permissions for "SSH signing keys"User permissions for "Starring"User permissions for "Watching"About GitHub App permissions
GitHub Apps are created with a set of permissions. Permissions define what resources the GitHub App can access via the API. For more information, see Choosing permissions for a GitHub App.
To help you choose the correct permissions, you will receive the X-Accepted-GitHub-Permissions header in the REST API response. The header will tell you what permissions are required in order to access the endpoint. For more information, see Troubleshooting the REST API.
These permissions are required to access private resources. Some endpoints can also be used to access public resources without these permissions. To see whether an endpoint can access public resources without a permission, see the documentation for that endpoint.
Some endpoints require more than one permission. Other endpoints work with any one permission from a set of permissions. In these cases, the "Additional permissions" column will include a checkmark. For full details about the permissions that are required to use the endpoint, see the documentation for that endpoint.Organization permissions for "API Insights"EndpointAccessToken typesAdditional permissionsGET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}readUATIATGET /orgs/{org}/insights/api/subject-statsreadUATIATGET /orgs/{org}/insights/api/summary-statsreadUATIATGET /orgs/{org}/insights/api/summary-stats/users/{user_id}readUATIATGET /orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}readUATIATGET /orgs/{org}/insights/api/time-statsreadUATIATGET /orgs/{org}/insights/api/time-stats/users/{user_id}readUATIATGET /orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}readUATIATGET /orgs/{org}/insights/api/user-stats/{user_id}readUATIATOrganization permissions for "Administration"EndpointAccessToken typesAdditional permissionsPATCH /orgs/{org}writeUATIATDELETE /orgs/{org}writeUATIATPOST /orgs/{org}/actions/hosted-runnerswriteUATIATPATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}writeUATIATDELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}writeUATIATPUT /orgs/{org}/actions/oidc/customization/subwriteUATIATPUT /orgs/{org}/actions/permissionswriteUATIATPUT /orgs/{org}/actions/permissions/repositorieswriteUATIATPUT /orgs/{org}/actions/permissions/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/permissions/selected-actionswriteUATIATPUT /orgs/{org}/actions/permissions/workflowwriteUATIATGET /orgs/{org}/code-security/configurationswriteUATIATPOST /orgs/{org}/code-security/configurationswriteUATIATGET /orgs/{org}/code-security/configurations/defaultswriteUATIATDELETE /orgs/{org}/code-security/configurations/detachwriteUATIATGET /orgs/{org}/code-security/configurations/{configuration_id}writeUATIATPATCH /orgs/{org}/code-security/configurations/{configuration_id}writeUATIATDELETE /orgs/{org}/code-security/configurations/{configuration_id}writeUATIATPOST /orgs/{org}/code-security/configurations/{configuration_id}/attachwriteUATIATPUT /orgs/{org}/code-security/configurations/{configuration_id}/defaultswriteUATIATGET /orgs/{org}/code-security/configurations/{configuration_id}/repositorieswriteUATIATPOST /orgs/{org}/copilot/billing/selected_teamswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/copilot/billing/selected_teamswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /orgs/{org}/copilot/billing/selected_userswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/copilot/billing/selected_userswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/interaction-limitswriteUATIATDELETE /orgs/{org}/interaction-limitswriteUATIATGET /orgs/{org}/rulesetswriteUATIATPOST /orgs/{org}/rulesetswriteUATIATGET /orgs/{org}/rulesets/rule-suiteswriteUATIATGET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}writeUATIATGET /orgs/{org}/rulesets/{ruleset_id}writeUATIATPUT /orgs/{org}/rulesets/{ruleset_id}writeUATIATDELETE /orgs/{org}/rulesets/{ruleset_id}writeUATIATGET /orgs/{org}/rulesets/{ruleset_id}/historywriteUATIATGET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}writeUATIATPUT /orgs/{org}/security-managers/teams/{team_slug}writeUATIATDELETE /orgs/{org}/security-managers/teams/{team_slug}writeUATIATPOST /orgs/{org}/{security_product}/{enablement}writeUATIATGET /organizations/{org}/settings/billing/usagereadUATIATGET /orgs/{org}/actions/cache/usagereadUATIATGET /orgs/{org}/actions/cache/usage-by-repositoryreadUATIATGET /orgs/{org}/actions/hosted-runnersreadUATIATGET /orgs/{org}/actions/hosted-runners/images/github-ownedreadUATIATGET /orgs/{org}/actions/hosted-runners/images/partnerreadUATIATGET /orgs/{org}/actions/hosted-runners/limitsreadUATIATGET /orgs/{org}/actions/hosted-runners/machine-sizesreadUATIATGET /orgs/{org}/actions/hosted-runners/platformsreadUATIATGET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}readUATIATGET /orgs/{org}/actions/oidc/customization/subreadUATIATGET /orgs/{org}/actions/permissionsreadUATIATGET /orgs/{org}/actions/permissions/repositoriesreadUATIATGET /orgs/{org}/actions/permissions/selected-actionsreadUATIATGET /orgs/{org}/actions/permissions/workflowreadUATIATGET /orgs/{org}/copilot/billingreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/billing/seatsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/metricsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/installationsreadUATIATGET /orgs/{org}/interaction-limitsreadUATIATGET /orgs/{org}/members/{username}/copilotreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/security-managersreadUATIATGET /orgs/{org}/settings/billing/actionsreadUATIATGET /orgs/{org}/settings/billing/packagesreadUATIATGET /orgs/{org}/settings/billing/shared-storagereadUATIATGET /orgs/{org}/team/{team_slug}/copilot/metricsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Organization permissions for "Blocking users"EndpointAccessToken typesAdditional permissionsPUT /orgs/{org}/blocks/{username}writeUATIATDELETE /orgs/{org}/blocks/{username}writeUATIATGET /orgs/{org}/blocksreadUATIATGET /orgs/{org}/blocks/{username}readUATIATOrganization permissions for "Campaigns"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/campaignswriteUATIATPATCH /orgs/{org}/campaigns/{campaign_number}writeUATIATDELETE /orgs/{org}/campaigns/{campaign_number}writeUATIATGET /orgs/{org}/campaignsreadUATIATGET /orgs/{org}/campaigns/{campaign_number}readUATIATOrganization permissions for "Custom organization roles"EndpointAccessToken typesAdditional permissionsGET /orgs/{org}/organization-rolesreadUATIATGET /orgs/{org}/organization-roles/{role_id}readUATIATOrganization permissions for "Custom properties"EndpointAccessToken typesAdditional permissionsPATCH /orgs/{org}/properties/schemaadminUATIATPUT /orgs/{org}/properties/schema/{custom_property_name}adminUATIATDELETE /orgs/{org}/properties/schema/{custom_property_name}adminUATIATPATCH /orgs/{org}/properties/valueswriteUATIATGET /orgs/{org}/properties/schemareadUATIATGET /orgs/{org}/properties/schema/{custom_property_name}readUATIATGET /orgs/{org}/properties/valuesreadUATIATOrganization permissions for "Events"EndpointAccessToken typesAdditional permissionsGET /users/{username}/events/orgs/{org}readUATOrganization permissions for "GitHub Copilot Business"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/copilot/billing/selected_teamswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/copilot/billing/selected_teamswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /orgs/{org}/copilot/billing/selected_userswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/copilot/billing/selected_userswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/billingreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/billing/seatsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/metricsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/members/{username}/copilotreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/team/{team_slug}/copilot/metricsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Organization permissions for "Issue Types"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/issue-typeswriteUATIATPUT /orgs/{org}/issue-types/{issue_type_id}writeUATIATDELETE /orgs/{org}/issue-types/{issue_type_id}writeUATIATGET /orgs/{org}/issue-typesreadUATIATOrganization permissions for "Members"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/invitationswriteUATIATDELETE /orgs/{org}/invitations/{invitation_id}writeUATIATDELETE /orgs/{org}/members/{username}writeUATIATPUT /orgs/{org}/memberships/{username}writeUATIATDELETE /orgs/{org}/memberships/{username}writeUATIATDELETE /orgs/{org}/organization-roles/teams/{team_slug}writeUATIATPUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}writeUATIATDELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}writeUATIATDELETE /orgs/{org}/organization-roles/users/{username}writeUATIATPUT /orgs/{org}/organization-roles/users/{username}/{role_id}writeUATIATDELETE /orgs/{org}/organization-roles/users/{username}/{role_id}writeUATIATPUT /orgs/{org}/outside_collaborators/{username}writeUATIATDELETE /orgs/{org}/outside_collaborators/{username}writeUATIATPUT /orgs/{org}/public_members/{username}writeUATDELETE /orgs/{org}/public_members/{username}writeUATPOST /orgs/{org}/teamswriteUATIATPUT /teams/{team_id}/members/{username}writeUATIATDELETE /teams/{team_id}/members/{username}writeUATIATPATCH /user/memberships/orgs/{org}writeUATGET /orgs/{org}/failed_invitationsreadUATIATGET /orgs/{org}/invitationsreadUATIATGET /orgs/{org}/invitations/{invitation_id}/teamsreadUATIATGET /orgs/{org}/membersreadUATIATGET /orgs/{org}/members/{username}readUATIATGET /orgs/{org}/memberships/{username}readUATIATGET /orgs/{org}/organization-roles/{role_id}/teamsreadUATIATGET /orgs/{org}/organization-roles/{role_id}/usersreadUATIATGET /orgs/{org}/outside_collaboratorsreadUATIATGET /orgs/{org}/public_membersreadUATIATGET /orgs/{org}/public_members/{username}readUATIATGET /orgs/{org}/teamsreadUATIATGET /orgs/{org}/teams/{team_slug}/projectsreadUATIATGET /orgs/{org}/teams/{team_slug}/projects/{project_id}readUATIATPUT /orgs/{org}/teams/{team_slug}/projects/{project_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /teams/{team_id}/members/{username}readUATIATGET /user/memberships/orgs/{org}readUATOrganization permissions for "Network configurations"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/settings/network-configurationswriteUATIATPATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}writeUATIATDELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}writeUATIATGET /orgs/{org}/settings/network-configurationsreadUATIATGET /orgs/{org}/settings/network-configurations/{network_configuration_id}readUATIATGET /orgs/{org}/settings/network-settings/{network_settings_id}readUATIATOrganization permissions for "Organization codespaces secrets"EndpointAccessToken typesAdditional permissionsPUT /orgs/{org}/codespaces/secrets/{secret_name}writeUATIATDELETE /orgs/{org}/codespaces/secrets/{secret_name}writeUATIATPUT /orgs/{org}/codespaces/secrets/{secret_name}/repositorieswriteUATIATPUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/codespaces/secretsreadUATIATGET /orgs/{org}/codespaces/secrets/public-keyreadUATIATGET /orgs/{org}/codespaces/secrets/{secret_name}readUATIATGET /orgs/{org}/codespaces/secrets/{secret_name}/repositoriesreadUATIATOrganization permissions for "Organization codespaces settings"EndpointAccessToken typesAdditional permissionsPUT /orgs/{org}/codespaces/accesswriteUATIATPOST /orgs/{org}/codespaces/access/selected_userswriteUATIATDELETE /orgs/{org}/codespaces/access/selected_userswriteUATIATOrganization permissions for "Organization codespaces"EndpointAccessToken typesAdditional permissionsDELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stopwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/codespacesreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/members/{username}/codespacesreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Organization permissions for "Organization dependabot secrets"EndpointAccessToken typesAdditional permissionsPUT /orgs/{org}/dependabot/secrets/{secret_name}writeUATIATDELETE /orgs/{org}/dependabot/secrets/{secret_name}writeUATIATPUT /orgs/{org}/dependabot/secrets/{secret_name}/repositorieswriteUATIATPUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/dependabot/secretsreadUATIATGET /orgs/{org}/dependabot/secrets/public-keyreadUATIATGET /orgs/{org}/dependabot/secrets/{secret_name}readUATIATGET /orgs/{org}/dependabot/secrets/{secret_name}/repositoriesreadUATIATOrganization permissions for "Organization private registries"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/private-registrieswriteUATIATPATCH /orgs/{org}/private-registries/{secret_name}writeUATIATDELETE /orgs/{org}/private-registries/{secret_name}writeUATIATGET /orgs/{org}/private-registriesreadUATIATGET /orgs/{org}/private-registries/public-keyreadUATIATGET /orgs/{org}/private-registries/{secret_name}readUATIATOrganization permissions for "Personal access token requests"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/personal-access-token-requestswriteUATIATPOST /orgs/{org}/personal-access-token-requests/{pat_request_id}writeUATIATGET /orgs/{org}/personal-access-token-requestsreadUATIATGET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositoriesreadUATIATOrganization permissions for "Personal access tokens"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/personal-access-tokenswriteUATIATPOST /orgs/{org}/personal-access-tokens/{pat_id}writeUATIATGET /orgs/{org}/personal-access-tokensreadUATIATGET /orgs/{org}/personal-access-tokens/{pat_id}/repositoriesreadUATIATOrganization permissions for "Projects"EndpointAccessToken typesAdditional permissionsPUT /orgs/{org}/teams/{team_slug}/projects/{project_id}adminUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}adminUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/collaboratorsadminUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /projects/{project_id}/collaborators/{username}adminUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/{project_id}/collaborators/{username}adminUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/collaborators/{username}/permissionadminUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /orgs/{org}/projectswriteUATIATPATCH /projects/columns/cards/{card_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/columns/cards/{card_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/cards/{card_id}/moveswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /projects/columns/{column_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/columns/{column_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/{column_id}/cardswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/{column_id}/moveswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /projects/{project_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/{project_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/{project_id}/columnswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/projectsreadUATIATGET /projects/columns/cards/{card_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/columns/{column_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/columns/{column_id}/cardsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/columnsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Organization permissions for "Secrets"EndpointAccessToken typesAdditional permissionsPUT /orgs/{org}/actions/secrets/{secret_name}writeUATIATDELETE /orgs/{org}/actions/secrets/{secret_name}writeUATIATPUT /orgs/{org}/actions/secrets/{secret_name}/repositorieswriteUATIATPUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/actions/secretsreadUATIATGET /orgs/{org}/actions/secrets/public-keyreadUATIATGET /orgs/{org}/actions/secrets/{secret_name}readUATIATGET /orgs/{org}/actions/secrets/{secret_name}/repositoriesreadUATIATOrganization permissions for "Self-hosted runners"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/actions/runner-groupswriteUATIATPATCH /orgs/{org}/actions/runner-groups/{runner_group_id}writeUATIATDELETE /orgs/{org}/actions/runner-groups/{runner_group_id}writeUATIATPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositorieswriteUATIATPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runnerswriteUATIATPUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}writeUATIATDELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}writeUATIATPOST /orgs/{org}/actions/runners/generate-jitconfigwriteUATIATPOST /orgs/{org}/actions/runners/registration-tokenwriteUATIATPOST /orgs/{org}/actions/runners/remove-tokenwriteUATIATDELETE /orgs/{org}/actions/runners/{runner_id}writeUATIATPOST /orgs/{org}/actions/runners/{runner_id}/labelswriteUATIATPUT /orgs/{org}/actions/runners/{runner_id}/labelswriteUATIATDELETE /orgs/{org}/actions/runners/{runner_id}/labelswriteUATIATDELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}writeUATIATGET /orgs/{org}/actions/runner-groupsreadUATIATGET /orgs/{org}/actions/runner-groups/{runner_group_id}readUATIATGET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runnersreadUATIATGET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriesreadUATIATGET /orgs/{org}/actions/runner-groups/{runner_group_id}/runnersreadUATIATGET /orgs/{org}/actions/runnersreadUATIATGET /orgs/{org}/actions/runners/downloadsreadUATIATGET /orgs/{org}/actions/runners/{runner_id}readUATIATGET /orgs/{org}/actions/runners/{runner_id}/labelsreadUATIATOrganization permissions for "Team discussions"EndpointAccessToken typesAdditional permissionsDELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}writeUATIATDELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}writeUATIATOrganization permissions for "Variables"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/actions/variableswriteUATIATPATCH /orgs/{org}/actions/variables/{name}writeUATIATDELETE /orgs/{org}/actions/variables/{name}writeUATIATPUT /orgs/{org}/actions/variables/{name}/repositorieswriteUATIATPUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/actions/variablesreadUATIATGET /orgs/{org}/actions/variables/{name}readUATIATGET /orgs/{org}/actions/variables/{name}/repositoriesreadUATIATOrganization permissions for "Webhooks"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/hookswriteUATIATPATCH /orgs/{org}/hooks/{hook_id}writeUATIATDELETE /orgs/{org}/hooks/{hook_id}writeUATIATPATCH /orgs/{org}/hooks/{hook_id}/configwriteUATIATPOST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attemptswriteUATIATPOST /orgs/{org}/hooks/{hook_id}/pingswriteUATIATGET /orgs/{org}/hooksreadUATIATGET /orgs/{org}/hooks/{hook_id}readUATIATGET /orgs/{org}/hooks/{hook_id}/configreadUATIATGET /orgs/{org}/hooks/{hook_id}/deliveriesreadUATIATGET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}readUATIATRepository permissions for "Actions"EndpointAccessToken typesAdditional permissionsDELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}writeUATIATDELETE /repos/{owner}/{repo}/actions/cacheswriteUATIATDELETE /repos/{owner}/{repo}/actions/caches/{cache_id}writeUATIATPOST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerunwriteUATIATPUT /repos/{owner}/{repo}/actions/oidc/customization/subwriteUATIATDELETE /repos/{owner}/{repo}/actions/runs/{run_id}writeUATIATPOST /repos/{owner}/{repo}/actions/runs/{run_id}/approvewriteUATIATPOST /repos/{owner}/{repo}/actions/runs/{run_id}/cancelwriteUATIATPOST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancelwriteUATIATDELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logswriteUATIATPOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerunwriteUATIATPOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobswriteUATIATPUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disablewriteUATIATPOST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatcheswriteUATIATPUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enablewriteUATIATGET /repos/{owner}/{repo}/actions/artifactsreadUATIATGET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}readUATIATGET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}readUATIATGET /repos/{owner}/{repo}/actions/cache/usagereadUATIATGET /repos/{owner}/{repo}/actions/cachesreadUATIATGET /repos/{owner}/{repo}/actions/jobs/{job_id}readUATIATGET /repos/{owner}/{repo}/actions/jobs/{job_id}/logsreadUATIATGET /repos/{owner}/{repo}/actions/oidc/customization/subreadUATIATGET /repos/{owner}/{repo}/actions/runsreadUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}readUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/approvalsreadUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/artifactsreadUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}readUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobsreadUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logsreadUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/jobsreadUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/logsreadUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentsreadUATIATGET /repos/{owner}/{repo}/actions/runs/{run_id}/timingreadUATIATGET /repos/{owner}/{repo}/actions/workflowsreadUATIATGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}readUATIATGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runsreadUATIATGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timingreadUATIATGET /repos/{owner}/{repo}/environmentsreadUATIATGET /repos/{owner}/{repo}/environments/{environment_name}readUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policiesreadUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}readUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rulesreadUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}readUATIATRepository permissions for "Administration"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/reposwriteUATIATPATCH /repos/{owner}/{repo}writeUATIATDELETE /repos/{owner}/{repo}writeUATIATPUT /repos/{owner}/{repo}/actions/permissionswriteUATIATPUT /repos/{owner}/{repo}/actions/permissions/accesswriteUATIATPUT /repos/{owner}/{repo}/actions/permissions/selected-actionswriteUATIATPUT /repos/{owner}/{repo}/actions/permissions/workflowwriteUATIATPOST /repos/{owner}/{repo}/actions/runners/generate-jitconfigwriteUATIATPOST /repos/{owner}/{repo}/actions/runners/registration-tokenwriteUATIATPOST /repos/{owner}/{repo}/actions/runners/remove-tokenwriteUATIATDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}writeUATIATPOST /repos/{owner}/{repo}/actions/runners/{runner_id}/labelswriteUATIATPUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labelswriteUATIATDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labelswriteUATIATDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}writeUATIATPOST /repos/{owner}/{repo}/autolinkswriteUATIATDELETE /repos/{owner}/{repo}/autolinks/{autolink_id}writeUATIATPUT /repos/{owner}/{repo}/automated-security-fixeswriteUATIATDELETE /repos/{owner}/{repo}/automated-security-fixeswriteUATIATPUT /repos/{owner}/{repo}/branches/{branch}/protectionwriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protectionwriteUATIATPOST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminswriteUATIATPATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewswriteUATIATPOST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatureswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatureswriteUATIATPATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checkswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checkswriteUATIATPOST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextswriteUATIATPUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictionswriteUATIATPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appswriteUATIATPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appswriteUATIATPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamswriteUATIATPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamswriteUATIATPOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/userswriteUATIATPUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/userswriteUATIATDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/userswriteUATIATPATCH /repos/{owner}/{repo}/code-scanning/default-setupwriteUATIATPUT /repos/{owner}/{repo}/collaborators/{username}writeUATIATDELETE /repos/{owner}/{repo}/collaborators/{username}writeUATIATPUT /repos/{owner}/{repo}/environments/{environment_name}writeUATIATDELETE /repos/{owner}/{repo}/environments/{environment_name}writeUATIATPOST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policieswriteUATIATPUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}writeUATIATDELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}writeUATIATPOST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_ruleswriteUATIATDELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}writeUATIATPOST /repos/{owner}/{repo}/forkswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/interaction-limitswriteUATIATDELETE /repos/{owner}/{repo}/interaction-limitswriteUATIATPATCH /repos/{owner}/{repo}/invitations/{invitation_id}writeUATIATDELETE /repos/{owner}/{repo}/invitations/{invitation_id}writeUATIATPOST /repos/{owner}/{repo}/keyswriteUATIATDELETE /repos/{owner}/{repo}/keys/{key_id}writeUATIATPOST /repos/{owner}/{repo}/pageswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/pageswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/pageswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/pages/healthwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/private-vulnerability-reportingwriteUATIATDELETE /repos/{owner}/{repo}/private-vulnerability-reportingwriteUATIATPOST /repos/{owner}/{repo}/rulesetswriteUATIATGET /repos/{owner}/{repo}/rulesets/rule-suiteswriteUATIATGET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}writeUATIATPUT /repos/{owner}/{repo}/rulesets/{ruleset_id}writeUATIATDELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}writeUATIATGET /repos/{owner}/{repo}/rulesets/{ruleset_id}/historywriteUATIATGET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}writeUATIATPOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forkswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/tags/protectionwriteUATIATDELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}writeUATIATPUT /repos/{owner}/{repo}/topicswriteUATIATPOST /repos/{owner}/{repo}/transferwriteUATPUT /repos/{owner}/{repo}/vulnerability-alertswriteUATIATDELETE /repos/{owner}/{repo}/vulnerability-alertswriteUATIATPOST /repos/{template_owner}/{template_repo}/generatewriteUATIATPOST /user/reposwriteUATPATCH /user/repository_invitations/{invitation_id}writeUATDELETE /user/repository_invitations/{invitation_id}writeUATGET /repos/{owner}/{repo}/actions/permissionsreadUATIATGET /repos/{owner}/{repo}/actions/permissions/accessreadUATIATGET /repos/{owner}/{repo}/actions/permissions/selected-actionsreadUATIATGET /repos/{owner}/{repo}/actions/permissions/workflowreadUATIATGET /repos/{owner}/{repo}/actions/runnersreadUATIATGET /repos/{owner}/{repo}/actions/runners/downloadsreadUATIATGET /repos/{owner}/{repo}/actions/runners/{runner_id}readUATIATGET /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsreadUATIATGET /repos/{owner}/{repo}/autolinksreadUATIATGET /repos/{owner}/{repo}/autolinks/{autolink_id}readUATIATGET /repos/{owner}/{repo}/automated-security-fixesreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protectionreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictionsreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsreadUATIATGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersreadUATIATGET /repos/{owner}/{repo}/code-scanning/default-setupreadUATIATGET /repos/{owner}/{repo}/code-security-configurationreadUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/appsreadUATIATGET /repos/{owner}/{repo}/interaction-limitsreadUATIATGET /repos/{owner}/{repo}/invitationsreadUATIATGET /repos/{owner}/{repo}/keysreadUATIATGET /repos/{owner}/{repo}/keys/{key_id}readUATIATGET /repos/{owner}/{repo}/tags/protectionreadUATIATGET /repos/{owner}/{repo}/teamsreadUATIATGET /repos/{owner}/{repo}/traffic/clonesreadUATIATGET /repos/{owner}/{repo}/traffic/popular/pathsreadUATIATGET /repos/{owner}/{repo}/traffic/popular/referrersreadUATIATGET /repos/{owner}/{repo}/traffic/viewsreadUATIATGET /repos/{owner}/{repo}/vulnerability-alertsreadUATIATGET /user/repository_invitationsreadUATRepository permissions for "Attestations"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/attestationswriteUATIATGET /repos/{owner}/{repo}/attestations/{subject_digest}readUATIATRepository permissions for "Checks"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/check-runswriteUATIATPATCH /repos/{owner}/{repo}/check-runs/{check_run_id}writeUATIATPOST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequestwriteUATIATPOST /repos/{owner}/{repo}/check-suiteswriteUATIATPATCH /repos/{owner}/{repo}/check-suites/preferenceswriteUATIATPOST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequestwriteUATIATGET /repos/{owner}/{repo}/check-runs/{check_run_id}readUATIATGET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotationsreadUATIATGET /repos/{owner}/{repo}/check-suites/{check_suite_id}readUATIATGET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runsreadUATIATGET /repos/{owner}/{repo}/commits/{ref}/check-runsreadUATIATGET /repos/{owner}/{repo}/commits/{ref}/check-suitesreadUATIATRepository permissions for "Code scanning alerts"EndpointAccessToken typesAdditional permissionsPATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}writeUATIATPOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixwriteUATIATDELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}writeUATIATPOST /repos/{owner}/{repo}/code-scanning/sarifswriteUATIATGET /orgs/{org}/code-scanning/alertsreadUATIATGET /repos/{owner}/{repo}/code-scanning/alertsreadUATIATGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}readUATIATGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixreadUATIATGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instancesreadUATIATGET /repos/{owner}/{repo}/code-scanning/analysesreadUATIATGET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}readUATIATGET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}readUATIATRepository permissions for "Codespaces lifecycle admin"EndpointAccessToken typesAdditional permissionsPOST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stopwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /user/codespaces/{codespace_name}/exportswriteUATPOST /user/codespaces/{codespace_name}/startwriteUATPOST /user/codespaces/{codespace_name}/stopwriteUATGET /user/codespaces/{codespace_name}/exports/{export_id}readUATRepository permissions for "Codespaces metadata"EndpointAccessToken typesAdditional permissionsGET /repos/{owner}/{repo}/codespaces/devcontainersreadUATIATGET /repos/{owner}/{repo}/codespaces/machinesreadUATIATGET /user/codespaces/{codespace_name}/machinesreadUATRepository permissions for "Codespaces secrets"EndpointAccessToken typesAdditional permissionsGET /repos/{owner}/{repo}/codespaces/secretswriteUATIATGET /repos/{owner}/{repo}/codespaces/secrets/public-keywriteUATIATGET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}writeUATIATPUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}writeUATIATDELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}writeUATIATRepository permissions for "Codespaces"EndpointAccessToken typesAdditional permissionsDELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/codespaceswriteUATGET /repos/{owner}/{repo}/codespaces/newwriteUATGET /repos/{owner}/{repo}/codespaces/permissions_checkwriteUATPOST /repos/{owner}/{repo}/pulls/{pull_number}/codespaceswriteUATPOST /user/codespaceswriteUATPATCH /user/codespaces/{codespace_name}writeUATDELETE /user/codespaces/{codespace_name}writeUATPOST /user/codespaces/{codespace_name}/publishwriteUATGET /orgs/{org}/codespacesreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/members/{username}/codespacesreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/codespacesreadUATGET /user/codespacesreadUATGET /user/codespaces/{codespace_name}readUATRepository permissions for "Commit statuses"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/statuses/{sha}writeUATIATGET /repos/{owner}/{repo}/commits/{ref}/statusreadUATIATGET /repos/{owner}/{repo}/commits/{ref}/statusesreadUATIATRepository permissions for "Contents"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/branches/{branch}/renamewriteUATIATPOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commitswriteUATIATDELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}writeUATIATPOST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyseswriteUATIATPATCH /repos/{owner}/{repo}/comments/{comment_id}writeUATIATDELETE /repos/{owner}/{repo}/comments/{comment_id}writeUATIATPOST /repos/{owner}/{repo}/comments/{comment_id}/reactionswriteUATIATDELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}writeUATIATPUT /repos/{owner}/{repo}/contents/{path}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/contents/{path}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/contents/{path}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/contents/{path}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/dependency-graph/snapshotswriteUATIATPOST /repos/{owner}/{repo}/dispatcheswriteUATIATPOST /repos/{owner}/{repo}/git/blobswriteUATIATPOST /repos/{owner}/{repo}/git/commitswriteUATIATPOST /repos/{owner}/{repo}/git/refswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/git/refswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/git/refs/{ref}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/git/refs/{ref}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/git/refs/{ref}writeUATIATPOST /repos/{owner}/{repo}/git/tagswriteUATIATPOST /repos/{owner}/{repo}/git/treeswriteUATIATPUT /repos/{owner}/{repo}/importwriteUATPATCH /repos/{owner}/{repo}/importwriteUATDELETE /repos/{owner}/{repo}/importwriteUATPATCH /repos/{owner}/{repo}/import/authors/{author_id}writeUATPATCH /repos/{owner}/{repo}/import/lfswriteUATPOST /repos/{owner}/{repo}/merge-upstreamwriteUATIATPOST /repos/{owner}/{repo}/mergeswriteUATIATPUT /repos/{owner}/{repo}/pulls/{pull_number}/mergewriteUATIATPOST /repos/{owner}/{repo}/releaseswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/releaseswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}writeUATIATDELETE /repos/{owner}/{repo}/releases/assets/{asset_id}writeUATIATPOST /repos/{owner}/{repo}/releases/generate-noteswriteUATIATPATCH /repos/{owner}/{repo}/releases/{release_id}writeUATIATDELETE /repos/{owner}/{repo}/releases/{release_id}writeUATIATPOST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasseswriteUATGET /repos/{owner}/{repo}/activityreadUATIATGET /repos/{owner}/{repo}/branchesreadUATIATGET /repos/{owner}/{repo}/branches/{branch}readUATIATGET /repos/{owner}/{repo}/code-scanning/codeql/databasesreadUATIATGET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}readUATIATGET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}readUATIATGET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}readUATIATGET /repos/{owner}/{repo}/codeowners/errorsreadUATIATGET /repos/{owner}/{repo}/commitsreadUATIATGET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-headreadUATIATPOST /repos/{owner}/{repo}/commits/{commit_sha}/commentsreadUATIATGET /repos/{owner}/{repo}/commits/{ref}readUATIATGET /repos/{owner}/{repo}/community/profilereadUATIATGET /repos/{owner}/{repo}/compare/{basehead}readUATIATGET /repos/{owner}/{repo}/contents/{path}readUATIATGET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}readUATIATGET /repos/{owner}/{repo}/dependency-graph/sbomreadUATIATPOST /repos/{owner}/{repo}/forksreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/git/blobs/{file_sha}readUATIATGET /repos/{owner}/{repo}/git/commits/{commit_sha}readUATIATGET /repos/{owner}/{repo}/git/matching-refs/{ref}readUATIATGET /repos/{owner}/{repo}/git/ref/{ref}readUATIATGET /repos/{owner}/{repo}/git/tags/{tag_sha}readUATIATGET /repos/{owner}/{repo}/git/trees/{tree_sha}readUATIATGET /repos/{owner}/{repo}/importreadUATGET /repos/{owner}/{repo}/import/authorsreadUATGET /repos/{owner}/{repo}/import/large_filesreadUATGET /repos/{owner}/{repo}/pulls/{pull_number}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/releasesreadUATIATGET /repos/{owner}/{repo}/releases/assets/{asset_id}readUATIATGET /repos/{owner}/{repo}/releases/latestreadUATIATGET /repos/{owner}/{repo}/releases/tags/{tag}readUATIATGET /repos/{owner}/{repo}/releases/{release_id}readUATIATGET /repos/{owner}/{repo}/releases/{release_id}/assetsreadUATIATGET /repos/{owner}/{repo}/tarball/{ref}readUATIATGET /repos/{owner}/{repo}/zipball/{ref}readUATIATRepository permissions for "Custom properties"EndpointAccessToken typesAdditional permissionsPATCH /repos/{owner}/{repo}/properties/valueswriteUATIATRepository permissions for "Dependabot alerts"EndpointAccessToken typesAdditional permissionsPATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}writeUATIATGET /orgs/{org}/dependabot/alertsreadUATIATGET /repos/{owner}/{repo}/dependabot/alertsreadUATIATGET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}readUATIATRepository permissions for "Dependabot secrets"EndpointAccessToken typesAdditional permissionsPUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}writeUATIATDELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}writeUATIATGET /repos/{owner}/{repo}/dependabot/secretsreadUATIATGET /repos/{owner}/{repo}/dependabot/secrets/public-keyreadUATIATGET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}readUATIATRepository permissions for "Deployments"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rulewriteIATPOST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentswriteUATIATPOST /repos/{owner}/{repo}/deploymentswriteUATIATDELETE /repos/{owner}/{repo}/deployments/{deployment_id}writeUATIATPOST /repos/{owner}/{repo}/deployments/{deployment_id}/statuseswriteUATIATGET /repos/{owner}/{repo}/deploymentsreadUATIATGET /repos/{owner}/{repo}/deployments/{deployment_id}readUATIATGET /repos/{owner}/{repo}/deployments/{deployment_id}/statusesreadUATIATGET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}readUATIATRepository permissions for "Environments"EndpointAccessToken typesAdditional permissionsPUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}writeUATIATDELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}writeUATIATPOST /repos/{owner}/{repo}/environments/{environment_name}/variableswriteUATIATPATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}writeUATIATDELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}writeUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/secretsreadUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-keyreadUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}readUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/variablesreadUATIATGET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}readUATIATRepository permissions for "Issues"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/issueswriteUATIATPATCH /repos/{owner}/{repo}/issues/comments/{comment_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionswriteUATIATDELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}writeUATIATPATCH /repos/{owner}/{repo}/issues/{issue_number}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/assigneeswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/assigneeswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/commentswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/labelswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/issues/{issue_number}/labelswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/labelswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/issues/{issue_number}/lockwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/lockwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/reactionswriteUATIATDELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}writeUATIATDELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issuewriteUATIATPOST /repos/{owner}/{repo}/issues/{issue_number}/sub_issueswriteUATIATPATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/prioritywriteUATIATPOST /repos/{owner}/{repo}/labelswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/labels/{name}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/labels/{name}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/milestoneswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/milestones/{milestone_number}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/milestones/{milestone_number}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/assigneesreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/assignees/{assignee}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issuesreadUATIATGET /repos/{owner}/{repo}/issues/commentsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/comments/{comment_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionsreadUATIATGET /repos/{owner}/{repo}/issues/eventsreadUATIATGET /repos/{owner}/{repo}/issues/events/{event_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}readUATIATGET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/commentsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/eventsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/labelsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/reactionsreadUATIATGET /repos/{owner}/{repo}/issues/{issue_number}/sub_issuesreadUATIATGET /repos/{owner}/{repo}/issues/{issue_number}/timelinereadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/labelsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/labels/{name}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestonesreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestones/{milestone_number}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestones/{milestone_number}/labelsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Repository permissions for "Metadata"EndpointAccessToken typesAdditional permissionsPUT /orgs/{org}/actions/permissions/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/reposreadUATIATGET /repos/{owner}/{repo}readUATIATGET /repos/{owner}/{repo}/collaboratorsreadUATIATGET /repos/{owner}/{repo}/collaborators/{username}readUATIATGET /repos/{owner}/{repo}/collaborators/{username}/permissionreadUATIATGET /repos/{owner}/{repo}/commentsreadUATIATGET /repos/{owner}/{repo}/comments/{comment_id}readUATIATGET /repos/{owner}/{repo}/comments/{comment_id}/reactionsreadUATIATGET /repos/{owner}/{repo}/commits/{commit_sha}/commentsreadUATIATGET /repos/{owner}/{repo}/contributorsreadUATIATGET /repos/{owner}/{repo}/eventsreadUATIATGET /repos/{owner}/{repo}/forksreadUATIATGET /repos/{owner}/{repo}/languagesreadUATIATGET /repos/{owner}/{repo}/licensereadUATIATGET /repos/{owner}/{repo}/private-vulnerability-reportingreadUATIATGET /repos/{owner}/{repo}/properties/valuesreadUATIATGET /repos/{owner}/{repo}/rules/branches/{branch}readUATIATGET /repos/{owner}/{repo}/rulesetsreadUATIATGET /repos/{owner}/{repo}/rulesets/{ruleset_id}readUATIATGET /repos/{owner}/{repo}/stargazersreadUATIATGET /repos/{owner}/{repo}/stats/code_frequencyreadUATIATGET /repos/{owner}/{repo}/stats/commit_activityreadUATIATGET /repos/{owner}/{repo}/stats/contributorsreadUATIATGET /repos/{owner}/{repo}/stats/participationreadUATIATGET /repos/{owner}/{repo}/stats/punch_cardreadUATIATGET /repos/{owner}/{repo}/subscribersreadUATIATGET /repos/{owner}/{repo}/tagsreadUATIATGET /repos/{owner}/{repo}/topicsreadUATIATGET /repositoriesreadUATIATGET /search/labelsreadUATIATPUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}readUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}readUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /user/installations/{installation_id}/repositoriesreadUATGET /user/reposreadUATGET /user/starred/{owner}/{repo}readUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /user/starred/{owner}/{repo}readUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /user/starred/{owner}/{repo}readUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /users/{username}/reposreadUATIATRepository permissions for "Pages"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/pageswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/pageswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/pageswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/pages/buildswriteUATIATPOST /repos/{owner}/{repo}/pages/deploymentswriteUATIATPOST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancelwriteUATIATGET /repos/{owner}/{repo}/pages/healthwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/pagesreadUATIATGET /repos/{owner}/{repo}/pages/buildsreadUATIATGET /repos/{owner}/{repo}/pages/builds/latestreadUATIATGET /repos/{owner}/{repo}/pages/builds/{build_id}readUATIATGET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}readUATIATRepository permissions for "Projects"EndpointAccessToken typesAdditional permissionsPATCH /projects/columns/cards/{card_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/columns/cards/{card_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/cards/{card_id}/moveswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /projects/columns/{column_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/columns/{column_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/{column_id}/cardswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/{column_id}/moveswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /projects/{project_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/{project_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/collaboratorswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /projects/{project_id}/collaborators/{username}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/{project_id}/collaborators/{username}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/collaborators/{username}/permissionwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/{project_id}/columnswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/projectswriteUATIATGET /projects/columns/cards/{card_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/columns/{column_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/columns/{column_id}/cardsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/columnsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/projectsreadUATIATRepository permissions for "Pull requests"EndpointAccessToken typesAdditional permissionsPATCH /repos/{owner}/{repo}/issues/comments/{comment_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/issues/{issue_number}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/assigneeswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/assigneeswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/commentswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/labelswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/issues/{issue_number}/labelswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/labelswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/issues/{issue_number}/lockwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/lockwriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/labelswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/labels/{name}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/labels/{name}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/milestoneswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/milestones/{milestone_number}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/milestones/{milestone_number}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/pullswriteUATIATPATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}writeUATIATDELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}writeUATIATPOST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionswriteUATIATDELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}writeUATIATPATCH /repos/{owner}/{repo}/pulls/{pull_number}writeUATIATPOST /repos/{owner}/{repo}/pulls/{pull_number}/commentswriteUATIATPOST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replieswriteUATIATPOST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewerswriteUATIATDELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewerswriteUATIATPOST /repos/{owner}/{repo}/pulls/{pull_number}/reviewswriteUATIATPUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}writeUATIATDELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}writeUATIATPUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissalswriteUATIATPOST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/eventswriteUATIATPUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branchwriteUATIATGET /repos/{owner}/{repo}/assigneesreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/assignees/{assignee}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/commits/{commit_sha}/pullsreadUATIATGET /repos/{owner}/{repo}/issues/commentsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/comments/{comment_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/events/{event_id}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/commentsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/eventsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/labelsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/timelinereadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/labelsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/labels/{name}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestonesreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestones/{milestone_number}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestones/{milestone_number}/labelsreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/pullsreadUATIATGET /repos/{owner}/{repo}/pulls/commentsreadUATIATGET /repos/{owner}/{repo}/pulls/comments/{comment_id}readUATIATGET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionsreadUATIATGET /repos/{owner}/{repo}/pulls/{pull_number}readUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/pulls/{pull_number}/commentsreadUATIATGET /repos/{owner}/{repo}/pulls/{pull_number}/commitsreadUATIATGET /repos/{owner}/{repo}/pulls/{pull_number}/filesreadUATIATGET /repos/{owner}/{repo}/pulls/{pull_number}/mergereadUATIATGET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersreadUATIATGET /repos/{owner}/{repo}/pulls/{pull_number}/reviewsreadUATIATGET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}readUATIATGET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/commentsreadUATIATRepository permissions for "Repository security advisories"EndpointAccessToken typesAdditional permissionsGET /orgs/{org}/security-advisorieswriteUATIATPOST /repos/{owner}/{repo}/security-advisorieswriteUATIATPOST /repos/{owner}/{repo}/security-advisories/reportswriteUATIATPATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}writeUATIATPOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cvewriteUATIATGET /repos/{owner}/{repo}/security-advisoriesreadUATIATGET /repos/{owner}/{repo}/security-advisories/{ghsa_id}readUATIATPOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forksreadUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Repository permissions for "Secret scanning alerts"EndpointAccessToken typesAdditional permissionsPATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}writeUATIATGET /orgs/{org}/secret-scanning/alertsreadUATIATGET /repos/{owner}/{repo}/secret-scanning/alertsreadUATIATGET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}readUATIATGET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locationsreadUATIATGET /repos/{owner}/{repo}/secret-scanning/scan-historyreadUATIATRepository permissions for "Secrets"EndpointAccessToken typesAdditional permissionsPUT /repos/{owner}/{repo}/actions/secrets/{secret_name}writeUATIATDELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}writeUATIATGET /repos/{owner}/{repo}/actions/organization-secretsreadUATIATGET /repos/{owner}/{repo}/actions/secretsreadUATIATGET /repos/{owner}/{repo}/actions/secrets/public-keyreadUATIATGET /repos/{owner}/{repo}/actions/secrets/{secret_name}readUATIATRepository permissions for "Variables"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/actions/variableswriteUATIATPATCH /repos/{owner}/{repo}/actions/variables/{name}writeUATIATDELETE /repos/{owner}/{repo}/actions/variables/{name}writeUATIATGET /repos/{owner}/{repo}/actions/organization-variablesreadUATIATGET /repos/{owner}/{repo}/actions/variablesreadUATIATGET /repos/{owner}/{repo}/actions/variables/{name}readUATIATRepository permissions for "Webhooks"EndpointAccessToken typesAdditional permissionsPOST /repos/{owner}/{repo}/hookswriteUATIATPATCH /repos/{owner}/{repo}/hooks/{hook_id}writeUATIATDELETE /repos/{owner}/{repo}/hooks/{hook_id}writeUATIATPATCH /repos/{owner}/{repo}/hooks/{hook_id}/configwriteUATIATPOST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attemptswriteUATIATGET /repos/{owner}/{repo}/hooksreadUATIATGET /repos/{owner}/{repo}/hooks/{hook_id}readUATIATGET /repos/{owner}/{repo}/hooks/{hook_id}/configreadUATIATGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveriesreadUATIATGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}readUATIATPOST /repos/{owner}/{repo}/hooks/{hook_id}/pingsreadUATIATPOST /repos/{owner}/{repo}/hooks/{hook_id}/testsreadUATIATRepository permissions for "Workflows"EndpointAccessToken typesAdditional permissionsPUT /repos/{owner}/{repo}/contents/{path}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/contents/{path}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/git/refswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/git/refs/{ref}writeUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/releaseswriteUATIATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.User permissions for "Block another user"EndpointAccessToken typesAdditional permissionsPUT /user/blocks/{username}writeUATDELETE /user/blocks/{username}writeUATGET /user/blocksreadUATGET /user/blocks/{username}readUATUser permissions for "Codespaces user secrets"EndpointAccessToken typesAdditional permissionsPUT /user/codespaces/secrets/{secret_name}writeUATDELETE /user/codespaces/secrets/{secret_name}writeUATPUT /user/codespaces/secrets/{secret_name}/repositorieswriteUATPUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}writeUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}writeUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /user/codespaces/secretsreadUATGET /user/codespaces/secrets/public-keyreadUATGET /user/codespaces/secrets/{secret_name}readUATGET /user/codespaces/secrets/{secret_name}/repositoriesreadUATUser permissions for "Email addresses"EndpointAccessToken typesAdditional permissionsPATCH /user/email/visibilitywriteUATPOST /user/emailswriteUATDELETE /user/emailswriteUATGET /user/emailsreadUATGET /user/public_emailsreadUATUser permissions for "Followers"EndpointAccessToken typesAdditional permissionsPUT /user/following/{username}writeUATDELETE /user/following/{username}writeUATGET /user/followersreadUATGET /user/followingreadUATGET /user/following/{username}readUATUser permissions for "GPG keys"EndpointAccessToken typesAdditional permissionsPOST /user/gpg_keyswriteUATDELETE /user/gpg_keys/{gpg_key_id}writeUATGET /user/gpg_keysreadUATGET /user/gpg_keys/{gpg_key_id}readUATUser permissions for "Gists"EndpointAccessToken typesAdditional permissionsPOST /gistswriteUATPATCH /gists/{gist_id}writeUATDELETE /gists/{gist_id}writeUATPOST /gists/{gist_id}/commentswriteUATPATCH /gists/{gist_id}/comments/{comment_id}writeUATDELETE /gists/{gist_id}/comments/{comment_id}writeUATPOST /gists/{gist_id}/forkswriteUATPUT /gists/{gist_id}/starwriteUATDELETE /gists/{gist_id}/starwriteUATUser permissions for "Git SSH keys"EndpointAccessToken typesAdditional permissionsPOST /user/keyswriteUATDELETE /user/keys/{key_id}writeUATGET /user/keysreadUATGET /user/keys/{key_id}readUATGET /users/{username}/keysreadUATIATUser permissions for "Interaction limits"EndpointAccessToken typesAdditional permissionsPUT /user/interaction-limitswriteUATDELETE /user/interaction-limitswriteUATGET /user/interaction-limitsreadUATUser permissions for "Plan"EndpointAccessToken typesAdditional permissionsGET /users/{username}/settings/billing/actionsreadUATGET /users/{username}/settings/billing/packagesreadUATGET /users/{username}/settings/billing/shared-storagereadUATUser permissions for "Profile"EndpointAccessToken typesAdditional permissionsPATCH /userwriteUATPOST /user/social_accountswriteUATDELETE /user/social_accountswriteUATUser permissions for "SSH signing keys"EndpointAccessToken typesAdditional permissionsPOST /user/ssh_signing_keyswriteUATDELETE /user/ssh_signing_keys/{ssh_signing_key_id}writeUATGET /user/ssh_signing_keysreadUATGET /user/ssh_signing_keys/{ssh_signing_key_id}readUATUser permissions for "Starring"EndpointAccessToken typesAdditional permissionsPUT /user/starred/{owner}/{repo}writeUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /user/starred/{owner}/{repo}writeUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /user/starredreadUATGET /user/starred/{owner}/{repo}readUATMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /users/{username}/starredreadUATIATUser permissions for "Watching"EndpointAccessToken typesAdditional permissionsGET /user/subscriptionsreadUATGET /users/{username}/subscriptionsreadUATIAT\n\n\n\nREST API/Authentication/Permissions for fine-grained PATsPermissions required for fine-grained personal access tokensFor each permission granted to a fine-grained personal access token, these are the REST API endpoints that the app can use.In this articleAbout permissions required for fine-grained personal access tokenOrganization permissions for "API Insights"Organization permissions for "Administration"Organization permissions for "Blocking users"Organization permissions for "Campaigns"Organization permissions for "Custom organization roles"Organization permissions for "Custom properties"Organization permissions for "Events"Organization permissions for "GitHub Copilot Business"Organization permissions for "Issue Types"Organization permissions for "Members"Organization permissions for "Network configurations"Organization permissions for "Organization codespaces secrets"Organization permissions for "Organization codespaces settings"Organization permissions for "Organization codespaces"Organization permissions for "Organization dependabot secrets"Organization permissions for "Organization private registries"Organization permissions for "Personal access token requests"Organization permissions for "Personal access tokens"Organization permissions for "Projects"Organization permissions for "Secrets"Organization permissions for "Self-hosted runners"Organization permissions for "Team discussions"Organization permissions for "Variables"Organization permissions for "Webhooks"Repository permissions for "Actions"Repository permissions for "Administration"Repository permissions for "Attestations"Repository permissions for "Checks"Repository permissions for "Code scanning alerts"Repository permissions for "Codespaces lifecycle admin"Repository permissions for "Codespaces metadata"Repository permissions for "Codespaces secrets"Repository permissions for "Codespaces"Repository permissions for "Commit statuses"Repository permissions for "Contents"Repository permissions for "Custom properties"Repository permissions for "Dependabot alerts"Repository permissions for "Dependabot secrets"Repository permissions for "Deployments"Repository permissions for "Environments"Repository permissions for "Issues"Repository permissions for "Metadata"Repository permissions for "Pages"Repository permissions for "Projects"Repository permissions for "Pull requests"Repository permissions for "Repository security advisories"Repository permissions for "Secret scanning alerts"Repository permissions for "Secrets"Repository permissions for "Variables"Repository permissions for "Webhooks"Repository permissions for "Workflows"User permissions for "Block another user"User permissions for "Codespaces user secrets"User permissions for "Email addresses"User permissions for "Followers"User permissions for "GPG keys"User permissions for "Gists"User permissions for "Git SSH keys"User permissions for "Interaction limits"User permissions for "Plan"User permissions for "Profile"User permissions for "SSH signing keys"User permissions for "Starring"User permissions for "Watching"About permissions required for fine-grained personal access token
When you create a fine-grained personal access token, you grant it a set of permissions. Permissions define what resources the GitHub App can access via the API. For more information, see Managing your personal access tokens.
To help you choose the correct permissions, you will receive the X-Accepted-GitHub-Permissions header in the REST API response. The header will tell you what permissions are required in order to access the endpoint. For more information, see Troubleshooting the REST API.
These permissions are required to access private resources. Some endpoints can also be used to access public resources without these permissions. To see whether an endpoint can access public resources without a permission, see the documentation for that endpoint.
Some endpoints require more than one permission. Other endpoints work with any one permission from a set of permissions. In these cases, the "Additional permissions" column will include a checkmark. For full details about the permissions that are required to use the endpoint, see the documentation for that endpoint.Organization permissions for "API Insights"EndpointAccessAdditional permissionsGET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}readGET /orgs/{org}/insights/api/subject-statsreadGET /orgs/{org}/insights/api/summary-statsreadGET /orgs/{org}/insights/api/summary-stats/users/{user_id}readGET /orgs/{org}/insights/api/summary-stats/{actor_type}/{actor_id}readGET /orgs/{org}/insights/api/time-statsreadGET /orgs/{org}/insights/api/time-stats/users/{user_id}readGET /orgs/{org}/insights/api/time-stats/{actor_type}/{actor_id}readGET /orgs/{org}/insights/api/user-stats/{user_id}readOrganization permissions for "Administration"EndpointAccessAdditional permissionsPATCH /orgs/{org}writeDELETE /orgs/{org}writePOST /orgs/{org}/actions/hosted-runnerswritePATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}writeDELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}writePUT /orgs/{org}/actions/oidc/customization/subwritePUT /orgs/{org}/actions/permissionswritePUT /orgs/{org}/actions/permissions/repositorieswritePUT /orgs/{org}/actions/permissions/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/permissions/selected-actionswritePUT /orgs/{org}/actions/permissions/workflowwriteGET /orgs/{org}/code-security/configurationswritePOST /orgs/{org}/code-security/configurationswriteGET /orgs/{org}/code-security/configurations/defaultswriteDELETE /orgs/{org}/code-security/configurations/detachwriteGET /orgs/{org}/code-security/configurations/{configuration_id}writePATCH /orgs/{org}/code-security/configurations/{configuration_id}writeDELETE /orgs/{org}/code-security/configurations/{configuration_id}writePOST /orgs/{org}/code-security/configurations/{configuration_id}/attachwritePUT /orgs/{org}/code-security/configurations/{configuration_id}/defaultswriteGET /orgs/{org}/code-security/configurations/{configuration_id}/repositorieswritePOST /orgs/{org}/copilot/billing/selected_teamswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/copilot/billing/selected_teamswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /orgs/{org}/copilot/billing/selected_userswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/copilot/billing/selected_userswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/interaction-limitswriteDELETE /orgs/{org}/interaction-limitswriteGET /orgs/{org}/rulesetswritePOST /orgs/{org}/rulesetswriteGET /orgs/{org}/rulesets/rule-suiteswriteGET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}writeGET /orgs/{org}/rulesets/{ruleset_id}writePUT /orgs/{org}/rulesets/{ruleset_id}writeDELETE /orgs/{org}/rulesets/{ruleset_id}writeGET /orgs/{org}/rulesets/{ruleset_id}/historywriteGET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}writePUT /orgs/{org}/security-managers/teams/{team_slug}writeDELETE /orgs/{org}/security-managers/teams/{team_slug}writePOST /orgs/{org}/{security_product}/{enablement}writeGET /organizations/{org}/settings/billing/usagereadGET /orgs/{org}/actions/cache/usagereadGET /orgs/{org}/actions/cache/usage-by-repositoryreadGET /orgs/{org}/actions/hosted-runnersreadGET /orgs/{org}/actions/hosted-runners/images/github-ownedreadGET /orgs/{org}/actions/hosted-runners/images/partnerreadGET /orgs/{org}/actions/hosted-runners/limitsreadGET /orgs/{org}/actions/hosted-runners/machine-sizesreadGET /orgs/{org}/actions/hosted-runners/platformsreadGET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}readGET /orgs/{org}/actions/oidc/customization/subreadGET /orgs/{org}/actions/permissionsreadGET /orgs/{org}/actions/permissions/repositoriesreadGET /orgs/{org}/actions/permissions/selected-actionsreadGET /orgs/{org}/actions/permissions/workflowreadGET /orgs/{org}/copilot/billingreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/billing/seatsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/metricsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/installationsreadGET /orgs/{org}/interaction-limitsreadGET /orgs/{org}/members/{username}/copilotreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/security-managersreadGET /orgs/{org}/settings/billing/actionsreadGET /orgs/{org}/settings/billing/packagesreadGET /orgs/{org}/settings/billing/shared-storagereadGET /orgs/{org}/team/{team_slug}/copilot/metricsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Organization permissions for "Blocking users"EndpointAccessAdditional permissionsPUT /orgs/{org}/blocks/{username}writeDELETE /orgs/{org}/blocks/{username}writeGET /orgs/{org}/blocksreadGET /orgs/{org}/blocks/{username}readOrganization permissions for "Campaigns"EndpointAccessAdditional permissionsPOST /orgs/{org}/campaignswritePATCH /orgs/{org}/campaigns/{campaign_number}writeDELETE /orgs/{org}/campaigns/{campaign_number}writeGET /orgs/{org}/campaignsreadGET /orgs/{org}/campaigns/{campaign_number}readOrganization permissions for "Custom organization roles"EndpointAccessAdditional permissionsGET /orgs/{org}/organization-rolesreadGET /orgs/{org}/organization-roles/{role_id}readOrganization permissions for "Custom properties"EndpointAccessAdditional permissionsPATCH /orgs/{org}/properties/schemaadminPUT /orgs/{org}/properties/schema/{custom_property_name}adminDELETE /orgs/{org}/properties/schema/{custom_property_name}adminPATCH /orgs/{org}/properties/valueswriteGET /orgs/{org}/properties/schemareadGET /orgs/{org}/properties/schema/{custom_property_name}readGET /orgs/{org}/properties/valuesreadOrganization permissions for "Events"EndpointAccessAdditional permissionsGET /users/{username}/events/orgs/{org}readOrganization permissions for "GitHub Copilot Business"EndpointAccessAdditional permissionsPOST /orgs/{org}/copilot/billing/selected_teamswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/copilot/billing/selected_teamswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /orgs/{org}/copilot/billing/selected_userswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/copilot/billing/selected_userswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/billingreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/billing/seatsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/copilot/metricsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/members/{username}/copilotreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/team/{team_slug}/copilot/metricsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Organization permissions for "Issue Types"EndpointAccessAdditional permissionsPOST /orgs/{org}/issue-typeswritePUT /orgs/{org}/issue-types/{issue_type_id}writeDELETE /orgs/{org}/issue-types/{issue_type_id}writeGET /orgs/{org}/issue-typesreadOrganization permissions for "Members"EndpointAccessAdditional permissionsPOST /orgs/{org}/invitationswriteDELETE /orgs/{org}/invitations/{invitation_id}writeDELETE /orgs/{org}/members/{username}writePUT /orgs/{org}/memberships/{username}writeDELETE /orgs/{org}/memberships/{username}writeDELETE /orgs/{org}/organization-roles/teams/{team_slug}writePUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}writeDELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}writeDELETE /orgs/{org}/organization-roles/users/{username}writePUT /orgs/{org}/organization-roles/users/{username}/{role_id}writeDELETE /orgs/{org}/organization-roles/users/{username}/{role_id}writePUT /orgs/{org}/outside_collaborators/{username}writeDELETE /orgs/{org}/outside_collaborators/{username}writePUT /orgs/{org}/public_members/{username}writeDELETE /orgs/{org}/public_members/{username}writePOST /orgs/{org}/teamswritePUT /teams/{team_id}/members/{username}writeDELETE /teams/{team_id}/members/{username}writePATCH /user/memberships/orgs/{org}writeGET /orgs/{org}/failed_invitationsreadGET /orgs/{org}/invitationsreadGET /orgs/{org}/invitations/{invitation_id}/teamsreadGET /orgs/{org}/membersreadGET /orgs/{org}/members/{username}readGET /orgs/{org}/memberships/{username}readGET /orgs/{org}/organization-roles/{role_id}/teamsreadGET /orgs/{org}/organization-roles/{role_id}/usersreadGET /orgs/{org}/outside_collaboratorsreadGET /orgs/{org}/public_membersreadGET /orgs/{org}/public_members/{username}readGET /orgs/{org}/teamsreadGET /orgs/{org}/teams/{team_slug}/projectsreadGET /orgs/{org}/teams/{team_slug}/projects/{project_id}readPUT /orgs/{org}/teams/{team_slug}/projects/{project_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /teams/{team_id}/members/{username}readGET /user/memberships/orgs/{org}readOrganization permissions for "Network configurations"EndpointAccessAdditional permissionsPOST /orgs/{org}/settings/network-configurationswritePATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}writeDELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}writeGET /orgs/{org}/settings/network-configurationsreadGET /orgs/{org}/settings/network-configurations/{network_configuration_id}readGET /orgs/{org}/settings/network-settings/{network_settings_id}readOrganization permissions for "Organization codespaces secrets"EndpointAccessAdditional permissionsPUT /orgs/{org}/codespaces/secrets/{secret_name}writeDELETE /orgs/{org}/codespaces/secrets/{secret_name}writePUT /orgs/{org}/codespaces/secrets/{secret_name}/repositorieswritePUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/codespaces/secretsreadGET /orgs/{org}/codespaces/secrets/public-keyreadGET /orgs/{org}/codespaces/secrets/{secret_name}readGET /orgs/{org}/codespaces/secrets/{secret_name}/repositoriesreadOrganization permissions for "Organization codespaces settings"EndpointAccessAdditional permissionsPUT /orgs/{org}/codespaces/accesswritePOST /orgs/{org}/codespaces/access/selected_userswriteDELETE /orgs/{org}/codespaces/access/selected_userswriteOrganization permissions for "Organization codespaces"EndpointAccessAdditional permissionsDELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stopwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/codespacesreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/members/{username}/codespacesreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Organization permissions for "Organization dependabot secrets"EndpointAccessAdditional permissionsPUT /orgs/{org}/dependabot/secrets/{secret_name}writeDELETE /orgs/{org}/dependabot/secrets/{secret_name}writePUT /orgs/{org}/dependabot/secrets/{secret_name}/repositorieswritePUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/dependabot/secretsreadGET /orgs/{org}/dependabot/secrets/public-keyreadGET /orgs/{org}/dependabot/secrets/{secret_name}readGET /orgs/{org}/dependabot/secrets/{secret_name}/repositoriesreadOrganization permissions for "Organization private registries"EndpointAccessAdditional permissionsPOST /orgs/{org}/private-registrieswritePATCH /orgs/{org}/private-registries/{secret_name}writeDELETE /orgs/{org}/private-registries/{secret_name}writeGET /orgs/{org}/private-registriesreadGET /orgs/{org}/private-registries/public-keyreadGET /orgs/{org}/private-registries/{secret_name}readOrganization permissions for "Personal access token requests"EndpointAccessAdditional permissionsPOST /orgs/{org}/personal-access-token-requestswritePOST /orgs/{org}/personal-access-token-requests/{pat_request_id}writeGET /orgs/{org}/personal-access-token-requestsreadGET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositoriesreadOrganization permissions for "Personal access tokens"EndpointAccessAdditional permissionsPOST /orgs/{org}/personal-access-tokenswritePOST /orgs/{org}/personal-access-tokens/{pat_id}writeGET /orgs/{org}/personal-access-tokensreadGET /orgs/{org}/personal-access-tokens/{pat_id}/repositoriesreadOrganization permissions for "Projects"EndpointAccessAdditional permissionsPUT /orgs/{org}/teams/{team_slug}/projects/{project_id}adminMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}adminMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/collaboratorsadminMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /projects/{project_id}/collaborators/{username}adminMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/{project_id}/collaborators/{username}adminMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/collaborators/{username}/permissionadminMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /orgs/{org}/projectswritePATCH /projects/columns/cards/{card_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/columns/cards/{card_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/cards/{card_id}/moveswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /projects/columns/{column_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/columns/{column_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/{column_id}/cardswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/{column_id}/moveswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /projects/{project_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/{project_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/{project_id}/columnswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/projectsreadGET /projects/columns/cards/{card_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/columns/{column_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/columns/{column_id}/cardsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/columnsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Organization permissions for "Secrets"EndpointAccessAdditional permissionsPUT /orgs/{org}/actions/secrets/{secret_name}writeDELETE /orgs/{org}/actions/secrets/{secret_name}writePUT /orgs/{org}/actions/secrets/{secret_name}/repositorieswritePUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/actions/secretsreadGET /orgs/{org}/actions/secrets/public-keyreadGET /orgs/{org}/actions/secrets/{secret_name}readGET /orgs/{org}/actions/secrets/{secret_name}/repositoriesreadOrganization permissions for "Self-hosted runners"EndpointAccessAdditional permissionsPOST /orgs/{org}/actions/runner-groupswritePATCH /orgs/{org}/actions/runner-groups/{runner_group_id}writeDELETE /orgs/{org}/actions/runner-groups/{runner_group_id}writePUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositorieswritePUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runnerswritePUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}writeDELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}writePOST /orgs/{org}/actions/runners/generate-jitconfigwritePOST /orgs/{org}/actions/runners/registration-tokenwritePOST /orgs/{org}/actions/runners/remove-tokenwriteDELETE /orgs/{org}/actions/runners/{runner_id}writePOST /orgs/{org}/actions/runners/{runner_id}/labelswritePUT /orgs/{org}/actions/runners/{runner_id}/labelswriteDELETE /orgs/{org}/actions/runners/{runner_id}/labelswriteDELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}writeGET /orgs/{org}/actions/runner-groupsreadGET /orgs/{org}/actions/runner-groups/{runner_group_id}readGET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runnersreadGET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriesreadGET /orgs/{org}/actions/runner-groups/{runner_group_id}/runnersreadGET /orgs/{org}/actions/runnersreadGET /orgs/{org}/actions/runners/downloadsreadGET /orgs/{org}/actions/runners/{runner_id}readGET /orgs/{org}/actions/runners/{runner_id}/labelsreadOrganization permissions for "Team discussions"EndpointAccessAdditional permissionsDELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}writeDELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}writeOrganization permissions for "Variables"EndpointAccessAdditional permissionsPOST /orgs/{org}/actions/variableswritePATCH /orgs/{org}/actions/variables/{name}writeDELETE /orgs/{org}/actions/variables/{name}writePUT /orgs/{org}/actions/variables/{name}/repositorieswritePUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/actions/variablesreadGET /orgs/{org}/actions/variables/{name}readGET /orgs/{org}/actions/variables/{name}/repositoriesreadOrganization permissions for "Webhooks"EndpointAccessAdditional permissionsPOST /orgs/{org}/hookswritePATCH /orgs/{org}/hooks/{hook_id}writeDELETE /orgs/{org}/hooks/{hook_id}writePATCH /orgs/{org}/hooks/{hook_id}/configwritePOST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attemptswritePOST /orgs/{org}/hooks/{hook_id}/pingswriteGET /orgs/{org}/hooksreadGET /orgs/{org}/hooks/{hook_id}readGET /orgs/{org}/hooks/{hook_id}/configreadGET /orgs/{org}/hooks/{hook_id}/deliveriesreadGET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}readRepository permissions for "Actions"EndpointAccessAdditional permissionsDELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}writeDELETE /repos/{owner}/{repo}/actions/cacheswriteDELETE /repos/{owner}/{repo}/actions/caches/{cache_id}writePOST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerunwritePUT /repos/{owner}/{repo}/actions/oidc/customization/subwriteDELETE /repos/{owner}/{repo}/actions/runs/{run_id}writePOST /repos/{owner}/{repo}/actions/runs/{run_id}/approvewritePOST /repos/{owner}/{repo}/actions/runs/{run_id}/cancelwritePOST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancelwriteDELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logswritePOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerunwritePOST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobswritePUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disablewritePOST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatcheswritePUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enablewriteGET /repos/{owner}/{repo}/actions/artifactsreadGET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}readGET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}readGET /repos/{owner}/{repo}/actions/cache/usagereadGET /repos/{owner}/{repo}/actions/cachesreadGET /repos/{owner}/{repo}/actions/jobs/{job_id}readGET /repos/{owner}/{repo}/actions/jobs/{job_id}/logsreadGET /repos/{owner}/{repo}/actions/oidc/customization/subreadGET /repos/{owner}/{repo}/actions/runsreadGET /repos/{owner}/{repo}/actions/runs/{run_id}readGET /repos/{owner}/{repo}/actions/runs/{run_id}/approvalsreadGET /repos/{owner}/{repo}/actions/runs/{run_id}/artifactsreadGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}readGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobsreadGET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logsreadGET /repos/{owner}/{repo}/actions/runs/{run_id}/jobsreadGET /repos/{owner}/{repo}/actions/runs/{run_id}/logsreadGET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentsreadGET /repos/{owner}/{repo}/actions/runs/{run_id}/timingreadGET /repos/{owner}/{repo}/actions/workflowsreadGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}readGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runsreadGET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timingreadGET /repos/{owner}/{repo}/environmentsreadGET /repos/{owner}/{repo}/environments/{environment_name}readGET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policiesreadGET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}readGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rulesreadGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}readRepository permissions for "Administration"EndpointAccessAdditional permissionsPOST /orgs/{org}/reposwritePATCH /repos/{owner}/{repo}writeDELETE /repos/{owner}/{repo}writePUT /repos/{owner}/{repo}/actions/permissionswritePUT /repos/{owner}/{repo}/actions/permissions/accesswritePUT /repos/{owner}/{repo}/actions/permissions/selected-actionswritePUT /repos/{owner}/{repo}/actions/permissions/workflowwritePOST /repos/{owner}/{repo}/actions/runners/generate-jitconfigwritePOST /repos/{owner}/{repo}/actions/runners/registration-tokenwritePOST /repos/{owner}/{repo}/actions/runners/remove-tokenwriteDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}writePOST /repos/{owner}/{repo}/actions/runners/{runner_id}/labelswritePUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labelswriteDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labelswriteDELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}writePOST /repos/{owner}/{repo}/autolinkswriteDELETE /repos/{owner}/{repo}/autolinks/{autolink_id}writePUT /repos/{owner}/{repo}/automated-security-fixeswriteDELETE /repos/{owner}/{repo}/automated-security-fixeswritePUT /repos/{owner}/{repo}/branches/{branch}/protectionwriteDELETE /repos/{owner}/{repo}/branches/{branch}/protectionwritePOST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminswritePATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewswritePOST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatureswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatureswritePATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checkswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checkswritePOST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextswritePUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictionswritePOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appswritePUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appswritePOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamswritePUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamswritePOST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/userswritePUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/userswriteDELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/userswritePATCH /repos/{owner}/{repo}/code-scanning/default-setupwritePUT /repos/{owner}/{repo}/collaborators/{username}writeDELETE /repos/{owner}/{repo}/collaborators/{username}writePUT /repos/{owner}/{repo}/environments/{environment_name}writeDELETE /repos/{owner}/{repo}/environments/{environment_name}writePOST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policieswritePUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}writeDELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}writePOST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_ruleswriteDELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}writePOST /repos/{owner}/{repo}/forkswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/interaction-limitswriteDELETE /repos/{owner}/{repo}/interaction-limitswritePATCH /repos/{owner}/{repo}/invitations/{invitation_id}writeDELETE /repos/{owner}/{repo}/invitations/{invitation_id}writePOST /repos/{owner}/{repo}/keyswriteDELETE /repos/{owner}/{repo}/keys/{key_id}writePOST /repos/{owner}/{repo}/pageswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/pageswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/pageswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/pages/healthwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/private-vulnerability-reportingwriteDELETE /repos/{owner}/{repo}/private-vulnerability-reportingwritePOST /repos/{owner}/{repo}/rulesetswriteGET /repos/{owner}/{repo}/rulesets/rule-suiteswriteGET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}writePUT /repos/{owner}/{repo}/rulesets/{ruleset_id}writeDELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}writeGET /repos/{owner}/{repo}/rulesets/{ruleset_id}/historywriteGET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}writePOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forkswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/tags/protectionwriteDELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}writePUT /repos/{owner}/{repo}/topicswritePOST /repos/{owner}/{repo}/transferwritePUT /repos/{owner}/{repo}/vulnerability-alertswriteDELETE /repos/{owner}/{repo}/vulnerability-alertswritePOST /repos/{template_owner}/{template_repo}/generatewritePOST /user/reposwritePATCH /user/repository_invitations/{invitation_id}writeDELETE /user/repository_invitations/{invitation_id}writeGET /repos/{owner}/{repo}/actions/permissionsreadGET /repos/{owner}/{repo}/actions/permissions/accessreadGET /repos/{owner}/{repo}/actions/permissions/selected-actionsreadGET /repos/{owner}/{repo}/actions/permissions/workflowreadGET /repos/{owner}/{repo}/actions/runnersreadGET /repos/{owner}/{repo}/actions/runners/downloadsreadGET /repos/{owner}/{repo}/actions/runners/{runner_id}readGET /repos/{owner}/{repo}/actions/runners/{runner_id}/labelsreadGET /repos/{owner}/{repo}/autolinksreadGET /repos/{owner}/{repo}/autolinks/{autolink_id}readGET /repos/{owner}/{repo}/automated-security-fixesreadGET /repos/{owner}/{repo}/branches/{branch}/protectionreadGET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_adminsreadGET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviewsreadGET /repos/{owner}/{repo}/branches/{branch}/protection/required_signaturesreadGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checksreadGET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contextsreadGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictionsreadGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/appsreadGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teamsreadGET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/usersreadGET /repos/{owner}/{repo}/code-scanning/default-setupreadGET /repos/{owner}/{repo}/code-security-configurationreadGET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/appsreadGET /repos/{owner}/{repo}/interaction-limitsreadGET /repos/{owner}/{repo}/invitationsreadGET /repos/{owner}/{repo}/keysreadGET /repos/{owner}/{repo}/keys/{key_id}readGET /repos/{owner}/{repo}/tags/protectionreadGET /repos/{owner}/{repo}/teamsreadGET /repos/{owner}/{repo}/traffic/clonesreadGET /repos/{owner}/{repo}/traffic/popular/pathsreadGET /repos/{owner}/{repo}/traffic/popular/referrersreadGET /repos/{owner}/{repo}/traffic/viewsreadGET /repos/{owner}/{repo}/vulnerability-alertsreadGET /user/repository_invitationsreadRepository permissions for "Attestations"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/attestationswriteGET /repos/{owner}/{repo}/attestations/{subject_digest}readRepository permissions for "Checks"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/check-runswritePATCH /repos/{owner}/{repo}/check-runs/{check_run_id}writePOST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequestwritePOST /repos/{owner}/{repo}/check-suiteswritePATCH /repos/{owner}/{repo}/check-suites/preferenceswritePOST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequestwriteGET /repos/{owner}/{repo}/check-runs/{check_run_id}readGET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotationsreadGET /repos/{owner}/{repo}/check-suites/{check_suite_id}readGET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runsreadGET /repos/{owner}/{repo}/commits/{ref}/check-runsreadGET /repos/{owner}/{repo}/commits/{ref}/check-suitesreadRepository permissions for "Code scanning alerts"EndpointAccessAdditional permissionsPATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}writePOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixwriteDELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}writePOST /repos/{owner}/{repo}/code-scanning/sarifswriteGET /orgs/{org}/code-scanning/alertsreadGET /repos/{owner}/{repo}/code-scanning/alertsreadGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}readGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofixreadGET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instancesreadGET /repos/{owner}/{repo}/code-scanning/analysesreadGET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}readGET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}readRepository permissions for "Codespaces lifecycle admin"EndpointAccessAdditional permissionsPOST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stopwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /user/codespaces/{codespace_name}/exportswritePOST /user/codespaces/{codespace_name}/startwritePOST /user/codespaces/{codespace_name}/stopwriteGET /user/codespaces/{codespace_name}/exports/{export_id}readRepository permissions for "Codespaces metadata"EndpointAccessAdditional permissionsGET /repos/{owner}/{repo}/codespaces/devcontainersreadGET /repos/{owner}/{repo}/codespaces/machinesreadGET /user/codespaces/{codespace_name}/machinesreadRepository permissions for "Codespaces secrets"EndpointAccessAdditional permissionsGET /repos/{owner}/{repo}/codespaces/secretswriteGET /repos/{owner}/{repo}/codespaces/secrets/public-keywriteGET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}writePUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}writeDELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}writeRepository permissions for "Codespaces"EndpointAccessAdditional permissionsDELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/codespaceswriteGET /repos/{owner}/{repo}/codespaces/newwriteGET /repos/{owner}/{repo}/codespaces/permissions_checkwritePOST /repos/{owner}/{repo}/pulls/{pull_number}/codespaceswritePOST /user/codespaceswritePATCH /user/codespaces/{codespace_name}writeDELETE /user/codespaces/{codespace_name}writePOST /user/codespaces/{codespace_name}/publishwriteGET /orgs/{org}/codespacesreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/members/{username}/codespacesreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/codespacesreadGET /user/codespacesreadGET /user/codespaces/{codespace_name}readRepository permissions for "Commit statuses"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/statuses/{sha}writeGET /repos/{owner}/{repo}/commits/{ref}/statusreadGET /repos/{owner}/{repo}/commits/{ref}/statusesreadRepository permissions for "Contents"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/branches/{branch}/renamewritePOST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commitswriteDELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}writePOST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyseswritePATCH /repos/{owner}/{repo}/comments/{comment_id}writeDELETE /repos/{owner}/{repo}/comments/{comment_id}writePOST /repos/{owner}/{repo}/comments/{comment_id}/reactionswriteDELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}writePUT /repos/{owner}/{repo}/contents/{path}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/contents/{path}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/contents/{path}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/contents/{path}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/dependency-graph/snapshotswritePOST /repos/{owner}/{repo}/dispatcheswritePOST /repos/{owner}/{repo}/git/blobswritePOST /repos/{owner}/{repo}/git/commitswritePOST /repos/{owner}/{repo}/git/refswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/git/refswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/git/refs/{ref}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/git/refs/{ref}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/git/refs/{ref}writePOST /repos/{owner}/{repo}/git/tagswritePOST /repos/{owner}/{repo}/git/treeswritePUT /repos/{owner}/{repo}/importwritePATCH /repos/{owner}/{repo}/importwriteDELETE /repos/{owner}/{repo}/importwritePATCH /repos/{owner}/{repo}/import/authors/{author_id}writePATCH /repos/{owner}/{repo}/import/lfswritePOST /repos/{owner}/{repo}/merge-upstreamwritePOST /repos/{owner}/{repo}/mergeswritePUT /repos/{owner}/{repo}/pulls/{pull_number}/mergewritePOST /repos/{owner}/{repo}/releaseswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/releaseswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}writeDELETE /repos/{owner}/{repo}/releases/assets/{asset_id}writePOST /repos/{owner}/{repo}/releases/generate-noteswritePATCH /repos/{owner}/{repo}/releases/{release_id}writeDELETE /repos/{owner}/{repo}/releases/{release_id}writePOST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasseswriteGET /repos/{owner}/{repo}/activityreadGET /repos/{owner}/{repo}/branchesreadGET /repos/{owner}/{repo}/branches/{branch}readGET /repos/{owner}/{repo}/code-scanning/codeql/databasesreadGET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}readGET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}readGET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}readGET /repos/{owner}/{repo}/codeowners/errorsreadGET /repos/{owner}/{repo}/commitsreadGET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-headreadPOST /repos/{owner}/{repo}/commits/{commit_sha}/commentsreadGET /repos/{owner}/{repo}/commits/{ref}readGET /repos/{owner}/{repo}/community/profilereadGET /repos/{owner}/{repo}/compare/{basehead}readGET /repos/{owner}/{repo}/contents/{path}readGET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}readGET /repos/{owner}/{repo}/dependency-graph/sbomreadPOST /repos/{owner}/{repo}/forksreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/git/blobs/{file_sha}readGET /repos/{owner}/{repo}/git/commits/{commit_sha}readGET /repos/{owner}/{repo}/git/matching-refs/{ref}readGET /repos/{owner}/{repo}/git/ref/{ref}readGET /repos/{owner}/{repo}/git/tags/{tag_sha}readGET /repos/{owner}/{repo}/git/trees/{tree_sha}readGET /repos/{owner}/{repo}/importreadGET /repos/{owner}/{repo}/import/authorsreadGET /repos/{owner}/{repo}/import/large_filesreadGET /repos/{owner}/{repo}/pulls/{pull_number}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/releasesreadGET /repos/{owner}/{repo}/releases/assets/{asset_id}readGET /repos/{owner}/{repo}/releases/latestreadGET /repos/{owner}/{repo}/releases/tags/{tag}readGET /repos/{owner}/{repo}/releases/{release_id}readGET /repos/{owner}/{repo}/releases/{release_id}/assetsreadGET /repos/{owner}/{repo}/tarball/{ref}readGET /repos/{owner}/{repo}/zipball/{ref}readRepository permissions for "Custom properties"EndpointAccessAdditional permissionsPATCH /repos/{owner}/{repo}/properties/valueswriteRepository permissions for "Dependabot alerts"EndpointAccessAdditional permissionsPATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}writeGET /orgs/{org}/dependabot/alertsreadGET /repos/{owner}/{repo}/dependabot/alertsreadGET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}readRepository permissions for "Dependabot secrets"EndpointAccessAdditional permissionsPUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}writeDELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}writeGET /repos/{owner}/{repo}/dependabot/secretsreadGET /repos/{owner}/{repo}/dependabot/secrets/public-keyreadGET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}readRepository permissions for "Deployments"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentswritePOST /repos/{owner}/{repo}/deploymentswriteDELETE /repos/{owner}/{repo}/deployments/{deployment_id}writePOST /repos/{owner}/{repo}/deployments/{deployment_id}/statuseswriteGET /repos/{owner}/{repo}/deploymentsreadGET /repos/{owner}/{repo}/deployments/{deployment_id}readGET /repos/{owner}/{repo}/deployments/{deployment_id}/statusesreadGET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}readRepository permissions for "Environments"EndpointAccessAdditional permissionsPUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}writeDELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}writePOST /repos/{owner}/{repo}/environments/{environment_name}/variableswritePATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}writeDELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}writeGET /repos/{owner}/{repo}/environments/{environment_name}/secretsreadGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-keyreadGET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}readGET /repos/{owner}/{repo}/environments/{environment_name}/variablesreadGET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}readRepository permissions for "Issues"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/issueswritePATCH /repos/{owner}/{repo}/issues/comments/{comment_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionswriteDELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}writePATCH /repos/{owner}/{repo}/issues/{issue_number}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/assigneeswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/assigneeswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/commentswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/labelswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/issues/{issue_number}/labelswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/labelswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/issues/{issue_number}/lockwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/lockwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/reactionswriteDELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}writeDELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issuewritePOST /repos/{owner}/{repo}/issues/{issue_number}/sub_issueswritePATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/prioritywritePOST /repos/{owner}/{repo}/labelswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/labels/{name}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/labels/{name}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/milestoneswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/milestones/{milestone_number}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/milestones/{milestone_number}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/assigneesreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/assignees/{assignee}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issuesreadGET /repos/{owner}/{repo}/issues/commentsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/comments/{comment_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactionsreadGET /repos/{owner}/{repo}/issues/eventsreadGET /repos/{owner}/{repo}/issues/events/{event_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}readGET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/commentsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/eventsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/labelsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/reactionsreadGET /repos/{owner}/{repo}/issues/{issue_number}/sub_issuesreadGET /repos/{owner}/{repo}/issues/{issue_number}/timelinereadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/labelsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/labels/{name}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestonesreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestones/{milestone_number}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestones/{milestone_number}/labelsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Repository permissions for "Metadata"EndpointAccessAdditional permissionsPUT /orgs/{org}/actions/permissions/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /orgs/{org}/reposreadGET /repos/{owner}/{repo}readGET /repos/{owner}/{repo}/collaboratorsreadGET /repos/{owner}/{repo}/collaborators/{username}readGET /repos/{owner}/{repo}/collaborators/{username}/permissionreadGET /repos/{owner}/{repo}/commentsreadGET /repos/{owner}/{repo}/comments/{comment_id}readGET /repos/{owner}/{repo}/comments/{comment_id}/reactionsreadGET /repos/{owner}/{repo}/commits/{commit_sha}/commentsreadGET /repos/{owner}/{repo}/contributorsreadGET /repos/{owner}/{repo}/eventsreadGET /repos/{owner}/{repo}/forksreadGET /repos/{owner}/{repo}/languagesreadGET /repos/{owner}/{repo}/licensereadGET /repos/{owner}/{repo}/private-vulnerability-reportingreadGET /repos/{owner}/{repo}/properties/valuesreadGET /repos/{owner}/{repo}/rules/branches/{branch}readGET /repos/{owner}/{repo}/rulesetsreadGET /repos/{owner}/{repo}/rulesets/{ruleset_id}readGET /repos/{owner}/{repo}/stargazersreadGET /repos/{owner}/{repo}/stats/code_frequencyreadGET /repos/{owner}/{repo}/stats/commit_activityreadGET /repos/{owner}/{repo}/stats/contributorsreadGET /repos/{owner}/{repo}/stats/participationreadGET /repos/{owner}/{repo}/stats/punch_cardreadGET /repos/{owner}/{repo}/subscribersreadGET /repos/{owner}/{repo}/tagsreadGET /repos/{owner}/{repo}/topicsreadGET /repositoriesreadGET /search/labelsreadPUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /user/installations/{installation_id}/repositoriesreadGET /user/reposreadGET /user/starred/{owner}/{repo}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /user/starred/{owner}/{repo}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /user/starred/{owner}/{repo}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /users/{username}/reposreadRepository permissions for "Pages"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/pageswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/pageswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/pageswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/pages/buildswritePOST /repos/{owner}/{repo}/pages/deploymentswritePOST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancelwriteGET /repos/{owner}/{repo}/pages/healthwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/pagesreadGET /repos/{owner}/{repo}/pages/buildsreadGET /repos/{owner}/{repo}/pages/builds/latestreadGET /repos/{owner}/{repo}/pages/builds/{build_id}readGET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}readRepository permissions for "Projects"EndpointAccessAdditional permissionsPATCH /projects/columns/cards/{card_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/columns/cards/{card_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/cards/{card_id}/moveswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /projects/columns/{column_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/columns/{column_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/{column_id}/cardswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/columns/{column_id}/moveswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /projects/{project_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/{project_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/collaboratorswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /projects/{project_id}/collaborators/{username}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /projects/{project_id}/collaborators/{username}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/collaborators/{username}/permissionwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /projects/{project_id}/columnswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/projectswriteGET /projects/columns/cards/{card_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/columns/{column_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/columns/{column_id}/cardsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /projects/{project_id}/columnsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/projectsreadRepository permissions for "Pull requests"EndpointAccessAdditional permissionsPATCH /repos/{owner}/{repo}/issues/comments/{comment_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/issues/{issue_number}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/assigneeswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/assigneeswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/commentswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/issues/{issue_number}/labelswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/issues/{issue_number}/labelswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/labelswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PUT /repos/{owner}/{repo}/issues/{issue_number}/lockwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/issues/{issue_number}/lockwriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/labelswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/labels/{name}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/labels/{name}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/milestoneswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/milestones/{milestone_number}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/milestones/{milestone_number}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/pullswritePATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}writeDELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}writePOST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionswriteDELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}writePATCH /repos/{owner}/{repo}/pulls/{pull_number}writePOST /repos/{owner}/{repo}/pulls/{pull_number}/commentswritePOST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replieswritePOST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewerswriteDELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewerswritePOST /repos/{owner}/{repo}/pulls/{pull_number}/reviewswritePUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}writeDELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}writePUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissalswritePOST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/eventswritePUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branchwriteGET /repos/{owner}/{repo}/assigneesreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/assignees/{assignee}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/commits/{commit_sha}/pullsreadGET /repos/{owner}/{repo}/issues/commentsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/comments/{comment_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/events/{event_id}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/commentsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/eventsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/labelsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/issues/{issue_number}/timelinereadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/labelsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/labels/{name}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestonesreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestones/{milestone_number}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/milestones/{milestone_number}/labelsreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/pullsreadGET /repos/{owner}/{repo}/pulls/commentsreadGET /repos/{owner}/{repo}/pulls/comments/{comment_id}readGET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactionsreadGET /repos/{owner}/{repo}/pulls/{pull_number}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /repos/{owner}/{repo}/pulls/{pull_number}/commentsreadGET /repos/{owner}/{repo}/pulls/{pull_number}/commitsreadGET /repos/{owner}/{repo}/pulls/{pull_number}/filesreadGET /repos/{owner}/{repo}/pulls/{pull_number}/mergereadGET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewersreadGET /repos/{owner}/{repo}/pulls/{pull_number}/reviewsreadGET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}readGET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/commentsreadRepository permissions for "Repository security advisories"EndpointAccessAdditional permissionsGET /orgs/{org}/security-advisorieswritePOST /repos/{owner}/{repo}/security-advisorieswritePOST /repos/{owner}/{repo}/security-advisories/reportswritePATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}writePOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cvewriteGET /repos/{owner}/{repo}/security-advisoriesreadGET /repos/{owner}/{repo}/security-advisories/{ghsa_id}readPOST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forksreadMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.Repository permissions for "Secret scanning alerts"EndpointAccessAdditional permissionsPATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}writeGET /orgs/{org}/secret-scanning/alertsreadGET /repos/{owner}/{repo}/secret-scanning/alertsreadGET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}readGET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locationsreadGET /repos/{owner}/{repo}/secret-scanning/scan-historyreadRepository permissions for "Secrets"EndpointAccessAdditional permissionsPUT /repos/{owner}/{repo}/actions/secrets/{secret_name}writeDELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}writeGET /repos/{owner}/{repo}/actions/organization-secretsreadGET /repos/{owner}/{repo}/actions/secretsreadGET /repos/{owner}/{repo}/actions/secrets/public-keyreadGET /repos/{owner}/{repo}/actions/secrets/{secret_name}readRepository permissions for "Variables"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/actions/variableswritePATCH /repos/{owner}/{repo}/actions/variables/{name}writeDELETE /repos/{owner}/{repo}/actions/variables/{name}writeGET /repos/{owner}/{repo}/actions/organization-variablesreadGET /repos/{owner}/{repo}/actions/variablesreadGET /repos/{owner}/{repo}/actions/variables/{name}readRepository permissions for "Webhooks"EndpointAccessAdditional permissionsPOST /repos/{owner}/{repo}/hookswritePATCH /repos/{owner}/{repo}/hooks/{hook_id}writeDELETE /repos/{owner}/{repo}/hooks/{hook_id}writePATCH /repos/{owner}/{repo}/hooks/{hook_id}/configwritePOST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attemptswriteGET /repos/{owner}/{repo}/hooksreadGET /repos/{owner}/{repo}/hooks/{hook_id}readGET /repos/{owner}/{repo}/hooks/{hook_id}/configreadGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveriesreadGET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}readPOST /repos/{owner}/{repo}/hooks/{hook_id}/pingsreadPOST /repos/{owner}/{repo}/hooks/{hook_id}/testsreadRepository permissions for "Workflows"EndpointAccessAdditional permissionsPUT /repos/{owner}/{repo}/contents/{path}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /repos/{owner}/{repo}/contents/{path}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/git/refswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.PATCH /repos/{owner}/{repo}/git/refs/{ref}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.POST /repos/{owner}/{repo}/releaseswriteMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.User permissions for "Block another user"EndpointAccessAdditional permissionsPUT /user/blocks/{username}writeDELETE /user/blocks/{username}writeGET /user/blocksreadGET /user/blocks/{username}readUser permissions for "Codespaces user secrets"EndpointAccessAdditional permissionsPUT /user/codespaces/secrets/{secret_name}writeDELETE /user/codespaces/secrets/{secret_name}writePUT /user/codespaces/secrets/{secret_name}/repositorieswritePUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /user/codespaces/secretsreadGET /user/codespaces/secrets/public-keyreadGET /user/codespaces/secrets/{secret_name}readGET /user/codespaces/secrets/{secret_name}/repositoriesreadUser permissions for "Email addresses"EndpointAccessAdditional permissionsPATCH /user/email/visibilitywritePOST /user/emailswriteDELETE /user/emailswriteGET /user/emailsreadGET /user/public_emailsreadUser permissions for "Followers"EndpointAccessAdditional permissionsPUT /user/following/{username}writeDELETE /user/following/{username}writeGET /user/followersreadGET /user/followingreadGET /user/following/{username}readUser permissions for "GPG keys"EndpointAccessAdditional permissionsPOST /user/gpg_keyswriteDELETE /user/gpg_keys/{gpg_key_id}writeGET /user/gpg_keysreadGET /user/gpg_keys/{gpg_key_id}readUser permissions for "Gists"EndpointAccessAdditional permissionsPOST /gistswritePATCH /gists/{gist_id}writeDELETE /gists/{gist_id}writePOST /gists/{gist_id}/commentswritePATCH /gists/{gist_id}/comments/{comment_id}writeDELETE /gists/{gist_id}/comments/{comment_id}writePOST /gists/{gist_id}/forkswritePUT /gists/{gist_id}/starwriteDELETE /gists/{gist_id}/starwriteUser permissions for "Git SSH keys"EndpointAccessAdditional permissionsPOST /user/keyswriteDELETE /user/keys/{key_id}writeGET /user/keysreadGET /user/keys/{key_id}readGET /users/{username}/keysreadUser permissions for "Interaction limits"EndpointAccessAdditional permissionsPUT /user/interaction-limitswriteDELETE /user/interaction-limitswriteGET /user/interaction-limitsreadUser permissions for "Plan"EndpointAccessAdditional permissionsGET /users/{username}/settings/billing/actionsreadGET /users/{username}/settings/billing/packagesreadGET /users/{username}/settings/billing/shared-storagereadUser permissions for "Profile"EndpointAccessAdditional permissionsPATCH /userwritePOST /user/social_accountswriteDELETE /user/social_accountswriteUser permissions for "SSH signing keys"EndpointAccessAdditional permissionsPOST /user/ssh_signing_keyswriteDELETE /user/ssh_signing_keys/{ssh_signing_key_id}writeGET /user/ssh_signing_keysreadGET /user/ssh_signing_keys/{ssh_signing_key_id}readUser permissions for "Starring"EndpointAccessAdditional permissionsPUT /user/starred/{owner}/{repo}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.DELETE /user/starred/{owner}/{repo}writeMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /user/starredreadGET /user/starred/{owner}/{repo}readMultiple permissions are required, or a different permission may be used. For more information about the permissions, see the documentation for this endpoint.GET /users/{username}/starredreadUser permissions for "Watching"EndpointAccessAdditional permissionsGET /user/subscriptionsreadGET /users/{username}/subscriptionsread\n\n\n\nREST API/Guides/Script with JavaScriptScripting with the REST API and JavaScriptWrite a script using the Octokit.js SDK to interact with the REST API.In this articleAbout Octokit.jsPrerequisitesInstantiating and authenticatingMaking requestsCatching errorsUsing the responseExample scriptNext stepsAbout Octokit.js
If you want to write a script using JavaScript to interact with GitHub's REST API, GitHub recommends that you use the Octokit.js SDK. Octokit.js is maintained by GitHub. The SDK implements best practices and makes it easier for you to interact with the REST API via JavaScript. Octokit.js works with all modern browsers, Node.js, and Deno. For more information about Octokit.js, see the Octokit.js README.
Prerequisites
This guide assumes that you are familiar with JavaScript and the GitHub REST API. For more information about the REST API, see Getting started with the REST API.
You must install and import octokit in order to use the Octokit.js library. This guide uses import statements in accordance with ES6. For more information about different installation and import methods, see the Octokit.js README's Usage section.
Instantiating and authenticating
Warning

Treat your authentication credentials like a password.
To keep your credentials secure, you can store your credentials as a secret and run your script through GitHub Actions. For more information, see Using secrets in GitHub Actions.


You can also store your credentials as a Codespaces secret and run your script in Codespaces. For more information, see Managing your account-specific secrets for GitHub Codespaces.


If these options are not possible, consider using another CLI service to store your credentials securely.

Authenticating with a personal access token
If you want to use the GitHub REST API for personal use, you can create a personal access token. For more information about creating a personal access token, see Managing your personal access tokens.
First, import Octokit from octokit. Then, pass your personal access token when you create an instance of Octokit. In the following example, replace YOUR-TOKEN with a reference to your personal access token.
JavaScriptimport { Octokit } from "octokit";

const octokit = new Octokit({ 
  auth: 'YOUR-TOKEN',
});
import { Octokit } from "octokit";

const octokit = new Octokit({ 
  auth: 'YOUR-TOKEN',
});

Authenticating with a GitHub App
If you want to use the API on behalf of an organization or another user, GitHub recommends that you use a GitHub App. If an endpoint is available to GitHub Apps, the REST reference documentation for that endpoint will indicate what type of GitHub App token is required. For more information, see Registering a GitHub App and About authentication with a GitHub App.
Instead of importing Octokit from octokit, import App. In the following example, replace APP_ID with a reference to your app's ID. Replace PRIVATE_KEY with a reference to your app's private key. Replace INSTALLATION_ID with the ID of the installation of your app that you want to authenticate on behalf of. You can find your app's ID and generate a private key on the settings page for your app. For more information, see Managing private keys for GitHub Apps. You can get an installation ID with the GET /users/{username}/installation, GET /repos/{owner}/{repo}/installation, or GET /orgs/{org}/installation endpoints. For more information, see REST API endpoints for GitHub Apps.
JavaScriptimport { App } from "octokit";

const app = new App({
  appId: APP_ID,
  privateKey: PRIVATE_KEY,
});

const octokit = await app.getInstallationOctokit(INSTALLATION_ID);
import { App } from "octokit";

const app = new App({
  appId: APP_ID,
  privateKey: PRIVATE_KEY,
});

const octokit = await app.getInstallationOctokit(INSTALLATION_ID);

Authenticating in GitHub Actions
If you want to use the API in a GitHub Actions workflow, GitHub recommends that you authenticate with the built-in GITHUB_TOKEN instead of creating a token. You can grant permissions to the GITHUB_TOKEN with the permissions key. For more information about GITHUB_TOKEN, see Automatic token authentication.
If your workflow needs to access resources outside of the workflow's repository, then you will not be able to use GITHUB_TOKEN. In that case, store your credentials as a secret and replace GITHUB_TOKEN in the examples below with the name of your secret. For more information about secrets, see Using secrets in GitHub Actions.
If you use the run keyword to execute your JavaScript script in your GitHub Actions workflows, you can store the value of GITHUB_TOKEN as an environment variable. Your script can access the environment variable as process.env.VARIABLE_NAME.
For example, this workflow step stores GITHUB_TOKEN in an environment variable called TOKEN:
- name: Run script
  env:
    TOKEN: ${{ secrets.GITHUB_TOKEN }}
  run: |
    node .github/actions-scripts/use-the-api.mjs

The script that the workflow runs uses process.env.TOKEN to authenticate:
JavaScriptimport { Octokit } from "octokit";

const octokit = new Octokit({ 
  auth: process.env.TOKEN,
});
import { Octokit } from "octokit";

const octokit = new Octokit({ 
  auth: process.env.TOKEN,
});

Instantiating without authentication
You can use the REST API without authentication, although you will have a lower rate limit and will not be able to use some endpoints. To create an instance of Octokit without authenticating, do not pass the auth argument.
JavaScriptimport { Octokit } from "octokit";

const octokit = new Octokit({ });
import { Octokit } from "octokit";

const octokit = new Octokit({ });

Making requests
Octokit supports multiple ways of making requests. You can use the request method to make requests if you know the HTTP verb and path for the endpoint. You can use the rest method if you want to take advantage of autocompletion in your IDE and typing. For paginated endpoints, you can use the paginate method to request multiple pages of data.
Using the request method to make requests
To use the request method to make requests, pass the HTTP method and path as the first argument. Pass any body, query, or path parameters in an object as the second argument. For example, to make a GET request to /repos/{owner}/{repo}/issues and pass the owner, repo, and per_page parameters:
JavaScriptawait octokit.request("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 2
});
await octokit.request("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 2
});

The request method automatically passes the Accept: application/vnd.github+json header. To pass additional headers or a different Accept header, add a headers property to the object that is passed as a second argument. The value of the headers property is an object with the header names as keys and header values as values. For example, to send a content-type header with a value of text/plain and a x-github-api-version header with a value of 2022-11-28:
JavaScriptawait octokit.request("POST /markdown/raw", {
  text: "Hello **world**",
  headers: {
    "content-type": "text/plain",
    "x-github-api-version": "2022-11-28",
  },
});
await octokit.request("POST /markdown/raw", {
  text: "Hello **world**",
  headers: {
    "content-type": "text/plain",
    "x-github-api-version": "2022-11-28",
  },
});

Using rest endpoint methods to make requests
Every REST API endpoint has an associated rest endpoint method in Octokit. These methods generally autocomplete in your IDE for convenience. You can pass any parameters as an object to the method.
JavaScriptawait octokit.rest.issues.listForRepo({
  owner: "github",
  repo: "docs",
  per_page: 2
});
await octokit.rest.issues.listForRepo({
  owner: "github",
  repo: "docs",
  per_page: 2
});

Additionally, if you are using a typed language such as TypeScript, you can import types to use with these methods. For more information, see the TypeScript section in the plugin-rest-endpoint-methods.js README.
Making paginated requests
If the endpoint is paginated and you want to fetch more than one page of results, you can use the paginate method. paginate will fetch the next page of results until it reaches the last page and then return all of the results as a single array. A few endpoints return paginated results as array in an object, as opposed to returning the paginated results as an array. paginate always returns an array of items even if the raw result was an object.
For example, the following example gets all of the issues from the github/docs repository. Although it requests 100 issues at a time, the function won't return until the last page of data is reached.
JavaScriptconst issueData = await octokit.paginate("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});
const issueData = await octokit.paginate("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});

The paginate method accepts an optional map function, which you can use to collect only the data that you want from the response. This reduces memory usage by your script. The map function can take a second argument, done, which you can call to end the pagination before the last page is reached. This lets you fetch a subset of pages. For example, the following example continues to fetch results until an issue that includes "test" in the title is returned. For the pages of data that were returned, only the issue title and author are stored.
JavaScriptconst issueData = await octokit.paginate("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
},
    (response, done) => response.data.map((issue) => {
    if (issue.title.includes("test")) {
      done()
    }
    return ({title: issue.title, author: issue.user.login})
  })
);
const issueData = await octokit.paginate("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
},
    (response, done) => response.data.map((issue) => {
    if (issue.title.includes("test")) {
      done()
    }
    return ({title: issue.title, author: issue.user.login})
  })
);

Instead of fetching all of the results at once, you can use octokit.paginate.iterator() to iterate through a single page at a time. For example, the following example fetches one page of results at a time and processes each object from the page before fetching the next page. Once an issue that includes "test" in the title is reached, the script stops the iteration and returns the issue title and issue author of each object that was processed. The iterator is the most memory efficient method for fetching paginated data.
JavaScriptconst iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});

let issueData = []
let breakLoop = false
for await (const {data} of iterator) {
  if (breakLoop) break
  for (const issue of data) {
    if (issue.title.includes("test")) {
      breakLoop = true
      break
    } else {
      issueData = [...issueData, {title: issue.title, author: issue.user.login}];
    }
  }
}
const iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});

let issueData = []
let breakLoop = false
for await (const {data} of iterator) {
  if (breakLoop) break
  for (const issue of data) {
    if (issue.title.includes("test")) {
      breakLoop = true
      break
    } else {
      issueData = [...issueData, {title: issue.title, author: issue.user.login}];
    }
  }
}

You can use the paginate method with the rest endpoint methods as well. Pass the rest endpoint method as the first argument. Pass any parameters as the second argument.
JavaScriptconst iterator = octokit.paginate.iterator(octokit.rest.issues.listForRepo, {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});
const iterator = octokit.paginate.iterator(octokit.rest.issues.listForRepo, {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});

For more information about pagination, see Using pagination in the REST API.
Catching errors
Catching all errors
Sometimes, the GitHub REST API will return an error. For example, you will get an error if your access token is expired or if you omitted a required parameter. Octokit.js automatically retries the request when it gets an error other than 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, and 422 Unprocessable Entity. If an API error occurs even after retries, Octokit.js throws an error that includes the HTTP status code of the response (response.status) and the response headers (response.headers). You should handle these errors in your code. For example, you can use a try/catch block to catch errors:
JavaScriptlet filesChanged = []

try {
  const iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/pulls/{pull_number}/files", {
    owner: "github",
    repo: "docs",
    pull_number: 22809,
    per_page: 100,
    headers: {
      "x-github-api-version": "2022-11-28",
    },
  });

  for await (const {data} of iterator) {
    filesChanged = [...filesChanged, ...data.map(fileData => fileData.filename)];
  }
} catch (error) {
  if (error.response) {
    console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)
  }
  console.error(error)
}
let filesChanged = []

try {
  const iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/pulls/{pull_number}/files", {
    owner: "github",
    repo: "docs",
    pull_number: 22809,
    per_page: 100,
    headers: {
      "x-github-api-version": "2022-11-28",
    },
  });

  for await (const {data} of iterator) {
    filesChanged = [...filesChanged, ...data.map(fileData => fileData.filename)];
  }
} catch (error) {
  if (error.response) {
    console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)
  }
  console.error(error)
}

Handling intended error codes
Sometimes, GitHub uses a 4xx status code to indicate a non-error response. If the endpoint you are using does this, you can add additional handling for specific errors. For example, the GET /user/starred/{owner}/{repo} endpoint will return a 404 if the repository is not starred. The following example uses the 404 response to indicate that the repository was not starred; all other errors codes are treated as errors.
JavaScripttry {
  await octokit.request("GET /user/starred/{owner}/{repo}", {
    owner: "github",
    repo: "docs",
    headers: {
      "x-github-api-version": "2022-11-28",
    },
  });

  console.log(`The repository is starred by me`);

} catch (error) {
  if (error.status === 404) {
    console.log(`The repository is not starred by me`);
  } else {
    console.error(`An error occurred while checking if the repository is starred: ${error?.response?.data?.message}`);
  }
}
try {
  await octokit.request("GET /user/starred/{owner}/{repo}", {
    owner: "github",
    repo: "docs",
    headers: {
      "x-github-api-version": "2022-11-28",
    },
  });

  console.log(`The repository is starred by me`);

} catch (error) {
  if (error.status === 404) {
    console.log(`The repository is not starred by me`);
  } else {
    console.error(`An error occurred while checking if the repository is starred: ${error?.response?.data?.message}`);
  }
}

Handling rate limit errors
If you receive a rate limit error, you may want to retry your request after waiting. When you are rate limited, GitHub responds with a 403 Forbidden error and the x-ratelimit-remaining response header value will be "0". The response headers will include a x-ratelimit-reset header, which tells you the time at which the current rate limit window resets, in UTC epoch seconds. You can retry your request after the time specified by x-ratelimit-reset.
JavaScriptasync function requestRetry(route, parameters) {
  try {
    const response = await octokit.request(route, parameters);
    return response
  } catch (error) {
    if (error.response && error.status === 403 && error.response.headers['x-ratelimit-remaining'] === '0') {
      const resetTimeEpochSeconds = error.response.headers['x-ratelimit-reset'];
      const currentTimeEpochSeconds = Math.floor(Date.now() / 1000);
      const secondsToWait = resetTimeEpochSeconds - currentTimeEpochSeconds;
      console.log(`You have exceeded your rate limit. Retrying in ${secondsToWait} seconds.`);
      setTimeout(requestRetry, secondsToWait * 1000, route, parameters);
    } else {
      console.error(error);
    }
  }
}

const response = await requestRetry("GET /repos/{owner}/{repo}/issues", {
    owner: "github",
    repo: "docs",
    per_page: 2
  })
async function requestRetry(route, parameters) {
  try {
    const response = await octokit.request(route, parameters);
    return response
  } catch (error) {
    if (error.response && error.status === 403 && error.response.headers['x-ratelimit-remaining'] === '0') {
      const resetTimeEpochSeconds = error.response.headers['x-ratelimit-reset'];
      const currentTimeEpochSeconds = Math.floor(Date.now() / 1000);
      const secondsToWait = resetTimeEpochSeconds - currentTimeEpochSeconds;
      console.log(`You have exceeded your rate limit. Retrying in ${secondsToWait} seconds.`);
      setTimeout(requestRetry, secondsToWait * 1000, route, parameters);
    } else {
      console.error(error);
    }
  }
}

const response = await requestRetry("GET /repos/{owner}/{repo}/issues", {
    owner: "github",
    repo: "docs",
    per_page: 2
  })

Using the response
The request method returns a promise that resolves to an object if the request was successful. The object properties are data (the response body returned by the endpoint), status (the HTTP response code), url (the URL of the request), and headers (an object containing the response headers). Unless otherwise specified, the response body is in JSON format. Some endpoints do not return a response body; in those cases, the data property is omitted.
JavaScriptconst response = await octokit.request("GET /repos/{owner}/{repo}/issues/{issue_number}", {
  owner: "github",
  repo: "docs",
  issue_number: 11901,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});

console.log(`The status of the response is: ${response.status}`)
console.log(`The request URL was: ${response.url}`)
console.log(`The x-ratelimit-remaining response header is: ${response.headers["x-ratelimit-remaining"]}`)
console.log(`The issue title is: ${response.data.title}`)
const response = await octokit.request("GET /repos/{owner}/{repo}/issues/{issue_number}", {
  owner: "github",
  repo: "docs",
  issue_number: 11901,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});

console.log(`The status of the response is: ${response.status}`)
console.log(`The request URL was: ${response.url}`)
console.log(`The x-ratelimit-remaining response header is: ${response.headers["x-ratelimit-remaining"]}`)
console.log(`The issue title is: ${response.data.title}`)

Similarly, the paginate method returns a promise. If the request was successful, the promise resolves to an array of data returned by the endpoint. Unlike the request method, the paginate method does not return the status code, URL, or headers.
JavaScriptconst data = await octokit.paginate("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});

console.log(`${data.length} issues were returned`)
console.log(`The title of the first issue is: ${data[0].title}`)
const data = await octokit.paginate("GET /repos/{owner}/{repo}/issues", {
  owner: "github",
  repo: "docs",
  per_page: 100,
  headers: {
    "x-github-api-version": "2022-11-28",
  },
});

console.log(`${data.length} issues were returned`)
console.log(`The title of the first issue is: ${data[0].title}`)

Example script
Here is a full example script that uses Octokit.js. The script imports Octokit and creates a new instance of Octokit. If you wanted to authenticate with a GitHub App instead of a personal access token, you would import and instantiate App instead of Octokit. For more information, see Authenticating with a GitHub App.
The getChangedFiles function gets all of the files changed for a pull request. The commentIfDataFilesChanged function calls the getChangedFiles function. If any of the files that the pull request changed include /data/ in the file path, then the function will comment on the pull request.
JavaScriptimport { Octokit } from "octokit";

const octokit = new Octokit({ 
  auth: 'YOUR-TOKEN',
});

async function getChangedFiles({owner, repo, pullNumber}) {
  let filesChanged = []

  try {
    const iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/pulls/{pull_number}/files", {
      owner: owner,
      repo: repo,
      pull_number: pullNumber,
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    });

    for await (const {data} of iterator) {
      filesChanged = [...filesChanged, ...data.map(fileData => fileData.filename)];
    }
  } catch (error) {
    if (error.response) {
      console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)
    }
    console.error(error)
  }

  return filesChanged
}

async function commentIfDataFilesChanged({owner, repo, pullNumber}) {
  const changedFiles = await getChangedFiles({owner, repo, pullNumber});

  const filePathRegex = new RegExp(/\/data\//, "i");
  if (!changedFiles.some(fileName => filePathRegex.test(fileName))) {
    return;
  }

  try {
    const {data: comment} = await octokit.request("POST /repos/{owner}/{repo}/issues/{issue_number}/comments", {
      owner: owner,
      repo: repo,
      issue_number: pullNumber,
      body: `It looks like you changed a data file. These files are auto-generated. \n\nYou must revert any changes to data files before your pull request will be reviewed.`,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    });

    return comment.html_url;
  } catch (error) {
    if (error.response) {
      console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)
    }
    console.error(error)
  }
}

await commentIfDataFilesChanged({owner: "github", repo: "docs", pullNumber: 191});
import { Octokit } from "octokit";

const octokit = new Octokit({ 
  auth: 'YOUR-TOKEN',
});

async function getChangedFiles({owner, repo, pullNumber}) {
  let filesChanged = []

  try {
    const iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/pulls/{pull_number}/files", {
      owner: owner,
      repo: repo,
      pull_number: pullNumber,
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    });

    for await (const {data} of iterator) {
      filesChanged = [...filesChanged, ...data.map(fileData => fileData.filename)];
    }
  } catch (error) {
    if (error.response) {
      console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)
    }
    console.error(error)
  }

  return filesChanged
}

async function commentIfDataFilesChanged({owner, repo, pullNumber}) {
  const changedFiles = await getChangedFiles({owner, repo, pullNumber});

  const filePathRegex = new RegExp(/\/data\//, "i");
  if (!changedFiles.some(fileName => filePathRegex.test(fileName))) {
    return;
  }

  try {
    const {data: comment} = await octokit.request("POST /repos/{owner}/{repo}/issues/{issue_number}/comments", {
      owner: owner,
      repo: repo,
      issue_number: pullNumber,
      body: `It looks like you changed a data file. These files are auto-generated. \n\nYou must revert any changes to data files before your pull request will be reviewed.`,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    });

    return comment.html_url;
  } catch (error) {
    if (error.response) {
      console.error(`Error! Status: ${error.response.status}. Message: ${error.response.data.message}`)
    }
    console.error(error)
  }
}

await commentIfDataFilesChanged({owner: "github", repo: "docs", pullNumber: 191});

Next steps

To learn more about Octokit.js see the Octokit.js documentation.
For some real life examples, look at how GitHub Docs uses Octokit.js by searching the GitHub Docs repository.\n\n\n\nREST API/Guides/Script with RubyScripting with the REST API and RubyLearn how to write a script using the Octokit.rb SDK to interact with the REST API.In this articleAbout Octokit.rbPrerequisitesInstantiating and authenticatingMaking requestsCatching errorsUsing the responseExample scriptNext stepsAbout Octokit.rb
If you want to write a script using Ruby to interact with the GitHub REST API, GitHub recommends that you use the Octokit.rb SDK. Octokit.rb is maintained by GitHub. The SDK implements best practices and makes it easier for you to interact with the REST API via Ruby. Octokit.rb works with all modern browsers, Node.rb, and Deno. For more information about Octokit.rb, see the Octokit.rb README.
Prerequisites
This guide assumes that you are familiar with Ruby and the GitHub REST API. For more information about the REST API, see Getting started with the REST API.
You must install and import the octokit gem in order to use the Octokit.rb library. This guide uses import statements in accordance with Ruby's conventions. For more information about different installation methods, see the Octokit.rb README's Installation section.
Instantiating and authenticating
Warning

Treat your authentication credentials like a password.
To keep your credentials secure, you can store your credentials as a secret and run your script through GitHub Actions. For more information, see Using secrets in GitHub Actions.


You can also store your credentials as a Codespaces secret and run your script in Codespaces. For more information, see Managing your account-specific secrets for GitHub Codespaces.


If these options are not possible, consider using another CLI service to store your credentials securely.

Authenticating with a personal access token
If you want to use the GitHub REST API for personal use, you can create a personal access token. For more information about creating a personal access token, see Managing your personal access tokens.
First, require the octokit library. Then, create an instance of Octokit by passing your personal access token as the access_token option. In the following example, replace YOUR-TOKEN with your personal access token.
Rubyrequire 'octokit'

octokit = Octokit::Client.new(access_token: 'YOUR-TOKEN')
require 'octokit'

octokit = Octokit::Client.new(access_token: 'YOUR-TOKEN')

Authenticating with a GitHub App
If you want to use the API on behalf of an organization or another user, GitHub recommends that you use a GitHub App. If an endpoint is available to GitHub Apps, the REST reference documentation for that endpoint will indicate what type of GitHub App token is required. For more information, see Registering a GitHub App and About authentication with a GitHub App.
Instead of requiring octokit, create an instance of Octokit::Client by passing your GitHub App's information as options. In the following example, replace APP_ID with your app's ID, PRIVATE_KEY with your app's private key, and INSTALLATION_ID with the ID of the installation of your app that you want to authenticate on behalf of. You can find your app's ID and generate a private key on the settings page for your app. For more information, see Managing private keys for GitHub Apps. You can get an installation ID with the GET /users/{username}/installation, GET /repos/{owner}/{repo}/installation, or GET /orgs/{org}/installation endpoints. For more information, see REST API endpoints for GitHub Apps.
Rubyrequire 'octokit'

app = Octokit::Client.new(
  client_id: APP_ID,
  client_secret: PRIVATE_KEY,
  installation_id: INSTALLATION_ID
)

octokit = Octokit::Client.new(bearer_token: app.create_app_installation.access_token)
require 'octokit'

app = Octokit::Client.new(
  client_id: APP_ID,
  client_secret: PRIVATE_KEY,
  installation_id: INSTALLATION_ID
)

octokit = Octokit::Client.new(bearer_token: app.create_app_installation.access_token)

Authenticating in GitHub Actions
If you want to use the API in a GitHub Actions workflow, GitHub recommends that you authenticate with the built-in GITHUB_TOKEN instead of creating a token. You can grant permissions to the GITHUB_TOKEN with the permissions key. For more information about GITHUB_TOKEN, see Automatic token authentication.
If your workflow needs to access resources outside of the workflow's repository, then you will not be able to use GITHUB_TOKEN. In that case, store your credentials as a secret and replace GITHUB_TOKEN in the examples below with the name of your secret. For more information about secrets, see Using secrets in GitHub Actions.
If you use the run keyword to execute your Ruby script in your GitHub Actions workflows, you can store the value of GITHUB_TOKEN as an environment variable. Your script can access the environment variable as ENV['VARIABLE_NAME'].
For example, this workflow step stores GITHUB_TOKEN in an environment variable called TOKEN:
- name: Run script
  env:
    TOKEN: ${{ secrets.GITHUB_TOKEN }}
  run: |
    ruby .github/actions-scripts/use-the-api.rb

The script that the workflow runs uses ENV['TOKEN'] to authenticate:
Rubyrequire 'octokit'

octokit = Octokit::Client.new(access_token: ENV['TOKEN'])
require 'octokit'

octokit = Octokit::Client.new(access_token: ENV['TOKEN'])

Instantiating without authentication
You can use the REST API without authentication, although you will have a lower rate limit and will not be able to use some endpoints. To create an instance of Octokit without authenticating, do not pass the access_token option.
Rubyrequire 'octokit'

octokit = Octokit::Client.new
require 'octokit'

octokit = Octokit::Client.new

Making requests
Octokit supports multiple ways of making requests. You can use the request method to make requests if you know the HTTP verb and path for the endpoint. You can use the rest method if you want to take advantage of autocompletion in your IDE and typing. For paginated endpoints, you can use the paginate method to request multiple pages of data.
Using the request method to make requests
To use the request method to make requests, pass the HTTP method and path as the first argument. Pass any body, query, or path parameters in a hash as the second argument. For example, to make a GET request to /repos/{owner}/{repo}/issues and pass the owner, repo, and per_page parameters:
Rubyoctokit.request("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 2)
octokit.request("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 2)

The request method automatically passes the Accept: application/vnd.github+json header. To pass additional headers or a different Accept header, add a headers option to the hash that is passed as a second argument. The value of the headers option is a hash with the header names as keys and header values as values. For example, to send a content-type header with a value of text/plain:
Rubyoctokit.request("POST /markdown/raw", text: "Hello **world**", headers: { "content-type" => "text/plain" })
octokit.request("POST /markdown/raw", text: "Hello **world**", headers: { "content-type" => "text/plain" })

Using rest endpoint methods to make requests
Every REST API endpoint has an associated rest endpoint method in Octokit. These methods generally autocomplete in your IDE for convenience. You can pass any parameters as a hash to the method.
Rubyoctokit.rest.issues.list_for_repo(owner: "github", repo: "docs", per_page: 2)
octokit.rest.issues.list_for_repo(owner: "github", repo: "docs", per_page: 2)

Making paginated requests
If the endpoint is paginated and you want to fetch more than one page of results, you can use the paginate method. paginate will fetch the next page of results until it reaches the last page and then return all of the results as an array. A few endpoints return paginated results as an array in an object, as opposed to returning the paginated results as an array. paginate always returns an array of items even if the raw result was an object.
For example, the following example gets all of the issues from the github/docs repository. Although it requests 100 issues at a time, the function won't return until the last page of data is reached.
Rubyissue_data = octokit.paginate("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 100)
issue_data = octokit.paginate("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 100)

The paginate method accepts an optional block, which you can use to process each page of results. This allows you to collect only the data that you want from the response. For example, the following example continues to fetch results until an issue that includes "test" in the title is returned. For the pages of data that were returned, only the issue title and author are stored.
Rubyissue_data = octokit.paginate("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 100) do |response, done|
  response.data.map do |issue|
    if issue.title.include?("test")
      done.call
    end
    { title: issue.title, author: issue.user.login }
  end
end
issue_data = octokit.paginate("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 100) do |response, done|
  response.data.map do |issue|
    if issue.title.include?("test")
      done.call
    end
    { title: issue.title, author: issue.user.login }
  end
end

Instead of fetching all of the results at once, you can use octokit.paginate.iterator() to iterate through a single page at a time. For example, the following example fetches one page of results at a time and processes each object from the page before fetching the next page. Once an issue that includes "test" in the title is reached, the script stops the iteration and returns the issue title and issue author of each object that was processed. The iterator is the most memory-efficient method for fetching paginated data.
Rubyiterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 100)
issue_data = []
break_loop = false
iterator.each do |data|
  break if break_loop
  data.each do |issue|
    if issue.title.include?("test")
      break_loop = true
      break
    else
      issue_data << { title: issue.title, author: issue.user.login }
    end
  end
end
iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 100)
issue_data = []
break_loop = false
iterator.each do |data|
  break if break_loop
  data.each do |issue|
    if issue.title.include?("test")
      break_loop = true
      break
    else
      issue_data << { title: issue.title, author: issue.user.login }
    end
  end
end

You can use the paginate method with the rest endpoint methods as well. Pass the rest endpoint method as the first argument and any parameters as the second argument.
Rubyiterator = octokit.paginate.iterator(octokit.rest.issues.list_for_repo, owner: "github", repo: "docs", per_page: 100)
iterator = octokit.paginate.iterator(octokit.rest.issues.list_for_repo, owner: "github", repo: "docs", per_page: 100)

For more information about pagination, see Using pagination in the REST API.
Catching errors
Catching all errors
Sometimes, the GitHub REST API will return an error. For example, you will get an error if your access token is expired or if you omitted a required parameter. Octokit.rb automatically retries the request when it gets an error other than 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, and 422 Unprocessable Entity. If an API error occurs even after retries, Octokit.rb throws an error that includes the HTTP status code of the response (response.status) and the response headers (response.headers). You should handle these errors in your code. For example, you can use a try/catch block to catch errors:
Rubybegin
files_changed = []

iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/pulls/{pull_number}/files", owner: "github", repo: "docs", pull_number: 22809, per_page: 100)
iterator.each do | data |
    files_changed.concat(data.map {
      | file_data | file_data.filename
    })
  end
rescue Octokit::Error => error
if error.response
puts "Error! Status: #{error.response.status}. Message: #{error.response.data.message}"
end
puts error
end
begin
files_changed = []

iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/pulls/{pull_number}/files", owner: "github", repo: "docs", pull_number: 22809, per_page: 100)
iterator.each do | data |
    files_changed.concat(data.map {
      | file_data | file_data.filename
    })
  end
rescue Octokit::Error => error
if error.response
puts "Error! Status: #{error.response.status}. Message: #{error.response.data.message}"
end
puts error
end

Handling intended error codes
Sometimes, GitHub uses a 4xx status code to indicate a non-error response. If the endpoint you are using does this, you can add additional handling for specific errors. For example, the GET /user/starred/{owner}/{repo} endpoint will return a 404 if the repository is not starred. The following example uses the 404 response to indicate that the repository was not starred; all other error codes are treated as errors.
Rubybegin
octokit.request("GET /user/starred/{owner}/{repo}", owner: "github", repo: "docs")
puts "The repository is starred by me"
rescue Octokit::NotFound => error
puts "The repository is not starred by me"
rescue Octokit::Error => error
puts "An error occurred while checking if the repository is starred: #{error&.response&.data&.message}"
end
begin
octokit.request("GET /user/starred/{owner}/{repo}", owner: "github", repo: "docs")
puts "The repository is starred by me"
rescue Octokit::NotFound => error
puts "The repository is not starred by me"
rescue Octokit::Error => error
puts "An error occurred while checking if the repository is starred: #{error&.response&.data&.message}"
end

Handling rate limit errors
If you receive a rate limit error, you may want to retry your request after waiting. When you are rate limited, GitHub responds with a 403 Forbidden error, and the x-ratelimit-remaining response header value will be "0". The response headers will include a x-ratelimit-reset header, which tells you the time at which the current rate limit window resets, in UTC epoch seconds. You can retry your request after the time specified by x-ratelimit-reset.
Rubydef request_retry(route, parameters)
 begin
 response = octokit.request(route, parameters)
 return response
 rescue Octokit::RateLimitExceeded => error
 reset_time_epoch_seconds = error.response.headers['x-ratelimit-reset'].to_i
 current_time_epoch_seconds = Time.now.to_i
 seconds_to_wait = reset_time_epoch_seconds - current_time_epoch_seconds
 puts "You have exceeded your rate limit. Retrying in #{seconds_to_wait} seconds."
 sleep(seconds_to_wait)
 retry
 rescue Octokit::Error => error
 puts error
 end
 end

 response = request_retry("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 2)
def request_retry(route, parameters)
 begin
 response = octokit.request(route, parameters)
 return response
 rescue Octokit::RateLimitExceeded => error
 reset_time_epoch_seconds = error.response.headers['x-ratelimit-reset'].to_i
 current_time_epoch_seconds = Time.now.to_i
 seconds_to_wait = reset_time_epoch_seconds - current_time_epoch_seconds
 puts "You have exceeded your rate limit. Retrying in #{seconds_to_wait} seconds."
 sleep(seconds_to_wait)
 retry
 rescue Octokit::Error => error
 puts error
 end
 end

 response = request_retry("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 2)

Using the response
The request method returns a response object if the request was successful. The response object contains data (the response body returned by the endpoint), status (the HTTP response code), url (the URL of the request), and headers (a hash containing the response headers). Unless otherwise specified, the response body is in JSON format. Some endpoints do not return a response body; in those cases, the data property is omitted.
Rubyresponse = octokit.request("GET /repos/{owner}/{repo}/issues/{issue_number}", owner: "github", repo: "docs", issue_number: 11901)
 puts "The status of the response is: #{response.status}"
 puts "The request URL was: #{response.url}"
 puts "The x-ratelimit-remaining response header is: #{response.headers['x-ratelimit-remaining']}"
 puts "The issue title is: #{response.data['title']}"
response = octokit.request("GET /repos/{owner}/{repo}/issues/{issue_number}", owner: "github", repo: "docs", issue_number: 11901)
 puts "The status of the response is: #{response.status}"
 puts "The request URL was: #{response.url}"
 puts "The x-ratelimit-remaining response header is: #{response.headers['x-ratelimit-remaining']}"
 puts "The issue title is: #{response.data['title']}"

Similarly, the paginate method returns a response object. If the request was successful, the response object contains data, status, url, and headers.
Rubyresponse = octokit.paginate("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 100)
puts "#{response.data.length} issues were returned"
puts "The title of the first issue is: #{response.data[0]['title']}"
response = octokit.paginate("GET /repos/{owner}/{repo}/issues", owner: "github", repo: "docs", per_page: 100)
puts "#{response.data.length} issues were returned"
puts "The title of the first issue is: #{response.data[0]['title']}"

Example script
Here is a full example script that uses Octokit.rb. The script imports Octokit and creates a new instance of Octokit. If you want to authenticate with a GitHub App instead of a personal access token, you would import and instantiate App instead of Octokit. For more information, see Authenticating with a GitHub App in this guide.
The get_changed_files function gets all of the files changed for a pull request. The comment_if_data_files_changed function calls the get_changed_files function. If any of the files that the pull request changed include /data/ in the file path, then the function will comment on the pull request.
Rubyrequire "octokit"

 octokit = Octokit::Client.new(access_token: "YOUR-TOKEN")

 def get_changed_files(octokit, owner, repo, pull_number)
 files_changed = []

 begin
 iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/pulls/{pull_number}/files", owner: owner, repo: repo, pull_number: pull_number, per_page: 100)
 iterator.each do | data |
     files_changed.concat(data.map {
       | file_data | file_data.filename
     })
   end
 rescue Octokit::Error => error
 if error.response
 puts "Error! Status: #{error.response.status}. Message: #{error.response.data.message}"
 end
 puts error
 end

 files_changed
 end

 def comment_if_data_files_changed(octokit, owner, repo, pull_number)
 changed_files = get_changed_files(octokit, owner, repo, pull_number)

 if changed_files.any ? {
   | file_name | /\/data\//i.match ? (file_name)
 }
 begin
 comment = octokit.create_pull_request_review_comment(owner, repo, pull_number, "It looks like you changed a data file. These files are auto-generated. \n\nYou must revert any changes to data files before your pull request will be reviewed.")
 comment.html_url
 rescue Octokit::Error => error
 if error.response
 puts "Error! Status: #{error.response.status}. Message: #{error.response.data.message}"
 end
 puts error
 end
 end
 end

# Example usage
owner = "github"
repo = "docs"
pull_number = 22809
comment_url = comment_if_data_files_changed(octokit, owner, repo, pull_number)

puts "A comment was added to the pull request: #{comment_url}"
require "octokit"

 octokit = Octokit::Client.new(access_token: "YOUR-TOKEN")

 def get_changed_files(octokit, owner, repo, pull_number)
 files_changed = []

 begin
 iterator = octokit.paginate.iterator("GET /repos/{owner}/{repo}/pulls/{pull_number}/files", owner: owner, repo: repo, pull_number: pull_number, per_page: 100)
 iterator.each do | data |
     files_changed.concat(data.map {
       | file_data | file_data.filename
     })
   end
 rescue Octokit::Error => error
 if error.response
 puts "Error! Status: #{error.response.status}. Message: #{error.response.data.message}"
 end
 puts error
 end

 files_changed
 end

 def comment_if_data_files_changed(octokit, owner, repo, pull_number)
 changed_files = get_changed_files(octokit, owner, repo, pull_number)

 if changed_files.any ? {
   | file_name | /\/data\//i.match ? (file_name)
 }
 begin
 comment = octokit.create_pull_request_review_comment(owner, repo, pull_number, "It looks like you changed a data file. These files are auto-generated. \n\nYou must revert any changes to data files before your pull request will be reviewed.")
 comment.html_url
 rescue Octokit::Error => error
 if error.response
 puts "Error! Status: #{error.response.status}. Message: #{error.response.data.message}"
 end
 puts error
 end
 end
 end

# Example usage
owner = "github"
repo = "docs"
pull_number = 22809
comment_url = comment_if_data_files_changed(octokit, owner, repo, pull_number)

puts "A comment was added to the pull request: #{comment_url}"

Note

This is just a basic example. In practice, you may want to use error handling and conditional checks to handle various scenarios.

Next steps
To learn more about working with the GitHub REST API and Octokit.rb, explore the following resources:

To learn more about Octokit.rb see the Octokit.rb documentation.
To find detailed information about GitHub's available REST API endpoints, including their request and response structures, see the GitHub REST API documentation.\n\n\n\nREST API/Guides/Discover resources for a userDiscovering resources for a userLearn how to find the repositories and organizations that your app can access for a user in a reliable way for your authenticated requests to the REST API.In this articleGetting startedDiscover the repositories that your app can access for a userDiscover the organizations that your app can access for a userWhen making authenticated requests to the GitHub API, applications often need to fetch the current user's repositories and organizations. In this guide, we'll explain how to reliably discover those resources.
To interact with the GitHub API, we'll be using Octokit.rb. You can find the complete source code for this project in the platform-samples repository.
Getting started
If you haven't already, you should read the Basics of Authentication guide before working through the examples below. The examples below assume that you have registered an OAuth app and that your application has an OAuth token for a user.
Discover the repositories that your app can access for a user
In addition to having their own personal repositories, a user may be a collaborator on repositories owned by other users and organizations. Collectively, these are the repositories where the user has privileged access: either it's a private repository where the user has read or write access, or it's a public repository where the user has write access.
OAuth scopes and organization application policies determine which of those repositories your app can access for a user. Use the workflow below to discover those repositories.
As always, first we'll require GitHub's Octokit.rb Ruby library. Then we'll configure Octokit.rb to automatically handle pagination for us. For more information about pagination, see Using pagination in the REST API.
require 'octokit'

Octokit.auto_paginate = true

Next, we'll pass in our application's OAuth token for a given user:
# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!
# Instead, set and test environment variables, like below.
client = Octokit::Client.new :access_token => ENV["OAUTH_ACCESS_TOKEN"]

Then, we're ready to fetch the repositories that our application can access for the user:
client.repositories.each do |repository|
  full_name = repository[:full_name]
  has_push_access = repository[:permissions][:push]

  access_type = if has_push_access
                  "write"
                else
                  "read-only"
                end

  puts "User has #{access_type} access to #{full_name}."
end

Discover the organizations that your app can access for a user
Applications can perform all sorts of organization-related tasks for a user. To perform these tasks, the app needs an OAuth authorization with sufficient permission. For example, the read:org scope allows you to list teams, and the user scope lets you publicize the user’s organization membership. Once a user has granted one or more of these scopes to your app, you're ready to fetch the user’s organizations.
Just as we did when discovering repositories above, we'll start by requiring GitHub's Octokit.rb Ruby library and configuring it to take care of pagination for us. For more information about pagination, see Using pagination in the REST API.
require 'octokit'

Octokit.auto_paginate = true

Next, we'll pass in our application's OAuth token for a given user to initialize our API client:
# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!
# Instead, set and test environment variables, like below.
client = Octokit::Client.new :access_token => ENV["OAUTH_ACCESS_TOKEN"]

Then, we can list the organizations that our application can access for the user:
client.organizations.each do |organization|
  puts "User belongs to the #{organization[:login]} organization."
end

Return all of the user's organization memberships
If you've read the docs from cover to cover, you may have noticed an API method for listing a user's public organization memberships. Most applications should avoid this API method. This method only returns the user's public organization memberships, not their private organization memberships.
As an application, you typically want all of the user's organizations that your app is authorized to access. The workflow above will give you exactly that.\n\n\n\nREST API/Guides/Delivering deploymentsDelivering deploymentsUsing the Deployments REST API, you can build custom tooling that interacts with your server and a third-party app.In this articleWriting your serverWorking with deploymentsConclusionYou can use the REST API to deploy your projects hosted on GitHub on a server that you own. For more information about the endpoints to manage deployments and statuses, see REST API endpoints for deployments. You can also use the REST API to coordinate your deployments the moment your code lands on the default branch. For more information, see Building a CI server.
This guide will use the REST API to demonstrate a setup that you can use.
In our scenario, we will:

Merge a pull request.
When the CI is finished, we'll set the pull request's status accordingly.
When the pull request is merged, we'll run our deployment to our server.

Our CI system and host server will be figments of our imagination. They could be
Heroku, Amazon, or something else entirely. The crux of this guide will be setting up
and configuring the server managing the communication.
If you haven't already, be sure to download ngrok, and learn how
to use it. We find it to be a very useful tool for exposing local
applications to the internet.
Note

Alternatively, you can use webhook forwarding to set up your local environment to receive webhooks. For more information, see Using the GitHub CLI to forward webhooks for testing.

Note: you can download the complete source code for this project
from the platform-samples repo.
Writing your server
We'll write a quick Sinatra app to prove that our local connections are working.
Let's start with this:
require 'sinatra'
require 'json'

post '/event_handler' do
  payload = JSON.parse(params[:payload])
  "Well, it worked!"
end

(If you're unfamiliar with how Sinatra works, we recommend reading the Sinatra guide.)
Start this server up. By default, Sinatra starts on port 4567, so you'll want
to configure ngrok to start listening for that, too.
In order for this server to work, we'll need to set a repository up with a webhook. The webhook should be configured to fire whenever a pull request is created, or merged.
Go ahead and create a repository you're comfortable playing around in. Might we
suggest @octocat's Spoon/Knife repository?
After that, you'll create a new webhook in your repository, feeding it the URL that ngrok gave you, and choosing application/x-www-form-urlencoded as the content type.
Click Update webhook. You should see a body response of Well, it worked!.
Great! Click on Let me select individual events., and select the following:

Deployment
Deployment status
Pull Request

These are the events GitHub will send to our server whenever the relevant action
occurs. We'll configure our server to just handle when pull requests are merged
right now:
post '/event_handler' do
  @payload = JSON.parse(params[:payload])

  case request.env['HTTP_X_GITHUB_EVENT']
  when "pull_request"
    if @payload["action"] == "closed" && @payload["pull_request"]["merged"]
      puts "A pull request was merged! A deployment should start now..."
    end
  end
end

What's going on? Every event that GitHub sends out attached a X-GitHub-Event
HTTP header. We'll only care about the PR events for now. When a pull request is
merged (its state is closed, and merged is true), we'll kick off a deployment.
To test out this proof-of-concept, make some changes in a branch in your test
repository, open a pull request, and merge it. Your server should respond accordingly!
Working with deployments
With our server in place, the code being reviewed, and our pull request
merged, we want our project to be deployed.
We'll start by modifying our event listener to process pull requests when they're
merged, and start paying attention to deployments:
when "pull_request"
  if @payload["action"] == "closed" && @payload["pull_request"]["merged"]
    start_deployment(@payload["pull_request"])
  end
when "deployment"
  process_deployment(@payload)
when "deployment_status"
  update_deployment_status
end

Based on the information from the pull request, we'll start by filling out the
start_deployment method:
def start_deployment(pull_request)
  user = pull_request['user']['login']
  payload = JSON.generate(:environment => 'production', :deploy_user => user)
  @client.create_deployment(pull_request['head']['repo']['full_name'], pull_request['head']['sha'], {:payload => payload, :description => "Deploying my sweet branch"})
end

Deployments can have some metadata attached to them, in the form of a payload
and a description. Although these values are optional, it's helpful to use
for logging and representing information.
When a new deployment is created, a completely separate event is triggered. That's
why we have a new switch case in the event handler for deployment. You can
use this information to be notified when a deployment has been triggered.
Deployments can take a rather long time, so we'll want to listen for various events,
such as when the deployment was created, and what state it's in.
Let's simulate a deployment that does some work, and notice the effect it has on
the output. First, let's complete our process_deployment method:
def process_deployment
  payload = JSON.parse(@payload['payload'])
  # you can send this information to your chat room, monitor, pager, etc.
  puts "Processing '#{@payload['description']}' for #{payload['deploy_user']} to #{payload['environment']}"
  sleep 2 # simulate work
  @client.create_deployment_status("repos/#{@payload['repository']['full_name']}/deployments/#{@payload['id']}", 'pending')
  sleep 2 # simulate work
  @client.create_deployment_status("repos/#{@payload['repository']['full_name']}/deployments/#{@payload['id']}", 'success')
end

Finally, we'll simulate storing the status information as console output:
def update_deployment_status
  puts "Deployment status for #{@payload['id']} is #{@payload['state']}"
end

Let's break down what's going on. A new deployment is created by start_deployment,
which triggers the deployment event. From there, we call process_deployment
to simulate work that's going on. During that processing, we also make a call to
create_deployment_status, which lets a receiver know what's going on, as we
switch the status to pending.
After the deployment is finished, we set the status to success.
Conclusion
At GitHub, we've used a version of Heaven to manage
our deployments for years. A common flow is essentially the same as the
server we've built above:

Wait for a response on the state of the CI checks (success or failure)
If the required checks succeed, merge the pull request
Heaven takes the merged code, and deploys it to staging and production servers
In the meantime, Heaven also notifies everyone about the build, via Hubot sitting in our chat rooms

That's it! You don't need to build your own deployment setup to use this example.
You can always rely on GitHub integrations.\n\n\n\nREST API/Guides/Rendering data as graphsRendering data as graphsLearn how to visualize the programming languages from your repository using the D3.js library and Ruby Octokit.In this articleSetting up an OAuth appFetching repository informationVisualizing language countsCombining different API callsIn this guide, we're going to use the API to fetch information about repositories
that we own, and the programming languages that make them up. Then, we'll
visualize that information in a couple of different ways using the D3.js library. To
interact with the GitHub API, we'll be using the excellent Ruby library, Octokit.
If you haven't already, you should read the Basics of Authentication
guide before starting this example. You can find the complete source code for this project in the platform-samples repository.
Let's jump right in!
Setting up an OAuth app
First, register a new application on GitHub. Set the main and callback
URLs to http://localhost:4567/. As before, we're going to handle authentication for the API by
implementing a Rack middleware using sinatra-auth-github:
require 'sinatra/auth/github'

module Example
  class MyGraphApp < Sinatra::Base
    # !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!
    # Instead, set and test environment variables, like below
    # if ENV['GITHUB_CLIENT_ID'] && ENV['GITHUB_CLIENT_SECRET']
    #  CLIENT_ID        = ENV['GITHUB_CLIENT_ID']
    #  CLIENT_SECRET    = ENV['GITHUB_CLIENT_SECRET']
    # end

    CLIENT_ID = ENV['GH_GRAPH_CLIENT_ID']
    CLIENT_SECRET = ENV['GH_GRAPH_SECRET_ID']

    enable :sessions

    set :github_options, {
      :scopes    => "repo",
      :secret    => CLIENT_SECRET,
      :client_id => CLIENT_ID,
      :callback_url => "/"
    }

    register Sinatra::Auth::Github

    get '/' do
      if !authenticated?
        authenticate!
      else
        access_token = github_user["token"]
      end
    end
  end
end

Set up a similar config.ru file as in the previous example:
ENV['RACK_ENV'] ||= 'development'
require "rubygems"
require "bundler/setup"

require File.expand_path(File.join(File.dirname(__FILE__), 'server'))

run Example::MyGraphApp

Fetching repository information
This time, in order to talk to the GitHub API, we're going to use the Octokit
Ruby library. This is much easier than directly making a bunch of
REST calls. Plus, Octokit was developed by a GitHubber, and is actively maintained,
so you know it'll work.
Authentication with the API via Octokit is easy. Just pass your login
and token to the Octokit::Client constructor:
if !authenticated?
  authenticate!
else
  octokit_client = Octokit::Client.new(:login => github_user.login, :oauth_token => github_user.token)
end

Let's do something interesting with the data about our repositories. We're going
to see the different programming languages they use, and count which ones are used
most often. To do that, we'll first need a list of our repositories from the API.
With Octokit, that looks like this:
repos = client.repositories

Next, we'll iterate over each repository, and count the language that GitHub
associates with it:
language_obj = {}
repos.each do |repo|
  # sometimes language can be nil
  if repo.language
    if !language_obj[repo.language]
      language_obj[repo.language] = 1
    else
      language_obj[repo.language] += 1
    end
  end
end

languages.to_s

When you restart your server, your web page should display something
that looks like this:
{"JavaScript"=>13, "PHP"=>1, "Perl"=>1, "CoffeeScript"=>2, "Python"=>1, "Java"=>3, "Ruby"=>3, "Go"=>1, "C++"=>1}

So far, so good, but not very human-friendly. A visualization
would be great in helping us understand how these language counts are distributed. Let's feed
our counts into D3 to get a neat bar graph representing the popularity of the languages we use.
Visualizing language counts
D3.js, or just D3, is a comprehensive library for creating many kinds of charts, graphs, and interactive visualizations.
Using D3 in detail is beyond the scope of this guide, but for a good introductory article,
check out D3 for Mortals.
D3 is a JavaScript library, and likes working with data as arrays. So, let's convert our Ruby hash into
a JSON array for use by JavaScript in the browser.
languages = []
language_obj.each do |lang, count|
  languages.push :language => lang, :count => count
end

erb :lang_freq, :locals => { :languages => languages.to_json}

We're simply iterating over each key-value pair in our object and pushing them into
a new array. The reason we didn't do this earlier is because we didn't want to iterate
over our language_obj object while we were creating it.
Now, lang_freq.erb is going to need some JavaScript to support rendering a bar graph.
For now, you can just use the code provided here, and refer to the resources linked above
if you want to learn more about how D3 works:
<!DOCTYPE html>
<meta charset="utf-8">
<html>
  <head>
    <script src="//cdnjs.cloudflare.com/ajax/libs/d3/3.0.1/d3.v3.min.js"></script>
    <style>
    svg {
      padding: 20px;
    }
    rect {
      fill: #2d578b
    }
    text {
      fill: white;
    }
    text.yAxis {
      font-size: 12px;
      font-family: Helvetica, sans-serif;
      fill: black;
    }
    </style>
  </head>
  <body>
    <p>Check this sweet data out:</p>
    <div id="lang_freq"></div>

  </body>
  <script>
    var data = <%= languages %>;

    var barWidth = 40;
    var width = (barWidth + 10) * data.length;
    var height = 300;

    var x = d3.scale.linear().domain([0, data.length]).range([0, width]);
    var y = d3.scale.linear().domain([0, d3.max(data, function(datum) { return datum.count; })]).
      rangeRound([0, height]);

    // add the canvas to the DOM
    var languageBars = d3.select("#lang_freq").
      append("svg:svg").
      attr("width", width).
      attr("height", height);

    languageBars.selectAll("rect").
      data(data).
      enter().
      append("svg:rect").
      attr("x", function(datum, index) { return x(index); }).
      attr("y", function(datum) { return height - y(datum.count); }).
      attr("height", function(datum) { return y(datum.count); }).
      attr("width", barWidth);

    languageBars.selectAll("text").
      data(data).
      enter().
      append("svg:text").
      attr("x", function(datum, index) { return x(index) + barWidth; }).
      attr("y", function(datum) { return height - y(datum.count); }).
      attr("dx", -barWidth/2).
      attr("dy", "1.2em").
      attr("text-anchor", "middle").
      text(function(datum) { return datum.count;});

    languageBars.selectAll("text.yAxis").
      data(data).
      enter().append("svg:text").
      attr("x", function(datum, index) { return x(index) + barWidth; }).
      attr("y", height).
      attr("dx", -barWidth/2).
      attr("text-anchor", "middle").
      text(function(datum) { return datum.language;}).
      attr("transform", "translate(0, 18)").
      attr("class", "yAxis");
  </script>
</html>

Phew! Again, don't worry about what most of this code is doing. The relevant part
here is a line way at the top--var data = <%= languages %>;--which indicates
that we're passing our previously created languages array into ERB for manipulation.
As the "D3 for Mortals" guide suggests, this isn't necessarily the best use of
D3. But it does serve to illustrate how you can use the library, along with Octokit,
to make some really amazing things.
Combining different API calls
Now it's time for a confession: the language attribute within repositories
only identifies the "primary" language defined. That means that if you have
a repository that combines several languages, the one with the most bytes of code
is considered to be the primary language.
Let's combine a few API calls to get a true representation of which language
has the greatest number of bytes written across all our code. A treemap
should be a great way to visualize the sizes of our coding languages used, rather
than simply the count. We'll need to construct an array of objects that looks
something like this:
[ { "name": "language1", "size": 100},
  { "name": "language2", "size": 23}
  ...
]

Since we already have a list of repositories above, let's inspect each one, and
call the GET /repos/{owner}/{repo}/languages endpoint:
repos.each do |repo|
  repo_name = repo.name
  repo_langs = octokit_client.languages("#{github_user.login}/#{repo_name}")
end

From there, we'll cumulatively add each language found to a list of languages:
repo_langs.each do |lang, count|
  if !language_obj[lang]
    language_obj[lang] = count
  else
    language_obj[lang] += count
  end
end

After that, we'll format the contents into a structure that D3 understands:
language_obj.each do |lang, count|
  language_byte_count.push :name => "#{lang} (#{count})", :count => count
end

# some mandatory formatting for D3
language_bytes = [ :name => "language_bytes", :elements => language_byte_count]

(For more information on D3 tree map magic, check out this simple tutorial.)
To wrap up, we pass this JSON information over to the same ERB template:
erb :lang_freq, :locals => { :languages => languages.to_json, :language_byte_count => language_bytes.to_json}

Like before, here's a bunch of JavaScript that you can drop
directly into your template:
<div id="byte_freq"></div>
<script>
  var language_bytes = <%= language_byte_count %>
  var childrenFunction = function(d){return d.elements};
  var sizeFunction = function(d){return d.count;};
  var colorFunction = function(d){return Math.floor(Math.random()*20)};
  var nameFunction = function(d){return d.name;};

  var color = d3.scale.linear()
              .domain([0,10,15,20])
              .range(["grey","green","yellow","red"]);

  drawTreemap(5000, 2000, '#byte_freq', language_bytes, childrenFunction, nameFunction, sizeFunction, colorFunction, color);

  function drawTreemap(height,width,elementSelector,language_bytes,childrenFunction,nameFunction,sizeFunction,colorFunction,colorScale){

      var treemap = d3.layout.treemap()
          .children(childrenFunction)
          .size([width,height])
          .value(sizeFunction);

      var div = d3.select(elementSelector)
          .append("div")
          .style("position","relative")
          .style("width",width + "px")
          .style("height",height + "px");

      div.data(language_bytes).selectAll("div")
          .data(function(d){return treemap.nodes(d);})
          .enter()
          .append("div")
          .attr("class","cell")
          .style("background",function(d){ return colorScale(colorFunction(d));})
          .call(cell)
          .text(nameFunction);
  }

  function cell(){
      this
          .style("left",function(d){return d.x + "px";})
          .style("top",function(d){return d.y + "px";})
          .style("width",function(d){return d.dx - 1 + "px";})
          .style("height",function(d){return d.dy - 1 + "px";});
  }
</script>

Et voila! Beautiful rectangles containing your repo languages, with relative
proportions that are easy to see at a glance. You might need to
tweak the height and width of your treemap, passed as the first two
arguments to drawTreemap above, to get all the information to show up properly.\n\n\n\nREST API/Guides/Working with commentsWorking with commentsUsing the REST API, you can access and manage comments in your pull requests, issues, or commits.In this articlePull Request CommentsPull Request Comments on a LineCommit CommentsFor any Pull Request, GitHub provides three kinds of comment views:
comments on the Pull Request as a whole, comments on a specific line within the Pull Request,
and comments on a specific commit within the Pull Request.
Each of these types of comments goes through a different portion of the GitHub API.
In this guide, we'll explore how you can access and manipulate each one. For every
example, we'll be using this sample Pull Request made on the "octocat"
repository. As always, samples can be found in our platform-samples repository.
Pull Request Comments
To access comments on a Pull Request, you'll use the endpoints to manage issues.
This may seem counterintuitive at first. But once you understand that a Pull
Request is just an Issue with code, it makes sense to use these endpoints to
create comments on a Pull Request.
We'll demonstrate fetching Pull Request comments by creating a Ruby script using
Octokit.rb. You'll also want to create a personal access token.
The following code should help you get started accessing comments from a Pull Request
using Octokit.rb:
require 'octokit'

# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!
# Instead, set and test environment variables, like below
client = Octokit::Client.new :access_token => ENV['MY_PERSONAL_TOKEN']

client.issue_comments("octocat/Spoon-Knife", 1176).each do |comment|
  username = comment[:user][:login]
  post_date = comment[:created_at]
  content = comment[:body]

  puts "#{username} made a comment on #{post_date}. It says:\n'#{content}'\n"
end

Here, we're specifically calling out to the API to get the comments (issue_comments),
providing both the repository's name (octocat/Spoon-Knife), and the Pull Request ID
we're interested in (1176). After that, it's simply a matter of iterating through
the comments to fetch information about each one.
Pull Request Comments on a Line
Within the diff view, you can start a discussion on a particular aspect of a singular
change made within the Pull Request. These comments occur on the individual lines
within a changed file. The endpoint URL for this discussion comes from the endpoint to manage pull request reviews.
The following code fetches all the Pull Request comments made on files, given a single Pull Request number:
require 'octokit'

# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!
# Instead, set and test environment variables, like below
client = Octokit::Client.new :access_token => ENV['MY_PERSONAL_TOKEN']

client.pull_request_comments("octocat/Spoon-Knife", 1176).each do |comment|
  username = comment[:user][:login]
  post_date = comment[:created_at]
  content = comment[:body]
  path = comment[:path]
  position = comment[:position]

  puts "#{username} made a comment on #{post_date} for the file called #{path}, on line #{position}. It says:\n'#{content}'\n"
end

You'll notice that it's incredibly similar to the example above. The difference
between this view and the Pull Request comment is the focus of the conversation.
A comment made on a Pull Request should be reserved for discussion or ideas on
the overall direction of the code. A comment made as part of a Pull Request review should
deal specifically with the way a particular change was implemented within a file.
Commit Comments
The last type of comments occur specifically on individual commits. For this reason,
they make use of the endpoint to manage commit comments.
To retrieve the comments on a commit, you'll want to use the SHA1 of the commit.
In other words, you won't use any identifier related to the Pull Request. Here's an example:
require 'octokit'

# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!
# Instead, set and test environment variables, like below
client = Octokit::Client.new :access_token => ENV['MY_PERSONAL_TOKEN']

client.commit_comments("octocat/Spoon-Knife", "cbc28e7c8caee26febc8c013b0adfb97a4edd96e").each do |comment|
  username = comment[:user][:login]
  post_date = comment[:created_at]
  content = comment[:body]

  puts "#{username} made a comment on #{post_date}. It says:\n'#{content}'\n"
end

Note that this API call will retrieve single line comments, as well as comments made
on the entire commit.\n\n\n\nREST API/Guides/Building a CI serverBuilding a CI serverBuild your own CI system using the Status API.In this articleWriting your serverWorking with statusesConclusionYou can use the REST API to tie together commits with
a testing service, so that every push you make can be tested and represented
in a GitHub pull request. For more information about the relevant endpoints, see REST API endpoints for commit statuses.
This guide will use that API to demonstrate a setup that you can use.
In our scenario, we will:

Run our CI suite when a Pull Request is opened (we'll set the CI status to pending).
When the CI is finished, we'll set the Pull Request's status accordingly.

Our CI system and host server will be figments of our imagination. They could be
Travis, Jenkins, or something else entirely. The crux of this guide will be setting up
and configuring the server managing the communication.
If you haven't already, download ngrok, and learn how
to use it. We find it to be a very useful tool for exposing local
applications to the internet.
Note

Alternatively, you can use webhook forwarding to set up your local environment to receive webhooks. For more information, see Using the GitHub CLI to forward webhooks for testing.

Note: you can download the complete source code for this project
from the platform-samples repo.
Writing your server
We'll write a quick Sinatra app to prove that our local connections are working.
Let's start with this:
require 'sinatra'
require 'json'

post '/event_handler' do
  payload = JSON.parse(params[:payload])
  "Well, it worked!"
end

(If you're unfamiliar with how Sinatra works, we recommend reading the Sinatra guide.)
Start this server up. By default, Sinatra starts on port 4567, so you'll want
to configure ngrok to start listening for that, too.
In order for this server to work, we'll need to set a repository up with a webhook. The webhook should be configured to fire whenever a pull request is created, or merged.
Go ahead and create a repository you're comfortable playing around in. Might we suggest @octocat's Spoon/Knife repository?
After that, you'll create a new webhook in your repository, feeding it the URL that ngrok gave you, and choosing application/x-www-form-urlencoded as the content type.
Click Update webhook. You should see a body response of Well, it worked!.
Great! Click on Let me select individual events, and select the following:

Status
Pull Request

These are the events GitHub will send to our server whenever the relevant action
occurs. Let's update our server to just handle the Pull Request scenario right now:
post '/event_handler' do
  @payload = JSON.parse(params[:payload])

  case request.env['HTTP_X_GITHUB_EVENT']
  when "pull_request"
    if @payload["action"] == "opened"
      process_pull_request(@payload["pull_request"])
    end
  end
end

helpers do
  def process_pull_request(pull_request)
    puts "It's #{pull_request['title']}"
  end
end

What's going on? Every event that GitHub sends out attached a X-GitHub-Event
HTTP header. We'll only care about the PR events for now. From there, we'll
take the payload of information, and return the title field. In an ideal scenario,
our server would be concerned with every time a pull request is updated, not just
when it's opened. That would make sure that every new push passes the CI tests.
But for this demo, we'll just worry about when it's opened.
To test out this proof-of-concept, make some changes in a branch in your test
repository, and open a pull request. Your server should respond accordingly!
Working with statuses
With our server in place, we're ready to start our first requirement, which is
setting (and updating) CI statuses. Note that at any time you update your server,
you can click Redeliver to send the same payload. There's no need to make a
new pull request every time you make a change!
Since we're interacting with the GitHub API, we'll use Octokit.rb
to manage our interactions. We'll configure that client with
a personal access token:
# !!! DO NOT EVER USE HARD-CODED VALUES IN A REAL APP !!!
# Instead, set and test environment variables, like below
ACCESS_TOKEN = ENV['MY_PERSONAL_TOKEN']

before do
  @client ||= Octokit::Client.new(:access_token => ACCESS_TOKEN)
end

After that, we'll just need to update the pull request on GitHub to make clear
that we're processing on the CI:
def process_pull_request(pull_request)
  puts "Processing pull request..."
  @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'pending')
end

We're doing three very basic things here:

We're looking up the full name of the repository
We're looking up the last SHA of the pull request
We're setting the status to "pending"

That's it! From here, you can run whatever process you need to in order to execute
your test suite. Maybe you're going to pass off your code to Jenkins, or call
on another web service via its API, like Travis. After that, you'd
be sure to update the status once more. In our example, we'll just set it to "success":
def process_pull_request(pull_request)
  @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'pending')
  sleep 2 # do busy work...
  @client.create_status(pull_request['base']['repo']['full_name'], pull_request['head']['sha'], 'success')
  puts "Pull request processed!"
end

Conclusion
At GitHub, we've used a version of Janky to manage our CI for years.
The basic flow is essentially the exact same as the server we've built above.
At GitHub, we:

Fire to Jenkins when a pull request is created or updated (via Janky)
Wait for a response on the state of the CI
If the code is green, we merge the pull request

All of this communication is funneled back to our chat rooms. You don't need to
build your own CI setup to use this example.
You can always rely on GitHub integrations.\n\n\n\nREST API/Guides/Get started - Git databaseUsing the REST API to interact with your Git databaseUse the REST API to read and write raw Git objects to your Git database on GitHub and to list and update your references (branch heads and tags).In this articleOverviewChecking mergeability of pull requestsOverview
This basically allows you to reimplement a lot of Git functionality with the REST API - by creating raw objects directly into the database and updating branch references you could technically do just about anything that Git can do without having Git installed.
The REST API will return a 409 Conflict if the Git repository is empty
or unavailable. An unavailable repository typically means GitHub is in the process of creating the repository. For an empty repository, you can use the PUT /repos/{owner}/{repo}/contents/{path} REST API endpoint to create content and initialize the repository so you can use the API to manage the Git database. Contact us through the GitHub Support portal if this response status persists.
For more information on the Git object database, please read the
Git Internals chapter of
the Pro Git book.
As an example, if you wanted to commit a change to a file in your
repository, you would:

Get the current commit object
Retrieve the tree it points to
Retrieve the content of the blob object that tree has for that particular file path
Change the content somehow and post a new blob object with that new content, getting a blob SHA back
Post a new tree object with that file path pointer replaced with your new blob SHA getting a tree SHA back
Create a new commit object with the current commit SHA as the parent and the new tree SHA, getting a commit SHA back
Update the reference of your branch to point to the new commit SHA

It might seem complex, but it's actually pretty simple when you understand
the model and it opens up a ton of things you could potentially do with the API.
Checking mergeability of pull requests
Warning

Please do not depend on using Git directly or GET /repos/{owner}/{repo}/git/refs/{ref} for updates to merge Git refs, because this content becomes outdated without warning.

A consuming API needs to explicitly request a pull request to create a test merge commit. A test merge commit is created when you view the pull request in the UI and the "Merge" button is displayed, or when you get, create, or edit a pull request using the REST API. Without this request, the merge Git refs will fall out of date until the next time someone views the pull request.
If you are currently using polling methods that produce outdated merge Git refs, then GitHub recommends using the following steps to get the latest changes from the default branch:

Receive the pull request webhook.
Call GET /repos/{owner}/{repo}/pulls/{pull_number} to start a background job for creating the merge commit candidate.
Poll your repository using GET /repos/{owner}/{repo}/pulls/{pull_number} to see if the mergeable attribute is true or false. You can use Git directly or GET /repos/{owner}/{repo}/git/refs/{ref} for updates to merge Git refs only after performing the previous steps.\n\n\n\nREST API/Guides/Get started - ChecksUsing the REST API to interact with checksYou can use the REST API to build GitHub Apps that run powerful checks against code changes in a repository. You can create apps that perform continuous integration, code linting, or code scanning services and provide detailed feedback on commits.In this articleOverviewAbout check suitesAbout check runsCheck runs and requested actionsRetention of checks dataOverview
Rather than binary pass/fail build statuses, GitHub Apps can report rich statuses, annotate lines of code with detailed information, and re-run tests. REST API to manage checks is available exclusively to your GitHub Apps.
For an example of how to use the REST API with a GitHub App, see Building CI checks with a GitHub App.
You can use statuses with protected branches to prevent people from merging pull requests prematurely. For more information, see About protected branches.
About check suites
When someone pushes code to a repository, GitHub creates a check suite for the last commit. A check suite is a collection of the check runs created by a single GitHub App for a specific commit. Check suites summarize the status and conclusion of the check runs that a suite includes.
The status can be queued, in_progress, requested, waiting, pending, or completed. Only GitHub Actions can set a status of requested, waiting, or pending.
If the status is completed, the conclusion can be any of the following:

action_required
cancelled
timed_out
failure
neutral
skipped
stale
startup_failure
success

The check suite reports the highest priority check run conclusion in the check suite's conclusion. For example, if three check runs have conclusions of timed_out, success, and neutral the check suite conclusion will be timed_out.
By default, GitHub creates a check suite automatically when code is pushed to the repository. This default flow sends the check_suite event (with requested action) to all GitHub Apps that have the checks:write permission. When your GitHub App receives the check_suite event, it can create new check runs for the latest commit. GitHub automatically adds new check runs to the correct check suite based on the check run's repository and SHA.
If you don't want to use the default automatic flow, you can control when you create check suites. To change the default settings for the creation of check suites, use the Update repository preferences for check suites endpoint. All changes to the automatic flow settings are recorded in the audit log for the repository. If you have disabled the automatic flow, you can create a check suite using the Create a check suite endpoint. You should continue to use the Create a check run endpoint to provide feedback on a commit.
Write permission for the REST API to interact with checks is only available to GitHub Apps. OAuth apps and authenticated users can view check runs and check suites, but they are not able to create them. If you aren't building a GitHub App, you might be interested in using the REST API to interact with commit statuses.
To use the endpoints to manage check suites, the GitHub App must have the checks:write permission and can also subscribe to the check_suite webhook.
For information on how to authenticate as a GitHub App, see About authentication with a GitHub App.
About check runs
A check run is an individual test that is part of a check suite. Each run includes a status and conclusion.
The status can be queued, in_progress, requested, waiting, pending, or completed. Only GitHub Actions can set a status of requested, waiting, or pending.
If the status is completed, the conclusion can be any of the following:

action_required
cancelled
timed_out
failure
neutral
skipped
success

If a check run is in an incomplete state for more than 14 days, then the check run's conclusion becomes stale and appears on GitHub as stale with . Only GitHub can mark check runs as stale. For more information about possible conclusions of a check run, see the conclusion parameter.
As soon as you receive the check_suite webhook, you can create the check run, even if the check is not complete. You can update the status of the check run as it completes with the values queued, in_progress, or completed, and you can update the output as more details become available. A check run can contain timestamps, a link to more details on your external site, detailed annotations for specific lines of code, and information about the analysis performed.
Annotations add information from your check run to specific lines of code. Each annotation includes an annotation_level property, which can be notice, warning, or failure. The annotation also includes path, start_line, and end_line to specify what location the annotation refers to. The annotation includes a message to describe the result. For more information, see REST API endpoints for check runs.
A check can also be manually re-run in the GitHub UI. See About status checks for more details. When this occurs, the GitHub App that created the check run will receive the check_run webhook requesting a new check run. If you create a check run without creating a check suite, GitHub creates the check suite for you automatically.
Write permission for the REST API to interact with checks is only available to GitHub Apps. OAuth apps and authenticated users can view check runs and check suites, but they are not able to create them. If you aren't building a GitHub App, you might be interested in using the REST API to interact with commit statuses.
To use the endpoints to manage check runs, the GitHub App must have the checks:write permission and can also subscribe to the check_run webhook.
Check runs and requested actions
When you set up a check run with requested actions (not to be confused with GitHub Actions), you can display a button in the pull request view on GitHub that allows people to request your GitHub App to perform additional tasks.
For example, a code linting app could use requested actions to display a button in a pull request to automatically fix detected syntax errors.
To create a button that can request additional actions from your app, use the actions object when you Create a check run. For example, the actions object below displays a button in the Checks tab of a pull request with the label "Fix this." The button appears after the check run completes.
"actions": [{
  "label": "Fix this",
  "description": "Let us fix that for you",
  "identifier": "fix_errors"
}]

When a user clicks the button, GitHub sends the check_run.requested_action webhook to your app. When your app receives a check_run.requested_action webhook event, it can look for the requested_action.identifier key in the webhook payload to determine which button was clicked and perform the requested task.
For a detailed example of how to set up requested actions with the REST API, see Building CI checks with a GitHub App.
Retention of checks data
GitHub retains checks data for 400 days. After 400 days, the data is archived. 10 days after archival, the data is permanently deleted.
To merge a pull request with checks that are both required and archived, you must rerun the checks.\n\n\n\nREST API/Guides/Encrypt secretsEncrypting secrets for the REST APIIn order to create or update a secret with the REST API, you must encrypt the value of the secret.In this articleAbout encrypting secretsExample encrypting a secret using Node.jsExample encrypting a secret using PythonExample encrypting a secret using C#Example encrypting a secret using RubyAbout encrypting secrets
Several REST API endpoints let you create secrets on GitHub. To use these endpoints, you must encrypt the secret value using libsodium. For more information, see the libsodium documentation.
In order to encrypt a secret, you need a Base64 encoded public key. You can get a public key from the REST API. To determine which endpoint to use to get the public key, look at the documentation for the encrypted_value parameter in the endpoint that you will use to create a secret .
Example encrypting a secret using Node.js
If you are using Node.js, you can encrypt your secret using the libsodium-wrappers library. For more information, see libsodium-wrappers.
In the following example, replace YOUR_SECRET with the plain text value that you want to encrypt. Replace YOUR_BASE64_KEY with your Base64 encoded public key. The documentation for the endpoint that you will use to create a secret will tell you which endpoint you can use to get the public key. ORIGINAL is not a placeholder; it is a parameter for the libsodium-wrappers library.
JavaScriptconst sodium = require('libsodium-wrappers')

const secret = 'YOUR_SECRET'
const key = 'YOUR_BASE64_KEY'

//Check if libsodium is ready and then proceed.
sodium.ready.then(() => {
  // Convert the secret and key to a Uint8Array.
  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
  let binsec = sodium.from_string(secret)

  // Encrypt the secret using libsodium
  let encBytes = sodium.crypto_box_seal(binsec, binkey)

  // Convert the encrypted Uint8Array to Base64
  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)

  // Print the output
  console.log(output)
});
const sodium = require('libsodium-wrappers')

const secret = 'YOUR_SECRET'
const key = 'YOUR_BASE64_KEY'

//Check if libsodium is ready and then proceed.
sodium.ready.then(() => {
  // Convert the secret and key to a Uint8Array.
  let binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL)
  let binsec = sodium.from_string(secret)

  // Encrypt the secret using libsodium
  let encBytes = sodium.crypto_box_seal(binsec, binkey)

  // Convert the encrypted Uint8Array to Base64
  let output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL)

  // Print the output
  console.log(output)
});

Example encrypting a secret using Python
If you are using Python 3, you can encrypt your secret using the PyNaCl library. For more information, see PyNaCl.
In the following example, replace YOUR_SECRET with the plain text value that you want to encrypt. Replace YOUR_BASE64_KEY with your Base64 encoded public key. The documentation for the endpoint that you will use to create a secret will tell you which endpoint you can use to get the public key.
Pythonfrom base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
  """Encrypt a Unicode string using the public key."""
  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
  sealed_box = public.SealedBox(public_key)
  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
  return b64encode(encrypted).decode("utf-8")

encrypt("YOUR_BASE64_KEY", "YOUR_SECRET")
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
  """Encrypt a Unicode string using the public key."""
  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
  sealed_box = public.SealedBox(public_key)
  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
  return b64encode(encrypted).decode("utf-8")

encrypt("YOUR_BASE64_KEY", "YOUR_SECRET")

Example encrypting a secret using C#
If you are using C#, you can encrypt your secret using the Sodium.Core package. For more information, see Sodium.Core.
In the following example, replace YOUR_SECRET with the plain text value that you want to encrypt. Replace YOUR_BASE64_KEY with your Base64 encoded public key. The documentation for the endpoint that you will use to create a secret will tell you which endpoint you can use to get the public key.
C#var secretValue = System.Text.Encoding.UTF8.GetBytes("YOUR_SECRET");
var publicKey = Convert.FromBase64String("YOUR_BASE64_KEY");

var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);

Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
var secretValue = System.Text.Encoding.UTF8.GetBytes("YOUR_SECRET");
var publicKey = Convert.FromBase64String("YOUR_BASE64_KEY");

var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);

Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));

Example encrypting a secret using Ruby
If you are using Ruby, you can encrypt your secret using the RbNaCl gem. For more information, see RbNaCl.
In the following example, replace YOUR_SECRET with the plain text value that you want to encrypt. Replace YOUR_BASE64_KEY with your Base64 encoded public key. The documentation for the endpoint that you will use to create a secret will tell you which endpoint you can use to get the public key.
Rubyrequire "rbnacl"
require "base64"

key = Base64.decode64("YOUR_BASE64_KEY")
public_key = RbNaCl::PublicKey.new(key)

box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
encrypted_secret = box.encrypt("YOUR_SECRET")

# Print the base64 encoded secret
puts Base64.strict_encode64(encrypted_secret)
require "rbnacl"
require "base64"

key = Base64.decode64("YOUR_BASE64_KEY")
public_key = RbNaCl::PublicKey.new(key)

box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
encrypted_secret = box.encrypt("YOUR_SECRET")

# Print the base64 encoded secret
puts Base64.strict_encode64(encrypted_secret)\n\n\n\nREST API/About the REST API/API VersionsAPI VersionsLearn how to specify which REST API version to use whenever you make a request to the REST API.In this articleAbout API versioningSpecifying an API versionUpgrading to a new API versionSupported API versionsAbout API versioning
The GitHub REST API is versioned. The API version name is based on the date when the API version was released. For example, the API version 2022-11-28 was released on Mon, 28 Nov 2022.
Any breaking changes will be released in a new API version. Breaking changes are changes that can potentially break an integration. Breaking changes include:

Removing an entire operation
Removing or renaming a parameter
Removing or renaming a response field
Adding a new required parameter
Making a previously optional parameter required
Changing the type of a parameter or response field
Removing enum values
Adding a new validation rule to an existing parameter
Changing authentication or authorization requirements

Any additive (non-breaking) changes will be available in all supported API versions. Additive changes are changes that should not break an integration. Additive changes include:

Adding an operation
Adding an optional parameter
Adding an optional request header
Adding a response field
Adding a response header
Adding enum values

When a new REST API version is released, the previous API version will be supported for at least 24 more months following the release of the new API version.
Specifying an API version
You should use the X-GitHub-Api-Version header to specify an API version. For example:
curl --header "X-GitHub-Api-Version:2022-11-28" https://api.github.com/zen

Requests without the X-GitHub-Api-Version header will default to use the 2022-11-28 version.
If you specify an API version that is no longer supported, you will receive a 400 error.
Upgrading to a new API version
Before upgrading to a new REST API version, you should read the changelog of breaking changes for the new API version to understand what breaking changes are included and to learn more about how to upgrade to that specific API version. For more information, see Breaking changes.
When you update your integration to specify the new API version in the X-GitHub-Api-Version header, you'll also need to make any changes required for your integration to work with the new API version.
Once your integration is updated, test your integration to verify that it works with the new API version.
Supported API versions
The following REST API versions are currently supported:
2022-11-28
You can also make an API request to get all of the supported API versions. For more information, see REST API endpoints for meta data.\n\n\n\nREST API/GuidesGuidesLearn about getting started with the REST API, authentication, and how to use the REST API for a variety of tasks.This section of the documentation is intended to get you up-and-running with
real-world GitHub API applications. We'll go over everything you need to know, from authentication to results manipulation to integrating results with other apps.
Every tutorial will include a project, and each project will be saved and documented in our public
platform-samples repository.Scripting with the REST API and JavaScriptWrite a script using the Octokit.js SDK to interact with the REST API.Scripting with the REST API and RubyLearn how to write a script using the Octokit.rb SDK to interact with the REST API.Discovering resources for a userLearn how to find the repositories and organizations that your app can access for a user in a reliable way for your authenticated requests to the REST API.Delivering deploymentsUsing the Deployments REST API, you can build custom tooling that interacts with your server and a third-party app.Rendering data as graphsLearn how to visualize the programming languages from your repository using the D3.js library and Ruby Octokit.Working with commentsUsing the REST API, you can access and manage comments in your pull requests, issues, or commits.Building a CI serverBuild your own CI system using the Status API.Using the REST API to interact with your Git databaseUse the REST API to read and write raw Git objects to your Git database on GitHub and to list and update your references (branch heads and tags).Using the REST API to interact with checksYou can use the REST API to build GitHub Apps that run powerful checks against code changes in a repository. You can create apps that perform continuous integration, code linting, or code scanning services and provide detailed feedback on commits.Encrypting secrets for the REST APIIn order to create or update a secret with the REST API, you must encrypt the value of the secret.\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."GitHub REST API documentation Create integrations, retrieve data, and automate your workflows with the GitHub REST API.Overview Quickstart Start hereView all About the REST APIGet oriented to the REST API documentation.Getting started with the REST APILearn how to use the GitHub REST API.Authenticating to the REST APIYou can authenticate to the REST API to access more endpoints and have a higher rate limit.Best practices for using the REST APIFollow these best practices when using GitHub's API.PopularRate limits for the REST APILearn about REST API rate limits, how to avoid exceeding them, and what to do if you do exceed them.Troubleshooting the REST APILearn how to diagnose and resolve common problems for the REST API.Scripting with the REST API and JavaScriptWrite a script using the Octokit.js SDK to interact with the REST API.Keeping your API credentials secureFollow these best practices to keep your API credentials and tokens secure.What's newView all Check if private vulnerability reporting is enabled via REST APIMarch 08New limits on scoped token creation for GitHub AppsFebruary 23Upcoming changes to repository insightsNovember 29GuidesDelivering deploymentsUsing the Deployments REST API, you can build custom tooling that interacts with your server and a third-party app.@GitHubUsing the REST API to interact with checksYou can use the REST API to build GitHub Apps that run powerful checks against code changes in a repository. You can create apps that perform continuous integration, code linting, or code scanning services and provide detailed feedback on commits.@GitHubUsing pagination in the REST APILearn how to navigate through paginated responses from the REST API.@GitHubExplore guides All REST API docsAbout the REST APIAbout the REST APIComparing GitHub's REST API and GraphQL APIAPI VersionsBreaking changesAbout the OpenAPI description for the REST APIUsing the REST APIGetting started with the REST APIRate limits for the REST APIUsing pagination in the REST APILibraries for the REST APIBest practices for using the REST APITroubleshooting the REST APITimezones and the REST APIUsing CORS and JSONP to make cross-origin requestsIssue event typesGitHub event typesAuthenticating to the REST APIAuthenticating to the REST APIKeeping your API credentials secureEndpoints available for GitHub App installation access tokensEndpoints available for GitHub App user access tokensEndpoints available for fine-grained personal access tokensPermissions required for GitHub AppsPermissions required for fine-grained personal access tokensGuidesScripting with the REST API and JavaScriptScripting with the REST API and RubyDiscovering resources for a userDelivering deploymentsRendering data as graphsWorking with commentsBuilding a CI serverUsing the REST API to interact with your Git databaseUsing the REST API to interact with checksEncrypting secrets for the REST APIREST API endpoints for GitHub ActionsREST API endpoints for GitHub Actions artifactsREST API endpoints for GitHub Actions cacheGitHub-hosted runnersREST API endpoints for GitHub Actions OIDCREST API endpoints for GitHub Actions permissionsREST API endpoints for GitHub Actions SecretsREST API endpoints for self-hosted runner groupsREST API endpoints for self-hosted runnersREST API endpoints for GitHub Actions variablesREST API endpoints for workflow jobsREST API endpoints for workflow runsREST API endpoints for workflowsREST API endpoints for activityREST API endpoints for eventsREST API endpoints for feedsREST API endpoints for notificationsREST API endpoints for starringREST API endpoints for watchingREST API endpoints for appsREST API endpoints for GitHub AppsREST API endpoints for GitHub App installationsREST API endpoints for GitHub MarketplaceREST API endpoints for OAuth authorizationsREST API endpoints for GitHub App webhooksREST API endpoints for billingREST API endpoints for billingEnhanced billing platformREST API endpoints for branches and their settingsREST API endpoints for branchesREST API endpoints for protected branchesREST API endpoints for security campaignsREST API endpoints for security campaignsREST API endpoints for checksREST API endpoints for check runsREST API endpoints for check suitesREST API endpoints for GitHub ClassroomREST API endpoints for GitHub ClassroomREST API endpoints for code scanningREST API endpoints for code scanningSecurity settingsConfigurationsREST API endpoints for codes of conductREST API endpoints for codes of conductREST API endpoints for CodespacesREST API endpoints for CodespacesREST API endpoints for Codespaces organizationsREST API endpoints for Codespaces organization secretsREST API endpoints for Codespaces machinesREST API endpoints for Codespaces repository secretsREST API endpoints for Codespaces user secretsREST API endpoints for collaboratorsREST API endpoints for collaboratorsREST API endpoints for repository invitationsREST API endpoints for commitsREST API endpoints for commitsREST API endpoints for commit commentsREST API endpoints for commit statusesREST API endpoints for CopilotREST API endpoints for Copilot metricsREST API endpoints for Copilot user managementREST API endpoints for DependabotREST API endpoints for Dependabot alertsREST API endpoints for Dependabot secretsREST API endpoints for the dependency graphREST API endpoints for dependency reviewREST API endpoints for dependency submissionREST API endpoints for software bill of materials (SBOM)REST API endpoints for deploy keysREST API endpoints for deploy keysREST API endpoints for deploymentsREST API endpoints for deployment branch policiesREST API endpoints for deploymentsREST API endpoints for deployment environmentsREST API endpoints for protection rulesREST API endpoints for deployment statusesREST API endpoints for emojisREST API endpoints for emojisREST API endpoints for gists and gist commentsREST API endpoints for gistsREST API endpoints for gist commentsREST API endpoints for Git databaseREST API endpoints for Git blobsREST API endpoints for Git commitsREST API endpoints for Git referencesREST API endpoints for Git tagsREST API endpoints for Git treesREST API endpoints for gitignoreREST API endpoints for gitignoreREST API endpoints for interactionsREST API endpoints for organization interactionsREST API endpoints for repository interactionsREST API endpoints for user interactionsREST API endpoints for issuesREST API endpoints for issue assigneesREST API endpoints for issue commentsREST API endpoints for issue eventsREST API endpoints for issuesREST API endpoints for labelsREST API endpoints for milestonesREST API endpoints for sub-issuesREST API endpoints for timeline eventsREST API endpoints for licensesREST API endpoints for licensesREST API endpoints for MarkdownREST API endpoints for MarkdownREST API endpoints for meta dataREST API endpoints for meta dataREST API endpoints for metricsREST API endpoints for community metricsREST API endpoints for repository statisticsREST API endpoints for repository trafficREST API endpoints for migrationsREST API endpoints for organization migrationsREST API endpoints for source importsREST API endpoints for user migrationsREST API endpoints for organizationsREST API endpoints for API InsightsREST API endpoints for blocking usersREST API endpoints for custom propertiesREST API endpoints for issue typesREST API endpoints for organization membersREST API endpoints for network configurationsREST API endpoints for organization rolesREST API endpoints for organizationsREST API endpoints for outside collaboratorsREST API endpoints for personal access tokensREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for security managersREST API endpoints for organization webhooksREST API endpoints for packagesREST API endpoints for packagesREST API endpoints for GitHub PagesREST API endpoints for GitHub PagesPrivate registriesOrganization configurationsREST API endpoints for Projects (classic)REST API endpoints for Projects (classic)REST API endpoints for Project (classic) cardsREST API endpoints for Project (classic) collaboratorsREST API endpoints for Project (classic) columnsREST API endpoints for pull requestsREST API endpoints for pull requestsREST API endpoints for pull request review commentsREST API endpoints for review requestsREST API endpoints for pull request reviewsREST API endpoints for rate limitsREST API endpoints for rate limitsREST API endpoints for reactionsREST API endpoints for reactionsREST API endpoints for releases and release assetsREST API endpoints for releasesREST API endpoints for release assetsREST API endpoints for repositoriesREST API endpoints for repository autolinksREST API endpoints for repository contentsREST API endpoints for custom propertiesREST API endpoints for forksREST API endpoints for repositoriesREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for repository tagsREST API endpoints for repository webhooksREST API endpoints for searchREST API endpoints for searchREST API endpoints for secret scanningREST API endpoints for secret scanningREST API endpoints for security advisoriesREST API endpoints for global security advisoriesREST API endpoints for repository security advisoriesREST API endpoints for teamsREST API endpoints for teamsREST API endpoints for team discussion commentsREST API endpoints for team discussionsREST API endpoints for team membersREST API endpoints for usersREST API endpoints for artifact attestationsREST API endpoints for blocking usersREST API endpoints for emailsREST API endpoints for followersREST API endpoints for GPG keysREST API endpoints for Git SSH keysREST API endpoints for social accountsREST API endpoints for SSH signing keysREST API endpoints for users\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."GitHub REST API documentation Create integrations, retrieve data, and automate your workflows with the GitHub REST API.Overview Quickstart Start hereView all About the REST APIGet oriented to the REST API documentation.Getting started with the REST APILearn how to use the GitHub REST API.Authenticating to the REST APIYou can authenticate to the REST API to access more endpoints and have a higher rate limit.Best practices for using the REST APIFollow these best practices when using GitHub's API.PopularRate limits for the REST APILearn about REST API rate limits, how to avoid exceeding them, and what to do if you do exceed them.Troubleshooting the REST APILearn how to diagnose and resolve common problems for the REST API.Scripting with the REST API and JavaScriptWrite a script using the Octokit.js SDK to interact with the REST API.Keeping your API credentials secureFollow these best practices to keep your API credentials and tokens secure.What's newView all Check if private vulnerability reporting is enabled via REST APIMarch 08New limits on scoped token creation for GitHub AppsFebruary 23Upcoming changes to repository insightsNovember 29GuidesDelivering deploymentsUsing the Deployments REST API, you can build custom tooling that interacts with your server and a third-party app.@GitHubUsing the REST API to interact with checksYou can use the REST API to build GitHub Apps that run powerful checks against code changes in a repository. You can create apps that perform continuous integration, code linting, or code scanning services and provide detailed feedback on commits.@GitHubUsing pagination in the REST APILearn how to navigate through paginated responses from the REST API.@GitHubExplore guides All REST API docsAbout the REST APIAbout the REST APIComparing GitHub's REST API and GraphQL APIAPI VersionsBreaking changesAbout the OpenAPI description for the REST APIUsing the REST APIGetting started with the REST APIRate limits for the REST APIUsing pagination in the REST APILibraries for the REST APIBest practices for using the REST APITroubleshooting the REST APITimezones and the REST APIUsing CORS and JSONP to make cross-origin requestsIssue event typesGitHub event typesAuthenticating to the REST APIAuthenticating to the REST APIKeeping your API credentials secureEndpoints available for GitHub App installation access tokensEndpoints available for GitHub App user access tokensEndpoints available for fine-grained personal access tokensPermissions required for GitHub AppsPermissions required for fine-grained personal access tokensGuidesScripting with the REST API and JavaScriptScripting with the REST API and RubyDiscovering resources for a userDelivering deploymentsRendering data as graphsWorking with commentsBuilding a CI serverUsing the REST API to interact with your Git databaseUsing the REST API to interact with checksEncrypting secrets for the REST APIREST API endpoints for GitHub ActionsREST API endpoints for GitHub Actions artifactsREST API endpoints for GitHub Actions cacheGitHub-hosted runnersREST API endpoints for GitHub Actions OIDCREST API endpoints for GitHub Actions permissionsREST API endpoints for GitHub Actions SecretsREST API endpoints for self-hosted runner groupsREST API endpoints for self-hosted runnersREST API endpoints for GitHub Actions variablesREST API endpoints for workflow jobsREST API endpoints for workflow runsREST API endpoints for workflowsREST API endpoints for activityREST API endpoints for eventsREST API endpoints for feedsREST API endpoints for notificationsREST API endpoints for starringREST API endpoints for watchingREST API endpoints for appsREST API endpoints for GitHub AppsREST API endpoints for GitHub App installationsREST API endpoints for GitHub MarketplaceREST API endpoints for OAuth authorizationsREST API endpoints for GitHub App webhooksREST API endpoints for billingREST API endpoints for billingEnhanced billing platformREST API endpoints for branches and their settingsREST API endpoints for branchesREST API endpoints for protected branchesREST API endpoints for security campaignsREST API endpoints for security campaignsREST API endpoints for checksREST API endpoints for check runsREST API endpoints for check suitesREST API endpoints for GitHub ClassroomREST API endpoints for GitHub ClassroomREST API endpoints for code scanningREST API endpoints for code scanningSecurity settingsConfigurationsREST API endpoints for codes of conductREST API endpoints for codes of conductREST API endpoints for CodespacesREST API endpoints for CodespacesREST API endpoints for Codespaces organizationsREST API endpoints for Codespaces organization secretsREST API endpoints for Codespaces machinesREST API endpoints for Codespaces repository secretsREST API endpoints for Codespaces user secretsREST API endpoints for collaboratorsREST API endpoints for collaboratorsREST API endpoints for repository invitationsREST API endpoints for commitsREST API endpoints for commitsREST API endpoints for commit commentsREST API endpoints for commit statusesREST API endpoints for CopilotREST API endpoints for Copilot metricsREST API endpoints for Copilot user managementREST API endpoints for DependabotREST API endpoints for Dependabot alertsREST API endpoints for Dependabot secretsREST API endpoints for the dependency graphREST API endpoints for dependency reviewREST API endpoints for dependency submissionREST API endpoints for software bill of materials (SBOM)REST API endpoints for deploy keysREST API endpoints for deploy keysREST API endpoints for deploymentsREST API endpoints for deployment branch policiesREST API endpoints for deploymentsREST API endpoints for deployment environmentsREST API endpoints for protection rulesREST API endpoints for deployment statusesREST API endpoints for emojisREST API endpoints for emojisREST API endpoints for gists and gist commentsREST API endpoints for gistsREST API endpoints for gist commentsREST API endpoints for Git databaseREST API endpoints for Git blobsREST API endpoints for Git commitsREST API endpoints for Git referencesREST API endpoints for Git tagsREST API endpoints for Git treesREST API endpoints for gitignoreREST API endpoints for gitignoreREST API endpoints for interactionsREST API endpoints for organization interactionsREST API endpoints for repository interactionsREST API endpoints for user interactionsREST API endpoints for issuesREST API endpoints for issue assigneesREST API endpoints for issue commentsREST API endpoints for issue eventsREST API endpoints for issuesREST API endpoints for labelsREST API endpoints for milestonesREST API endpoints for sub-issuesREST API endpoints for timeline eventsREST API endpoints for licensesREST API endpoints for licensesREST API endpoints for MarkdownREST API endpoints for MarkdownREST API endpoints for meta dataREST API endpoints for meta dataREST API endpoints for metricsREST API endpoints for community metricsREST API endpoints for repository statisticsREST API endpoints for repository trafficREST API endpoints for migrationsREST API endpoints for organization migrationsREST API endpoints for source importsREST API endpoints for user migrationsREST API endpoints for organizationsREST API endpoints for API InsightsREST API endpoints for blocking usersREST API endpoints for custom propertiesREST API endpoints for issue typesREST API endpoints for organization membersREST API endpoints for network configurationsREST API endpoints for organization rolesREST API endpoints for organizationsREST API endpoints for outside collaboratorsREST API endpoints for personal access tokensREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for security managersREST API endpoints for organization webhooksREST API endpoints for packagesREST API endpoints for packagesREST API endpoints for GitHub PagesREST API endpoints for GitHub PagesPrivate registriesOrganization configurationsREST API endpoints for Projects (classic)REST API endpoints for Projects (classic)REST API endpoints for Project (classic) cardsREST API endpoints for Project (classic) collaboratorsREST API endpoints for Project (classic) columnsREST API endpoints for pull requestsREST API endpoints for pull requestsREST API endpoints for pull request review commentsREST API endpoints for review requestsREST API endpoints for pull request reviewsREST API endpoints for rate limitsREST API endpoints for rate limitsREST API endpoints for reactionsREST API endpoints for reactionsREST API endpoints for releases and release assetsREST API endpoints for releasesREST API endpoints for release assetsREST API endpoints for repositoriesREST API endpoints for repository autolinksREST API endpoints for repository contentsREST API endpoints for custom propertiesREST API endpoints for forksREST API endpoints for repositoriesREST API endpoints for rule suitesREST API endpoints for rulesREST API endpoints for repository tagsREST API endpoints for repository webhooksREST API endpoints for searchREST API endpoints for searchREST API endpoints for secret scanningREST API endpoints for secret scanningREST API endpoints for security advisoriesREST API endpoints for global security advisoriesREST API endpoints for repository security advisoriesREST API endpoints for teamsREST API endpoints for teamsREST API endpoints for team discussion commentsREST API endpoints for team discussionsREST API endpoints for team membersREST API endpoints for usersREST API endpoints for artifact attestationsREST API endpoints for blocking usersREST API endpoints for emailsREST API endpoints for followersREST API endpoints for GPG keysREST API endpoints for Git SSH keysREST API endpoints for social accountsREST API endpoints for SSH signing keysREST API endpoints for users\n\n\n\nREST API/About the REST APIAbout the REST APILearn more about the GitHub REST API and what you can do with it.About the REST APIComparing GitHub's REST API and GraphQL APIAPI VersionsBreaking changesAbout the OpenAPI description for the REST API\n\n\n\nREST API/Using the REST APIUsing the REST APILearn how to use the GitHub REST API, follow best practices, and troubleshoot problems.Getting started with the REST APILearn how to use the GitHub REST API.Rate limits for the REST APILearn about REST API rate limits, how to avoid exceeding them, and what to do if you do exceed them.Using pagination in the REST APILearn how to navigate through paginated responses from the REST API.Libraries for the REST APIYou can use the official Octokit libraries and other third-party libraries to extend and simplify how you use the GitHub API.Best practices for using the REST APIFollow these best practices when using GitHub's API.Troubleshooting the REST APILearn how to diagnose and resolve common problems for the REST API.Timezones and the REST APISome REST API endpoints allow you to specify timezone information with your request.Using CORS and JSONP to make cross-origin requestsYou can make API requests across domains using cross-origin resource sharing (CORS) and JSONP callbacks.Issue event typesFor the REST APIs for issue events and timeline events, learn about each event type, the triggering action on GitHub, and each event's unique properties.GitHub event typesFor the GitHub Events API, learn about each event type, the triggering action on GitHub, and each event's unique properties.\n\n\n\nREST API/AuthenticationAuthenticating to the REST APILearn how to authenticate your REST API requests.Authenticating to the REST APIYou can authenticate to the REST API to access more endpoints and have a higher rate limit.Keeping your API credentials secureFollow these best practices to keep your API credentials and tokens secure.Endpoints available for GitHub App installation access tokensYour GitHub App can make requests to the following REST endpoints with an installation access token.Endpoints available for GitHub App user access tokensYour GitHub App can make requests to the following REST endpoints with a user access token.Endpoints available for fine-grained personal access tokensYour fine-grained personal access token can make requests to the following REST endpoints.Permissions required for GitHub AppsFor each permission granted to a GitHub App, these are the REST API endpoints that the app can use.Permissions required for fine-grained personal access tokensFor each permission granted to a fine-grained personal access token, these are the REST API endpoints that the app can use.\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/ActionsREST API endpoints for GitHub ActionsUse the REST API to interact with GitHub Actions for an organization or repository.REST API endpoints for GitHub Actions artifactsList artifacts for a repositoryGet an artifactDelete an artifactDownload an artifactList workflow run artifactsREST API endpoints for GitHub Actions cacheGet GitHub Actions cache usage for an organizationList repositories with GitHub Actions cache usage for an organizationGet GitHub Actions cache usage for a repositoryList GitHub Actions caches for a repositoryDelete GitHub Actions caches for a repository (using a cache key)Delete a GitHub Actions cache for a repository (using a cache ID)GitHub-hosted runnersList GitHub-hosted runners for an organizationCreate a GitHub-hosted runner for an organizationGet GitHub-owned images for GitHub-hosted runners in an organizationGet partner images for GitHub-hosted runners in an organizationGet limits on GitHub-hosted runners for an organizationGet GitHub-hosted runners machine specs for an organizationGet platforms for GitHub-hosted runners in an organizationGet a GitHub-hosted runner for an organizationUpdate a GitHub-hosted runner for an organizationDelete a GitHub-hosted runner for an organizationREST API endpoints for GitHub Actions OIDCGet the customization template for an OIDC subject claim for an organizationSet the customization template for an OIDC subject claim for an organizationGet the customization template for an OIDC subject claim for a repositorySet the customization template for an OIDC subject claim for a repositoryREST API endpoints for GitHub Actions permissionsGet GitHub Actions permissions for an organizationSet GitHub Actions permissions for an organizationList selected repositories enabled for GitHub Actions in an organizationSet selected repositories enabled for GitHub Actions in an organizationEnable a selected repository for GitHub Actions in an organizationDisable a selected repository for GitHub Actions in an organizationGet allowed actions and reusable workflows for an organizationSet allowed actions and reusable workflows for an organizationGet default workflow permissions for an organizationSet default workflow permissions for an organizationGet GitHub Actions permissions for a repositorySet GitHub Actions permissions for a repositoryGet the level of access for workflows outside of the repositorySet the level of access for workflows outside of the repositoryGet allowed actions and reusable workflows for a repositorySet allowed actions and reusable workflows for a repositoryGet default workflow permissions for a repositorySet default workflow permissions for a repositoryREST API endpoints for GitHub Actions SecretsList organization secretsGet an organization public keyGet an organization secretCreate or update an organization secretDelete an organization secretList selected repositories for an organization secretSet selected repositories for an organization secretAdd selected repository to an organization secretRemove selected repository from an organization secretList repository organization secretsList repository secretsGet a repository public keyGet a repository secretCreate or update a repository secretDelete a repository secretList environment secretsGet an environment public keyGet an environment secretCreate or update an environment secretDelete an environment secretREST API endpoints for self-hosted runner groupsList self-hosted runner groups for an organizationCreate a self-hosted runner group for an organizationGet a self-hosted runner group for an organizationUpdate a self-hosted runner group for an organizationDelete a self-hosted runner group from an organizationList GitHub-hosted runners in a group for an organizationList repository access to a self-hosted runner group in an organizationSet repository access for a self-hosted runner group in an organizationAdd repository access to a self-hosted runner group in an organizationRemove repository access to a self-hosted runner group in an organizationList self-hosted runners in a group for an organizationSet self-hosted runners in a group for an organizationAdd a self-hosted runner to a group for an organizationRemove a self-hosted runner from a group for an organizationREST API endpoints for self-hosted runnersList self-hosted runners for an organizationList runner applications for an organizationCreate configuration for a just-in-time runner for an organizationCreate a registration token for an organizationCreate a remove token for an organizationGet a self-hosted runner for an organizationDelete a self-hosted runner from an organizationList labels for a self-hosted runner for an organizationAdd custom labels to a self-hosted runner for an organizationSet custom labels for a self-hosted runner for an organizationRemove all custom labels from a self-hosted runner for an organizationRemove a custom label from a self-hosted runner for an organizationList self-hosted runners for a repositoryList runner applications for a repositoryCreate configuration for a just-in-time runner for a repositoryCreate a registration token for a repositoryCreate a remove token for a repositoryGet a self-hosted runner for a repositoryDelete a self-hosted runner from a repositoryList labels for a self-hosted runner for a repositoryAdd custom labels to a self-hosted runner for a repositorySet custom labels for a self-hosted runner for a repositoryRemove all custom labels from a self-hosted runner for a repositoryRemove a custom label from a self-hosted runner for a repositoryREST API endpoints for GitHub Actions variablesList organization variablesCreate an organization variableGet an organization variableUpdate an organization variableDelete an organization variableList selected repositories for an organization variableSet selected repositories for an organization variableAdd selected repository to an organization variableRemove selected repository from an organization variableList repository organization variablesList repository variablesCreate a repository variableGet a repository variableUpdate a repository variableDelete a repository variableList environment variablesCreate an environment variableGet an environment variableUpdate an environment variableDelete an environment variableREST API endpoints for workflow jobsGet a job for a workflow runDownload job logs for a workflow runList jobs for a workflow run attemptList jobs for a workflow runREST API endpoints for workflow runsRe-run a job from a workflow runList workflow runs for a repositoryGet a workflow runDelete a workflow runGet the review history for a workflow runApprove a workflow run for a fork pull requestGet a workflow run attemptDownload workflow run attempt logsCancel a workflow runReview custom deployment protection rules for a workflow runForce cancel a workflow runDownload workflow run logsDelete workflow run logsGet pending deployments for a workflow runReview pending deployments for a workflow runRe-run a workflowRe-run failed jobs from a workflow runGet workflow run usageList workflow runs for a workflowREST API endpoints for workflowsList repository workflowsGet a workflowDisable a workflowCreate a workflow dispatch eventEnable a workflowGet workflow usage\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/ArtifactsREST API endpoints for GitHub Actions artifactsUse the REST API to interact with artifacts in GitHub Actions.About artifacts in GitHub Actions
You can use the REST API to download, delete, and retrieve information about workflow artifacts in GitHub Actions. Artifacts enable you to share data between jobs in a workflow and store data once that workflow has completed. For more information, see Storing and sharing data from a workflow.List artifacts for a repositoryLists all artifacts for a repository.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "List artifacts for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List artifacts for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1name string The name field of an artifact. When specified, only artifacts with this name will be returned.HTTP response status codes for "List artifacts for a repository"Status codeDescription200OKCode samples for "List artifacts for a repository"Request exampleget/repos/{owner}/{repo}/actions/artifactscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/artifactsResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "artifacts": [
    {
      "id": 11,
      "node_id": "MDg6QXJ0aWZhY3QxMQ==",
      "name": "Rails",
      "size_in_bytes": 556,
      "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
      "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
      "expired": false,
      "created_at": "2020-01-10T14:59:22Z",
      "expires_at": "2020-03-21T14:59:22Z",
      "updated_at": "2020-02-21T14:59:22Z",
      "digest": "sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c",
      "workflow_run": {
        "id": 2332938,
        "repository_id": 1296269,
        "head_repository_id": 1296269,
        "head_branch": "main",
        "head_sha": "328faa0536e6fef19753d9d91dc96a9931694ce3"
      }
    },
    {
      "id": 13,
      "node_id": "MDg6QXJ0aWZhY3QxMw==",
      "name": "Test output",
      "size_in_bytes": 453,
      "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13",
      "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip",
      "expired": false,
      "created_at": "2020-01-10T14:59:22Z",
      "expires_at": "2020-03-21T14:59:22Z",
      "updated_at": "2020-02-21T14:59:22Z",
      "digest": "sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c",
      "workflow_run": {
        "id": 2332942,
        "repository_id": 1296269,
        "head_repository_id": 1296269,
        "head_branch": "main",
        "head_sha": "178f4f6090b3fccad4a65b3e83d076a622d59652"
      }
    }
  ]
}Get an artifactGets a specific artifact for a workflow run.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get an artifact"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get an artifact"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.artifact_id integer RequiredThe unique identifier of the artifact.HTTP response status codes for "Get an artifact"Status codeDescription200OKCode samples for "Get an artifact"Request exampleget/repos/{owner}/{repo}/actions/artifacts/{artifact_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/artifacts/ARTIFACT_IDResponseExample responseResponse schemaStatus: 200{
  "id": 11,
  "node_id": "MDg6QXJ0aWZhY3QxMQ==",
  "name": "Rails",
  "size_in_bytes": 556,
  "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
  "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
  "expired": false,
  "created_at": "2020-01-10T14:59:22Z",
  "expires_at": "2020-01-21T14:59:22Z",
  "updated_at": "2020-01-21T14:59:22Z",
  "digest": "sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c",
  "workflow_run": {
    "id": 2332938,
    "repository_id": 1296269,
    "head_repository_id": 1296269,
    "head_branch": "main",
    "head_sha": "328faa0536e6fef19753d9d91dc96a9931694ce3"
  }
}Delete an artifactDeletes an artifact for a workflow run.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete an artifact"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Delete an artifact"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.artifact_id integer RequiredThe unique identifier of the artifact.HTTP response status codes for "Delete an artifact"Status codeDescription204No ContentCode samples for "Delete an artifact"Request exampledelete/repos/{owner}/{repo}/actions/artifacts/{artifact_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/artifacts/ARTIFACT_IDResponseStatus: 204Download an artifactGets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for Location: in
the response header to find the URL for the download. The :archive_format must be zip.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Download an artifact"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)Parameters for "Download an artifact"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.artifact_id integer RequiredThe unique identifier of the artifact.archive_format string RequiredHTTP response status codes for "Download an artifact"Status codeDescription302Found410GoneCode samples for "Download an artifact"Request exampleget/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/artifacts/ARTIFACT_ID/ARCHIVE_FORMATResponseStatus: 302List workflow run artifactsLists artifacts for a workflow run.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "List workflow run artifacts"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List workflow run artifacts"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1name string The name field of an artifact. When specified, only artifacts with this name will be returned.HTTP response status codes for "List workflow run artifacts"Status codeDescription200OKCode samples for "List workflow run artifacts"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/artifactscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/artifactsResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "artifacts": [
    {
      "id": 11,
      "node_id": "MDg6QXJ0aWZhY3QxMQ==",
      "name": "Rails",
      "size_in_bytes": 556,
      "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
      "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
      "expired": false,
      "created_at": "2020-01-10T14:59:22Z",
      "expires_at": "2020-03-21T14:59:22Z",
      "updated_at": "2020-02-21T14:59:22Z",
      "digest": "sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c",
      "workflow_run": {
        "id": 2332938,
        "repository_id": 1296269,
        "head_repository_id": 1296269,
        "head_branch": "main",
        "head_sha": "328faa0536e6fef19753d9d91dc96a9931694ce3"
      }
    },
    {
      "id": 13,
      "node_id": "MDg6QXJ0aWZhY3QxMw==",
      "name": "Test output",
      "size_in_bytes": 453,
      "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13",
      "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip",
      "expired": false,
      "created_at": "2020-01-10T14:59:22Z",
      "expires_at": "2020-03-21T14:59:22Z",
      "updated_at": "2020-02-21T14:59:22Z",
      "digest": "sha256:cfc3236bdad15b5898bca8408945c9e19e1917da8704adc20eaa618444290a8c",
      "workflow_run": {
        "id": 2332942,
        "repository_id": 1296269,
        "head_repository_id": 1296269,
        "head_branch": "main",
        "head_sha": "178f4f6090b3fccad4a65b3e83d076a622d59652"
      }
    }
  ]
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/CacheREST API endpoints for GitHub Actions cacheUse the REST API to interact with the cache for repositories in GitHub Actions.About the cache in GitHub Actions
You can use the REST API to query and manage the cache for repositories in GitHub Actions. You can also install a GitHub CLI extension to manage your caches from the command line. For more information, see Caching dependencies to speed up workflows.Get GitHub Actions cache usage for an organizationGets the total GitHub Actions cache usage for an organization.
The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
OAuth tokens and personal access tokens (classic) need the read:org scope to use this endpoint.Fine-grained access tokens for "Get GitHub Actions cache usage for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get GitHub Actions cache usage for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get GitHub Actions cache usage for an organization"Status codeDescription200OKCode samples for "Get GitHub Actions cache usage for an organization"Request exampleget/orgs/{org}/actions/cache/usagecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/cache/usageResponseExample responseResponse schemaStatus: 200{
  "total_active_caches_size_in_bytes": 3344284,
  "total_active_caches_count": 5
}List repositories with GitHub Actions cache usage for an organizationLists repositories and their GitHub Actions cache usage for an organization.
The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
OAuth tokens and personal access tokens (classic) need the read:org scope to use this endpoint.Fine-grained access tokens for "List repositories with GitHub Actions cache usage for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "List repositories with GitHub Actions cache usage for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repositories with GitHub Actions cache usage for an organization"Status codeDescription200OKCode samples for "List repositories with GitHub Actions cache usage for an organization"Request exampleget/orgs/{org}/actions/cache/usage-by-repositorycURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/cache/usage-by-repositoryResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "repository_cache_usages": [
    {
      "full_name": "octo-org/Hello-World",
      "active_caches_size_in_bytes": 2322142,
      "active_caches_count": 3
    },
    {
      "full_name": "octo-org/server",
      "active_caches_size_in_bytes": 1022142,
      "active_caches_count": 2
    }
  ]
}Get GitHub Actions cache usage for a repositoryGets GitHub Actions cache usage for a repository.
The data fetched using this API is refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get GitHub Actions cache usage for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get GitHub Actions cache usage for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get GitHub Actions cache usage for a repository"Status codeDescription200OKCode samples for "Get GitHub Actions cache usage for a repository"Request exampleget/repos/{owner}/{repo}/actions/cache/usagecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/cache/usageResponseExample responseResponse schemaStatus: 200{
  "full_name": "octo-org/Hello-World",
  "active_caches_size_in_bytes": 2322142,
  "active_caches_count": 3
}List GitHub Actions caches for a repositoryLists the GitHub Actions caches for a repository.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List GitHub Actions caches for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List GitHub Actions caches for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1ref string The full Git reference for narrowing down the cache. The ref for a branch should be formatted as refs/heads/<branch name>. To reference a pull request use refs/pull/<number>/merge.key string An explicit key or prefix for identifying the cachesort string The property to sort the results by. created_at means when the cache was created. last_accessed_at means when the cache was last accessed. size_in_bytes is the size of the cache in bytes.Default: last_accessed_atCan be one of: created_at, last_accessed_at, size_in_bytes direction string The direction to sort the results by.Default: descCan be one of: asc, desc HTTP response status codes for "List GitHub Actions caches for a repository"Status codeDescription200OKCode samples for "List GitHub Actions caches for a repository"Request exampleget/repos/{owner}/{repo}/actions/cachescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/cachesResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "actions_caches": [
    {
      "id": 505,
      "ref": "refs/heads/main",
      "key": "Linux-node-958aff96db2d75d67787d1e634ae70b659de937b",
      "version": "73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0",
      "last_accessed_at": "2019-01-24T22:45:36.000Z",
      "created_at": "2019-01-24T22:45:36.000Z",
      "size_in_bytes": 1024
    }
  ]
}Delete GitHub Actions caches for a repository (using a cache key)Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match both the provided key and the Git ref.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete GitHub Actions caches for a repository (using a cache key)"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Delete GitHub Actions caches for a repository (using a cache key)"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionkey string RequiredA key for identifying the cache.ref string The full Git reference for narrowing down the cache. The ref for a branch should be formatted as refs/heads/<branch name>. To reference a pull request use refs/pull/<number>/merge.HTTP response status codes for "Delete GitHub Actions caches for a repository (using a cache key)"Status codeDescription200OKCode samples for "Delete GitHub Actions caches for a repository (using a cache key)"Request exampledelete/repos/{owner}/{repo}/actions/cachescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  "https://api.github.com/repos/OWNER/REPO/actions/caches?key=Linux-node-958aff96db2d75d67787d1e634ae70b659de937b"ResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "actions_caches": [
    {
      "id": 505,
      "ref": "refs/heads/main",
      "key": "Linux-node-958aff96db2d75d67787d1e634ae70b659de937b",
      "version": "73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0",
      "last_accessed_at": "2019-01-24T22:45:36.000Z",
      "created_at": "2019-01-24T22:45:36.000Z",
      "size_in_bytes": 1024
    }
  ]
}Delete a GitHub Actions cache for a repository (using a cache ID)Deletes a GitHub Actions cache for a repository, using a cache ID.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete a GitHub Actions cache for a repository (using a cache ID)"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Delete a GitHub Actions cache for a repository (using a cache ID)"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.cache_id integer RequiredThe unique identifier of the GitHub Actions cache.HTTP response status codes for "Delete a GitHub Actions cache for a repository (using a cache ID)"Status codeDescription204No ContentCode samples for "Delete a GitHub Actions cache for a repository (using a cache ID)"Request exampledelete/repos/{owner}/{repo}/actions/caches/{cache_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/caches/CACHE_IDResponseStatus: 204\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/GitHub-hosted runnersGitHub-hosted runnersUse the REST API to interact with GitHub-hosted runners in GitHub Actions.List GitHub-hosted runners for an organizationLists all GitHub-hosted runners configured in an organization.
OAuth app tokens and personal access tokens (classic) need the manage_runner:org scope to use this endpoint.Fine-grained access tokens for "List GitHub-hosted runners for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "List GitHub-hosted runners for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List GitHub-hosted runners for an organization"Status codeDescription200OKCode samples for "List GitHub-hosted runners for an organization"Request exampleget/orgs/{org}/actions/hosted-runnerscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runnersResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "runners": [
    {
      "id": 5,
      "name": "My hosted ubuntu runner",
      "runner_group_id": 2,
      "platform": "linux-x64",
      "image": {
        "id": "ubuntu-20.04",
        "size": 86
      },
      "machine_size_details": {
        "id": "4-core",
        "cpu_cores": 4,
        "memory_gb": 16,
        "storage_gb": 150
      },
      "status": "Ready",
      "maximum_runners": 10,
      "public_ip_enabled": true,
      "public_ips": [
        {
          "enabled": true,
          "prefix": "20.80.208.150",
          "length": 31
        }
      ],
      "last_active_on": "2022-10-09T23:39:01Z"
    },
    {
      "id": 7,
      "name": "My hosted Windows runner",
      "runner_group_id": 2,
      "platform": "win-x64",
      "image": {
        "id": "windows-latest",
        "size": 256
      },
      "machine_size_details": {
        "id": "8-core",
        "cpu_cores": 8,
        "memory_gb": 32,
        "storage_gb": 300
      },
      "status": "Ready",
      "maximum_runners": 20,
      "public_ip_enabled": false,
      "public_ips": [],
      "last_active_on": "2023-04-26T15:23:37Z"
    }
  ]
}Create a GitHub-hosted runner for an organizationCreates a GitHub-hosted runner for an organization.
OAuth tokens and personal access tokens (classic) need the manage_runners:org scope to use this endpoint.Fine-grained access tokens for "Create a GitHub-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write)Parameters for "Create a GitHub-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptionname string RequiredName of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.image object RequiredThe image of runner. To list all available images, use GET /actions/hosted-runners/images/github-owned or GET /actions/hosted-runners/images/partner.Properties of imageName, Type, Descriptionid string The unique identifier of the runner image.source string The source of the runner image.Can be one of: github, partner, custom size string RequiredThe machine size of the runner. To list available sizes, use GET actions/hosted-runners/machine-sizesrunner_group_id integer RequiredThe existing runner group to add this runner to.maximum_runners integer The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.enable_static_ip boolean Whether this runner should be created with a static public IP. Note limit on account. To list limits on account, use GET actions/hosted-runners/limitsHTTP response status codes for "Create a GitHub-hosted runner for an organization"Status codeDescription201CreatedCode samples for "Create a GitHub-hosted runner for an organization"Request examplepost/orgs/{org}/actions/hosted-runnerscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners \
  -d '{"name":"My Hosted runner","image":{"id":"ubuntu-latest","source":"github"},"runner_group_id":1,"size":"4-core","maximum_runners":50,"enable_static_ip":false}'ResponseExample responseResponse schemaStatus: 201{
  "id": 5,
  "name": "My hosted ubuntu runner",
  "runner_group_id": 2,
  "platform": "linux-x64",
  "image": {
    "id": "ubuntu-20.04",
    "size": 86
  },
  "machine_size_details": {
    "id": "4-core",
    "cpu_cores": 4,
    "memory_gb": 16,
    "storage_gb": 150
  },
  "status": "Ready",
  "maximum_runners": 10,
  "public_ip_enabled": true,
  "public_ips": [
    {
      "enabled": true,
      "prefix": "20.80.208.150",
      "length": 31
    }
  ],
  "last_active_on": "2022-10-09T23:39:01Z"
}Get GitHub-owned images for GitHub-hosted runners in an organizationGet the list of GitHub-owned images available for GitHub-hosted runners for an organization.Fine-grained access tokens for "Get GitHub-owned images for GitHub-hosted runners in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get GitHub-owned images for GitHub-hosted runners in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get GitHub-owned images for GitHub-hosted runners in an organization"Status codeDescription200OKCode samples for "Get GitHub-owned images for GitHub-hosted runners in an organization"Request exampleget/orgs/{org}/actions/hosted-runners/images/github-ownedcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners/images/github-ownedResponseExample responseResponse schemaStatus: 200{
  "id": "ubuntu-20.04",
  "platform": "linux-x64",
  "size_gb": 86,
  "display_name": "20.04",
  "source": "github"
}Get partner images for GitHub-hosted runners in an organizationGet the list of partner images available for GitHub-hosted runners for an organization.Fine-grained access tokens for "Get partner images for GitHub-hosted runners in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get partner images for GitHub-hosted runners in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get partner images for GitHub-hosted runners in an organization"Status codeDescription200OKCode samples for "Get partner images for GitHub-hosted runners in an organization"Request exampleget/orgs/{org}/actions/hosted-runners/images/partnercURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners/images/partnerResponseExample responseResponse schemaStatus: 200{
  "id": "ubuntu-20.04",
  "platform": "linux-x64",
  "size_gb": 86,
  "display_name": "20.04",
  "source": "github"
}Get limits on GitHub-hosted runners for an organizationGet the GitHub-hosted runners limits for an organization.Fine-grained access tokens for "Get limits on GitHub-hosted runners for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get limits on GitHub-hosted runners for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get limits on GitHub-hosted runners for an organization"Status codeDescription200OKCode samples for "Get limits on GitHub-hosted runners for an organization"Request exampleget/orgs/{org}/actions/hosted-runners/limitscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners/limitsResponseExample responseResponse schemaStatus: 200{
  "public_ips": {
    "current_usage": 17,
    "maximum": 50
  }
}Get GitHub-hosted runners machine specs for an organizationGet the list of machine specs available for GitHub-hosted runners for an organization.Fine-grained access tokens for "Get GitHub-hosted runners machine specs for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get GitHub-hosted runners machine specs for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get GitHub-hosted runners machine specs for an organization"Status codeDescription200OKCode samples for "Get GitHub-hosted runners machine specs for an organization"Request exampleget/orgs/{org}/actions/hosted-runners/machine-sizescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners/machine-sizesResponseExample responseResponse schemaStatus: 200{
  "id": "4-core",
  "cpu_cores": 4,
  "memory_gb": 16,
  "storage_gb": 150
}Get platforms for GitHub-hosted runners in an organizationGet the list of platforms available for GitHub-hosted runners for an organization.Fine-grained access tokens for "Get platforms for GitHub-hosted runners in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get platforms for GitHub-hosted runners in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get platforms for GitHub-hosted runners in an organization"Status codeDescription200OKCode samples for "Get platforms for GitHub-hosted runners in an organization"Request exampleget/orgs/{org}/actions/hosted-runners/platformscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners/platformsResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "platforms": [
    "linux-x64",
    "win-x64"
  ]
}Get a GitHub-hosted runner for an organizationGets a GitHub-hosted runner configured in an organization.
OAuth app tokens and personal access tokens (classic) need the manage_runners:org scope to use this endpoint.Fine-grained access tokens for "Get a GitHub-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get a GitHub-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.hosted_runner_id integer RequiredUnique identifier of the GitHub-hosted runner.HTTP response status codes for "Get a GitHub-hosted runner for an organization"Status codeDescription200OKCode samples for "Get a GitHub-hosted runner for an organization"Request exampleget/orgs/{org}/actions/hosted-runners/{hosted_runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners/HOSTED_RUNNER_IDResponseExample responseResponse schemaStatus: 200{
  "id": 5,
  "name": "My hosted ubuntu runner",
  "runner_group_id": 2,
  "platform": "linux-x64",
  "image": {
    "id": "ubuntu-20.04",
    "size": 86
  },
  "machine_size_details": {
    "id": "4-core",
    "cpu_cores": 4,
    "memory_gb": 16,
    "storage_gb": 150
  },
  "status": "Ready",
  "maximum_runners": 10,
  "public_ip_enabled": true,
  "public_ips": [
    {
      "enabled": true,
      "prefix": "20.80.208.150",
      "length": 31
    }
  ],
  "last_active_on": "2022-10-09T23:39:01Z"
}Update a GitHub-hosted runner for an organizationUpdates a GitHub-hosted runner for an organization.
OAuth app tokens and personal access tokens (classic) need the manage_runners:org scope to use this endpoint.Fine-grained access tokens for "Update a GitHub-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write)Parameters for "Update a GitHub-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.hosted_runner_id integer RequiredUnique identifier of the GitHub-hosted runner.Body parametersName, Type, Descriptionname string Name of the runner. Must be between 1 and 64 characters and may only contain upper and lowercase letters a-z, numbers 0-9, '.', '-', and '_'.runner_group_id integer The existing runner group to add this runner to.maximum_runners integer The maximum amount of runners to scale up to. Runners will not auto-scale above this number. Use this setting to limit your cost.enable_static_ip boolean Whether this runner should be updated with a static public IP. Note limit on account. To list limits on account, use GET actions/hosted-runners/limitsHTTP response status codes for "Update a GitHub-hosted runner for an organization"Status codeDescription200OKCode samples for "Update a GitHub-hosted runner for an organization"Request examplepatch/orgs/{org}/actions/hosted-runners/{hosted_runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PATCH \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners/HOSTED_RUNNER_ID \
  -d '{"name":"My larger runner","runner_group_id":1,"maximum_runners":50,"enable_static_ip":false}'ResponseExample responseResponse schemaStatus: 200{
  "id": 5,
  "name": "My hosted ubuntu runner",
  "runner_group_id": 2,
  "platform": "linux-x64",
  "image": {
    "id": "ubuntu-20.04",
    "size": 86
  },
  "machine_size_details": {
    "id": "4-core",
    "cpu_cores": 4,
    "memory_gb": 16,
    "storage_gb": 150
  },
  "status": "Ready",
  "maximum_runners": 10,
  "public_ip_enabled": true,
  "public_ips": [
    {
      "enabled": true,
      "prefix": "20.80.208.150",
      "length": 31
    }
  ],
  "last_active_on": "2022-10-09T23:39:01Z"
}Delete a GitHub-hosted runner for an organizationDeletes a GitHub-hosted runner for an organization.Fine-grained access tokens for "Delete a GitHub-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write)Parameters for "Delete a GitHub-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.hosted_runner_id integer RequiredUnique identifier of the GitHub-hosted runner.HTTP response status codes for "Delete a GitHub-hosted runner for an organization"Status codeDescription202AcceptedCode samples for "Delete a GitHub-hosted runner for an organization"Request exampledelete/orgs/{org}/actions/hosted-runners/{hosted_runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/hosted-runners/HOSTED_RUNNER_IDResponseExample responseResponse schemaStatus: 202{
  "id": 5,
  "name": "My hosted ubuntu runner",
  "runner_group_id": 2,
  "platform": "linux-x64",
  "image": {
    "id": "ubuntu-20.04",
    "size": 86
  },
  "machine_size_details": {
    "id": "4-core",
    "cpu_cores": 4,
    "memory_gb": 16,
    "storage_gb": 150
  },
  "status": "Ready",
  "maximum_runners": 10,
  "public_ip_enabled": true,
  "public_ips": [
    {
      "enabled": true,
      "prefix": "20.80.208.150",
      "length": 31
    }
  ],
  "last_active_on": "2022-10-09T23:39:01Z"
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/OIDCREST API endpoints for GitHub Actions OIDCUse the REST API to interact with JWTs for OIDC subject claims in GitHub Actions.About GitHub Actions OIDC
You can use the REST API to query and manage a customization template for an OpenID Connect (OIDC) subject claim. For more information, see About security hardening with OpenID Connect.Get the customization template for an OIDC subject claim for an organizationGets the customization template for an OpenID Connect (OIDC) subject claim.
OAuth app tokens and personal access tokens (classic) need the read:org scope to use this endpoint.Fine-grained access tokens for "Get the customization template for an OIDC subject claim for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get the customization template for an OIDC subject claim for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get the customization template for an OIDC subject claim for an organization"Status codeDescription200A JSON serialized template for OIDC subject claim customizationCode samples for "Get the customization template for an OIDC subject claim for an organization"Request exampleget/orgs/{org}/actions/oidc/customization/subcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/oidc/customization/subA JSON serialized template for OIDC subject claim customizationExample responseResponse schemaStatus: 200{
  "include_claim_keys": [
    "repo",
    "context"
  ]
}Set the customization template for an OIDC subject claim for an organizationCreates or updates the customization template for an OpenID Connect (OIDC) subject claim.
OAuth app tokens and personal access tokens (classic) need the write:org scope to use this endpoint.Fine-grained access tokens for "Set the customization template for an OIDC subject claim for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write)Parameters for "Set the customization template for an OIDC subject claim for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptioninclude_claim_keys array of strings RequiredArray of unique strings. Each claim key can only contain alphanumeric characters and underscores.HTTP response status codes for "Set the customization template for an OIDC subject claim for an organization"Status codeDescription201Empty response403Forbidden404Resource not foundCode samples for "Set the customization template for an OIDC subject claim for an organization"Request exampleput/orgs/{org}/actions/oidc/customization/subcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/oidc/customization/sub \
  -d '{"include_claim_keys":["repo","context"]}'Empty responseExample responseResponse schemaStatus: 201Get the customization template for an OIDC subject claim for a repositoryGets the customization template for an OpenID Connect (OIDC) subject claim.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get the customization template for an OIDC subject claim for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get the customization template for an OIDC subject claim for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get the customization template for an OIDC subject claim for a repository"Status codeDescription200Status response400Bad Request404Resource not foundCode samples for "Get the customization template for an OIDC subject claim for a repository"Request exampleget/repos/{owner}/{repo}/actions/oidc/customization/subcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/oidc/customization/subStatus responseExample responseResponse schemaStatus: 200{
  "use_default": false,
  "include_claim_keys": [
    "repo",
    "context"
  ]
}Set the customization template for an OIDC subject claim for a repositorySets the customization template and opt-in or opt-out flag for an OpenID Connect (OIDC) subject claim for a repository.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Set the customization template for an OIDC subject claim for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Set the customization template for an OIDC subject claim for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionuse_default boolean RequiredWhether to use the default template or not. If true, the include_claim_keys field is ignored.include_claim_keys array of strings Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.HTTP response status codes for "Set the customization template for an OIDC subject claim for a repository"Status codeDescription201Empty response400Bad Request404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Set the customization template for an OIDC subject claim for a repository"Request exampleput/repos/{owner}/{repo}/actions/oidc/customization/subcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/oidc/customization/sub \
  -d '{"use_default":false,"include_claim_keys":["repo","context"]}'Empty responseExample responseResponse schemaStatus: 201\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/PermissionsREST API endpoints for GitHub Actions permissionsUse the REST API to interact with permissions for GitHub Actions.About permissions for GitHub Actions
You can use the REST API to set permissions for the organizations and repositories that are allowed to run GitHub Actions, and the actions and reusable workflows that are allowed to run. For more information, see Usage limits, billing, and administration.Get GitHub Actions permissions for an organizationGets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Get GitHub Actions permissions for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get GitHub Actions permissions for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get GitHub Actions permissions for an organization"Status codeDescription200OKCode samples for "Get GitHub Actions permissions for an organization"Request exampleget/orgs/{org}/actions/permissionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissionsResponseExample responseResponse schemaStatus: 200{
  "enabled_repositories": "all",
  "allowed_actions": "selected",
  "selected_actions_url": "https://api.github.com/organizations/42/actions/permissions/selected-actions"
}Set GitHub Actions permissions for an organizationSets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an organization.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Set GitHub Actions permissions for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write)Parameters for "Set GitHub Actions permissions for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptionenabled_repositories string RequiredThe policy that controls the repositories in the organization that are allowed to run GitHub Actions.Can be one of: all, none, selected allowed_actions string The permissions policy that controls the actions and reusable workflows that are allowed to run.Can be one of: all, local_only, selected HTTP response status codes for "Set GitHub Actions permissions for an organization"Status codeDescription204No ContentCode samples for "Set GitHub Actions permissions for an organization"Request exampleput/orgs/{org}/actions/permissionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions \
  -d '{"enabled_repositories":"all","allowed_actions":"selected"}'ResponseStatus: 204List selected repositories enabled for GitHub Actions in an organizationLists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for enabled_repositories must be configured to selected. For more information, see "Set GitHub Actions permissions for an organization."
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "List selected repositories enabled for GitHub Actions in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "List selected repositories enabled for GitHub Actions in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List selected repositories enabled for GitHub Actions in an organization"Status codeDescription200OKCode samples for "List selected repositories enabled for GitHub Actions in an organization"Request exampleget/orgs/{org}/actions/permissions/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions/repositoriesResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "repositories": [
    {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "clone_url": "https://github.com/octocat/Hello-World.git",
      "mirror_url": "git:git.example.com/octocat/Hello-World",
      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
      "svn_url": "https://svn.github.com/octocat/Hello-World",
      "homepage": "https://github.com",
      "language": null,
      "forks_count": 9,
      "stargazers_count": 80,
      "watchers_count": 80,
      "size": 108,
      "default_branch": "master",
      "open_issues_count": 0,
      "is_template": true,
      "topics": [
        "octocat",
        "atom",
        "electron",
        "api"
      ],
      "has_issues": true,
      "has_projects": true,
      "has_wiki": true,
      "has_pages": false,
      "has_downloads": true,
      "archived": false,
      "disabled": false,
      "visibility": "public",
      "pushed_at": "2011-01-26T19:06:43Z",
      "created_at": "2011-01-26T19:01:12Z",
      "updated_at": "2011-01-26T19:14:43Z",
      "permissions": {
        "admin": false,
        "push": false,
        "pull": true
      },
      "allow_rebase_merge": true,
      "template_repository": null,
      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
      "allow_squash_merge": true,
      "allow_auto_merge": false,
      "delete_branch_on_merge": true,
      "allow_merge_commit": true,
      "subscribers_count": 42,
      "network_count": 0,
      "license": {
        "key": "mit",
        "name": "MIT License",
        "url": "https://api.github.com/licenses/mit",
        "spdx_id": "MIT",
        "node_id": "MDc6TGljZW5zZW1pdA==",
        "html_url": "https://github.com/licenses/mit"
      },
      "forks": 1,
      "open_issues": 1,
      "watchers": 1
    }
  ]
}Set selected repositories enabled for GitHub Actions in an organizationReplaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for enabled_repositories must be configured to selected. For more information, see "Set GitHub Actions permissions for an organization."
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Set selected repositories enabled for GitHub Actions in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write)Parameters for "Set selected repositories enabled for GitHub Actions in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptionselected_repository_ids array of integers RequiredList of repository IDs to enable for GitHub Actions.HTTP response status codes for "Set selected repositories enabled for GitHub Actions in an organization"Status codeDescription204No ContentCode samples for "Set selected repositories enabled for GitHub Actions in an organization"Request exampleput/orgs/{org}/actions/permissions/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions/repositories \
  -d '{"selected_repository_ids":[32,42]}'ResponseStatus: 204Enable a selected repository for GitHub Actions in an organizationAdds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for enabled_repositories must be must be configured to selected. For more information, see "Set GitHub Actions permissions for an organization."
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Enable a selected repository for GitHub Actions in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write) and "Metadata" repository permissions (read)Parameters for "Enable a selected repository for GitHub Actions in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.repository_id integer RequiredThe unique identifier of the repository.HTTP response status codes for "Enable a selected repository for GitHub Actions in an organization"Status codeDescription204No ContentCode samples for "Enable a selected repository for GitHub Actions in an organization"Request exampleput/orgs/{org}/actions/permissions/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions/repositories/REPOSITORY_IDResponseStatus: 204Disable a selected repository for GitHub Actions in an organizationRemoves a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for enabled_repositories must be configured to selected. For more information, see "Set GitHub Actions permissions for an organization."
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Disable a selected repository for GitHub Actions in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write) and "Metadata" repository permissions (read)Parameters for "Disable a selected repository for GitHub Actions in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.repository_id integer RequiredThe unique identifier of the repository.HTTP response status codes for "Disable a selected repository for GitHub Actions in an organization"Status codeDescription204No ContentCode samples for "Disable a selected repository for GitHub Actions in an organization"Request exampledelete/orgs/{org}/actions/permissions/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions/repositories/REPOSITORY_IDResponseStatus: 204Get allowed actions and reusable workflows for an organizationGets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for allowed_actions must be configured to selected. For more information, see "Set GitHub Actions permissions for an organization."
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Get allowed actions and reusable workflows for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get allowed actions and reusable workflows for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get allowed actions and reusable workflows for an organization"Status codeDescription200OKCode samples for "Get allowed actions and reusable workflows for an organization"Request exampleget/orgs/{org}/actions/permissions/selected-actionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions/selected-actionsResponseExample responseResponse schemaStatus: 200{
  "github_owned_allowed": true,
  "verified_allowed": false,
  "patterns_allowed": [
    "monalisa/octocat@*",
    "docker/*"
  ]
}Set allowed actions and reusable workflows for an organizationSets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization permission policy for allowed_actions must be configured to selected. For more information, see "Set GitHub Actions permissions for an organization."
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Set allowed actions and reusable workflows for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write)Parameters for "Set allowed actions and reusable workflows for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptiongithub_owned_allowed boolean Whether GitHub-owned actions are allowed. For example, this includes the actions in the actions organization.verified_allowed boolean Whether actions from GitHub Marketplace verified creators are allowed. Set to true to allow all actions by GitHub Marketplace verified creators.patterns_allowed array of strings Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*.
Note

The patterns_allowed setting only applies to public repositories.
HTTP response status codes for "Set allowed actions and reusable workflows for an organization"Status codeDescription204No ContentCode samples for "Set allowed actions and reusable workflows for an organization"Request exampleput/orgs/{org}/actions/permissions/selected-actionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions/selected-actions \
  -d '{"github_owned_allowed":true,"verified_allowed":false,"patterns_allowed":["monalisa/octocat@*","docker/*"]}'ResponseStatus: 204Get default workflow permissions for an organizationGets the default workflow permissions granted to the GITHUB_TOKEN when running workflows in an organization,
as well as whether GitHub Actions can submit approving pull request reviews. For more information, see
"Setting the permissions of the GITHUB_TOKEN for your organization."
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Get default workflow permissions for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get default workflow permissions for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get default workflow permissions for an organization"Status codeDescription200OKCode samples for "Get default workflow permissions for an organization"Request exampleget/orgs/{org}/actions/permissions/workflowcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions/workflowGive read-only permission, and allow approving PRs.Example responseResponse schemaStatus: 200{
  "default_workflow_permissions": "read",
  "can_approve_pull_request_reviews": true
}Set default workflow permissions for an organizationSets the default workflow permissions granted to the GITHUB_TOKEN when running workflows in an organization, and sets if GitHub Actions
can submit approving pull request reviews. For more information, see
"Setting the permissions of the GITHUB_TOKEN for your organization."
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Set default workflow permissions for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (write)Parameters for "Set default workflow permissions for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptiondefault_workflow_permissions string The default workflow permissions granted to the GITHUB_TOKEN when running workflows.Can be one of: read, write can_approve_pull_request_reviews boolean Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.HTTP response status codes for "Set default workflow permissions for an organization"Status codeDescription204Success responseCode samples for "Set default workflow permissions for an organization"Request exampleput/orgs/{org}/actions/permissions/workflowcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/permissions/workflow \
  -d '{"default_workflow_permissions":"read","can_approve_pull_request_reviews":true}'Success responseStatus: 204Get GitHub Actions permissions for a repositoryGets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions and reusable workflows allowed to run in the repository.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get GitHub Actions permissions for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (read)Parameters for "Get GitHub Actions permissions for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get GitHub Actions permissions for a repository"Status codeDescription200OKCode samples for "Get GitHub Actions permissions for a repository"Request exampleget/repos/{owner}/{repo}/actions/permissionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/permissionsResponseExample responseResponse schemaStatus: 200{
  "enabled": true,
  "allowed_actions": "selected",
  "selected_actions_url": "https://api.github.com/repositories/42/actions/permissions/selected-actions"
}Set GitHub Actions permissions for a repositorySets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the repository.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Set GitHub Actions permissions for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Set GitHub Actions permissions for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionenabled boolean RequiredWhether GitHub Actions is enabled on the repository.allowed_actions string The permissions policy that controls the actions and reusable workflows that are allowed to run.Can be one of: all, local_only, selected HTTP response status codes for "Set GitHub Actions permissions for a repository"Status codeDescription204No ContentCode samples for "Set GitHub Actions permissions for a repository"Request exampleput/repos/{owner}/{repo}/actions/permissionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/permissions \
  -d '{"enabled":true,"allowed_actions":"selected"}'ResponseStatus: 204Get the level of access for workflows outside of the repositoryGets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
This endpoint only applies to private repositories.
For more information, see "Allowing access to components in a private repository."
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get the level of access for workflows outside of the repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (read)Parameters for "Get the level of access for workflows outside of the repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get the level of access for workflows outside of the repository"Status codeDescription200OKCode samples for "Get the level of access for workflows outside of the repository"Request exampleget/repos/{owner}/{repo}/actions/permissions/accesscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/permissions/accessResponseExample responseResponse schemaStatus: 200{
  "access_level": "organization"
}Set the level of access for workflows outside of the repositorySets the level of access that workflows outside of the repository have to actions and reusable workflows in the repository.
This endpoint only applies to private repositories.
For more information, see "Allowing access to components in a private repository".
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Set the level of access for workflows outside of the repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Set the level of access for workflows outside of the repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionaccess_level string RequiredDefines the level of access that workflows outside of the repository have to actions and reusable workflows within the
repository.
none means the access is only possible from workflows in this repository. user level access allows sharing across user owned private repositories only. organization level access allows sharing across the organization.Can be one of: none, user, organization HTTP response status codes for "Set the level of access for workflows outside of the repository"Status codeDescription204No ContentCode samples for "Set the level of access for workflows outside of the repository"Request exampleput/repos/{owner}/{repo}/actions/permissions/accesscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/permissions/access \
  -d '{"access_level":"organization"}'ResponseStatus: 204Get allowed actions and reusable workflows for a repositoryGets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository policy for allowed_actions must be configured to selected. For more information, see "Set GitHub Actions permissions for a repository."
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get allowed actions and reusable workflows for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (read)Parameters for "Get allowed actions and reusable workflows for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get allowed actions and reusable workflows for a repository"Status codeDescription200OKCode samples for "Get allowed actions and reusable workflows for a repository"Request exampleget/repos/{owner}/{repo}/actions/permissions/selected-actionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/permissions/selected-actionsResponseExample responseResponse schemaStatus: 200{
  "github_owned_allowed": true,
  "verified_allowed": false,
  "patterns_allowed": [
    "monalisa/octocat@*",
    "docker/*"
  ]
}Set allowed actions and reusable workflows for a repositorySets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository permission policy for allowed_actions must be configured to selected. For more information, see "Set GitHub Actions permissions for a repository."
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Set allowed actions and reusable workflows for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Set allowed actions and reusable workflows for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptiongithub_owned_allowed boolean Whether GitHub-owned actions are allowed. For example, this includes the actions in the actions organization.verified_allowed boolean Whether actions from GitHub Marketplace verified creators are allowed. Set to true to allow all actions by GitHub Marketplace verified creators.patterns_allowed array of strings Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2, monalisa/*.
Note

The patterns_allowed setting only applies to public repositories.
HTTP response status codes for "Set allowed actions and reusable workflows for a repository"Status codeDescription204No ContentCode samples for "Set allowed actions and reusable workflows for a repository"Request exampleput/repos/{owner}/{repo}/actions/permissions/selected-actionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/permissions/selected-actions \
  -d '{"github_owned_allowed":true,"verified_allowed":false,"patterns_allowed":["monalisa/octocat@*","docker/*"]}'ResponseStatus: 204Get default workflow permissions for a repositoryGets the default workflow permissions granted to the GITHUB_TOKEN when running workflows in a repository,
as well as if GitHub Actions can submit approving pull request reviews.
For more information, see "Setting the permissions of the GITHUB_TOKEN for your repository."
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get default workflow permissions for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (read)Parameters for "Get default workflow permissions for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get default workflow permissions for a repository"Status codeDescription200OKCode samples for "Get default workflow permissions for a repository"Request exampleget/repos/{owner}/{repo}/actions/permissions/workflowcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/permissions/workflowGive read-only permission, and allow approving PRs.Example responseResponse schemaStatus: 200{
  "default_workflow_permissions": "read",
  "can_approve_pull_request_reviews": true
}Set default workflow permissions for a repositorySets the default workflow permissions granted to the GITHUB_TOKEN when running workflows in a repository, and sets if GitHub Actions
can submit approving pull request reviews.
For more information, see "Setting the permissions of the GITHUB_TOKEN for your repository."
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Set default workflow permissions for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Set default workflow permissions for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptiondefault_workflow_permissions string The default workflow permissions granted to the GITHUB_TOKEN when running workflows.Can be one of: read, write can_approve_pull_request_reviews boolean Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.HTTP response status codes for "Set default workflow permissions for a repository"Status codeDescription204Success response409Conflict response when changing a setting is prevented by the owning organizationCode samples for "Set default workflow permissions for a repository"Request exampleput/repos/{owner}/{repo}/actions/permissions/workflowcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/permissions/workflow \
  -d '{"default_workflow_permissions":"read","can_approve_pull_request_reviews":true}'Success responseStatus: 204\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/SecretsREST API endpoints for GitHub Actions SecretsUse the REST API to interact with secrets in GitHub Actions.About secrets in GitHub Actions
You can use the REST API to create, update, delete, and retrieve information about secrets that can be used in workflows in GitHub Actions. Secrets allow you to store sensitive information, such as access tokens, in your repository, repository environments, or organization. For more information, see About secrets.List organization secretsLists all secrets available in an organization without revealing their
encrypted values.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "List organization secrets"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (read)Parameters for "List organization secrets"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List organization secrets"Status codeDescription200OKCode samples for "List organization secrets"Request exampleget/orgs/{org}/actions/secretscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secretsResponseExample responseResponse schemaStatus: 200{
  "total_count": 3,
  "secrets": [
    {
      "name": "GIST_ID",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z",
      "visibility": "private"
    },
    {
      "name": "DEPLOY_TOKEN",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z",
      "visibility": "all"
    },
    {
      "name": "GH_TOKEN",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z",
      "visibility": "selected",
      "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories"
    }
  ]
}Get an organization public keyGets your public key, which you need to encrypt secrets. You need to
encrypt a secret before you can create or update secrets.
The authenticated user must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get an organization public key"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (read)Parameters for "Get an organization public key"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get an organization public key"Status codeDescription200OKCode samples for "Get an organization public key"Request exampleget/orgs/{org}/actions/secrets/public-keycURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secrets/public-keyResponseExample responseResponse schemaStatus: 200{
  "key_id": "012345678912345678",
  "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
}Get an organization secretGets a single organization secret without revealing its encrypted value.
The authenticated user must have collaborator access to a repository to create, update, or read secrets
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get an organization secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (read)Parameters for "Get an organization secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.secret_name string RequiredThe name of the secret.HTTP response status codes for "Get an organization secret"Status codeDescription200OKCode samples for "Get an organization secret"Request exampleget/orgs/{org}/actions/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAMEResponseExample responseResponse schemaStatus: 200{
  "name": "GH_TOKEN",
  "created_at": "2019-08-10T14:59:22Z",
  "updated_at": "2020-01-10T14:59:22Z",
  "visibility": "selected",
  "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories"
}Create or update an organization secretCreates or updates an organization secret with an encrypted value. Encrypt your secret using
LibSodium. For more information, see "Encrypting secrets for the REST API."
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create or update an organization secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (write)Parameters for "Create or update an organization secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.secret_name string RequiredThe name of the secret.Body parametersName, Type, Descriptionencrypted_value string RequiredValue for your secret, encrypted with LibSodium using the public key retrieved from the Get an organization public key endpoint.key_id string RequiredID of the key you used to encrypt the secret.visibility string RequiredWhich type of organization repositories have access to the organization secret. selected means only the repositories specified by selected_repository_ids can access the secret.Can be one of: all, private, selected selected_repository_ids array of integers An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the visibility is set to selected. You can manage the list of selected repositories using the List selected repositories for an organization secret, Set selected repositories for an organization secret, and Remove selected repository from an organization secret endpoints.HTTP response status codes for "Create or update an organization secret"Status codeDescription201Response when creating a secret204Response when updating a secretCode samples for "Create or update an organization secret"Request examplesSelect the example typeExample 1: Status Code 201 (application/json)Example 2: Status Code 204 (undefined)put/orgs/{org}/actions/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME \
  -d '{"encrypted_value":"c2VjcmV0","key_id":"012345678912345678","visibility":"selected","selected_repository_ids":[1296269,1296280]}'Response when creating a secretExample responseResponse schemaStatus: 201Delete an organization secretDeletes a secret in an organization using the secret name.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete an organization secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (write)Parameters for "Delete an organization secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.secret_name string RequiredThe name of the secret.HTTP response status codes for "Delete an organization secret"Status codeDescription204No ContentCode samples for "Delete an organization secret"Request exampledelete/orgs/{org}/actions/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAMEResponseStatus: 204List selected repositories for an organization secretLists all repositories that have been selected when the visibility
for repository access to a secret is set to selected.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "List selected repositories for an organization secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (read)Parameters for "List selected repositories for an organization secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.secret_name string RequiredThe name of the secret.Query parametersName, Type, Descriptionpage integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30HTTP response status codes for "List selected repositories for an organization secret"Status codeDescription200OKCode samples for "List selected repositories for an organization secret"Request exampleget/orgs/{org}/actions/secrets/{secret_name}/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME/repositoriesResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "repositories": [
    {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
    }
  ]
}Set selected repositories for an organization secretReplaces all repositories for an organization secret when the visibility
for repository access is set to selected. The visibility is set when you Create
or update an organization secret.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Set selected repositories for an organization secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (write)Parameters for "Set selected repositories for an organization secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.secret_name string RequiredThe name of the secret.Body parametersName, Type, Descriptionselected_repository_ids array of integers RequiredAn array of repository ids that can access the organization secret. You can only provide a list of repository ids when the visibility is set to selected. You can add and remove individual repositories using the Add selected repository to an organization secret and Remove selected repository from an organization secret endpoints.HTTP response status codes for "Set selected repositories for an organization secret"Status codeDescription204No ContentCode samples for "Set selected repositories for an organization secret"Request exampleput/orgs/{org}/actions/secrets/{secret_name}/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME/repositories \
  -d '{"selected_repository_ids":[64780797]}'ResponseStatus: 204Add selected repository to an organization secretAdds a repository to an organization secret when the visibility for
repository access is set to selected. For more information about setting the visibility, see Create or
update an organization secret.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Add selected repository to an organization secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (write) and "Metadata" repository permissions (read)Parameters for "Add selected repository to an organization secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.secret_name string RequiredThe name of the secret.repository_id integer RequiredHTTP response status codes for "Add selected repository to an organization secret"Status codeDescription204No Content when repository was added to the selected list409Conflict when visibility type is not set to selectedCode samples for "Add selected repository to an organization secret"Request exampleput/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME/repositories/REPOSITORY_IDNo Content when repository was added to the selected listStatus: 204Remove selected repository from an organization secretRemoves a repository from an organization secret when the visibility
for repository access is set to selected. The visibility is set when you Create
or update an organization secret.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Remove selected repository from an organization secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" organization permissions (write) and "Metadata" repository permissions (read)Parameters for "Remove selected repository from an organization secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.secret_name string RequiredThe name of the secret.repository_id integer RequiredHTTP response status codes for "Remove selected repository from an organization secret"Status codeDescription204Response when repository was removed from the selected list409Conflict when visibility type not set to selectedCode samples for "Remove selected repository from an organization secret"Request exampledelete/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/secrets/SECRET_NAME/repositories/REPOSITORY_IDResponse when repository was removed from the selected listStatus: 204List repository organization secretsLists all organization secrets shared with a repository without revealing their encrypted
values.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List repository organization secrets"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" repository permissions (read)Parameters for "List repository organization secrets"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repository organization secrets"Status codeDescription200OKCode samples for "List repository organization secrets"Request exampleget/repos/{owner}/{repo}/actions/organization-secretscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/organization-secretsResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "secrets": [
    {
      "name": "GH_TOKEN",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z"
    },
    {
      "name": "GIST_ID",
      "created_at": "2020-01-10T10:59:22Z",
      "updated_at": "2020-01-11T11:59:22Z"
    }
  ]
}List repository secretsLists all secrets available in a repository without revealing their encrypted
values.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List repository secrets"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" repository permissions (read)Parameters for "List repository secrets"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repository secrets"Status codeDescription200OKCode samples for "List repository secrets"Request exampleget/repos/{owner}/{repo}/actions/secretscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/secretsResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "secrets": [
    {
      "name": "GH_TOKEN",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z"
    },
    {
      "name": "GIST_ID",
      "created_at": "2020-01-10T10:59:22Z",
      "updated_at": "2020-01-11T11:59:22Z"
    }
  ]
}Get a repository public keyGets your public key, which you need to encrypt secrets. You need to
encrypt a secret before you can create or update secrets.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get a repository public key"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" repository permissions (read)Parameters for "Get a repository public key"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get a repository public key"Status codeDescription200OKCode samples for "Get a repository public key"Request exampleget/repos/{owner}/{repo}/actions/secrets/public-keycURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/secrets/public-keyResponseExample responseResponse schemaStatus: 200{
  "key_id": "012345678912345678",
  "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
}Get a repository secretGets a single repository secret without revealing its encrypted value.
The authenticated user must have collaborator access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get a repository secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" repository permissions (read)Parameters for "Get a repository secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.secret_name string RequiredThe name of the secret.HTTP response status codes for "Get a repository secret"Status codeDescription200OKCode samples for "Get a repository secret"Request exampleget/repos/{owner}/{repo}/actions/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/secrets/SECRET_NAMEResponseExample responseResponse schemaStatus: 200{
  "name": "GH_TOKEN",
  "created_at": "2019-08-10T14:59:22Z",
  "updated_at": "2020-01-10T14:59:22Z"
}Create or update a repository secretCreates or updates a repository secret with an encrypted value. Encrypt your secret using
LibSodium. For more information, see "Encrypting secrets for the REST API."
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create or update a repository secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" repository permissions (write)Parameters for "Create or update a repository secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.secret_name string RequiredThe name of the secret.Body parametersName, Type, Descriptionencrypted_value string RequiredValue for your secret, encrypted with LibSodium using the public key retrieved from the Get a repository public key endpoint.key_id string RequiredID of the key you used to encrypt the secret.HTTP response status codes for "Create or update a repository secret"Status codeDescription201Response when creating a secret204Response when updating a secretCode samples for "Create or update a repository secret"Request examplesSelect the example typeExample 1: Status Code 201 (application/json)Example 2: Status Code 204 (undefined)put/repos/{owner}/{repo}/actions/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/secrets/SECRET_NAME \
  -d '{"encrypted_value":"c2VjcmV0","key_id":"012345678912345678"}'Response when creating a secretExample responseResponse schemaStatus: 201Delete a repository secretDeletes a secret in a repository using the secret name.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete a repository secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Secrets" repository permissions (write)Parameters for "Delete a repository secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.secret_name string RequiredThe name of the secret.HTTP response status codes for "Delete a repository secret"Status codeDescription204No ContentCode samples for "Delete a repository secret"Request exampledelete/repos/{owner}/{repo}/actions/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/secrets/SECRET_NAMEResponseStatus: 204List environment secretsLists all secrets available in an environment without revealing their
encrypted values.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List environment secrets"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (read)Parameters for "List environment secrets"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List environment secrets"Status codeDescription200OKCode samples for "List environment secrets"Request exampleget/repos/{owner}/{repo}/environments/{environment_name}/secretscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/secretsResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "secrets": [
    {
      "name": "GH_TOKEN",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z"
    },
    {
      "name": "GIST_ID",
      "created_at": "2020-01-10T10:59:22Z",
      "updated_at": "2020-01-11T11:59:22Z"
    }
  ]
}Get an environment public keyGet the public key for an environment, which you need to encrypt environment
secrets. You need to encrypt a secret before you can create or update secrets.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get an environment public key"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (read)Parameters for "Get an environment public key"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.HTTP response status codes for "Get an environment public key"Status codeDescription200OKCode samples for "Get an environment public key"Request exampleget/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-keycURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/secrets/public-keyResponseExample responseResponse schemaStatus: 200{
  "key_id": "012345678912345678",
  "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
}Get an environment secretGets a single environment secret without revealing its encrypted value.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get an environment secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (read)Parameters for "Get an environment secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.secret_name string RequiredThe name of the secret.HTTP response status codes for "Get an environment secret"Status codeDescription200OKCode samples for "Get an environment secret"Request exampleget/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/secrets/SECRET_NAMEResponseExample responseResponse schemaStatus: 200{
  "name": "GH_TOKEN",
  "created_at": "2019-08-10T14:59:22Z",
  "updated_at": "2020-01-10T14:59:22Z"
}Create or update an environment secretCreates or updates an environment secret with an encrypted value. Encrypt your secret using
LibSodium. For more information, see "Encrypting secrets for the REST API."
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create or update an environment secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (write)Parameters for "Create or update an environment secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.secret_name string RequiredThe name of the secret.Body parametersName, Type, Descriptionencrypted_value string RequiredValue for your secret, encrypted with LibSodium using the public key retrieved from the Get an environment public key endpoint.key_id string RequiredID of the key you used to encrypt the secret.HTTP response status codes for "Create or update an environment secret"Status codeDescription201Response when creating a secret204Response when updating a secretCode samples for "Create or update an environment secret"Request examplesSelect the example typeExample 1: Status Code 201 (application/json)Example 2: Status Code 204 (undefined)put/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/secrets/SECRET_NAME \
  -d '{"encrypted_value":"c2VjcmV0","key_id":"012345678912345678"}'Response when creating a secretExample responseResponse schemaStatus: 201Delete an environment secretDeletes a secret in an environment using the secret name.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete an environment secret"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (write)Parameters for "Delete an environment secret"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.secret_name string RequiredThe name of the secret.HTTP response status codes for "Delete an environment secret"Status codeDescription204Default responseCode samples for "Delete an environment secret"Request exampledelete/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/secrets/SECRET_NAMEDefault responseStatus: 204\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/Self-hosted runner groupsREST API endpoints for self-hosted runner groupsUse the REST API to interact with self-hosted runner groups for GitHub Actions.About self-hosted runner groups in GitHub Actions
You can use the REST API to manage groups of self-hosted runners in GitHub Actions. For more information, see Managing access to self-hosted runners using groups.
These endpoints are available for authenticated users, OAuth apps, and GitHub Apps. Access tokens require repo scope for private repositories and public_repo scope for public repositories. GitHub Apps must have the administration permission for repositories or the organization_self_hosted_runners permission for organizations. Authenticated users must have admin access to repositories or organizations, or the manage_runners:enterprise scope for enterprises to use these endpoints.List self-hosted runner groups for an organizationLists all self-hosted runner groups configured in an organization and inherited from an enterprise.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "List self-hosted runner groups for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "List self-hosted runner groups for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1visible_to_repository string Only return runner groups that are allowed to be used by this repository.HTTP response status codes for "List self-hosted runner groups for an organization"Status codeDescription200OKCode samples for "List self-hosted runner groups for an organization"Request exampleget/orgs/{org}/actions/runner-groupscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groupsResponseExample responseResponse schemaStatus: 200{
  "total_count": 3,
  "runner_groups": [
    {
      "id": 1,
      "name": "Default",
      "visibility": "all",
      "default": true,
      "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/1/runners",
      "inherited": false,
      "allows_public_repositories": true,
      "restricted_to_workflows": false,
      "selected_workflows": [],
      "workflow_restrictions_read_only": false
    },
    {
      "id": 2,
      "name": "octo-runner-group",
      "visibility": "selected",
      "default": false,
      "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories",
      "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
      "inherited": true,
      "allows_public_repositories": true,
      "restricted_to_workflows": true,
      "selected_workflows": [
        "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
      ],
      "workflow_restrictions_read_only": true
    },
    {
      "id": 3,
      "name": "expensive-hardware",
      "visibility": "private",
      "default": false,
      "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/3/runners",
      "inherited": false,
      "allows_public_repositories": true,
      "restricted_to_workflows": false,
      "selected_workflows": [
        "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
      ],
      "workflow_restrictions_read_only": false
    }
  ]
}Create a self-hosted runner group for an organizationCreates a new self-hosted runner group for an organization.
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Create a self-hosted runner group for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Create a self-hosted runner group for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptionname string RequiredName of the runner group.visibility string Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.Default: allCan be one of: selected, all, private selected_repository_ids array of integers List of repository IDs that can access the runner group.runners array of integers List of runner IDs to add to the runner group.allows_public_repositories boolean Whether the runner group can be used by public repositories.Default: falserestricted_to_workflows boolean If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array.Default: falseselected_workflows array of strings List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.network_configuration_id string The identifier of a hosted compute network configuration.HTTP response status codes for "Create a self-hosted runner group for an organization"Status codeDescription201CreatedCode samples for "Create a self-hosted runner group for an organization"Request examplepost/orgs/{org}/actions/runner-groupscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups \
  -d '{"name":"Expensive hardware runners","visibility":"selected","selected_repository_ids":[32,91],"runners":[9,2]}'ResponseExample responseResponse schemaStatus: 201{
  "id": 2,
  "name": "octo-runner-group",
  "visibility": "selected",
  "default": false,
  "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner-groups/2/repositories",
  "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
  "hosted_runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/hosted-runners",
  "network_configuration_id": "EC486D5D793175D7E3B29C27318D5C1AAE49A7833FC85F2E82C3D2C54AC7D3BA",
  "inherited": false,
  "allows_public_repositories": true,
  "restricted_to_workflows": true,
  "selected_workflows": [
    "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
  ],
  "workflow_restrictions_read_only": false
}Get a self-hosted runner group for an organizationGets a specific self-hosted runner group for an organization.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Get a self-hosted runner group for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "Get a self-hosted runner group for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.HTTP response status codes for "Get a self-hosted runner group for an organization"Status codeDescription200OKCode samples for "Get a self-hosted runner group for an organization"Request exampleget/orgs/{org}/actions/runner-groups/{runner_group_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_IDResponseExample responseResponse schemaStatus: 200{
  "id": 2,
  "name": "octo-runner-group",
  "visibility": "selected",
  "default": false,
  "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories",
  "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
  "hosted_runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/hosted-runners",
  "network_configuration_id": "EC486D5D793175D7E3B29C27318D5C1AAE49A7833FC85F2E82C3D2C54AC7D3BA",
  "inherited": false,
  "allows_public_repositories": true,
  "restricted_to_workflows": true,
  "selected_workflows": [
    "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
  ],
  "workflow_restrictions_read_only": false
}Update a self-hosted runner group for an organizationUpdates the name and visibility of a self-hosted runner group in an organization.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Update a self-hosted runner group for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Update a self-hosted runner group for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.Body parametersName, Type, Descriptionname string RequiredName of the runner group.visibility string Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.Can be one of: selected, all, private allows_public_repositories boolean Whether the runner group can be used by public repositories.Default: falserestricted_to_workflows boolean If true, the runner group will be restricted to running only the workflows specified in the selected_workflows array.Default: falseselected_workflows array of strings List of workflows the runner group should be allowed to run. This setting will be ignored unless restricted_to_workflows is set to true.network_configuration_id string or null The identifier of a hosted compute network configuration.HTTP response status codes for "Update a self-hosted runner group for an organization"Status codeDescription200OKCode samples for "Update a self-hosted runner group for an organization"Request examplepatch/orgs/{org}/actions/runner-groups/{runner_group_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PATCH \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID \
  -d '{"name":"Expensive hardware runners","visibility":"selected"}'ResponseExample responseResponse schemaStatus: 200{
  "id": 2,
  "name": "octo-runner-group",
  "visibility": "selected",
  "default": false,
  "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner-groups/2/repositories",
  "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
  "hosted_runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/hosted-runners",
  "network_configuration_id": "EC486D5D793175D7E3B29C27318D5C1AAE49A7833FC85F2E82C3D2C54AC7D3BA",
  "inherited": false,
  "allows_public_repositories": true,
  "restricted_to_workflows": true,
  "selected_workflows": [
    "octo-org/octo-repo/.github/workflows/deploy.yaml@refs/heads/main"
  ],
  "workflow_restrictions_read_only": false
}Delete a self-hosted runner group from an organizationDeletes a self-hosted runner group for an organization.
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Delete a self-hosted runner group from an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Delete a self-hosted runner group from an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.HTTP response status codes for "Delete a self-hosted runner group from an organization"Status codeDescription204No ContentCode samples for "Delete a self-hosted runner group from an organization"Request exampledelete/orgs/{org}/actions/runner-groups/{runner_group_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_IDResponseStatus: 204List GitHub-hosted runners in a group for an organizationLists the GitHub-hosted runners in an organization group.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "List GitHub-hosted runners in a group for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "List GitHub-hosted runners in a group for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List GitHub-hosted runners in a group for an organization"Status codeDescription200OKCode samples for "List GitHub-hosted runners in a group for an organization"Request exampleget/orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runnerscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/hosted-runnersResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "runners": [
    {
      "id": 5,
      "name": "My hosted ubuntu runner",
      "runner_group_id": 2,
      "platform": "linux-x64",
      "image": {
        "id": "ubuntu-20.04",
        "size": 86
      },
      "machine_size_details": {
        "id": "4-core",
        "cpu_cores": 4,
        "memory_gb": 16,
        "storage_gb": 150
      },
      "status": "Ready",
      "maximum_runners": 10,
      "public_ip_enabled": true,
      "public_ips": [
        {
          "enabled": true,
          "prefix": "20.80.208.150",
          "length": 31
        }
      ],
      "last_active_on": "2022-10-09T23:39:01Z"
    },
    {
      "id": 7,
      "name": "My hosted Windows runner",
      "runner_group_id": 2,
      "platform": "win-x64",
      "image": {
        "id": "windows-latest",
        "size": 256
      },
      "machine_size_details": {
        "id": "8-core",
        "cpu_cores": 8,
        "memory_gb": 32,
        "storage_gb": 300
      },
      "status": "Ready",
      "maximum_runners": 20,
      "public_ip_enabled": false,
      "public_ips": [],
      "last_active_on": "2023-04-26T15:23:37Z"
    }
  ]
}List repository access to a self-hosted runner group in an organizationLists the repositories with access to a self-hosted runner group configured in an organization.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "List repository access to a self-hosted runner group in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "List repository access to a self-hosted runner group in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.Query parametersName, Type, Descriptionpage integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30HTTP response status codes for "List repository access to a self-hosted runner group in an organization"Status codeDescription200OKCode samples for "List repository access to a self-hosted runner group in an organization"Request exampleget/orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/repositoriesResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "repositories": [
    {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "clone_url": "https://github.com/octocat/Hello-World.git",
      "mirror_url": "git:git.example.com/octocat/Hello-World",
      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
      "svn_url": "https://svn.github.com/octocat/Hello-World",
      "homepage": "https://github.com",
      "language": null,
      "forks_count": 9,
      "stargazers_count": 80,
      "watchers_count": 80,
      "size": 108,
      "default_branch": "master",
      "open_issues_count": 0,
      "is_template": true,
      "topics": [
        "octocat",
        "atom",
        "electron",
        "api"
      ],
      "has_issues": true,
      "has_projects": true,
      "has_wiki": true,
      "has_pages": false,
      "has_downloads": true,
      "archived": false,
      "disabled": false,
      "visibility": "public",
      "pushed_at": "2011-01-26T19:06:43Z",
      "created_at": "2011-01-26T19:01:12Z",
      "updated_at": "2011-01-26T19:14:43Z",
      "permissions": {
        "admin": false,
        "push": false,
        "pull": true
      },
      "template_repository": {
        "id": 1296269,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
        "name": "Hello-World",
        "full_name": "octocat/Hello-World",
        "owner": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/octocat/Hello-World",
        "description": "This your first repo!",
        "fork": false,
        "url": "https://api.github.com/repos/octocat/Hello-World",
        "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
        "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
        "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
        "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
        "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
        "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
        "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
        "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
        "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
        "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
        "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
        "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
        "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
        "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
        "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
        "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
        "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
        "git_url": "git:github.com/octocat/Hello-World.git",
        "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
        "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
        "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
        "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
        "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
        "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
        "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
        "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
        "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
        "ssh_url": "git@github.com:octocat/Hello-World.git",
        "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
        "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
        "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
        "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
        "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
        "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
        "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
        "clone_url": "https://github.com/octocat/Hello-World.git",
        "mirror_url": "git:git.example.com/octocat/Hello-World",
        "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
        "svn_url": "https://svn.github.com/octocat/Hello-World",
        "homepage": "https://github.com",
        "organization": null,
        "language": null,
        "forks": 9,
        "forks_count": 9,
        "stargazers_count": 80,
        "watchers_count": 80,
        "watchers": 80,
        "size": 108,
        "default_branch": "master",
        "open_issues": 0,
        "open_issues_count": 0,
        "is_template": true,
        "license": {
          "key": "mit",
          "name": "MIT License",
          "url": "https://api.github.com/licenses/mit",
          "spdx_id": "MIT",
          "node_id": "MDc6TGljZW5zZW1pdA==",
          "html_url": "https://api.github.com/licenses/mit"
        },
        "topics": [
          "octocat",
          "atom",
          "electron",
          "api"
        ],
        "has_issues": true,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2011-01-26T19:06:43Z",
        "created_at": "2011-01-26T19:01:12Z",
        "updated_at": "2011-01-26T19:14:43Z",
        "permissions": {
          "admin": false,
          "push": false,
          "pull": true
        },
        "allow_rebase_merge": true,
        "template_repository": null,
        "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
        "allow_squash_merge": true,
        "allow_auto_merge": false,
        "delete_branch_on_merge": true,
        "allow_merge_commit": true,
        "subscribers_count": 42,
        "network_count": 0
      },
      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
      "delete_branch_on_merge": true,
      "subscribers_count": 42,
      "network_count": 0,
      "license": {
        "key": "mit",
        "name": "MIT License",
        "url": "https://api.github.com/licenses/mit",
        "spdx_id": "MIT",
        "node_id": "MDc6TGljZW5zZW1pdA=="
      },
      "forks": 1,
      "open_issues": 1,
      "watchers": 1
    }
  ]
}Set repository access for a self-hosted runner group in an organizationReplaces the list of repositories that have access to a self-hosted runner group configured in an organization.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Set repository access for a self-hosted runner group in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Set repository access for a self-hosted runner group in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.Body parametersName, Type, Descriptionselected_repository_ids array of integers RequiredList of repository IDs that can access the runner group.HTTP response status codes for "Set repository access for a self-hosted runner group in an organization"Status codeDescription204No ContentCode samples for "Set repository access for a self-hosted runner group in an organization"Request exampleput/orgs/{org}/actions/runner-groups/{runner_group_id}/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/repositories \
  -d '{"selected_repository_ids":[32,91]}'ResponseStatus: 204Add repository access to a self-hosted runner group in an organizationAdds a repository to the list of repositories that can access a self-hosted runner group. The runner group must have visibility set to selected. For more information, see "Create a self-hosted runner group for an organization."
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Add repository access to a self-hosted runner group in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write) and "Metadata" repository permissions (read)Parameters for "Add repository access to a self-hosted runner group in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.repository_id integer RequiredThe unique identifier of the repository.HTTP response status codes for "Add repository access to a self-hosted runner group in an organization"Status codeDescription204No ContentCode samples for "Add repository access to a self-hosted runner group in an organization"Request exampleput/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/repositories/REPOSITORY_IDResponseStatus: 204Remove repository access to a self-hosted runner group in an organizationRemoves a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have visibility set to selected. For more information, see "Create a self-hosted runner group for an organization."
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Remove repository access to a self-hosted runner group in an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write) and "Metadata" repository permissions (read)Parameters for "Remove repository access to a self-hosted runner group in an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.repository_id integer RequiredThe unique identifier of the repository.HTTP response status codes for "Remove repository access to a self-hosted runner group in an organization"Status codeDescription204No ContentCode samples for "Remove repository access to a self-hosted runner group in an organization"Request exampledelete/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/repositories/REPOSITORY_IDResponseStatus: 204List self-hosted runners in a group for an organizationLists self-hosted runners that are in a specific organization group.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "List self-hosted runners in a group for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "List self-hosted runners in a group for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List self-hosted runners in a group for an organization"Status codeDescription200OKCode samples for "List self-hosted runners in a group for an organization"Request exampleget/orgs/{org}/actions/runner-groups/{runner_group_id}/runnerscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/runnersResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "runners": [
    {
      "id": 23,
      "name": "linux_runner",
      "os": "linux",
      "status": "online",
      "busy": true,
      "ephemeral": false,
      "labels": [
        {
          "id": 5,
          "name": "self-hosted",
          "type": "read-only"
        },
        {
          "id": 7,
          "name": "X64",
          "type": "read-only"
        },
        {
          "id": 11,
          "name": "Linux",
          "type": "read-only"
        }
      ]
    },
    {
      "id": 24,
      "name": "mac_runner",
      "os": "macos",
      "status": "offline",
      "busy": false,
      "ephemeral": false,
      "labels": [
        {
          "id": 5,
          "name": "self-hosted",
          "type": "read-only"
        },
        {
          "id": 7,
          "name": "X64",
          "type": "read-only"
        },
        {
          "id": 20,
          "name": "macOS",
          "type": "read-only"
        },
        {
          "id": 21,
          "name": "no-gpu",
          "type": "custom"
        }
      ]
    }
  ]
}Set self-hosted runners in a group for an organizationReplaces the list of self-hosted runners that are part of an organization runner group.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Set self-hosted runners in a group for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Set self-hosted runners in a group for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.Body parametersName, Type, Descriptionrunners array of integers RequiredList of runner IDs to add to the runner group.HTTP response status codes for "Set self-hosted runners in a group for an organization"Status codeDescription204No ContentCode samples for "Set self-hosted runners in a group for an organization"Request exampleput/orgs/{org}/actions/runner-groups/{runner_group_id}/runnerscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/runners \
  -d '{"runners":[9,2]}'ResponseStatus: 204Add a self-hosted runner to a group for an organizationAdds a self-hosted runner to a runner group configured in an organization.
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Add a self-hosted runner to a group for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Add a self-hosted runner to a group for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "Add a self-hosted runner to a group for an organization"Status codeDescription204No ContentCode samples for "Add a self-hosted runner to a group for an organization"Request exampleput/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/runners/RUNNER_IDResponseStatus: 204Remove a self-hosted runner from a group for an organizationRemoves a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Remove a self-hosted runner from a group for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Remove a self-hosted runner from a group for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_group_id integer RequiredUnique identifier of the self-hosted runner group.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "Remove a self-hosted runner from a group for an organization"Status codeDescription204No ContentCode samples for "Remove a self-hosted runner from a group for an organization"Request exampledelete/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runner-groups/RUNNER_GROUP_ID/runners/RUNNER_IDResponseStatus: 204\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/Self-hosted runnersREST API endpoints for self-hosted runnersUse the REST API to interact with self-hosted runners in GitHub Actions.About self-hosted runners in GitHub Actions
You can use the REST API to register, view, and delete self-hosted runners in GitHub Actions. Self-hosted runners allow you to host your own runners and customize the environment used to run jobs in your GitHub Actions workflows. For more information, see Hosting your own runners.List self-hosted runners for an organizationLists all self-hosted runners configured in an organization.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "List self-hosted runners for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "List self-hosted runners for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionname string The name of a self-hosted runner.per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List self-hosted runners for an organization"Status codeDescription200OKCode samples for "List self-hosted runners for an organization"Request exampleget/orgs/{org}/actions/runnerscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runnersResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "runners": [
    {
      "id": 23,
      "name": "linux_runner",
      "os": "linux",
      "status": "online",
      "busy": true,
      "ephemeral": false,
      "labels": [
        {
          "id": 5,
          "name": "self-hosted",
          "type": "read-only"
        },
        {
          "id": 7,
          "name": "X64",
          "type": "read-only"
        },
        {
          "id": 11,
          "name": "Linux",
          "type": "read-only"
        }
      ]
    },
    {
      "id": 24,
      "name": "mac_runner",
      "os": "macos",
      "status": "offline",
      "busy": false,
      "ephemeral": false,
      "labels": [
        {
          "id": 5,
          "name": "self-hosted",
          "type": "read-only"
        },
        {
          "id": 7,
          "name": "X64",
          "type": "read-only"
        },
        {
          "id": 20,
          "name": "macOS",
          "type": "read-only"
        },
        {
          "id": 21,
          "name": "no-gpu",
          "type": "custom"
        }
      ]
    }
  ]
}List runner applications for an organizationLists binaries for the runner application that you can download and run.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.  If the repository is private, the repo scope is also required.Fine-grained access tokens for "List runner applications for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "List runner applications for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "List runner applications for an organization"Status codeDescription200OKCode samples for "List runner applications for an organization"Request exampleget/orgs/{org}/actions/runners/downloadscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/downloadsResponseExample responseResponse schemaStatus: 200[
  {
    "os": "osx",
    "architecture": "x64",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-osx-x64-2.164.0.tar.gz",
    "filename": "actions-runner-osx-x64-2.164.0.tar.gz"
  },
  {
    "os": "linux",
    "architecture": "x64",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-x64-2.164.0.tar.gz",
    "filename": "actions-runner-linux-x64-2.164.0.tar.gz"
  },
  {
    "os": "linux",
    "architecture": "arm",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm-2.164.0.tar.gz",
    "filename": "actions-runner-linux-arm-2.164.0.tar.gz"
  },
  {
    "os": "win",
    "architecture": "x64",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-win-x64-2.164.0.zip",
    "filename": "actions-runner-win-x64-2.164.0.zip"
  },
  {
    "os": "linux",
    "architecture": "arm64",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm64-2.164.0.tar.gz",
    "filename": "actions-runner-linux-arm64-2.164.0.tar.gz"
  }
]Create configuration for a just-in-time runner for an organizationGenerates a configuration that can be passed to the runner application at startup.
The authenticated user must have admin access to the organization.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create configuration for a just-in-time runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Create configuration for a just-in-time runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptionname string RequiredThe name of the new runner.runner_group_id integer RequiredThe ID of the runner group to register the runner to.labels array of strings RequiredThe names of the custom labels to add to the runner. Minimum items: 1. Maximum items: 100.work_folder string The working directory to be used for job execution, relative to the runner install directory.Default: _workHTTP response status codes for "Create configuration for a just-in-time runner for an organization"Status codeDescription201Created404Resource not found409Conflict422Validation failed, or the endpoint has been spammed.Code samples for "Create configuration for a just-in-time runner for an organization"Request examplepost/orgs/{org}/actions/runners/generate-jitconfigcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/generate-jitconfig \
  -d '{"name":"New runner","runner_group_id":1,"labels":["self-hosted","X64","macOS","no-gpu"],"work_folder":"_work"}'ResponseExample responseResponse schemaStatus: 201{
  "runner": {
    "id": 23,
    "name": "New runner",
    "os": "unknown",
    "status": "offline",
    "busy": false,
    "labels": [
      {
        "id": 5,
        "name": "self-hosted",
        "type": "read-only"
      },
      {
        "id": 7,
        "name": "X64",
        "type": "read-only"
      },
      {
        "id": 20,
        "name": "macOS",
        "type": "read-only"
      },
      {
        "id": 21,
        "name": "no-gpu",
        "type": "custom"
      }
    ]
  },
  "encoded_jit_config": "abc123"
}Create a registration token for an organizationReturns a token that you can pass to the config script. The token expires after one hour.
For example, you can replace TOKEN in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
./config.sh --url https://github.com/octo-org --token TOKEN

Authenticated users must have admin access to the organization to use this endpoint.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create a registration token for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Create a registration token for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Create a registration token for an organization"Status codeDescription201CreatedCode samples for "Create a registration token for an organization"Request examplepost/orgs/{org}/actions/runners/registration-tokencURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/registration-tokenResponseExample responseResponse schemaStatus: 201{
  "token": "LLBF3JGZDX3P5PMEXLND6TS6FCWO6",
  "expires_at": "2020-01-22T12:13:35.123-08:00"
}Create a remove token for an organizationReturns a token that you can pass to the config script to remove a self-hosted runner from an organization. The token expires after one hour.
For example, you can replace TOKEN in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
./config.sh remove --token TOKEN

Authenticated users must have admin access to the organization to use this endpoint.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create a remove token for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Create a remove token for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Create a remove token for an organization"Status codeDescription201CreatedCode samples for "Create a remove token for an organization"Request examplepost/orgs/{org}/actions/runners/remove-tokencURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/remove-tokenResponseExample responseResponse schemaStatus: 201{
  "token": "AABF3JGZDX3P5PMEXLND6TS6FCWO6",
  "expires_at": "2020-01-29T12:13:35.123-08:00"
}Get a self-hosted runner for an organizationGets a specific self-hosted runner configured in an organization.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Get a self-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "Get a self-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "Get a self-hosted runner for an organization"Status codeDescription200OKCode samples for "Get a self-hosted runner for an organization"Request exampleget/orgs/{org}/actions/runners/{runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/RUNNER_IDResponseExample responseResponse schemaStatus: 200{
  "id": 23,
  "name": "MBP",
  "os": "macos",
  "status": "online",
  "busy": true,
  "ephemeral": false,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}Delete a self-hosted runner from an organizationForces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete a self-hosted runner from an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Delete a self-hosted runner from an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "Delete a self-hosted runner from an organization"Status codeDescription204No ContentCode samples for "Delete a self-hosted runner from an organization"Request exampledelete/orgs/{org}/actions/runners/{runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/RUNNER_IDResponseStatus: 204List labels for a self-hosted runner for an organizationLists all labels for a self-hosted runner configured in an organization.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "List labels for a self-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (read)Parameters for "List labels for a self-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "List labels for a self-hosted runner for an organization"Status codeDescription200OK404Resource not foundCode samples for "List labels for a self-hosted runner for an organization"Request exampleget/orgs/{org}/actions/runners/{runner_id}/labelscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/RUNNER_ID/labelsResponseExample responseResponse schemaStatus: 200{
  "total_count": 4,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}Add custom labels to a self-hosted runner for an organizationAdds custom labels to a self-hosted runner configured in an organization.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint.Fine-grained access tokens for "Add custom labels to a self-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Add custom labels to a self-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.Body parametersName, Type, Descriptionlabels array of strings RequiredThe names of the custom labels to add to the runner.HTTP response status codes for "Add custom labels to a self-hosted runner for an organization"Status codeDescription200OK404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Add custom labels to a self-hosted runner for an organization"Request examplepost/orgs/{org}/actions/runners/{runner_id}/labelscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/RUNNER_ID/labels \
  -d '{"labels":["gpu","accelerated"]}'ResponseExample responseResponse schemaStatus: 200{
  "total_count": 4,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}Set custom labels for a self-hosted runner for an organizationRemove all previous custom labels and set the new custom labels for a specific
self-hosted runner configured in an organization.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Set custom labels for a self-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Set custom labels for a self-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.Body parametersName, Type, Descriptionlabels array of strings RequiredThe names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.HTTP response status codes for "Set custom labels for a self-hosted runner for an organization"Status codeDescription200OK404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Set custom labels for a self-hosted runner for an organization"Request exampleput/orgs/{org}/actions/runners/{runner_id}/labelscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/RUNNER_ID/labels \
  -d '{"labels":["gpu","accelerated"]}'ResponseExample responseResponse schemaStatus: 200{
  "total_count": 4,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}Remove all custom labels from a self-hosted runner for an organizationRemove all custom labels from a self-hosted runner configured in an
organization. Returns the remaining read-only labels from the runner.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Remove all custom labels from a self-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Remove all custom labels from a self-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "Remove all custom labels from a self-hosted runner for an organization"Status codeDescription200OK404Resource not foundCode samples for "Remove all custom labels from a self-hosted runner for an organization"Request exampledelete/orgs/{org}/actions/runners/{runner_id}/labelscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/RUNNER_ID/labelsResponseExample responseResponse schemaStatus: 200{
  "total_count": 3,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    }
  ]
}Remove a custom label from a self-hosted runner for an organizationRemove a custom label from a self-hosted runner configured
in an organization. Returns the remaining labels from the runner.
This endpoint returns a 404 Not Found status if the custom label is not
present on the runner.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Remove a custom label from a self-hosted runner for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Self-hosted runners" organization permissions (write)Parameters for "Remove a custom label from a self-hosted runner for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.name string RequiredThe name of a self-hosted runner's custom label.HTTP response status codes for "Remove a custom label from a self-hosted runner for an organization"Status codeDescription200OK404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Remove a custom label from a self-hosted runner for an organization"Request exampledelete/orgs/{org}/actions/runners/{runner_id}/labels/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/runners/RUNNER_ID/labels/NAMEResponseExample responseResponse schemaStatus: 200{
  "total_count": 4,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}List self-hosted runners for a repositoryLists all self-hosted runners configured in a repository.
Authenticated users must have admin access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List self-hosted runners for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (read)Parameters for "List self-hosted runners for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionname string The name of a self-hosted runner.per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List self-hosted runners for a repository"Status codeDescription200OKCode samples for "List self-hosted runners for a repository"Request exampleget/repos/{owner}/{repo}/actions/runnerscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runnersResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "runners": [
    {
      "id": 23,
      "name": "linux_runner",
      "os": "linux",
      "status": "online",
      "busy": true,
      "ephemeral": false,
      "labels": [
        {
          "id": 5,
          "name": "self-hosted",
          "type": "read-only"
        },
        {
          "id": 7,
          "name": "X64",
          "type": "read-only"
        },
        {
          "id": 11,
          "name": "Linux",
          "type": "read-only"
        }
      ]
    },
    {
      "id": 24,
      "name": "mac_runner",
      "os": "macos",
      "status": "offline",
      "busy": false,
      "ephemeral": false,
      "labels": [
        {
          "id": 5,
          "name": "self-hosted",
          "type": "read-only"
        },
        {
          "id": 7,
          "name": "X64",
          "type": "read-only"
        },
        {
          "id": 20,
          "name": "macOS",
          "type": "read-only"
        },
        {
          "id": 21,
          "name": "no-gpu",
          "type": "custom"
        }
      ]
    }
  ]
}List runner applications for a repositoryLists binaries for the runner application that you can download and run.
Authenticated users must have admin access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List runner applications for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (read)Parameters for "List runner applications for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "List runner applications for a repository"Status codeDescription200OKCode samples for "List runner applications for a repository"Request exampleget/repos/{owner}/{repo}/actions/runners/downloadscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/downloadsResponseExample responseResponse schemaStatus: 200[
  {
    "os": "osx",
    "architecture": "x64",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-osx-x64-2.164.0.tar.gz",
    "filename": "actions-runner-osx-x64-2.164.0.tar.gz"
  },
  {
    "os": "linux",
    "architecture": "x64",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-x64-2.164.0.tar.gz",
    "filename": "actions-runner-linux-x64-2.164.0.tar.gz"
  },
  {
    "os": "linux",
    "architecture": "arm",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm-2.164.0.tar.gz",
    "filename": "actions-runner-linux-arm-2.164.0.tar.gz"
  },
  {
    "os": "win",
    "architecture": "x64",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-win-x64-2.164.0.zip",
    "filename": "actions-runner-win-x64-2.164.0.zip"
  },
  {
    "os": "linux",
    "architecture": "arm64",
    "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm64-2.164.0.tar.gz",
    "filename": "actions-runner-linux-arm64-2.164.0.tar.gz"
  }
]Create configuration for a just-in-time runner for a repositoryGenerates a configuration that can be passed to the runner application at startup.
The authenticated user must have admin access to the repository.
OAuth tokens and personal access tokens (classic) need therepo scope to use this endpoint.Fine-grained access tokens for "Create configuration for a just-in-time runner for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Create configuration for a just-in-time runner for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionname string RequiredThe name of the new runner.runner_group_id integer RequiredThe ID of the runner group to register the runner to.labels array of strings RequiredThe names of the custom labels to add to the runner. Minimum items: 1. Maximum items: 100.work_folder string The working directory to be used for job execution, relative to the runner install directory.Default: _workHTTP response status codes for "Create configuration for a just-in-time runner for a repository"Status codeDescription201Created404Resource not found409Conflict422Validation failed, or the endpoint has been spammed.Code samples for "Create configuration for a just-in-time runner for a repository"Request examplepost/repos/{owner}/{repo}/actions/runners/generate-jitconfigcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/generate-jitconfig \
  -d '{"name":"New runner","runner_group_id":1,"labels":["self-hosted","X64","macOS","no-gpu"],"work_folder":"_work"}'ResponseExample responseResponse schemaStatus: 201{
  "runner": {
    "id": 23,
    "name": "New runner",
    "os": "unknown",
    "status": "offline",
    "busy": false,
    "labels": [
      {
        "id": 5,
        "name": "self-hosted",
        "type": "read-only"
      },
      {
        "id": 7,
        "name": "X64",
        "type": "read-only"
      },
      {
        "id": 20,
        "name": "macOS",
        "type": "read-only"
      },
      {
        "id": 21,
        "name": "no-gpu",
        "type": "custom"
      }
    ]
  },
  "encoded_jit_config": "abc123"
}Create a registration token for a repositoryReturns a token that you can pass to the config script. The token expires after one hour.
For example, you can replace TOKEN in the following example with the registration token provided by this endpoint to configure your self-hosted runner:
./config.sh --url https://github.com/octo-org --token TOKEN

Authenticated users must have admin access to the repository to use this endpoint.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create a registration token for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Create a registration token for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Create a registration token for a repository"Status codeDescription201CreatedCode samples for "Create a registration token for a repository"Request examplepost/repos/{owner}/{repo}/actions/runners/registration-tokencURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/registration-tokenResponseExample responseResponse schemaStatus: 201{
  "token": "LLBF3JGZDX3P5PMEXLND6TS6FCWO6",
  "expires_at": "2020-01-22T12:13:35.123-08:00"
}Create a remove token for a repositoryReturns a token that you can pass to the config script to remove a self-hosted runner from an repository. The token expires after one hour.
For example, you can replace TOKEN in the following example with the registration token provided by this endpoint to remove your self-hosted runner from an organization:
./config.sh remove --token TOKEN

Authenticated users must have admin access to the repository to use this endpoint.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create a remove token for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Create a remove token for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Create a remove token for a repository"Status codeDescription201CreatedCode samples for "Create a remove token for a repository"Request examplepost/repos/{owner}/{repo}/actions/runners/remove-tokencURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/remove-tokenResponseExample responseResponse schemaStatus: 201{
  "token": "AABF3JGZDX3P5PMEXLND6TS6FCWO6",
  "expires_at": "2020-01-29T12:13:35.123-08:00"
}Get a self-hosted runner for a repositoryGets a specific self-hosted runner configured in a repository.
Authenticated users must have admin access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get a self-hosted runner for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (read)Parameters for "Get a self-hosted runner for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "Get a self-hosted runner for a repository"Status codeDescription200OKCode samples for "Get a self-hosted runner for a repository"Request exampleget/repos/{owner}/{repo}/actions/runners/{runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/RUNNER_IDResponseExample responseResponse schemaStatus: 200{
  "id": 23,
  "name": "MBP",
  "os": "macos",
  "status": "online",
  "busy": true,
  "ephemeral": false,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}Delete a self-hosted runner from a repositoryForces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
Authenticated users must have admin access to the repository to use this endpoint.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete a self-hosted runner from a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Delete a self-hosted runner from a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "Delete a self-hosted runner from a repository"Status codeDescription204No ContentCode samples for "Delete a self-hosted runner from a repository"Request exampledelete/repos/{owner}/{repo}/actions/runners/{runner_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/RUNNER_IDResponseStatus: 204List labels for a self-hosted runner for a repositoryLists all labels for a self-hosted runner configured in a repository.
Authenticated users must have admin access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List labels for a self-hosted runner for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (read)Parameters for "List labels for a self-hosted runner for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "List labels for a self-hosted runner for a repository"Status codeDescription200OK404Resource not foundCode samples for "List labels for a self-hosted runner for a repository"Request exampleget/repos/{owner}/{repo}/actions/runners/{runner_id}/labelscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/RUNNER_ID/labelsResponseExample responseResponse schemaStatus: 200{
  "total_count": 4,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}Add custom labels to a self-hosted runner for a repositoryAdds custom labels to a self-hosted runner configured in a repository.
Authenticated users must have admin access to the organization to use this endpoint.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Add custom labels to a self-hosted runner for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Add custom labels to a self-hosted runner for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.Body parametersName, Type, Descriptionlabels array of strings RequiredThe names of the custom labels to add to the runner.HTTP response status codes for "Add custom labels to a self-hosted runner for a repository"Status codeDescription200OK404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Add custom labels to a self-hosted runner for a repository"Request examplepost/repos/{owner}/{repo}/actions/runners/{runner_id}/labelscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/RUNNER_ID/labels \
  -d '{"labels":["gpu","accelerated"]}'ResponseExample responseResponse schemaStatus: 200{
  "total_count": 4,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}Set custom labels for a self-hosted runner for a repositoryRemove all previous custom labels and set the new custom labels for a specific
self-hosted runner configured in a repository.
Authenticated users must have admin access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Set custom labels for a self-hosted runner for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Set custom labels for a self-hosted runner for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.Body parametersName, Type, Descriptionlabels array of strings RequiredThe names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.HTTP response status codes for "Set custom labels for a self-hosted runner for a repository"Status codeDescription200OK404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Set custom labels for a self-hosted runner for a repository"Request exampleput/repos/{owner}/{repo}/actions/runners/{runner_id}/labelscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/RUNNER_ID/labels \
  -d '{"labels":["gpu","accelerated"]}'ResponseExample responseResponse schemaStatus: 200{
  "total_count": 4,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}Remove all custom labels from a self-hosted runner for a repositoryRemove all custom labels from a self-hosted runner configured in a
repository. Returns the remaining read-only labels from the runner.
Authenticated users must have admin access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Remove all custom labels from a self-hosted runner for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Remove all custom labels from a self-hosted runner for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.HTTP response status codes for "Remove all custom labels from a self-hosted runner for a repository"Status codeDescription200OK404Resource not foundCode samples for "Remove all custom labels from a self-hosted runner for a repository"Request exampledelete/repos/{owner}/{repo}/actions/runners/{runner_id}/labelscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/RUNNER_ID/labelsResponseExample responseResponse schemaStatus: 200{
  "total_count": 3,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    }
  ]
}Remove a custom label from a self-hosted runner for a repositoryRemove a custom label from a self-hosted runner configured
in a repository. Returns the remaining labels from the runner.
This endpoint returns a 404 Not Found status if the custom label is not
present on the runner.
Authenticated users must have admin access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Remove a custom label from a self-hosted runner for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" repository permissions (write)Parameters for "Remove a custom label from a self-hosted runner for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.runner_id integer RequiredUnique identifier of the self-hosted runner.name string RequiredThe name of a self-hosted runner's custom label.HTTP response status codes for "Remove a custom label from a self-hosted runner for a repository"Status codeDescription200OK404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Remove a custom label from a self-hosted runner for a repository"Request exampledelete/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runners/RUNNER_ID/labels/NAMEResponseExample responseResponse schemaStatus: 200{
  "total_count": 4,
  "labels": [
    {
      "id": 5,
      "name": "self-hosted",
      "type": "read-only"
    },
    {
      "id": 7,
      "name": "X64",
      "type": "read-only"
    },
    {
      "id": 20,
      "name": "macOS",
      "type": "read-only"
    },
    {
      "id": 21,
      "name": "no-gpu",
      "type": "custom"
    }
  ]
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/VariablesREST API endpoints for GitHub Actions variablesUse the REST API to interact with variables in GitHub Actions.About variables in GitHub Actions
You can use the REST API to create, update, delete, and retrieve information about variables that can be used in workflows in GitHub Actions. Variables allow you to store non-sensitive information, such as a username, in your repository, repository environments, or organization. For more information, see Store information in variables in the GitHub Actions documentation.List organization variablesLists all organization variables.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "List organization variables"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (read)Parameters for "List organization variables"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 30). For more information, see "Using pagination in the REST API."Default: 10page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List organization variables"Status codeDescription200OKCode samples for "List organization variables"Request exampleget/orgs/{org}/actions/variablescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variablesResponseExample responseResponse schemaStatus: 200{
  "total_count": 3,
  "variables": [
    {
      "name": "USERNAME",
      "value": "octocat",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z",
      "visibility": "private"
    },
    {
      "name": "ACTIONS_RUNNER_DEBUG",
      "value": true,
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z",
      "visibility": "all"
    },
    {
      "name": "ADMIN_EMAIL",
      "value": "octocat@github.com",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z",
      "visibility": "selected",
      "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/variables/ADMIN_EMAIL/repositories"
    }
  ]
}Create an organization variableCreates an organization variable that you can reference in a GitHub Actions workflow.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create an organization variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (write)Parameters for "Create an organization variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Body parametersName, Type, Descriptionname string RequiredThe name of the variable.value string RequiredThe value of the variable.visibility string RequiredThe type of repositories in the organization that can access the variable. selected means only the repositories specified by selected_repository_ids can access the variable.Can be one of: all, private, selected selected_repository_ids array of integers An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the visibility is set to selected.HTTP response status codes for "Create an organization variable"Status codeDescription201Response when creating a variableCode samples for "Create an organization variable"Request examplepost/orgs/{org}/actions/variablescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variables \
  -d '{"name":"USERNAME","value":"octocat","visibility":"selected","selected_repository_ids":[1296269,1296280]}'Response when creating a variableExample responseResponse schemaStatus: 201Get an organization variableGets a specific variable in an organization.
The authenticated user must have collaborator access to a repository to create, update, or read variables.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get an organization variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (read)Parameters for "Get an organization variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.name string RequiredThe name of the variable.HTTP response status codes for "Get an organization variable"Status codeDescription200OKCode samples for "Get an organization variable"Request exampleget/orgs/{org}/actions/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variables/NAMEResponseExample responseResponse schemaStatus: 200{
  "name": "USERNAME",
  "value": "octocat",
  "created_at": "2019-08-10T14:59:22Z",
  "updated_at": "2020-01-10T14:59:22Z",
  "visibility": "selected",
  "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/variables/USERNAME/repositories"
}Update an organization variableUpdates an organization variable that you can reference in a GitHub Actions workflow.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Update an organization variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (write)Parameters for "Update an organization variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.name string RequiredThe name of the variable.Body parametersName, Type, Descriptionname string The name of the variable.value string The value of the variable.visibility string The type of repositories in the organization that can access the variable. selected means only the repositories specified by selected_repository_ids can access the variable.Can be one of: all, private, selected selected_repository_ids array of integers An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the visibility is set to selected.HTTP response status codes for "Update an organization variable"Status codeDescription204No ContentCode samples for "Update an organization variable"Request examplepatch/orgs/{org}/actions/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PATCH \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variables/NAME \
  -d '{"name":"USERNAME","value":"octocat","visibility":"selected","selected_repository_ids":[1296269,1296280]}'ResponseStatus: 204Delete an organization variableDeletes an organization variable using the variable name.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth tokens and personal access tokens (classic) need theadmin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete an organization variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (write)Parameters for "Delete an organization variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.name string RequiredThe name of the variable.HTTP response status codes for "Delete an organization variable"Status codeDescription204No ContentCode samples for "Delete an organization variable"Request exampledelete/orgs/{org}/actions/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variables/NAMEResponseStatus: 204List selected repositories for an organization variableLists all repositories that can access an organization variable
that is available to selected repositories.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "List selected repositories for an organization variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (read)Parameters for "List selected repositories for an organization variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.name string RequiredThe name of the variable.Query parametersName, Type, Descriptionpage integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30HTTP response status codes for "List selected repositories for an organization variable"Status codeDescription200OK409Response when the visibility of the variable is not set to selectedCode samples for "List selected repositories for an organization variable"Request exampleget/orgs/{org}/actions/variables/{name}/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variables/NAME/repositoriesResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "repositories": [
    {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
    }
  ]
}Set selected repositories for an organization variableReplaces all repositories for an organization variable that is available
to selected repositories. Organization variables that are available to selected
repositories have their visibility field set to selected.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Set selected repositories for an organization variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (write)Parameters for "Set selected repositories for an organization variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.name string RequiredThe name of the variable.Body parametersName, Type, Descriptionselected_repository_ids array of integers RequiredThe IDs of the repositories that can access the organization variable.HTTP response status codes for "Set selected repositories for an organization variable"Status codeDescription204No Content409Response when the visibility of the variable is not set to selectedCode samples for "Set selected repositories for an organization variable"Request exampleput/orgs/{org}/actions/variables/{name}/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variables/NAME/repositories \
  -d '{"selected_repository_ids":[64780797]}'ResponseStatus: 204Add selected repository to an organization variableAdds a repository to an organization variable that is available to selected repositories.
Organization variables that are available to selected repositories have their visibility field set to selected.
Authenticated users must have collaborator access to a repository to create, update, or read secrets.
OAuth tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Add selected repository to an organization variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (write) and "Metadata" repository permissions (read)Parameters for "Add selected repository to an organization variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.name string RequiredThe name of the variable.repository_id integer RequiredHTTP response status codes for "Add selected repository to an organization variable"Status codeDescription204No Content409Response when the visibility of the variable is not set to selectedCode samples for "Add selected repository to an organization variable"Request exampleput/orgs/{org}/actions/variables/{name}/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variables/NAME/repositories/REPOSITORY_IDResponseStatus: 204Remove selected repository from an organization variableRemoves a repository from an organization variable that is
available to selected repositories. Organization variables that are available to
selected repositories have their visibility field set to selected.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the admin:org scope to use this endpoint. If the repository is private, the repo scope is also required.Fine-grained access tokens for "Remove selected repository from an organization variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" organization permissions (write) and "Metadata" repository permissions (read)Parameters for "Remove selected repository from an organization variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.name string RequiredThe name of the variable.repository_id integer RequiredHTTP response status codes for "Remove selected repository from an organization variable"Status codeDescription204No Content409Response when the visibility of the variable is not set to selectedCode samples for "Remove selected repository from an organization variable"Request exampledelete/orgs/{org}/actions/variables/{name}/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/actions/variables/NAME/repositories/REPOSITORY_IDResponseStatus: 204List repository organization variablesLists all organization variables shared with a repository.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List repository organization variables"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" repository permissions (read)Parameters for "List repository organization variables"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 30). For more information, see "Using pagination in the REST API."Default: 10page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repository organization variables"Status codeDescription200OKCode samples for "List repository organization variables"Request exampleget/repos/{owner}/{repo}/actions/organization-variablescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/organization-variablesResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "variables": [
    {
      "name": "USERNAME",
      "value": "octocat",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z"
    },
    {
      "name": "EMAIL",
      "value": "octocat@github.com",
      "created_at": "2020-01-10T10:59:22Z",
      "updated_at": "2020-01-11T11:59:22Z"
    }
  ]
}List repository variablesLists all repository variables.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List repository variables"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" repository permissions (read)Parameters for "List repository variables"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 30). For more information, see "Using pagination in the REST API."Default: 10page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repository variables"Status codeDescription200OKCode samples for "List repository variables"Request exampleget/repos/{owner}/{repo}/actions/variablescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/variablesResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "variables": [
    {
      "name": "USERNAME",
      "value": "octocat",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z"
    },
    {
      "name": "EMAIL",
      "value": "octocat@github.com",
      "created_at": "2020-01-10T10:59:22Z",
      "updated_at": "2020-01-11T11:59:22Z"
    }
  ]
}Create a repository variableCreates a repository variable that you can reference in a GitHub Actions workflow.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create a repository variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" repository permissions (write)Parameters for "Create a repository variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionname string RequiredThe name of the variable.value string RequiredThe value of the variable.HTTP response status codes for "Create a repository variable"Status codeDescription201CreatedCode samples for "Create a repository variable"Request examplepost/repos/{owner}/{repo}/actions/variablescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/variables \
  -d '{"name":"USERNAME","value":"octocat"}'ResponseExample responseResponse schemaStatus: 201Get a repository variableGets a specific variable in a repository.
The authenticated user must have collaborator access to the repository to use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get a repository variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" repository permissions (read)Parameters for "Get a repository variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.name string RequiredThe name of the variable.HTTP response status codes for "Get a repository variable"Status codeDescription200OKCode samples for "Get a repository variable"Request exampleget/repos/{owner}/{repo}/actions/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/variables/NAMEResponseExample responseResponse schemaStatus: 200{
  "name": "USERNAME",
  "value": "octocat",
  "created_at": "2021-08-10T14:59:22Z",
  "updated_at": "2022-01-10T14:59:22Z"
}Update a repository variableUpdates a repository variable that you can reference in a GitHub Actions workflow.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Update a repository variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" repository permissions (write)Parameters for "Update a repository variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.name string RequiredThe name of the variable.Body parametersName, Type, Descriptionname string The name of the variable.value string The value of the variable.HTTP response status codes for "Update a repository variable"Status codeDescription204No ContentCode samples for "Update a repository variable"Request examplepatch/repos/{owner}/{repo}/actions/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PATCH \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/variables/NAME \
  -d '{"name":"USERNAME","value":"octocat"}'ResponseStatus: 204Delete a repository variableDeletes a repository variable using the variable name.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete a repository variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Variables" repository permissions (write)Parameters for "Delete a repository variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.name string RequiredThe name of the variable.HTTP response status codes for "Delete a repository variable"Status codeDescription204No ContentCode samples for "Delete a repository variable"Request exampledelete/repos/{owner}/{repo}/actions/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/variables/NAMEResponseStatus: 204List environment variablesLists all environment variables.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "List environment variables"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (read)Parameters for "List environment variables"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 30). For more information, see "Using pagination in the REST API."Default: 10page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List environment variables"Status codeDescription200OKCode samples for "List environment variables"Request exampleget/repos/{owner}/{repo}/environments/{environment_name}/variablescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/variablesResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "variables": [
    {
      "name": "USERNAME",
      "value": "octocat",
      "created_at": "2019-08-10T14:59:22Z",
      "updated_at": "2020-01-10T14:59:22Z"
    },
    {
      "name": "EMAIL",
      "value": "octocat@github.com",
      "created_at": "2020-01-10T10:59:22Z",
      "updated_at": "2020-01-11T11:59:22Z"
    }
  ]
}Create an environment variableCreate an environment variable that you can reference in a GitHub Actions workflow.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create an environment variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (write)Parameters for "Create an environment variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.Body parametersName, Type, Descriptionname string RequiredThe name of the variable.value string RequiredThe value of the variable.HTTP response status codes for "Create an environment variable"Status codeDescription201CreatedCode samples for "Create an environment variable"Request examplepost/repos/{owner}/{repo}/environments/{environment_name}/variablescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/variables \
  -d '{"name":"USERNAME","value":"octocat"}'ResponseExample responseResponse schemaStatus: 201Get an environment variableGets a specific variable in an environment.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get an environment variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (read)Parameters for "Get an environment variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.name string RequiredThe name of the variable.HTTP response status codes for "Get an environment variable"Status codeDescription200OKCode samples for "Get an environment variable"Request exampleget/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/variables/NAMEResponseExample responseResponse schemaStatus: 200{
  "name": "USERNAME",
  "value": "octocat",
  "created_at": "2021-08-10T14:59:22Z",
  "updated_at": "2022-01-10T14:59:22Z"
}Update an environment variableUpdates an environment variable that you can reference in a GitHub Actions workflow.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Update an environment variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (write)Parameters for "Update an environment variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.name string RequiredThe name of the variable.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.Body parametersName, Type, Descriptionname string The name of the variable.value string The value of the variable.HTTP response status codes for "Update an environment variable"Status codeDescription204No ContentCode samples for "Update an environment variable"Request examplepatch/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PATCH \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/variables/NAME \
  -d '{"name":"USERNAME","value":"octocat"}'ResponseStatus: 204Delete an environment variableDeletes an environment variable using the variable name.
Authenticated users must have collaborator access to a repository to create, update, or read variables.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete an environment variable"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Environments" repository permissions (write)Parameters for "Delete an environment variable"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.name string RequiredThe name of the variable.environment_name string RequiredThe name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with %2F.HTTP response status codes for "Delete an environment variable"Status codeDescription204No ContentCode samples for "Delete an environment variable"Request exampledelete/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/environments/ENVIRONMENT_NAME/variables/NAMEResponseStatus: 204\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/Workflow jobsREST API endpoints for workflow jobsUse the REST API to interact with workflow jobs in GitHub Actions.About workflow jobs in GitHub Actions
You can use the REST API to view logs and workflow jobs in GitHub Actions. A workflow job is a set of steps that execute on the same runner. For more information, see Workflow syntax for GitHub Actions.Get a job for a workflow runGets a specific job in a workflow run.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get a job for a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get a job for a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.job_id integer RequiredThe unique identifier of the job.HTTP response status codes for "Get a job for a workflow run"Status codeDescription200OKCode samples for "Get a job for a workflow run"Request exampleget/repos/{owner}/{repo}/actions/jobs/{job_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/jobs/JOB_IDResponseExample responseResponse schemaStatus: 200{
  "id": 399444496,
  "run_id": 29679449,
  "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
  "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
  "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
  "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
  "html_url": "https://github.com/octo-org/octo-repo/runs/29679449/jobs/399444496",
  "status": "completed",
  "conclusion": "success",
  "started_at": "2020-01-20T17:42:40Z",
  "completed_at": "2020-01-20T17:44:39Z",
  "name": "build",
  "steps": [
    {
      "name": "Set up job",
      "status": "completed",
      "conclusion": "success",
      "number": 1,
      "started_at": "2020-01-20T09:42:40.000-08:00",
      "completed_at": "2020-01-20T09:42:41.000-08:00"
    },
    {
      "name": "Run actions/checkout@v2",
      "status": "completed",
      "conclusion": "success",
      "number": 2,
      "started_at": "2020-01-20T09:42:41.000-08:00",
      "completed_at": "2020-01-20T09:42:45.000-08:00"
    },
    {
      "name": "Set up Ruby",
      "status": "completed",
      "conclusion": "success",
      "number": 3,
      "started_at": "2020-01-20T09:42:45.000-08:00",
      "completed_at": "2020-01-20T09:42:45.000-08:00"
    },
    {
      "name": "Run actions/cache@v3",
      "status": "completed",
      "conclusion": "success",
      "number": 4,
      "started_at": "2020-01-20T09:42:45.000-08:00",
      "completed_at": "2020-01-20T09:42:48.000-08:00"
    },
    {
      "name": "Install Bundler",
      "status": "completed",
      "conclusion": "success",
      "number": 5,
      "started_at": "2020-01-20T09:42:48.000-08:00",
      "completed_at": "2020-01-20T09:42:52.000-08:00"
    },
    {
      "name": "Install Gems",
      "status": "completed",
      "conclusion": "success",
      "number": 6,
      "started_at": "2020-01-20T09:42:52.000-08:00",
      "completed_at": "2020-01-20T09:42:53.000-08:00"
    },
    {
      "name": "Run Tests",
      "status": "completed",
      "conclusion": "success",
      "number": 7,
      "started_at": "2020-01-20T09:42:53.000-08:00",
      "completed_at": "2020-01-20T09:42:59.000-08:00"
    },
    {
      "name": "Deploy to Heroku",
      "status": "completed",
      "conclusion": "success",
      "number": 8,
      "started_at": "2020-01-20T09:42:59.000-08:00",
      "completed_at": "2020-01-20T09:44:39.000-08:00"
    },
    {
      "name": "Post actions/cache@v3",
      "status": "completed",
      "conclusion": "success",
      "number": 16,
      "started_at": "2020-01-20T09:44:39.000-08:00",
      "completed_at": "2020-01-20T09:44:39.000-08:00"
    },
    {
      "name": "Complete job",
      "status": "completed",
      "conclusion": "success",
      "number": 17,
      "started_at": "2020-01-20T09:44:39.000-08:00",
      "completed_at": "2020-01-20T09:44:39.000-08:00"
    }
  ],
  "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496",
  "labels": [
    "self-hosted",
    "foo",
    "bar"
  ],
  "runner_id": 1,
  "runner_name": "my runner",
  "runner_group_id": 2,
  "runner_group_name": "my runner group",
  "workflow_name": "CI",
  "head_branch": "main"
}Download job logs for a workflow runGets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
for Location: in the response header to find the URL for the download.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Download job logs for a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Download job logs for a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.job_id integer RequiredThe unique identifier of the job.HTTP response status codes for "Download job logs for a workflow run"Status codeDescription302FoundCode samples for "Download job logs for a workflow run"Request exampleget/repos/{owner}/{repo}/actions/jobs/{job_id}/logscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/jobs/JOB_ID/logsResponseStatus: 302List jobs for a workflow run attemptLists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more information
about using parameters, see Parameters.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint  with a private repository.Fine-grained access tokens for "List jobs for a workflow run attempt"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List jobs for a workflow run attempt"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.attempt_number integer RequiredThe attempt number of the workflow run.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List jobs for a workflow run attempt"Status codeDescription200OK404Resource not foundCode samples for "List jobs for a workflow run attempt"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/attempts/ATTEMPT_NUMBER/jobsResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "jobs": [
    {
      "id": 399444496,
      "run_id": 29679449,
      "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
      "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
      "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
      "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
      "html_url": "https://github.com/octo-org/octo-repo/runs/29679449/jobs/399444496",
      "status": "completed",
      "conclusion": "success",
      "started_at": "2020-01-20T17:42:40Z",
      "completed_at": "2020-01-20T17:44:39Z",
      "name": "build",
      "steps": [
        {
          "name": "Set up job",
          "status": "completed",
          "conclusion": "success",
          "number": 1,
          "started_at": "2020-01-20T09:42:40.000-08:00",
          "completed_at": "2020-01-20T09:42:41.000-08:00"
        },
        {
          "name": "Run actions/checkout@v2",
          "status": "completed",
          "conclusion": "success",
          "number": 2,
          "started_at": "2020-01-20T09:42:41.000-08:00",
          "completed_at": "2020-01-20T09:42:45.000-08:00"
        },
        {
          "name": "Set up Ruby",
          "status": "completed",
          "conclusion": "success",
          "number": 3,
          "started_at": "2020-01-20T09:42:45.000-08:00",
          "completed_at": "2020-01-20T09:42:45.000-08:00"
        },
        {
          "name": "Run actions/cache@v3",
          "status": "completed",
          "conclusion": "success",
          "number": 4,
          "started_at": "2020-01-20T09:42:45.000-08:00",
          "completed_at": "2020-01-20T09:42:48.000-08:00"
        },
        {
          "name": "Install Bundler",
          "status": "completed",
          "conclusion": "success",
          "number": 5,
          "started_at": "2020-01-20T09:42:48.000-08:00",
          "completed_at": "2020-01-20T09:42:52.000-08:00"
        },
        {
          "name": "Install Gems",
          "status": "completed",
          "conclusion": "success",
          "number": 6,
          "started_at": "2020-01-20T09:42:52.000-08:00",
          "completed_at": "2020-01-20T09:42:53.000-08:00"
        },
        {
          "name": "Run Tests",
          "status": "completed",
          "conclusion": "success",
          "number": 7,
          "started_at": "2020-01-20T09:42:53.000-08:00",
          "completed_at": "2020-01-20T09:42:59.000-08:00"
        },
        {
          "name": "Deploy to Heroku",
          "status": "completed",
          "conclusion": "success",
          "number": 8,
          "started_at": "2020-01-20T09:42:59.000-08:00",
          "completed_at": "2020-01-20T09:44:39.000-08:00"
        },
        {
          "name": "Post actions/cache@v3",
          "status": "completed",
          "conclusion": "success",
          "number": 16,
          "started_at": "2020-01-20T09:44:39.000-08:00",
          "completed_at": "2020-01-20T09:44:39.000-08:00"
        },
        {
          "name": "Complete job",
          "status": "completed",
          "conclusion": "success",
          "number": 17,
          "started_at": "2020-01-20T09:44:39.000-08:00",
          "completed_at": "2020-01-20T09:44:39.000-08:00"
        }
      ],
      "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496",
      "labels": [
        "self-hosted",
        "foo",
        "bar"
      ],
      "runner_id": 1,
      "runner_name": "my runner",
      "runner_group_id": 2,
      "runner_group_name": "my runner group",
      "workflow_name": "CI",
      "head_branch": "main"
    }
  ]
}List jobs for a workflow runLists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
about using parameters, see Parameters.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "List jobs for a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List jobs for a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.Query parametersName, Type, Descriptionfilter string Filters jobs by their completed_at timestamp. latest returns jobs from the most recent execution of the workflow run. all returns all jobs for a workflow run, including from old executions of the workflow run.Default: latestCan be one of: latest, all per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List jobs for a workflow run"Status codeDescription200OKCode samples for "List jobs for a workflow run"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/jobscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/jobsResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "jobs": [
    {
      "id": 399444496,
      "run_id": 29679449,
      "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
      "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
      "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
      "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
      "html_url": "https://github.com/octo-org/octo-repo/runs/29679449/jobs/399444496",
      "status": "completed",
      "conclusion": "success",
      "started_at": "2020-01-20T17:42:40Z",
      "completed_at": "2020-01-20T17:44:39Z",
      "name": "build",
      "steps": [
        {
          "name": "Set up job",
          "status": "completed",
          "conclusion": "success",
          "number": 1,
          "started_at": "2020-01-20T09:42:40.000-08:00",
          "completed_at": "2020-01-20T09:42:41.000-08:00"
        },
        {
          "name": "Run actions/checkout@v2",
          "status": "completed",
          "conclusion": "success",
          "number": 2,
          "started_at": "2020-01-20T09:42:41.000-08:00",
          "completed_at": "2020-01-20T09:42:45.000-08:00"
        },
        {
          "name": "Set up Ruby",
          "status": "completed",
          "conclusion": "success",
          "number": 3,
          "started_at": "2020-01-20T09:42:45.000-08:00",
          "completed_at": "2020-01-20T09:42:45.000-08:00"
        },
        {
          "name": "Run actions/cache@v3",
          "status": "completed",
          "conclusion": "success",
          "number": 4,
          "started_at": "2020-01-20T09:42:45.000-08:00",
          "completed_at": "2020-01-20T09:42:48.000-08:00"
        },
        {
          "name": "Install Bundler",
          "status": "completed",
          "conclusion": "success",
          "number": 5,
          "started_at": "2020-01-20T09:42:48.000-08:00",
          "completed_at": "2020-01-20T09:42:52.000-08:00"
        },
        {
          "name": "Install Gems",
          "status": "completed",
          "conclusion": "success",
          "number": 6,
          "started_at": "2020-01-20T09:42:52.000-08:00",
          "completed_at": "2020-01-20T09:42:53.000-08:00"
        },
        {
          "name": "Run Tests",
          "status": "completed",
          "conclusion": "success",
          "number": 7,
          "started_at": "2020-01-20T09:42:53.000-08:00",
          "completed_at": "2020-01-20T09:42:59.000-08:00"
        },
        {
          "name": "Deploy to Heroku",
          "status": "completed",
          "conclusion": "success",
          "number": 8,
          "started_at": "2020-01-20T09:42:59.000-08:00",
          "completed_at": "2020-01-20T09:44:39.000-08:00"
        },
        {
          "name": "Post actions/cache@v3",
          "status": "completed",
          "conclusion": "success",
          "number": 16,
          "started_at": "2020-01-20T09:44:39.000-08:00",
          "completed_at": "2020-01-20T09:44:39.000-08:00"
        },
        {
          "name": "Complete job",
          "status": "completed",
          "conclusion": "success",
          "number": 17,
          "started_at": "2020-01-20T09:44:39.000-08:00",
          "completed_at": "2020-01-20T09:44:39.000-08:00"
        }
      ],
      "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496",
      "labels": [
        "self-hosted",
        "foo",
        "bar"
      ],
      "runner_id": 1,
      "runner_name": "my runner",
      "runner_group_id": 2,
      "runner_group_name": "my runner group",
      "workflow_name": "CI",
      "head_branch": "main"
    }
  ]
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/Workflow runsREST API endpoints for workflow runsUse the REST API to interact with workflow runs in GitHub Actions.About workflow runs in GitHub Actions
You can use the REST API to view, re-run, cancel, and view logs for workflow runs in GitHub Actions. A workflow run is an instance of your workflow that runs when the pre-configured event occurs. For more information, see Managing workflow runs and deployments.Re-run a job from a workflow runRe-run a job and its dependent jobs in a workflow run.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Re-run a job from a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Re-run a job from a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.job_id integer RequiredThe unique identifier of the job.Body parametersName, Type, Descriptionenable_debug_logging boolean Whether to enable debug logging for the re-run.Default: falseHTTP response status codes for "Re-run a job from a workflow run"Status codeDescription201Created403ForbiddenCode samples for "Re-run a job from a workflow run"Request examplepost/repos/{owner}/{repo}/actions/jobs/{job_id}/reruncURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/jobs/JOB_ID/rerunResponseExample responseResponse schemaStatus: 201List workflow runs for a repositoryLists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see Parameters.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.
This endpoint will return up to 1,000 results for each search when using the following parameters: actor, branch, check_suite_id, created, event, head_sha, status.Fine-grained access tokens for "List workflow runs for a repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List workflow runs for a repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionactor string Returns someone's workflow runs. Use the login for the user who created the push associated with the check suite or workflow run.branch string Returns workflow runs associated with a branch. Use the name of the branch of the push.event string Returns workflow run triggered by the event you specify. For example, push, pull_request or issue. For more information, see "Events that trigger workflows."status string Returns workflow runs with the check run status or conclusion that you specify. For example, a conclusion can be success or a status can be in_progress. Only GitHub Actions can set a status of waiting, pending, or requested.Can be one of: completed, action_required, cancelled, failure, neutral, skipped, stale, success, timed_out, in_progress, queued, requested, waiting, pending per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1created string Returns workflow runs created within the given date-time range. For more information on the syntax, see "Understanding the search syntax."exclude_pull_requests boolean If true pull requests are omitted from the response (empty array).Default: falsecheck_suite_id integer Returns workflow runs with the check_suite_id that you specify.head_sha string Only returns workflow runs that are associated with the specified head_sha.HTTP response status codes for "List workflow runs for a repository"Status codeDescription200OKCode samples for "List workflow runs for a repository"Request exampleget/repos/{owner}/{repo}/actions/runscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runsResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "workflow_runs": [
    {
      "id": 30433642,
      "name": "Build",
      "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
      "check_suite_id": 42,
      "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
      "head_branch": "master",
      "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
      "path": ".github/workflows/build.yml@main",
      "run_number": 562,
      "event": "push",
      "display_title": "Update README.md",
      "status": "queued",
      "conclusion": null,
      "workflow_id": 159038,
      "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
      "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
      "pull_requests": [],
      "created_at": "2020-01-22T19:33:08Z",
      "updated_at": "2020-01-22T19:33:08Z",
      "actor": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "run_attempt": 1,
      "run_started_at": "2020-01-22T19:33:08Z",
      "triggering_actor": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
      "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
      "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
      "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
      "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
      "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
      "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
      "head_commit": {
        "id": "acb5820ced9479c074f688cc328bf03f341a511d",
        "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
        "message": "Create linter.yaml",
        "timestamp": "2020-01-22T19:33:05Z",
        "author": {
          "name": "Octo Cat",
          "email": "octocat@github.com"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com"
        }
      },
      "repository": {
        "id": 1296269,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
        "name": "Hello-World",
        "full_name": "octocat/Hello-World",
        "owner": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/octocat/Hello-World",
        "description": "This your first repo!",
        "fork": false,
        "url": "https://api.github.com/repos/octocat/Hello-World",
        "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
        "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
        "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
        "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
        "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
        "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
        "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
        "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
        "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
        "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
        "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
        "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
        "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
        "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
        "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
        "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
        "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
        "git_url": "git:github.com/octocat/Hello-World.git",
        "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
        "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
        "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
        "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
        "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
        "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
        "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
        "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
        "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
        "ssh_url": "git@github.com:octocat/Hello-World.git",
        "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
        "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
        "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
        "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
        "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
        "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
        "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
        "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
      },
      "head_repository": {
        "id": 217723378,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
        "name": "octo-repo",
        "full_name": "octo-org/octo-repo",
        "private": true,
        "owner": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false
        },
        "html_url": "https://github.com/octo-org/octo-repo",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/octo-org/octo-repo",
        "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
        "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
        "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
        "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
        "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
        "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
        "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
        "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
        "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
        "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
        "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
        "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
        "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
        "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
        "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
        "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
        "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
        "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
        "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
        "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
      }
    }
  ]
}Get a workflow runGets a specific workflow run.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "Get a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.Query parametersName, Type, Descriptionexclude_pull_requests boolean If true pull requests are omitted from the response (empty array).Default: falseHTTP response status codes for "Get a workflow run"Status codeDescription200OKCode samples for "Get a workflow run"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_IDResponseExample responseResponse schemaStatus: 200{
  "id": 30433642,
  "name": "Build",
  "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
  "check_suite_id": 42,
  "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
  "head_branch": "main",
  "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
  "path": ".github/workflows/build.yml@main",
  "run_number": 562,
  "event": "push",
  "display_title": "Update README.md",
  "status": "queued",
  "conclusion": null,
  "workflow_id": 159038,
  "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
  "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
  "pull_requests": [],
  "created_at": "2020-01-22T19:33:08Z",
  "updated_at": "2020-01-22T19:33:08Z",
  "actor": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "run_attempt": 1,
  "referenced_workflows": [
    {
      "path": "octocat/Hello-World/.github/workflows/deploy.yml@main",
      "sha": "86e8bc9ecf7d38b1ed2d2cfb8eb87ba9b35b01db",
      "ref": "refs/heads/main"
    },
    {
      "path": "octo-org/octo-repo/.github/workflows/report.yml@v2",
      "sha": "79e9790903e1c3373b1a3e3a941d57405478a232",
      "ref": "refs/tags/v2"
    },
    {
      "path": "octo-org/octo-repo/.github/workflows/secure.yml@1595d4b6de6a9e9751fb270a41019ce507d4099e",
      "sha": "1595d4b6de6a9e9751fb270a41019ce507d4099e"
    }
  ],
  "run_started_at": "2020-01-22T19:33:08Z",
  "triggering_actor": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
  "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
  "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
  "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
  "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
  "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
  "previous_attempt_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/attempts/1",
  "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
  "head_commit": {
    "id": "acb5820ced9479c074f688cc328bf03f341a511d",
    "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
    "message": "Create linter.yaml",
    "timestamp": "2020-01-22T19:33:05Z",
    "author": {
      "name": "Octo Cat",
      "email": "octocat@github.com"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com"
    }
  },
  "repository": {
    "id": 1296269,
    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
    "name": "Hello-World",
    "full_name": "octocat/Hello-World",
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "private": false,
    "html_url": "https://github.com/octocat/Hello-World",
    "description": "This your first repo!",
    "fork": false,
    "url": "https://api.github.com/repos/octocat/Hello-World",
    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
    "git_url": "git:github.com/octocat/Hello-World.git",
    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
    "ssh_url": "git@github.com:octocat/Hello-World.git",
    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
    "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
  },
  "head_repository": {
    "id": 217723378,
    "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
    "name": "octo-repo",
    "full_name": "octo-org/octo-repo",
    "private": true,
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "html_url": "https://github.com/octo-org/octo-repo",
    "description": null,
    "fork": false,
    "url": "https://api.github.com/repos/octo-org/octo-repo",
    "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
    "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
    "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
    "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
    "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
    "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
    "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
    "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
    "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
    "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
    "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
    "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
    "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
    "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
    "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
    "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
    "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
    "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
    "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
    "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
    "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
    "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
    "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
    "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
    "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
    "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
    "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
    "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
    "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
    "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
    "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
    "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
    "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
    "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
  }
}Delete a workflow runDeletes a specific workflow run.
Anyone with write access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Delete a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Delete a workflow run"Status codeDescription204No ContentCode samples for "Delete a workflow run"Request exampledelete/repos/{owner}/{repo}/actions/runs/{run_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_IDResponseStatus: 204Get the review history for a workflow runAnyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "Get the review history for a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get the review history for a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Get the review history for a workflow run"Status codeDescription200OKCode samples for "Get the review history for a workflow run"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/approvalscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/approvalsResponseExample responseResponse schemaStatus: 200[
  {
    "state": "approved",
    "comment": "Ship it!",
    "environments": [
      {
        "id": 161088068,
        "node_id": "MDExOkVudmlyb25tZW50MTYxMDg4MDY4",
        "name": "staging",
        "url": "https://api.github.com/repos/github/hello-world/environments/staging",
        "html_url": "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging",
        "created_at": "2020-11-23T22:00:40Z",
        "updated_at": "2020-11-23T22:00:40Z"
      }
    ],
    "user": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    }
  }
]Approve a workflow run for a fork pull requestApproves a workflow run for a pull request from a public fork of a first time contributor. For more information, see "Approving workflow runs from public forks."
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Approve a workflow run for a fork pull request"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Approve a workflow run for a fork pull request"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Approve a workflow run for a fork pull request"Status codeDescription201Created403Forbidden404Resource not foundCode samples for "Approve a workflow run for a fork pull request"Request examplepost/repos/{owner}/{repo}/actions/runs/{run_id}/approvecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/approveResponseExample responseResponse schemaStatus: 201Get a workflow run attemptGets a specific workflow run attempt.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "Get a workflow run attempt"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get a workflow run attempt"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.attempt_number integer RequiredThe attempt number of the workflow run.Query parametersName, Type, Descriptionexclude_pull_requests boolean If true pull requests are omitted from the response (empty array).Default: falseHTTP response status codes for "Get a workflow run attempt"Status codeDescription200OKCode samples for "Get a workflow run attempt"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/attempts/ATTEMPT_NUMBERResponseExample responseResponse schemaStatus: 200{
  "id": 30433642,
  "name": "Build",
  "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
  "check_suite_id": 42,
  "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
  "head_branch": "main",
  "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
  "path": ".github/workflows/build.yml@main",
  "run_number": 562,
  "event": "push",
  "display_title": "Update README.md",
  "status": "queued",
  "conclusion": null,
  "workflow_id": 159038,
  "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
  "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
  "pull_requests": [],
  "created_at": "2020-01-22T19:33:08Z",
  "updated_at": "2020-01-22T19:33:08Z",
  "actor": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "run_attempt": 1,
  "referenced_workflows": [
    {
      "path": "octocat/Hello-World/.github/workflows/deploy.yml@main",
      "sha": "86e8bc9ecf7d38b1ed2d2cfb8eb87ba9b35b01db",
      "ref": "refs/heads/main"
    },
    {
      "path": "octo-org/octo-repo/.github/workflows/report.yml@v2",
      "sha": "79e9790903e1c3373b1a3e3a941d57405478a232",
      "ref": "refs/tags/v2"
    },
    {
      "path": "octo-org/octo-repo/.github/workflows/secure.yml@1595d4b6de6a9e9751fb270a41019ce507d4099e",
      "sha": "1595d4b6de6a9e9751fb270a41019ce507d4099e"
    }
  ],
  "run_started_at": "2020-01-22T19:33:08Z",
  "triggering_actor": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
  "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
  "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
  "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
  "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
  "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
  "previous_attempt_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/attempts/1",
  "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
  "head_commit": {
    "id": "acb5820ced9479c074f688cc328bf03f341a511d",
    "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
    "message": "Create linter.yaml",
    "timestamp": "2020-01-22T19:33:05Z",
    "author": {
      "name": "Octo Cat",
      "email": "octocat@github.com"
    },
    "committer": {
      "name": "GitHub",
      "email": "noreply@github.com"
    }
  },
  "repository": {
    "id": 1296269,
    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
    "name": "Hello-World",
    "full_name": "octocat/Hello-World",
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "private": false,
    "html_url": "https://github.com/octocat/Hello-World",
    "description": "This your first repo!",
    "fork": false,
    "url": "https://api.github.com/repos/octocat/Hello-World",
    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
    "git_url": "git:github.com/octocat/Hello-World.git",
    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
    "ssh_url": "git@github.com:octocat/Hello-World.git",
    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
    "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
  },
  "head_repository": {
    "id": 217723378,
    "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
    "name": "octo-repo",
    "full_name": "octo-org/octo-repo",
    "private": true,
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "html_url": "https://github.com/octo-org/octo-repo",
    "description": null,
    "fork": false,
    "url": "https://api.github.com/repos/octo-org/octo-repo",
    "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
    "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
    "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
    "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
    "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
    "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
    "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
    "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
    "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
    "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
    "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
    "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
    "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
    "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
    "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
    "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
    "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
    "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
    "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
    "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
    "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
    "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
    "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
    "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
    "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
    "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
    "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
    "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
    "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
    "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
    "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
    "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
    "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
    "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
  }
}Download workflow run attempt logsGets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
1 minute. Look for Location: in the response header to find the URL for the download.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Download workflow run attempt logs"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Download workflow run attempt logs"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.attempt_number integer RequiredThe attempt number of the workflow run.HTTP response status codes for "Download workflow run attempt logs"Status codeDescription302FoundCode samples for "Download workflow run attempt logs"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/attempts/ATTEMPT_NUMBER/logsResponseStatus: 302Cancel a workflow runCancels a workflow run using its id.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Cancel a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Cancel a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Cancel a workflow run"Status codeDescription202Accepted409ConflictCode samples for "Cancel a workflow run"Request examplepost/repos/{owner}/{repo}/actions/runs/{run_id}/cancelcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/cancelResponseExample responseResponse schemaStatus: 202Review custom deployment protection rules for a workflow runApprove or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information, see "Using environments for deployment."
Note

GitHub Apps can only review their own custom deployment protection rules. To approve or reject pending deployments that are waiting for review from a specific person or team, see POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments.

OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "Review custom deployment protection rules for a workflow run"This endpoint works with the following fine-grained token types:GitHub App installation access tokensThe fine-grained token must have the following permission set:"Deployments" repository permissions (write)Parameters for "Review custom deployment protection rules for a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Review custom deployment protection rules for a workflow run"Status codeDescription204No ContentCode samples for "Review custom deployment protection rules for a workflow run"Request examplepost/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rulecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/deployment_protection_rule \
  -d '{"environment_name":"prod-eus","state":"approved","comment":"All health checks passed."}'ResponseStatus: 204Force cancel a workflow runCancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an always() condition on a job.
You should only use this endpoint to cancel a workflow run when the workflow run is not responding to POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Force cancel a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Force cancel a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Force cancel a workflow run"Status codeDescription202Accepted409ConflictCode samples for "Force cancel a workflow run"Request examplepost/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancelcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/force-cancelResponseExample responseResponse schemaStatus: 202Download workflow run logsGets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
Location: in the response header to find the URL for the download.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Download workflow run logs"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Download workflow run logs"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Download workflow run logs"Status codeDescription302FoundCode samples for "Download workflow run logs"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/logscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/logsResponseStatus: 302Delete workflow run logsDeletes all logs for a workflow run.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Delete workflow run logs"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Delete workflow run logs"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Delete workflow run logs"Status codeDescription204No Content403Forbidden500Internal ErrorCode samples for "Delete workflow run logs"Request exampledelete/repos/{owner}/{repo}/actions/runs/{run_id}/logscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/logsResponseStatus: 204Get pending deployments for a workflow runGet all deployment environments for a workflow run that are waiting for protection rules to pass.
Anyone with read access to the repository can use this endpoint.
If the repository is private, OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Get pending deployments for a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get pending deployments for a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Get pending deployments for a workflow run"Status codeDescription200OKCode samples for "Get pending deployments for a workflow run"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/pending_deploymentsResponseExample responseResponse schemaStatus: 200[
  {
    "environment": {
      "id": 161088068,
      "node_id": "MDExOkVudmlyb25tZW50MTYxMDg4MDY4",
      "name": "staging",
      "url": "https://api.github.com/repos/github/hello-world/environments/staging",
      "html_url": "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
    },
    "wait_timer": 30,
    "wait_timer_started_at": "2020-11-23T22:00:40Z",
    "current_user_can_approve": true,
    "reviewers": [
      {
        "type": "User",
        "reviewer": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false
        }
      },
      {
        "type": "Team",
        "reviewer": {
          "id": 1,
          "node_id": "MDQ6VGVhbTE=",
          "url": "https://api.github.com/teams/1",
          "html_url": "https://github.com/orgs/github/teams/justice-league",
          "name": "Justice League",
          "slug": "justice-league",
          "description": "A great team.",
          "privacy": "closed",
          "notification_setting": "notifications_enabled",
          "permission": "admin",
          "members_url": "https://api.github.com/teams/1/members{/member}",
          "repositories_url": "https://api.github.com/teams/1/repos",
          "parent": null
        }
      }
    ]
  }
]Review pending deployments for a workflow runApprove or reject pending deployments that are waiting on approval by a required reviewer.
Required reviewers with read access to the repository contents and deployments can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Review pending deployments for a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Deployments" repository permissions (write)Parameters for "Review pending deployments for a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.Body parametersName, Type, Descriptionenvironment_ids array of integers RequiredThe list of environment ids to approve or rejectstate string RequiredWhether to approve or reject deployment to the specified environments.Can be one of: approved, rejected comment string RequiredA comment to accompany the deployment reviewHTTP response status codes for "Review pending deployments for a workflow run"Status codeDescription200OKCode samples for "Review pending deployments for a workflow run"Request examplepost/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deploymentscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/pending_deployments \
  -d '{"environment_ids":[161171787],"state":"approved","comment":"Ship it!"}'ResponseExample responseResponse schemaStatus: 200[
  {
    "url": "https://api.github.com/repos/octocat/example/deployments/1",
    "id": 1,
    "node_id": "MDEwOkRlcGxveW1lbnQx",
    "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
    "ref": "topic-branch",
    "task": "deploy",
    "payload": {},
    "original_environment": "staging",
    "environment": "production",
    "description": "Deploy request from hubot",
    "creator": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2012-07-20T01:19:13Z",
    "updated_at": "2012-07-20T01:19:13Z",
    "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
    "repository_url": "https://api.github.com/repos/octocat/example",
    "transient_environment": false,
    "production_environment": true
  }
]Re-run a workflowRe-runs your workflow run using its id.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Re-run a workflow"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Re-run a workflow"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.Body parametersName, Type, Descriptionenable_debug_logging boolean Whether to enable debug logging for the re-run.Default: falseHTTP response status codes for "Re-run a workflow"Status codeDescription201CreatedCode samples for "Re-run a workflow"Request examplepost/repos/{owner}/{repo}/actions/runs/{run_id}/reruncURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/rerunResponseExample responseResponse schemaStatus: 201Re-run failed jobs from a workflow runRe-run all of the failed jobs and their dependent jobs in a workflow run using the id of the workflow run.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Re-run failed jobs from a workflow run"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Re-run failed jobs from a workflow run"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.Body parametersName, Type, Descriptionenable_debug_logging boolean Whether to enable debug logging for the re-run.Default: falseHTTP response status codes for "Re-run failed jobs from a workflow run"Status codeDescription201CreatedCode samples for "Re-run failed jobs from a workflow run"Request examplepost/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/rerun-failed-jobsResponseExample responseResponse schemaStatus: 201Get workflow run usageWarning

This endpoint is in the process of closing down. Refer to "Actions Get workflow usage and Get workflow run usage endpoints closing down" for more information.

Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "Managing billing for GitHub Actions".
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "Get workflow run usage"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get workflow run usage"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.run_id integer RequiredThe unique identifier of the workflow run.HTTP response status codes for "Get workflow run usage"Status codeDescription200OKCode samples for "Get workflow run usage"Request exampleget/repos/{owner}/{repo}/actions/runs/{run_id}/timingcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/runs/RUN_ID/timingResponseExample responseResponse schemaStatus: 200{
  "billable": {
    "UBUNTU": {
      "total_ms": 180000,
      "jobs": 1,
      "job_runs": [
        {
          "job_id": 1,
          "duration_ms": 180000
        }
      ]
    },
    "MACOS": {
      "total_ms": 240000,
      "jobs": 4,
      "job_runs": [
        {
          "job_id": 2,
          "duration_ms": 60000
        },
        {
          "job_id": 3,
          "duration_ms": 60000
        },
        {
          "job_id": 4,
          "duration_ms": 60000
        },
        {
          "job_id": 5,
          "duration_ms": 60000
        }
      ]
    },
    "WINDOWS": {
      "total_ms": 300000,
      "jobs": 2,
      "job_runs": [
        {
          "job_id": 6,
          "duration_ms": 150000
        },
        {
          "job_id": 7,
          "duration_ms": 150000
        }
      ]
    }
  },
  "run_duration_ms": 500000
}List workflow runs for a workflowList all workflow runs for a workflow. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. You can use parameters to narrow the list of results. For more information about using parameters, see Parameters.
Anyone with read access to the repository can use this endpoint
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.
This endpoint will return up to 1,000 results for each search when using the following parameters: actor, branch, check_suite_id, created, event, head_sha, status.Fine-grained access tokens for "List workflow runs for a workflow"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List workflow runs for a workflow"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.workflow_id  RequiredThe ID of the workflow. You can also pass the workflow file name as a string.Query parametersName, Type, Descriptionactor string Returns someone's workflow runs. Use the login for the user who created the push associated with the check suite or workflow run.branch string Returns workflow runs associated with a branch. Use the name of the branch of the push.event string Returns workflow run triggered by the event you specify. For example, push, pull_request or issue. For more information, see "Events that trigger workflows."status string Returns workflow runs with the check run status or conclusion that you specify. For example, a conclusion can be success or a status can be in_progress. Only GitHub Actions can set a status of waiting, pending, or requested.Can be one of: completed, action_required, cancelled, failure, neutral, skipped, stale, success, timed_out, in_progress, queued, requested, waiting, pending per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1created string Returns workflow runs created within the given date-time range. For more information on the syntax, see "Understanding the search syntax."exclude_pull_requests boolean If true pull requests are omitted from the response (empty array).Default: falsecheck_suite_id integer Returns workflow runs with the check_suite_id that you specify.head_sha string Only returns workflow runs that are associated with the specified head_sha.HTTP response status codes for "List workflow runs for a workflow"Status codeDescription200OKCode samples for "List workflow runs for a workflow"Request exampleget/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/workflows/WORKFLOW_ID/runsResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "workflow_runs": [
    {
      "id": 30433642,
      "name": "Build",
      "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
      "check_suite_id": 42,
      "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
      "head_branch": "master",
      "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
      "path": ".github/workflows/build.yml@main",
      "run_number": 562,
      "event": "push",
      "display_title": "Update README.md",
      "status": "queued",
      "conclusion": null,
      "workflow_id": 159038,
      "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
      "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
      "pull_requests": [],
      "created_at": "2020-01-22T19:33:08Z",
      "updated_at": "2020-01-22T19:33:08Z",
      "actor": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "run_attempt": 1,
      "run_started_at": "2020-01-22T19:33:08Z",
      "triggering_actor": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
      "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
      "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
      "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
      "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
      "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
      "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
      "head_commit": {
        "id": "acb5820ced9479c074f688cc328bf03f341a511d",
        "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
        "message": "Create linter.yaml",
        "timestamp": "2020-01-22T19:33:05Z",
        "author": {
          "name": "Octo Cat",
          "email": "octocat@github.com"
        },
        "committer": {
          "name": "GitHub",
          "email": "noreply@github.com"
        }
      },
      "repository": {
        "id": 1296269,
        "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
        "name": "Hello-World",
        "full_name": "octocat/Hello-World",
        "owner": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/octocat/Hello-World",
        "description": "This your first repo!",
        "fork": false,
        "url": "https://api.github.com/repos/octocat/Hello-World",
        "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
        "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
        "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
        "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
        "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
        "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
        "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
        "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
        "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
        "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
        "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
        "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
        "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
        "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
        "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
        "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
        "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
        "git_url": "git:github.com/octocat/Hello-World.git",
        "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
        "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
        "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
        "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
        "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
        "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
        "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
        "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
        "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
        "ssh_url": "git@github.com:octocat/Hello-World.git",
        "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
        "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
        "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
        "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
        "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
        "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
        "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
        "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
      },
      "head_repository": {
        "id": 217723378,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
        "name": "octo-repo",
        "full_name": "octo-org/octo-repo",
        "private": true,
        "owner": {
          "login": "octocat",
          "id": 1,
          "node_id": "MDQ6VXNlcjE=",
          "avatar_url": "https://github.com/images/error/octocat_happy.gif",
          "gravatar_id": "",
          "url": "https://api.github.com/users/octocat",
          "html_url": "https://github.com/octocat",
          "followers_url": "https://api.github.com/users/octocat/followers",
          "following_url": "https://api.github.com/users/octocat/following{/other_user}",
          "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
          "organizations_url": "https://api.github.com/users/octocat/orgs",
          "repos_url": "https://api.github.com/users/octocat/repos",
          "events_url": "https://api.github.com/users/octocat/events{/privacy}",
          "received_events_url": "https://api.github.com/users/octocat/received_events",
          "type": "User",
          "site_admin": false
        },
        "html_url": "https://github.com/octo-org/octo-repo",
        "description": null,
        "fork": false,
        "url": "https://api.github.com/repos/octo-org/octo-repo",
        "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
        "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
        "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
        "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
        "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
        "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
        "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
        "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
        "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
        "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
        "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
        "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
        "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
        "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
        "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
        "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
        "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
        "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
        "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
        "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
        "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
      }
    }
  ]
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Actions/WorkflowsREST API endpoints for workflowsUse the REST API to interact with workflows in GitHub Actions.About workflows in GitHub Actions
You can use the REST API to view workflows for a repository in GitHub Actions. Workflows automate your software development life cycle with a wide range of tools and services. For more information, see About workflows in the GitHub Actions documentation.List repository workflowsLists the workflows in a repository.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "List repository workflows"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List repository workflows"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repository workflows"Status codeDescription200OKCode samples for "List repository workflows"Request exampleget/repos/{owner}/{repo}/actions/workflowscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/workflowsResponseExample responseResponse schemaStatus: 200{
  "total_count": 2,
  "workflows": [
    {
      "id": 161335,
      "node_id": "MDg6V29ya2Zsb3cxNjEzMzU=",
      "name": "CI",
      "path": ".github/workflows/blank.yaml",
      "state": "active",
      "created_at": "2020-01-08T23:48:37.000-08:00",
      "updated_at": "2020-01-08T23:50:21.000-08:00",
      "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335",
      "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335",
      "badge_url": "https://github.com/octo-org/octo-repo/workflows/CI/badge.svg"
    },
    {
      "id": 269289,
      "node_id": "MDE4OldvcmtmbG93IFNlY29uZGFyeTI2OTI4OQ==",
      "name": "Linter",
      "path": ".github/workflows/linter.yaml",
      "state": "active",
      "created_at": "2020-01-08T23:48:37.000-08:00",
      "updated_at": "2020-01-08T23:50:21.000-08:00",
      "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/269289",
      "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/269289",
      "badge_url": "https://github.com/octo-org/octo-repo/workflows/Linter/badge.svg"
    }
  ]
}Get a workflowGets a specific workflow. You can replace workflow_id with the workflow
file name. For example, you could use main.yaml.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "Get a workflow"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get a workflow"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.workflow_id  RequiredThe ID of the workflow. You can also pass the workflow file name as a string.HTTP response status codes for "Get a workflow"Status codeDescription200OKCode samples for "Get a workflow"Request exampleget/repos/{owner}/{repo}/actions/workflows/{workflow_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/workflows/WORKFLOW_IDResponseExample responseResponse schemaStatus: 200{
  "id": 161335,
  "node_id": "MDg6V29ya2Zsb3cxNjEzMzU=",
  "name": "CI",
  "path": ".github/workflows/blank.yaml",
  "state": "active",
  "created_at": "2020-01-08T23:48:37.000-08:00",
  "updated_at": "2020-01-08T23:50:21.000-08:00",
  "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335",
  "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335",
  "badge_url": "https://github.com/octo-org/octo-repo/workflows/CI/badge.svg"
}Disable a workflowDisables a workflow and sets the state of the workflow to disabled_manually. You can replace workflow_id with the workflow file name. For example, you could use main.yaml.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Disable a workflow"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Disable a workflow"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.workflow_id  RequiredThe ID of the workflow. You can also pass the workflow file name as a string.HTTP response status codes for "Disable a workflow"Status codeDescription204No ContentCode samples for "Disable a workflow"Request exampleput/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disablecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/workflows/WORKFLOW_ID/disableResponseStatus: 204Create a workflow dispatch eventYou can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace workflow_id with the workflow file name. For example, you could use main.yaml.
You must configure your GitHub Actions workflow to run when the workflow_dispatch webhook event occurs. The inputs are configured in the workflow file. For more information about how to configure the workflow_dispatch event in the workflow file, see "Events that trigger workflows."
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Create a workflow dispatch event"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Create a workflow dispatch event"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.workflow_id  RequiredThe ID of the workflow. You can also pass the workflow file name as a string.Body parametersName, Type, Descriptionref string RequiredThe git reference for the workflow. The reference can be a branch or tag name.inputs object Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when inputs are omitted.HTTP response status codes for "Create a workflow dispatch event"Status codeDescription204No ContentCode samples for "Create a workflow dispatch event"Request examplepost/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatchescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/workflows/WORKFLOW_ID/dispatches \
  -d '{"ref":"topic-branch","inputs":{"name":"Mona the Octocat","home":"San Francisco, CA"}}'ResponseStatus: 204Enable a workflowEnables a workflow and sets the state of the workflow to active. You can replace workflow_id with the workflow file name. For example, you could use main.yaml.
OAuth tokens and personal access tokens (classic) need the repo scope to use this endpoint.Fine-grained access tokens for "Enable a workflow"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (write)Parameters for "Enable a workflow"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.workflow_id  RequiredThe ID of the workflow. You can also pass the workflow file name as a string.HTTP response status codes for "Enable a workflow"Status codeDescription204No ContentCode samples for "Enable a workflow"Request exampleput/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enablecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/workflows/WORKFLOW_ID/enableResponseStatus: 204Get workflow usageWarning

This endpoint is in the process of closing down. Refer to "Actions Get workflow usage and Get workflow run usage endpoints closing down" for more information.

Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "Managing billing for GitHub Actions".
You can replace workflow_id with the workflow file name. For example, you could use main.yaml.
Anyone with read access to the repository can use this endpoint.
OAuth app tokens and personal access tokens (classic) need the repo scope to use this endpoint with a private repository.Fine-grained access tokens for "Get workflow usage"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Actions" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get workflow usage"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.workflow_id  RequiredThe ID of the workflow. You can also pass the workflow file name as a string.HTTP response status codes for "Get workflow usage"Status codeDescription200OKCode samples for "Get workflow usage"Request exampleget/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timingcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/actions/workflows/WORKFLOW_ID/timingResponseExample responseResponse schemaStatus: 200{
  "billable": {
    "UBUNTU": {
      "total_ms": 180000
    },
    "MACOS": {
      "total_ms": 240000
    },
    "WINDOWS": {
      "total_ms": 300000
    }
  }
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/ActivityREST API endpoints for activityUse the REST API to list events and feeds and manage notifications, starring, and watching.REST API endpoints for eventsList public eventsList public events for a network of repositoriesList public organization eventsList repository eventsList events for the authenticated userList organization events for the authenticated userList public events for a userList events received by the authenticated userList public events received by a userREST API endpoints for feedsGet feedsREST API endpoints for notificationsList notifications for the authenticated userMark notifications as readGet a threadMark a thread as readMark a thread as doneGet a thread subscription for the authenticated userSet a thread subscriptionDelete a thread subscriptionList repository notifications for the authenticated userMark repository notifications as readREST API endpoints for starringList stargazersList repositories starred by the authenticated userCheck if a repository is starred by the authenticated userStar a repository for the authenticated userUnstar a repository for the authenticated userList repositories starred by a userREST API endpoints for watchingList watchersGet a repository subscriptionSet a repository subscriptionDelete a repository subscriptionList repositories watched by the authenticated userList repositories watched by a user\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Activity/EventsREST API endpoints for eventsUse the REST API to interact with GitHub events.About GitHub events
GitHub events power the various activity streams on the site.
You can use the REST API to return different types of events triggered by activity on GitHub. For more information about the specific events that you can receive, see GitHub event types. Endpoints for repository issues are also available. For more information, see REST API endpoints for issue events.
Events are optimized for polling with the "ETag" header. If no new events have been triggered, you will see a "304 Not Modified" response, and your current rate limit will be untouched. There is also an "X-Poll-Interval" header that specifies how often (in seconds) you are allowed to poll. In times of high server load, the time may increase. Please obey the header.
$ curl -I https://api.github.com/users/tater/events
> HTTP/2 200
> X-Poll-Interval: 60
> ETag: "a18c3bded88eb5dbb5c849a489412bf3"

# The quotes around the ETag value are important
$ curl -I https://api.github.com/users/tater/events \
$    -H 'If-None-Match: "a18c3bded88eb5dbb5c849a489412bf3"'
> HTTP/2 304
> X-Poll-Interval: 60

The timeline will include up to 300 events. Only events created within the past 90 days will be included. Events older than 90 days will not be included (even if the total number of events in the timeline is less than 300).List public eventsNote

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List public events"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List public events"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List public events"Status codeDescription200OK304Not modified403Forbidden503Service unavailableCode samples for "List public events"Request exampleget/eventscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/eventsResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22249084947",
    "type": "WatchEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "action": "started"
    },
    "public": true,
    "created_at": "2022-06-09T12:47:28Z"
  },
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": true,
    "created_at": "2022-06-07T07:50:26Z"
  }
]List public events for a network of repositoriesNote

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List public events for a network of repositories"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List public events for a network of repositories"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List public events for a network of repositories"Status codeDescription200OK301Moved permanently304Not modified403Forbidden404Resource not foundCode samples for "List public events for a network of repositories"Request exampleget/networks/{owner}/{repo}/eventscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/networks/OWNER/REPO/eventsResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": true,
    "created_at": "2022-06-09T12:47:28Z"
  },
  {
    "id": "22237752260",
    "type": "WatchEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rrubenich",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "action": "started"
    },
    "public": true,
    "created_at": "2022-06-08T23:29:25Z"
  }
]List public organization eventsNote

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List public organization events"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List public organization events"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List public organization events"Status codeDescription200OKCode samples for "List public organization events"Request exampleget/orgs/{org}/eventscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/eventsResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22237752260",
    "type": "WatchEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octo-org/octo-repo",
      "url": "https://api.github.com/repos/octo-org/octo-repo"
    },
    "payload": {
      "action": "started"
    },
    "public": true,
    "created_at": "2022-06-08T23:29:25Z"
  },
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octo-org/octo-repo",
      "url": "https://api.github.com/repos/octo-org/oct-repo"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octo-org/oct-repo/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": true,
    "created_at": "2022-06-09T12:47:28Z"
  }
]List repository eventsNote

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List repository events"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Metadata" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List repository events"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repository events"Status codeDescription200OKCode samples for "List repository events"Request exampleget/repos/{owner}/{repo}/eventscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/eventsResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": true,
    "created_at": "2022-06-09T12:47:28Z"
  },
  {
    "id": "22237752260",
    "type": "WatchEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "action": "started"
    },
    "public": true,
    "created_at": "2022-06-08T23:29:25Z"
  }
]List events for the authenticated userIf you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. Optional: use the fine-grained token with following permission set to view private events: "Events" user permissions (read).
Note

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List events for the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List events for the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List events for the authenticated user"Status codeDescription200OKCode samples for "List events for the authenticated user"Request exampleget/users/{username}/eventscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/eventsResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22249084947",
    "type": "WatchEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "action": "started"
    },
    "public": true,
    "created_at": "2022-06-09T12:47:28Z"
  },
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": false,
    "created_at": "2022-06-07T07:50:26Z"
  }
]List organization events for the authenticated userThis is the user's organization dashboard. You must be authenticated as the user to view this.
Note

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List organization events for the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Events" organization permissions (read)Parameters for "List organization events for the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.org string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List organization events for the authenticated user"Status codeDescription200OKCode samples for "List organization events for the authenticated user"Request exampleget/users/{username}/events/orgs/{org}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/events/orgs/ORGResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": false,
    "created_at": "2022-06-09T12:47:28Z"
  },
  {
    "id": "22196946742",
    "type": "CreateEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "ref": null,
      "ref_type": "repository",
      "master_branch": "master",
      "description": null,
      "pusher_type": "user"
    },
    "public": false,
    "created_at": "2022-06-07T07:50:26Z",
    "org": {
      "id": 9919,
      "login": "github",
      "gravatar_id": "",
      "url": "https://api.github.com/orgs/github",
      "avatar_url": "https://avatars.githubusercontent.com/u/9919?"
    }
  }
]List public events for a userNote

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List public events for a user"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List public events for a user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List public events for a user"Status codeDescription200OKCode samples for "List public events for a user"Request exampleget/users/{username}/events/publiccURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/events/publicResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22249084947",
    "type": "WatchEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "action": "started"
    },
    "public": true,
    "created_at": "2022-06-09T12:47:28Z"
  },
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": true,
    "created_at": "2022-06-08T23:29:25Z"
  }
]List events received by the authenticated userThese are events that you've received by watching repositories and following users. If you are authenticated as the
given user, you will see private events. Otherwise, you'll only see public events.
Note

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List events received by the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List events received by the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List events received by the authenticated user"Status codeDescription200OKCode samples for "List events received by the authenticated user"Request exampleget/users/{username}/received_eventscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/received_eventsResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": true,
    "created_at": "2022-06-09T12:47:28Z"
  },
  {
    "id": "22196946742",
    "type": "CreateEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "ref": null,
      "ref_type": "repository",
      "master_branch": "master",
      "description": null,
      "pusher_type": "user"
    },
    "public": false,
    "created_at": "2022-06-07T07:50:26Z",
    "org": {
      "id": 9919,
      "login": "github",
      "gravatar_id": "",
      "url": "https://api.github.com/orgs/github",
      "avatar_url": "https://avatars.githubusercontent.com/u/9919?"
    }
  }
]List public events received by a userNote

This API is not built to serve real-time use cases. Depending on the time of day, event latency can be anywhere from 30s to 6h.
Fine-grained access tokens for "List public events received by a user"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List public events received by a user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List public events received by a user"Status codeDescription200OKCode samples for "List public events received by a user"Request exampleget/users/{username}/received_events/publiccURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/received_events/publicResponseExample responseResponse schemaStatus: 200[
  {
    "id": "22249084964",
    "type": "PushEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "push_id": 10115855396,
      "size": 1,
      "distinct_size": 1,
      "ref": "refs/heads/master",
      "head": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
      "before": "883efe034920928c47fe18598c01249d1a9fdabd",
      "commits": [
        {
          "sha": "7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300",
          "author": {
            "email": "octocat@github.com",
            "name": "Monalisa Octocat"
          },
          "message": "commit",
          "distinct": true,
          "url": "https://api.github.com/repos/octocat/Hello-World/commits/7a8f3ac80e2ad2f6842cb86f576d4bfe2c03e300"
        }
      ]
    },
    "public": true,
    "created_at": "2022-06-09T12:47:28Z"
  },
  {
    "id": "22196946742",
    "type": "CreateEvent",
    "actor": {
      "id": 583231,
      "login": "octocat",
      "display_login": "octocat",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4"
    },
    "repo": {
      "id": 1296269,
      "name": "octocat/Hello-World",
      "url": "https://api.github.com/repos/octocat/Hello-World"
    },
    "payload": {
      "ref": null,
      "ref_type": "repository",
      "master_branch": "master",
      "description": null,
      "pusher_type": "user"
    },
    "public": false,
    "created_at": "2022-06-07T07:50:26Z",
    "org": {
      "id": 9919,
      "login": "github",
      "gravatar_id": "",
      "url": "https://api.github.com/orgs/github",
      "avatar_url": "https://avatars.githubusercontent.com/u/9919?"
    }
  }
]\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Activity/FeedsREST API endpoints for feedsUse the REST API to interact with GitHub feeds.Get feedsLists the feeds available to the authenticated user. The response provides a URL for each feed. You can then get a specific feed by sending a request to one of the feed URLs.

Timeline: The GitHub global public timeline
User: The public timeline for any user, using uri_template. For more information, see "Hypermedia."
Current user public: The public timeline for the authenticated user
Current user: The private timeline for the authenticated user
Current user actor: The private timeline for activity created by the authenticated user
Current user organizations: The private timeline for the organizations the authenticated user is a member of.
Security advisories: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.

By default, timeline resources are returned in JSON. You can specify the application/atom+xml type in the Accept header to return timeline resources in Atom format. For more information, see "Media types."
Note

Private feeds are only returned when authenticating via Basic Auth since current feed URIs use the older, non revocable auth tokens.
Fine-grained access tokens for "Get feeds"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.HTTP response status codes for "Get feeds"Status codeDescription200OKCode samples for "Get feeds"Request exampleget/feedscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/feedsResponseExample responseResponse schemaStatus: 200{
  "timeline_url": "https://github.com/timeline",
  "user_url": "https://github.com/{user}",
  "current_user_public_url": "https://github.com/octocat",
  "current_user_url": "https://github.com/octocat.private?token=abc123",
  "current_user_actor_url": "https://github.com/octocat.private.actor?token=abc123",
  "current_user_organization_url": "",
  "current_user_organization_urls": [
    "https://github.com/organizations/github/octocat.private.atom?token=abc123"
  ],
  "security_advisories_url": "https://github.com/security-advisories",
  "_links": {
    "timeline": {
      "href": "https://github.com/timeline",
      "type": "application/atom+xml"
    },
    "user": {
      "href": "https://github.com/{user}",
      "type": "application/atom+xml"
    },
    "current_user_public": {
      "href": "https://github.com/octocat",
      "type": "application/atom+xml"
    },
    "current_user": {
      "href": "https://github.com/octocat.private?token=abc123",
      "type": "application/atom+xml"
    },
    "current_user_actor": {
      "href": "https://github.com/octocat.private.actor?token=abc123",
      "type": "application/atom+xml"
    },
    "current_user_organization": {
      "href": "",
      "type": ""
    },
    "current_user_organizations": [
      {
        "href": "https://github.com/organizations/github/octocat.private.atom?token=abc123",
        "type": "application/atom+xml"
      }
    ],
    "security_advisories": {
      "href": "https://github.com/security-advisories",
      "type": "application/atom+xml"
    }
  }
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Activity/NotificationsREST API endpoints for notificationsUse the REST API to manage GitHub notifications.About GitHub notifications
Note

These endpoints only support authentication using a personal access token (classic). For more information, see Managing your personal access tokens.

You can use the REST API to manage GitHub notifications. For more information about notifications, see About notifications.
All calls to these endpoints require the notifications or repo scopes. You will need the repo scope to access issues and commits from their respective endpoints.
Notifications are returned as "threads". A thread contains information about the current discussion of an issue, pull request, or commit.
Notifications are optimized for polling with the Last-Modified header. If there are no new notifications, you will see a 304 Not Modified response, leaving your current rate limit untouched. There is an X-Poll-Interval header that specifies how often (in seconds) you are allowed to poll. In times of high server load, the time may increase. Please obey the header.
# Add authentication to your requests
$ curl -I https://api.github.com/notifications
HTTP/2 200
Last-Modified: Thu, 25 Oct 2012 15:16:27 GMT
X-Poll-Interval: 60

# Pass the Last-Modified header exactly
$ curl -I https://api.github.com/notifications
$    -H "If-Modified-Since: Thu, 25 Oct 2012 15:16:27 GMT"
> HTTP/2 304
> X-Poll-Interval: 60

About notification reasons
These GET endpoints return a reason key. These reasons correspond to events that trigger a notification.
There are a few potential reasons for receiving a notification.





































































Reason NameDescriptionapproval_requestedYou were requested to review and approve a deployment. For more information, see Reviewing deployments.assignYou were assigned to the issue.authorYou created the thread.commentYou commented on the thread.ci_activityA GitHub Actions workflow run that you triggered was completed.invitationYou accepted an invitation to contribute to the repository.manualYou subscribed to the thread (via an issue or pull request).member_feature_requestedOrganization members have requested to enable a feature such as Draft Pull Requests or Copilot.mentionYou were specifically @mentioned in the content.review_requestedYou, or a team you're a member of, were requested to review a pull request.security_alertGitHub discovered a security vulnerability in your repository.security_advisory_creditYou were credited for contributing to a security advisory.state_changeYou changed the thread state (for example, closing an issue or merging a pull request).subscribedYou're watching the repository.team_mentionYou were on a team that was mentioned.
Note that the reason is modified on a per-thread basis, and can change, if the reason on a later notification is different.
For example, if you are the author of an issue, subsequent notifications on that issue will have a reason of author. If you're then @mentioned on the same issue, the notifications you fetch thereafter will have a reason of mention. The reason remains as mention, regardless of whether you're ever mentioned again.List notifications for the authenticated userList all notifications for the current user, sorted by most recently updated.Fine-grained access tokens for "List notifications for the authenticated user"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List notifications for the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionall boolean If true, show notifications marked as read.Default: falseparticipating boolean If true, only shows notifications in which the user is directly participating or mentioned.Default: falsesince string Only show results that were last updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.before string Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1per_page integer The number of results per page (max 50). For more information, see "Using pagination in the REST API."Default: 50HTTP response status codes for "List notifications for the authenticated user"Status codeDescription200OK304Not modified401Requires authentication403Forbidden422Validation failed, or the endpoint has been spammed.Code samples for "List notifications for the authenticated user"Request exampleget/notificationscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/notificationsResponseExample responseResponse schemaStatus: 200[
  {
    "id": "1",
    "repository": {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
    },
    "subject": {
      "title": "Greetings",
      "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
      "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
      "type": "Issue"
    },
    "reason": "subscribed",
    "unread": true,
    "updated_at": "2014-11-07T22:01:45Z",
    "last_read_at": "2014-11-07T22:01:45Z",
    "url": "https://api.github.com/notifications/threads/1",
    "subscription_url": "https://api.github.com/notifications/threads/1/subscription"
  }
]Mark notifications as readMarks all notifications as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a 202 Accepted status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the List notifications for the authenticated user endpoint and pass the query parameter all=false.Fine-grained access tokens for "Mark notifications as read"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Mark notifications as read"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Body parametersName, Type, Descriptionlast_read_at string Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: The current timestamp.read boolean Whether the notification has been read.HTTP response status codes for "Mark notifications as read"Status codeDescription202Accepted205Reset Content304Not modified401Requires authentication403ForbiddenCode samples for "Mark notifications as read"Request exampleput/notificationscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/notifications \
  -d '{"last_read_at":"2022-06-10T00:00:00Z","read":true}'ResponseExample responseResponse schemaStatus: 202{
  "message": "Unread notifications couldn't be marked in a single request. Notifications are being marked as read in the background."
}Get a threadGets information about a notification thread.Fine-grained access tokens for "Get a thread"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get a thread"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionthread_id integer RequiredThe unique identifier of the notification thread. This corresponds to the value returned in the id field when you retrieve notifications (for example with the GET /notifications operation).HTTP response status codes for "Get a thread"Status codeDescription200OK304Not modified401Requires authentication403ForbiddenCode samples for "Get a thread"Request exampleget/notifications/threads/{thread_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/notifications/threads/THREAD_IDResponseExample responseResponse schemaStatus: 200{
  "id": "1",
  "repository": {
    "id": 1296269,
    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
    "name": "Hello-World",
    "full_name": "octocat/Hello-World",
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "private": false,
    "html_url": "https://github.com/octocat/Hello-World",
    "description": "This your first repo!",
    "fork": false,
    "url": "https://api.github.com/repos/octocat/Hello-World",
    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
    "git_url": "git:github.com/octocat/Hello-World.git",
    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
    "ssh_url": "git@github.com:octocat/Hello-World.git",
    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
    "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
  },
  "subject": {
    "title": "Greetings",
    "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
    "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
    "type": "Issue"
  },
  "reason": "subscribed",
  "unread": true,
  "updated_at": "2014-11-07T22:01:45Z",
  "last_read_at": "2014-11-07T22:01:45Z",
  "url": "https://api.github.com/notifications/threads/1",
  "subscription_url": "https://api.github.com/notifications/threads/1/subscription"
}Mark a thread as readMarks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox on GitHub: https://github.com/notifications.Fine-grained access tokens for "Mark a thread as read"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Mark a thread as read"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionthread_id integer RequiredThe unique identifier of the notification thread. This corresponds to the value returned in the id field when you retrieve notifications (for example with the GET /notifications operation).HTTP response status codes for "Mark a thread as read"Status codeDescription205Reset Content304Not modified403ForbiddenCode samples for "Mark a thread as read"Request examplepatch/notifications/threads/{thread_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PATCH \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/notifications/threads/THREAD_IDReset ContentStatus: 205Mark a thread as doneMarks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox on GitHub as done: https://github.com/notifications.Fine-grained access tokens for "Mark a thread as done"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Mark a thread as done"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionthread_id integer RequiredThe unique identifier of the notification thread. This corresponds to the value returned in the id field when you retrieve notifications (for example with the GET /notifications operation).HTTP response status codes for "Mark a thread as done"Status codeDescription204No contentCode samples for "Mark a thread as done"Request exampledelete/notifications/threads/{thread_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/notifications/threads/THREAD_IDNo contentStatus: 204Get a thread subscription for the authenticated userThis checks to see if the current user is subscribed to a thread. You can also get a repository subscription.
Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were @mentioned, or manually subscribe to a thread.Fine-grained access tokens for "Get a thread subscription for the authenticated user"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get a thread subscription for the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionthread_id integer RequiredThe unique identifier of the notification thread. This corresponds to the value returned in the id field when you retrieve notifications (for example with the GET /notifications operation).HTTP response status codes for "Get a thread subscription for the authenticated user"Status codeDescription200OK304Not modified401Requires authentication403ForbiddenCode samples for "Get a thread subscription for the authenticated user"Request exampleget/notifications/threads/{thread_id}/subscriptioncURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/notifications/threads/THREAD_ID/subscriptionResponseExample responseResponse schemaStatus: 200{
  "subscribed": true,
  "ignored": false,
  "reason": null,
  "created_at": "2012-10-06T21:34:12Z",
  "url": "https://api.github.com/notifications/threads/1/subscription",
  "thread_url": "https://api.github.com/notifications/threads/1"
}Set a thread subscriptionIf you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an @mention.
You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the Delete a thread subscription endpoint.Fine-grained access tokens for "Set a thread subscription"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Set a thread subscription"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionthread_id integer RequiredThe unique identifier of the notification thread. This corresponds to the value returned in the id field when you retrieve notifications (for example with the GET /notifications operation).Body parametersName, Type, Descriptionignored boolean Whether to block all notifications from a thread.Default: falseHTTP response status codes for "Set a thread subscription"Status codeDescription200OK304Not modified401Requires authentication403ForbiddenCode samples for "Set a thread subscription"Request exampleput/notifications/threads/{thread_id}/subscriptioncURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/notifications/threads/THREAD_ID/subscription \
  -d '{"ignored":false}'ResponseExample responseResponse schemaStatus: 200{
  "subscribed": true,
  "ignored": false,
  "reason": null,
  "created_at": "2012-10-06T21:34:12Z",
  "url": "https://api.github.com/notifications/threads/1/subscription",
  "thread_url": "https://api.github.com/notifications/threads/1"
}Delete a thread subscriptionMutes all future notifications for a conversation until you comment on the thread or get an @mention. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the Set a thread subscription endpoint and set ignore to true.Fine-grained access tokens for "Delete a thread subscription"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Delete a thread subscription"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionthread_id integer RequiredThe unique identifier of the notification thread. This corresponds to the value returned in the id field when you retrieve notifications (for example with the GET /notifications operation).HTTP response status codes for "Delete a thread subscription"Status codeDescription204No Content304Not modified401Requires authentication403ForbiddenCode samples for "Delete a thread subscription"Request exampledelete/notifications/threads/{thread_id}/subscriptioncURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/notifications/threads/THREAD_ID/subscriptionResponseStatus: 204List repository notifications for the authenticated userLists all notifications for the current user in the specified repository.Fine-grained access tokens for "List repository notifications for the authenticated user"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List repository notifications for the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionall boolean If true, show notifications marked as read.Default: falseparticipating boolean If true, only shows notifications in which the user is directly participating or mentioned.Default: falsesince string Only show results that were last updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.before string Only show notifications updated before the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repository notifications for the authenticated user"Status codeDescription200OKCode samples for "List repository notifications for the authenticated user"Request exampleget/repos/{owner}/{repo}/notificationscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/notificationsResponseExample responseResponse schemaStatus: 200[
  {
    "id": "1",
    "repository": {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
    },
    "subject": {
      "title": "Greetings",
      "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
      "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
      "type": "Issue"
    },
    "reason": "subscribed",
    "unread": true,
    "updated_at": "2014-11-07T22:01:45Z",
    "last_read_at": "2014-11-07T22:01:45Z",
    "url": "https://api.github.com/notifications/threads/1",
    "subscription_url": "https://api.github.com/notifications/threads/1/subscription"
  }
]Mark repository notifications as readMarks all notifications in a repository as "read" for the current user. If the number of notifications is too large to complete in one request, you will receive a 202 Accepted status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the List repository notifications for the authenticated user endpoint and pass the query parameter all=false.Fine-grained access tokens for "Mark repository notifications as read"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Mark repository notifications as read"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionlast_read_at string Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Default: The current timestamp.HTTP response status codes for "Mark repository notifications as read"Status codeDescription202Accepted205Reset ContentCode samples for "Mark repository notifications as read"Request exampleput/repos/{owner}/{repo}/notificationscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/notifications \
  -d '{"last_read_at":"2019-01-01T00:00:00Z"}'ResponseExample responseResponse schemaStatus: 202{
  "message": "Unread notifications couldn't be marked in a single request. Notifications are being marked as read in the background."
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Activity/StarringREST API endpoints for starringUse the REST API to bookmark a repository.About starring
You can use the REST API to star (bookmark) a repository. Stars are shown next to repositories to show an approximate level of interest. Stars have no effect on notifications or the activity feed. For more information, see Saving repositories with stars.
Starring versus watching
In August 2012, we changed the way watching
works on GitHub. Some API
client applications may still be using the original "watcher" endpoints for accessing
this data. You should now use the "star" endpoints instead (described
below). For more information, see REST API endpoints for watching and the changelog post.
In responses from the REST API, watchers, watchers_count, and stargazers_count correspond to the number of users that have starred a repository, whereas subscribers_count corresponds to the number of watchers.List stargazersLists the people that have starred the repository.
This endpoint supports the following custom media types. For more information, see "Media types."

application/vnd.github.star+json: Includes a timestamp of when the star was created.
Fine-grained access tokens for "List stargazers"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Metadata" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List stargazers"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List stargazers"Status codeDescription200OK422Validation failed, or the endpoint has been spammed.Code samples for "List stargazers"Request examplesSelect the example typeExample 1: Status Code 200Example 2: Status Code 200get/repos/{owner}/{repo}/stargazerscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/stargazersDefault responseExample responseResponse schemaStatus: 200[
  {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  }
]List repositories starred by the authenticated userLists repositories the authenticated user has starred.
This endpoint supports the following custom media types. For more information, see "Media types."

application/vnd.github.star+json: Includes a timestamp of when the star was created.
Fine-grained access tokens for "List repositories starred by the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Starring" user permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List repositories starred by the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionsort string The property to sort the results by. created means when the repository was starred. updated means when the repository was last pushed to.Default: createdCan be one of: created, updated direction string The direction to sort the results by.Default: descCan be one of: asc, desc per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repositories starred by the authenticated user"Status codeDescription200OK304Not modified401Requires authentication403ForbiddenCode samples for "List repositories starred by the authenticated user"Request examplesSelect the example typeExample 1: Status Code 200 (application/json)Example 2: Status Code 200 (application/vnd.github.v3.star+json)get/user/starredcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/starredDefault responseExample responseResponse schemaStatus: 200[
  {
    "id": 1296269,
    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
    "name": "Hello-World",
    "full_name": "octocat/Hello-World",
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "private": false,
    "html_url": "https://github.com/octocat/Hello-World",
    "description": "This your first repo!",
    "fork": false,
    "url": "https://api.github.com/repos/octocat/Hello-World",
    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
    "git_url": "git:github.com/octocat/Hello-World.git",
    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
    "ssh_url": "git@github.com:octocat/Hello-World.git",
    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
    "clone_url": "https://github.com/octocat/Hello-World.git",
    "mirror_url": "git:git.example.com/octocat/Hello-World",
    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
    "svn_url": "https://svn.github.com/octocat/Hello-World",
    "homepage": "https://github.com",
    "language": null,
    "forks_count": 9,
    "stargazers_count": 80,
    "watchers_count": 80,
    "size": 108,
    "default_branch": "master",
    "open_issues_count": 0,
    "is_template": true,
    "topics": [
      "octocat",
      "atom",
      "electron",
      "api"
    ],
    "has_issues": true,
    "has_projects": true,
    "has_wiki": true,
    "has_pages": false,
    "has_downloads": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "pushed_at": "2011-01-26T19:06:43Z",
    "created_at": "2011-01-26T19:01:12Z",
    "updated_at": "2011-01-26T19:14:43Z",
    "permissions": {
      "admin": false,
      "push": false,
      "pull": true
    },
    "allow_rebase_merge": true,
    "template_repository": null,
    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
    "allow_squash_merge": true,
    "allow_auto_merge": false,
    "delete_branch_on_merge": true,
    "allow_merge_commit": true,
    "subscribers_count": 42,
    "network_count": 0,
    "license": {
      "key": "mit",
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit",
      "spdx_id": "MIT",
      "node_id": "MDc6TGljZW5zZW1pdA==",
      "html_url": "https://github.com/licenses/mit"
    },
    "forks": 1,
    "open_issues": 1,
    "watchers": 1
  }
]Check if a repository is starred by the authenticated userWhether the authenticated user has starred the repository.Fine-grained access tokens for "Check if a repository is starred by the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Metadata" repository permissions (read) and "Starring" user permissions (read)Parameters for "Check if a repository is starred by the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Check if a repository is starred by the authenticated user"Status codeDescription204Response if this repository is starred by you304Not modified401Requires authentication403Forbidden404Not Found if this repository is not starred by youCode samples for "Check if a repository is starred by the authenticated user"Request exampleget/user/starred/{owner}/{repo}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/starred/OWNER/REPOResponse if this repository is starred by youStatus: 204Star a repository for the authenticated userNote that you'll need to set Content-Length to zero when calling out to this endpoint. For more information, see "HTTP method."Fine-grained access tokens for "Star a repository for the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Starring" user permissions (write) and "Metadata" repository permissions (read)Parameters for "Star a repository for the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Star a repository for the authenticated user"Status codeDescription204No Content304Not modified401Requires authentication403Forbidden404Resource not foundCode samples for "Star a repository for the authenticated user"Request exampleput/user/starred/{owner}/{repo}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/starred/OWNER/REPOResponseStatus: 204Unstar a repository for the authenticated userUnstar a repository that the authenticated user has previously starred.Fine-grained access tokens for "Unstar a repository for the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Starring" user permissions (write) and "Metadata" repository permissions (read)Parameters for "Unstar a repository for the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Unstar a repository for the authenticated user"Status codeDescription204No Content304Not modified401Requires authentication403Forbidden404Resource not foundCode samples for "Unstar a repository for the authenticated user"Request exampledelete/user/starred/{owner}/{repo}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/starred/OWNER/REPOResponseStatus: 204List repositories starred by a userLists repositories a user has starred.
This endpoint supports the following custom media types. For more information, see "Media types."

application/vnd.github.star+json: Includes a timestamp of when the star was created.
Fine-grained access tokens for "List repositories starred by a user"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Starring" user permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List repositories starred by a user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.Query parametersName, Type, Descriptionsort string The property to sort the results by. created means when the repository was starred. updated means when the repository was last pushed to.Default: createdCan be one of: created, updated direction string The direction to sort the results by.Default: descCan be one of: asc, desc per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repositories starred by a user"Status codeDescription200OKCode samples for "List repositories starred by a user"Request exampleget/users/{username}/starredcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/starredDefault responseExample responseResponse schemaStatus: 200[
  {
    "id": 1296269,
    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
    "name": "Hello-World",
    "full_name": "octocat/Hello-World",
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "private": false,
    "html_url": "https://github.com/octocat/Hello-World",
    "description": "This your first repo!",
    "fork": false,
    "url": "https://api.github.com/repos/octocat/Hello-World",
    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
    "git_url": "git:github.com/octocat/Hello-World.git",
    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
    "ssh_url": "git@github.com:octocat/Hello-World.git",
    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
    "clone_url": "https://github.com/octocat/Hello-World.git",
    "mirror_url": "git:git.example.com/octocat/Hello-World",
    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
    "svn_url": "https://svn.github.com/octocat/Hello-World",
    "homepage": "https://github.com",
    "language": null,
    "forks_count": 9,
    "stargazers_count": 80,
    "watchers_count": 80,
    "size": 108,
    "default_branch": "master",
    "open_issues_count": 0,
    "is_template": true,
    "topics": [
      "octocat",
      "atom",
      "electron",
      "api"
    ],
    "has_issues": true,
    "has_projects": true,
    "has_wiki": true,
    "has_pages": false,
    "has_downloads": true,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "pushed_at": "2011-01-26T19:06:43Z",
    "created_at": "2011-01-26T19:01:12Z",
    "updated_at": "2011-01-26T19:14:43Z",
    "permissions": {
      "admin": false,
      "push": false,
      "pull": true
    },
    "allow_rebase_merge": true,
    "template_repository": null,
    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
    "allow_squash_merge": true,
    "allow_auto_merge": false,
    "delete_branch_on_merge": true,
    "allow_merge_commit": true,
    "subscribers_count": 42,
    "network_count": 0,
    "license": {
      "key": "mit",
      "name": "MIT License",
      "url": "https://api.github.com/licenses/mit",
      "spdx_id": "MIT",
      "node_id": "MDc6TGljZW5zZW1pdA==",
      "html_url": "https://github.com/licenses/mit"
    },
    "forks": 1,
    "open_issues": 1,
    "watchers": 1
  }
]\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Activity/WatchingREST API endpoints for watchingUse the REST API to subscribe to notifications for activity in a repository.About watching
You can use the REST API to subscribe to notifications for activity in a repository. To bookmark a repository instead, see REST API endpoints for starring.
Watching versus starring
In August 2012, we changed the way watching
works on GitHub. Some API
client applications may still be using the original "watcher" endpoints for accessing
this data. You should now use the "star" endpoints instead. For more information, REST API endpoints for starring and the changelog post.
In responses from the REST API, subscribers_count corresponds to the number of watchers, whereas watchers, watchers_count, and stargazers_count correspond to the number of users that have starred a repository.List watchersLists the people watching the specified repository.Fine-grained access tokens for "List watchers"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Metadata" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List watchers"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List watchers"Status codeDescription200OKCode samples for "List watchers"Request exampleget/repos/{owner}/{repo}/subscriberscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/subscribersResponseExample responseResponse schemaStatus: 200[
  {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  }
]Get a repository subscriptionGets information about whether the authenticated user is subscribed to the repository.Fine-grained access tokens for "Get a repository subscription"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get a repository subscription"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get a repository subscription"Status codeDescription200if you subscribe to the repository403Forbidden404Not Found if you don't subscribe to the repositoryCode samples for "Get a repository subscription"Request exampleget/repos/{owner}/{repo}/subscriptioncURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/subscriptionif you subscribe to the repositoryExample responseResponse schemaStatus: 200{
  "subscribed": true,
  "ignored": false,
  "reason": null,
  "created_at": "2012-10-06T21:34:12Z",
  "url": "https://api.github.com/repos/octocat/example/subscription",
  "repository_url": "https://api.github.com/repos/octocat/example"
}Set a repository subscriptionIf you would like to watch a repository, set subscribed to true. If you would like to ignore notifications made within a repository, set ignored to true. If you would like to stop watching a repository, delete the repository's subscription completely.Fine-grained access tokens for "Set a repository subscription"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Set a repository subscription"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionsubscribed boolean Determines if notifications should be received from this repository.ignored boolean Determines if all notifications should be blocked from this repository.HTTP response status codes for "Set a repository subscription"Status codeDescription200OKCode samples for "Set a repository subscription"Request exampleput/repos/{owner}/{repo}/subscriptioncURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/subscription \
  -d '{"subscribed":true,"ignored":false}'ResponseExample responseResponse schemaStatus: 200{
  "subscribed": true,
  "ignored": false,
  "reason": null,
  "created_at": "2012-10-06T21:34:12Z",
  "url": "https://api.github.com/repos/octocat/example/subscription",
  "repository_url": "https://api.github.com/repos/octocat/example"
}Delete a repository subscriptionThis endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, set the repository's subscription manually.Fine-grained access tokens for "Delete a repository subscription"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Delete a repository subscription"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Delete a repository subscription"Status codeDescription204No ContentCode samples for "Delete a repository subscription"Request exampledelete/repos/{owner}/{repo}/subscriptioncURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/subscriptionResponseStatus: 204List repositories watched by the authenticated userLists repositories the authenticated user is watching.Fine-grained access tokens for "List repositories watched by the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Watching" user permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List repositories watched by the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repositories watched by the authenticated user"Status codeDescription200OK304Not modified401Requires authentication403ForbiddenCode samples for "List repositories watched by the authenticated user"Request exampleget/user/subscriptionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/subscriptionsResponseExample responseResponse schemaStatus: 200[
  {
    "id": 1296269,
    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
    "name": "Hello-World",
    "full_name": "octocat/Hello-World",
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "private": false,
    "html_url": "https://github.com/octocat/Hello-World",
    "description": "This your first repo!",
    "fork": false,
    "url": "https://api.github.com/repos/octocat/Hello-World",
    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
    "git_url": "git:github.com/octocat/Hello-World.git",
    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
    "ssh_url": "git@github.com:octocat/Hello-World.git",
    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
    "clone_url": "https://github.com/octocat/Hello-World.git",
    "mirror_url": "git:git.example.com/octocat/Hello-World",
    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
    "svn_url": "https://svn.github.com/octocat/Hello-World",
    "homepage": "https://github.com",
    "language": null,
    "forks_count": 9,
    "stargazers_count": 80,
    "watchers_count": 80,
    "size": 108,
    "default_branch": "master",
    "open_issues_count": 0,
    "is_template": false,
    "topics": [
      "octocat",
      "atom",
      "electron",
      "api"
    ],
    "has_issues": true,
    "has_projects": true,
    "has_wiki": true,
    "has_pages": false,
    "has_downloads": true,
    "has_discussions": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "pushed_at": "2011-01-26T19:06:43Z",
    "created_at": "2011-01-26T19:01:12Z",
    "updated_at": "2011-01-26T19:14:43Z",
    "permissions": {
      "admin": false,
      "push": false,
      "pull": true
    },
    "security_and_analysis": {
      "advanced_security": {
        "status": "enabled"
      },
      "secret_scanning": {
        "status": "enabled"
      },
      "secret_scanning_push_protection": {
        "status": "disabled"
      },
      "secret_scanning_non_provider_patterns": {
        "status": "disabled"
      }
    }
  }
]List repositories watched by a userLists repositories a user is watching.Fine-grained access tokens for "List repositories watched by a user"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Watching" user permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List repositories watched by a user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repositories watched by a user"Status codeDescription200OKCode samples for "List repositories watched by a user"Request exampleget/users/{username}/subscriptionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/subscriptionsResponseExample responseResponse schemaStatus: 200[
  {
    "id": 1296269,
    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
    "name": "Hello-World",
    "full_name": "octocat/Hello-World",
    "owner": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "private": false,
    "html_url": "https://github.com/octocat/Hello-World",
    "description": "This your first repo!",
    "fork": false,
    "url": "https://api.github.com/repos/octocat/Hello-World",
    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
    "git_url": "git:github.com/octocat/Hello-World.git",
    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
    "ssh_url": "git@github.com:octocat/Hello-World.git",
    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
    "clone_url": "https://github.com/octocat/Hello-World.git",
    "mirror_url": "git:git.example.com/octocat/Hello-World",
    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
    "svn_url": "https://svn.github.com/octocat/Hello-World",
    "homepage": "https://github.com",
    "language": null,
    "forks_count": 9,
    "stargazers_count": 80,
    "watchers_count": 80,
    "size": 108,
    "default_branch": "master",
    "open_issues_count": 0,
    "is_template": false,
    "topics": [
      "octocat",
      "atom",
      "electron",
      "api"
    ],
    "has_issues": true,
    "has_projects": true,
    "has_wiki": true,
    "has_pages": false,
    "has_downloads": true,
    "has_discussions": false,
    "archived": false,
    "disabled": false,
    "visibility": "public",
    "pushed_at": "2011-01-26T19:06:43Z",
    "created_at": "2011-01-26T19:01:12Z",
    "updated_at": "2011-01-26T19:14:43Z",
    "permissions": {
      "admin": false,
      "push": false,
      "pull": true
    },
    "security_and_analysis": {
      "advanced_security": {
        "status": "enabled"
      },
      "secret_scanning": {
        "status": "enabled"
      },
      "secret_scanning_push_protection": {
        "status": "disabled"
      },
      "secret_scanning_non_provider_patterns": {
        "status": "disabled"
      }
    }
  }
]\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/AppsREST API endpoints for appsUse the REST API to retrieve information about GitHub Apps and GitHub App installations.REST API endpoints for GitHub AppsGet the authenticated appCreate a GitHub App from a manifestList installation requests for the authenticated appList installations for the authenticated appGet an installation for the authenticated appDelete an installation for the authenticated appCreate an installation access token for an appSuspend an app installationUnsuspend an app installationCreate a scoped access tokenGet an appGet an organization installation for the authenticated appGet a repository installation for the authenticated appGet a user installation for the authenticated appREST API endpoints for GitHub App installationsList repositories accessible to the app installationRevoke an installation access tokenList app installations accessible to the user access tokenList repositories accessible to the user access tokenAdd a repository to an app installationRemove a repository from an app installationREST API endpoints for GitHub MarketplaceGet a subscription plan for an accountList plansList accounts for a planGet a subscription plan for an account (stubbed)List plans (stubbed)List accounts for a plan (stubbed)List subscriptions for the authenticated userList subscriptions for the authenticated user (stubbed)REST API endpoints for OAuth authorizationsDelete an app authorizationCheck a tokenReset a tokenDelete an app tokenREST API endpoints for GitHub App webhooksGet a webhook configuration for an appUpdate a webhook configuration for an appList deliveries for an app webhookGet a delivery for an app webhookRedeliver a delivery for an app webhook\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Apps/GitHub AppsREST API endpoints for GitHub AppsUse the REST API to interact with GitHub AppsAbout GitHub Apps
If you are using your app with GitHub Actions and want to modify workflow files, you must authenticate on behalf of the user with an OAuth token that includes the workflow scope. The user must have admin or write permission to the repository that contains the workflow file. For more information, see Scopes for OAuth apps.
This page lists endpoints that you can access while authenticated as a GitHub App. For more information, see Authenticating as a GitHub App.
See REST API endpoints for GitHub App installations for a list of endpoints that require authentication as a GitHub App installation.Get the authenticated appReturns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the installations_count in the response. For more details about your app's installations, see the "List installations for the authenticated app" endpoint.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Get the authenticated app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.HTTP response status codes for "Get the authenticated app"Status codeDescription200OKCode samples for "Get the authenticated app"Request exampleget/appcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/appResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "slug": "octoapp",
  "client_id": "Iv1.ab1112223334445c",
  "node_id": "MDExOkludGVncmF0aW9uMQ==",
  "owner": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "name": "Octocat App",
  "description": "",
  "external_url": "https://example.com",
  "html_url": "https://github.com/apps/octoapp",
  "created_at": "2017-07-08T16:18:44-04:00",
  "updated_at": "2017-07-08T16:18:44-04:00",
  "permissions": {
    "metadata": "read",
    "contents": "read",
    "issues": "write",
    "single_file": "write"
  },
  "events": [
    "push",
    "pull_request"
  ]
}Create a GitHub App from a manifestUse this endpoint to complete the handshake necessary when implementing the GitHub App Manifest flow. When you create a GitHub App with the manifest flow, you receive a temporary code used to retrieve the GitHub App's id, pem (private key), and webhook_secret.Fine-grained access tokens for "Create a GitHub App from a manifest"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Create a GitHub App from a manifest"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioncode string RequiredHTTP response status codes for "Create a GitHub App from a manifest"Status codeDescription201Created404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Create a GitHub App from a manifest"Request examplepost/app-manifests/{code}/conversionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app-manifests/CODE/conversionsResponseExample responseResponse schemaStatus: 201{
  "id": 1,
  "slug": "octoapp",
  "node_id": "MDxOkludGVncmF0aW9uMQ==",
  "owner": {
    "login": "github",
    "id": 1,
    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
    "url": "https://api.github.com/orgs/github",
    "repos_url": "https://api.github.com/orgs/github/repos",
    "events_url": "https://api.github.com/orgs/github/events",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": true
  },
  "name": "Octocat App",
  "description": "",
  "external_url": "https://example.com",
  "html_url": "https://github.com/apps/octoapp",
  "created_at": "2017-07-08T16:18:44-04:00",
  "updated_at": "2017-07-08T16:18:44-04:00",
  "permissions": {
    "metadata": "read",
    "contents": "read",
    "issues": "write",
    "single_file": "write"
  },
  "events": [
    "push",
    "pull_request"
  ],
  "client_id": "Iv1.8a61f9b3a7aba766",
  "client_secret": "1726be1638095a19edd134c77bde3aa2ece1e5d8",
  "webhook_secret": "e340154128314309424b7c8e90325147d99fdafa",
  "pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAuEPzOUE+kiEH1WLiMeBytTEF856j0hOVcSUSUkZxKvqczkWM\n9vo1gDyC7ZXhdH9fKh32aapba3RSsp4ke+giSmYTk2mGR538ShSDxh0OgpJmjiKP\nX0Bj4j5sFqfXuCtl9SkH4iueivv4R53ktqM+n6hk98l6hRwC39GVIblAh2lEM4L/\n6WvYwuQXPMM5OG2Ryh2tDZ1WS5RKfgq+9ksNJ5Q9UtqtqHkO+E63N5OK9sbzpUUm\noNaOl3udTlZD3A8iqwMPVxH4SxgATBPAc+bmjk6BMJ0qIzDcVGTrqrzUiywCTLma\nszdk8GjzXtPDmuBgNn+o6s02qVGpyydgEuqmTQIDAQABAoIBACL6AvkjQVVLn8kJ\ndBYznJJ4M8ECo+YEgaFwgAHODT0zRQCCgzd+Vxl4YwHmKV2Lr+y2s0drZt8GvYva\nKOK8NYYZyi15IlwFyRXmvvykF1UBpSXluYFDH7KaVroWMgRreHcIys5LqVSIb6Bo\ngDmK0yBLPp8qR29s2b7ScZRtLaqGJiX+j55rNzrZwxHkxFHyG9OG+u9IsBElcKCP\nkYCVE8ZdYexfnKOZbgn2kZB9qu0T/Mdvki8yk3I2bI6xYO24oQmhnT36qnqWoCBX\nNuCNsBQgpYZeZET8mEAUmo9d+ABmIHIvSs005agK8xRaP4+6jYgy6WwoejJRF5yd\nNBuF7aECgYEA50nZ4FiZYV0vcJDxFYeY3kYOvVuKn8OyW+2rg7JIQTremIjv8FkE\nZnwuF9ZRxgqLxUIfKKfzp/5l5LrycNoj2YKfHKnRejxRWXqG+ZETfxxlmlRns0QG\nJ4+BYL0CoanDSeA4fuyn4Bv7cy/03TDhfg/Uq0Aeg+hhcPE/vx3ebPsCgYEAy/Pv\neDLssOSdeyIxf0Brtocg6aPXIVaLdus+bXmLg77rJIFytAZmTTW8SkkSczWtucI3\nFI1I6sei/8FdPzAl62/JDdlf7Wd9K7JIotY4TzT7Tm7QU7xpfLLYIP1bOFjN81rk\n77oOD4LsXcosB/U6s1blPJMZ6AlO2EKs10UuR1cCgYBipzuJ2ADEaOz9RLWwi0AH\nPza2Sj+c2epQD9ZivD7Zo/Sid3ZwvGeGF13JyR7kLEdmAkgsHUdu1rI7mAolXMaB\n1pdrsHureeLxGbRM6za3tzMXWv1Il7FQWoPC8ZwXvMOR1VQDv4nzq7vbbA8z8c+c\n57+8tALQHOTDOgQIzwK61QKBgERGVc0EJy4Uag+VY8J4m1ZQKBluqo7TfP6DQ7O8\nM5MX73maB/7yAX8pVO39RjrhJlYACRZNMbK+v/ckEQYdJSSKmGCVe0JrGYDuPtic\nI9+IGfSorf7KHPoMmMN6bPYQ7Gjh7a++tgRFTMEc8956Hnt4xGahy9NcglNtBpVN\n6G8jAoGBAMCh028pdzJa/xeBHLLaVB2sc0Fe7993WlsPmnVE779dAz7qMscOtXJK\nfgtriltLSSD6rTA9hUAsL/X62rY0wdXuNdijjBb/qvrx7CAV6i37NK1CjABNjsfG\nZM372Ac6zc1EqSrid2IjET1YqyIW2KGLI1R2xbQc98UGlt48OdWu\n-----END RSA PRIVATE KEY-----\n"
}List installation requests for the authenticated appLists all the pending installation requests for the authenticated GitHub App.Fine-grained access tokens for "List installation requests for the authenticated app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List installation requests for the authenticated app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List installation requests for the authenticated app"Status codeDescription200List of integration installation requests304Not modified401Requires authenticationCode samples for "List installation requests for the authenticated app"Request exampleget/app/installation-requestscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/installation-requestsList of integration installation requestsExample responseResponse schemaStatus: 200[
  {
    "id": 25381,
    "node_id": "MDEyOkludGVncmF0aW9uMTIzNDU2Nzg5MA==",
    "account": {
      "login": "octo-org",
      "id": 6811672,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/6811672?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octo-org",
      "html_url": "https://github.com/octo-org",
      "followers_url": "https://api.github.com/users/octo-org/followers",
      "following_url": "https://api.github.com/users/octo-org/following{/other_user}",
      "gists_url": "https://api.github.com/users/octo-org/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octo-org/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octo-org/subscriptions",
      "organizations_url": "https://api.github.com/users/octo-org/orgs",
      "repos_url": "https://api.github.com/users/octo-org/repos",
      "events_url": "https://api.github.com/users/octo-org/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octo-org/received_events",
      "type": "Organization",
      "site_admin": false
    },
    "requester": {
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2022-07-08T16:18:44-04:00"
  }
]List installations for the authenticated appThe permissions the installation has are included under the permissions key.
You must use a JWT to access this endpoint.Fine-grained access tokens for "List installations for the authenticated app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List installations for the authenticated app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1since string Only show results that were last updated after the given time. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.outdated string HTTP response status codes for "List installations for the authenticated app"Status codeDescription200The permissions the installation has are included under the permissions key.Code samples for "List installations for the authenticated app"Request exampleget/app/installationscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/installationsThe permissions the installation has are included under the permissions key.Example responseResponse schemaStatus: 200[
  {
    "id": 1,
    "account": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "access_tokens_url": "https://api.github.com/app/installations/1/access_tokens",
    "repositories_url": "https://api.github.com/installation/repositories",
    "html_url": "https://github.com/organizations/github/settings/installations/1",
    "app_id": 1,
    "target_id": 1,
    "target_type": "Organization",
    "permissions": {
      "checks": "write",
      "metadata": "read",
      "contents": "read"
    },
    "events": [
      "push",
      "pull_request"
    ],
    "single_file_name": "config.yaml",
    "has_multiple_single_files": true,
    "single_file_paths": [
      "config.yml",
      ".github/issue_TEMPLATE.md"
    ],
    "repository_selection": "selected",
    "created_at": "2017-07-08T16:18:44-04:00",
    "updated_at": "2017-07-08T16:18:44-04:00",
    "app_slug": "github-actions",
    "suspended_at": null,
    "suspended_by": null
  }
]Get an installation for the authenticated appEnables an authenticated GitHub App to find an installation's information using the installation id.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Get an installation for the authenticated app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get an installation for the authenticated app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioninstallation_id integer RequiredThe unique identifier of the installation.HTTP response status codes for "Get an installation for the authenticated app"Status codeDescription200OK404Resource not foundCode samples for "Get an installation for the authenticated app"Request exampleget/app/installations/{installation_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/installations/1ResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "account": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "access_tokens_url": "https://api.github.com/app/installations/1/access_tokens",
  "repositories_url": "https://api.github.com/installation/repositories",
  "html_url": "https://github.com/organizations/github/settings/installations/1",
  "app_id": 1,
  "target_id": 1,
  "target_type": "Organization",
  "permissions": {
    "checks": "write",
    "metadata": "read",
    "contents": "read"
  },
  "events": [
    "push",
    "pull_request"
  ],
  "single_file_name": "config.yaml",
  "has_multiple_single_files": true,
  "single_file_paths": [
    "config.yml",
    ".github/issue_TEMPLATE.md"
  ],
  "repository_selection": "selected",
  "created_at": "2017-07-08T16:18:44-04:00",
  "updated_at": "2017-07-08T16:18:44-04:00",
  "app_slug": "github-actions",
  "suspended_at": null,
  "suspended_by": null
}Delete an installation for the authenticated appUninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "Suspend an app installation" endpoint.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Delete an installation for the authenticated app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Delete an installation for the authenticated app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioninstallation_id integer RequiredThe unique identifier of the installation.HTTP response status codes for "Delete an installation for the authenticated app"Status codeDescription204No Content404Resource not foundCode samples for "Delete an installation for the authenticated app"Request exampledelete/app/installations/{installation_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/installations/1ResponseStatus: 204Create an installation access token for an appCreates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of 401 - Unauthorized, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access.
Optionally, you can use the repositories or repository_ids body parameters to specify individual repositories that the installation access token can access. If you don't use repositories or repository_ids to grant access to specific repositories, the installation access token will have access to all repositories that the installation was granted access to. The installation access token cannot be granted access to repositories that the installation was not granted access to. Up to 500 repositories can be listed in this manner.
Optionally, use the permissions body parameter to specify the permissions that the installation access token should have. If permissions is not specified, the installation access token will have all of the permissions that were granted to the app. The installation access token cannot be granted permissions that the app was not granted.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Create an installation access token for an app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Create an installation access token for an app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioninstallation_id integer RequiredThe unique identifier of the installation.Body parametersName, Type, Descriptionrepositories array of strings List of repository names that the token should have access torepository_ids array of integers List of repository IDs that the token should have access topermissions object The permissions granted to the user access token.Properties of permissionsName, Type, Descriptionactions string The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.Can be one of: read, write administration string The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.Can be one of: read, write checks string The level of permission to grant the access token for checks on code.Can be one of: read, write codespaces string The level of permission to grant the access token to create, edit, delete, and list Codespaces.Can be one of: read, write contents string The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.Can be one of: read, write dependabot_secrets string The level of permission to grant the access token to manage Dependabot secrets.Can be one of: read, write deployments string The level of permission to grant the access token for deployments and deployment statuses.Can be one of: read, write environments string The level of permission to grant the access token for managing repository environments.Can be one of: read, write issues string The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.Can be one of: read, write metadata string The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.Can be one of: read, write packages string The level of permission to grant the access token for packages published to GitHub Packages.Can be one of: read, write pages string The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.Can be one of: read, write pull_requests string The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.Can be one of: read, write repository_custom_properties string The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.Can be one of: read, write repository_hooks string The level of permission to grant the access token to manage the post-receive hooks for a repository.Can be one of: read, write repository_projects string The level of permission to grant the access token to manage repository projects, columns, and cards.Can be one of: read, write, admin secret_scanning_alerts string The level of permission to grant the access token to view and manage secret scanning alerts.Can be one of: read, write secrets string The level of permission to grant the access token to manage repository secrets.Can be one of: read, write security_events string The level of permission to grant the access token to view and manage security events like code scanning alerts.Can be one of: read, write single_file string The level of permission to grant the access token to manage just a single file.Can be one of: read, write statuses string The level of permission to grant the access token for commit statuses.Can be one of: read, write vulnerability_alerts string The level of permission to grant the access token to manage Dependabot alerts.Can be one of: read, write workflows string The level of permission to grant the access token to update GitHub Actions workflow files.Value: write members string The level of permission to grant the access token for organization teams and members.Can be one of: read, write organization_administration string The level of permission to grant the access token to manage access to an organization.Can be one of: read, write organization_custom_roles string The level of permission to grant the access token for custom repository roles management.Can be one of: read, write organization_custom_org_roles string The level of permission to grant the access token for custom organization roles management.Can be one of: read, write organization_custom_properties string The level of permission to grant the access token for custom property management.Can be one of: read, write, admin organization_copilot_seat_management string The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.Value: write organization_announcement_banners string The level of permission to grant the access token to view and manage announcement banners for an organization.Can be one of: read, write organization_events string The level of permission to grant the access token to view events triggered by an activity in an organization.Value: read organization_hooks string The level of permission to grant the access token to manage the post-receive hooks for an organization.Can be one of: read, write organization_personal_access_tokens string The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.Can be one of: read, write organization_personal_access_token_requests string The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.Can be one of: read, write organization_plan string The level of permission to grant the access token for viewing an organization's plan.Value: read organization_projects string The level of permission to grant the access token to manage organization projects and projects public preview (where available).Can be one of: read, write, admin organization_packages string The level of permission to grant the access token for organization packages published to GitHub Packages.Can be one of: read, write organization_secrets string The level of permission to grant the access token to manage organization secrets.Can be one of: read, write organization_self_hosted_runners string The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.Can be one of: read, write organization_user_blocking string The level of permission to grant the access token to view and manage users blocked by the organization.Can be one of: read, write team_discussions string The level of permission to grant the access token to manage team discussions and related comments.Can be one of: read, write email_addresses string The level of permission to grant the access token to manage the email addresses belonging to a user.Can be one of: read, write followers string The level of permission to grant the access token to manage the followers belonging to a user.Can be one of: read, write git_ssh_keys string The level of permission to grant the access token to manage git SSH keys.Can be one of: read, write gpg_keys string The level of permission to grant the access token to view and manage GPG keys belonging to a user.Can be one of: read, write interaction_limits string The level of permission to grant the access token to view and manage interaction limits on a repository.Can be one of: read, write profile string The level of permission to grant the access token to manage the profile settings belonging to a user.Value: write starring string The level of permission to grant the access token to list and manage repositories a user is starring.Can be one of: read, write HTTP response status codes for "Create an installation access token for an app"Status codeDescription201Created401Requires authentication403Forbidden404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Create an installation access token for an app"Request examplepost/app/installations/{installation_id}/access_tokenscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/installations/1/access_tokens \
  -d '{"repositories":["Hello-World"],"permissions":{"issues":"write","contents":"read"}}'ResponseExample responseResponse schemaStatus: 201{
  "token": "ghs_16C7e42F292c6912E7710c838347Ae178B4a",
  "expires_at": "2016-07-11T22:14:10Z",
  "permissions": {
    "issues": "write",
    "contents": "read"
  },
  "repository_selection": "selected",
  "repositories": [
    {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "clone_url": "https://github.com/octocat/Hello-World.git",
      "mirror_url": "git:git.example.com/octocat/Hello-World",
      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
      "svn_url": "https://svn.github.com/octocat/Hello-World",
      "homepage": "https://github.com",
      "language": null,
      "forks_count": 9,
      "stargazers_count": 80,
      "watchers_count": 80,
      "size": 108,
      "default_branch": "master",
      "open_issues_count": 0,
      "is_template": true,
      "topics": [
        "octocat",
        "atom",
        "electron",
        "api"
      ],
      "has_issues": true,
      "has_projects": true,
      "has_wiki": true,
      "has_pages": false,
      "has_downloads": true,
      "archived": false,
      "disabled": false,
      "visibility": "public",
      "pushed_at": "2011-01-26T19:06:43Z",
      "created_at": "2011-01-26T19:01:12Z",
      "updated_at": "2011-01-26T19:14:43Z",
      "permissions": {
        "admin": false,
        "push": false,
        "pull": true
      },
      "allow_rebase_merge": true,
      "template_repository": null,
      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
      "allow_squash_merge": true,
      "allow_auto_merge": false,
      "delete_branch_on_merge": true,
      "allow_merge_commit": true,
      "subscribers_count": 42,
      "network_count": 0,
      "license": {
        "key": "mit",
        "name": "MIT License",
        "url": "https://api.github.com/licenses/mit",
        "spdx_id": "MIT",
        "node_id": "MDc6TGljZW5zZW1pdA==",
        "html_url": "https://github.com/licenses/mit"
      },
      "forks": 1,
      "open_issues": 1,
      "watchers": 1
    }
  ]
}Suspend an app installationSuspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Suspend an app installation"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Suspend an app installation"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioninstallation_id integer RequiredThe unique identifier of the installation.HTTP response status codes for "Suspend an app installation"Status codeDescription204No Content404Resource not foundCode samples for "Suspend an app installation"Request exampleput/app/installations/{installation_id}/suspendedcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/installations/1/suspendedResponseStatus: 204Unsuspend an app installationRemoves a GitHub App installation suspension.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Unsuspend an app installation"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Unsuspend an app installation"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioninstallation_id integer RequiredThe unique identifier of the installation.HTTP response status codes for "Unsuspend an app installation"Status codeDescription204No Content404Resource not foundCode samples for "Unsuspend an app installation"Request exampledelete/app/installations/{installation_id}/suspendedcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/installations/1/suspendedResponseStatus: 204Create a scoped access tokenUse a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can specify
which repositories the token can access and which permissions are granted to the
token.
Invalid tokens will return 404 NOT FOUND.Basic authentication for "Create a scoped access token"You must use Basic Authentication to use this endpoint. Use the application's client_id as the username and the client_secret as the password.Parameters for "Create a scoped access token"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionclient_id string RequiredThe client ID of the GitHub app.Body parametersName, Type, Descriptionaccess_token string RequiredThe access token used to authenticate to the GitHub API.target string The name of the user or organization to scope the user access token to. Required unless target_id is specified.target_id integer The ID of the user or organization to scope the user access token to. Required unless target is specified.repositories array of strings The list of repository names to scope the user access token to. repositories may not be specified if repository_ids is specified.repository_ids array of integers The list of repository IDs to scope the user access token to. repository_ids may not be specified if repositories is specified.permissions object The permissions granted to the user access token.Properties of permissionsName, Type, Descriptionactions string The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.Can be one of: read, write administration string The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.Can be one of: read, write checks string The level of permission to grant the access token for checks on code.Can be one of: read, write codespaces string The level of permission to grant the access token to create, edit, delete, and list Codespaces.Can be one of: read, write contents string The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.Can be one of: read, write dependabot_secrets string The level of permission to grant the access token to manage Dependabot secrets.Can be one of: read, write deployments string The level of permission to grant the access token for deployments and deployment statuses.Can be one of: read, write environments string The level of permission to grant the access token for managing repository environments.Can be one of: read, write issues string The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.Can be one of: read, write metadata string The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.Can be one of: read, write packages string The level of permission to grant the access token for packages published to GitHub Packages.Can be one of: read, write pages string The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.Can be one of: read, write pull_requests string The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.Can be one of: read, write repository_custom_properties string The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.Can be one of: read, write repository_hooks string The level of permission to grant the access token to manage the post-receive hooks for a repository.Can be one of: read, write repository_projects string The level of permission to grant the access token to manage repository projects, columns, and cards.Can be one of: read, write, admin secret_scanning_alerts string The level of permission to grant the access token to view and manage secret scanning alerts.Can be one of: read, write secrets string The level of permission to grant the access token to manage repository secrets.Can be one of: read, write security_events string The level of permission to grant the access token to view and manage security events like code scanning alerts.Can be one of: read, write single_file string The level of permission to grant the access token to manage just a single file.Can be one of: read, write statuses string The level of permission to grant the access token for commit statuses.Can be one of: read, write vulnerability_alerts string The level of permission to grant the access token to manage Dependabot alerts.Can be one of: read, write workflows string The level of permission to grant the access token to update GitHub Actions workflow files.Value: write members string The level of permission to grant the access token for organization teams and members.Can be one of: read, write organization_administration string The level of permission to grant the access token to manage access to an organization.Can be one of: read, write organization_custom_roles string The level of permission to grant the access token for custom repository roles management.Can be one of: read, write organization_custom_org_roles string The level of permission to grant the access token for custom organization roles management.Can be one of: read, write organization_custom_properties string The level of permission to grant the access token for custom property management.Can be one of: read, write, admin organization_copilot_seat_management string The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.Value: write organization_announcement_banners string The level of permission to grant the access token to view and manage announcement banners for an organization.Can be one of: read, write organization_events string The level of permission to grant the access token to view events triggered by an activity in an organization.Value: read organization_hooks string The level of permission to grant the access token to manage the post-receive hooks for an organization.Can be one of: read, write organization_personal_access_tokens string The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.Can be one of: read, write organization_personal_access_token_requests string The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.Can be one of: read, write organization_plan string The level of permission to grant the access token for viewing an organization's plan.Value: read organization_projects string The level of permission to grant the access token to manage organization projects and projects public preview (where available).Can be one of: read, write, admin organization_packages string The level of permission to grant the access token for organization packages published to GitHub Packages.Can be one of: read, write organization_secrets string The level of permission to grant the access token to manage organization secrets.Can be one of: read, write organization_self_hosted_runners string The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.Can be one of: read, write organization_user_blocking string The level of permission to grant the access token to view and manage users blocked by the organization.Can be one of: read, write team_discussions string The level of permission to grant the access token to manage team discussions and related comments.Can be one of: read, write email_addresses string The level of permission to grant the access token to manage the email addresses belonging to a user.Can be one of: read, write followers string The level of permission to grant the access token to manage the followers belonging to a user.Can be one of: read, write git_ssh_keys string The level of permission to grant the access token to manage git SSH keys.Can be one of: read, write gpg_keys string The level of permission to grant the access token to view and manage GPG keys belonging to a user.Can be one of: read, write interaction_limits string The level of permission to grant the access token to view and manage interaction limits on a repository.Can be one of: read, write profile string The level of permission to grant the access token to manage the profile settings belonging to a user.Value: write starring string The level of permission to grant the access token to list and manage repositories a user is starring.Can be one of: read, write HTTP response status codes for "Create a scoped access token"Status codeDescription200OK401Requires authentication403Forbidden404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Create a scoped access token"Request examplepost/applications/{client_id}/token/scopedcURLJavaScriptCopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -u "<YOUR_CLIENT_ID>:<YOUR_CLIENT_SECRET>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/applications/Iv1.8a61f9b3a7aba766/token/scoped \
  -d '{"access_token":"e72e16c7e42f292c6912e7710c838347ae178b4a","target":"octocat","permissions":{"metadata":"read","issues":"write","contents":"read"}}'ResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "url": "https://api.github.com/authorizations/1",
  "scopes": [],
  "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
  "token_last_eight": "Ae178B4a",
  "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
  "app": {
    "url": "http://my-github-app.com",
    "name": "my github app",
    "client_id": "Iv1.8a61f9b3a7aba766"
  },
  "note": "optional note",
  "note_url": "http://optional/note/url",
  "updated_at": "2011-09-06T20:39:23Z",
  "created_at": "2011-09-06T17:26:27Z",
  "fingerprint": "jklmnop12345678",
  "expires_at": "2011-09-08T17:26:27Z",
  "user": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "installation": {
    "permissions": {
      "metadata": "read",
      "issues": "write",
      "contents": "read"
    },
    "repository_selection": "selected",
    "single_file_name": ".github/workflow.yml",
    "repositories_url": "https://api.github.com/user/repos",
    "account": {
      "login": "octocat",
      "id": 1,
      "node_id": "MDQ6VXNlcjE=",
      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "has_multiple_single_files": false,
    "single_file_paths": []
  }
}Get an appNote

The :app_slug is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., https://github.com/settings/apps/:app_slug).
Fine-grained access tokens for "Get an app"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.This endpoint can be used without authentication if only public resources are requested.Parameters for "Get an app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionapp_slug string RequiredHTTP response status codes for "Get an app"Status codeDescription200OK403Forbidden404Resource not foundCode samples for "Get an app"Request exampleget/apps/{app_slug}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/apps/APP_SLUGResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "slug": "octoapp",
  "client_id": "Iv1.ab1112223334445c",
  "node_id": "MDExOkludGVncmF0aW9uMQ==",
  "owner": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "name": "Octocat App",
  "description": "",
  "external_url": "https://example.com",
  "html_url": "https://github.com/apps/octoapp",
  "created_at": "2017-07-08T16:18:44-04:00",
  "updated_at": "2017-07-08T16:18:44-04:00",
  "permissions": {
    "metadata": "read",
    "contents": "read",
    "issues": "write",
    "single_file": "write"
  },
  "events": [
    "push",
    "pull_request"
  ]
}Get an organization installation for the authenticated appEnables an authenticated GitHub App to find the organization's installation information.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Get an organization installation for the authenticated app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get an organization installation for the authenticated app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get an organization installation for the authenticated app"Status codeDescription200OKCode samples for "Get an organization installation for the authenticated app"Request exampleget/orgs/{org}/installationcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/installationResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "account": {
    "login": "github",
    "id": 1,
    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/orgs/github",
    "html_url": "https://github.com/github",
    "followers_url": "https://api.github.com/users/github/followers",
    "following_url": "https://api.github.com/users/github/following{/other_user}",
    "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github/subscriptions",
    "organizations_url": "https://api.github.com/users/github/orgs",
    "repos_url": "https://api.github.com/orgs/github/repos",
    "events_url": "https://api.github.com/orgs/github/events",
    "received_events_url": "https://api.github.com/users/github/received_events",
    "type": "Organization",
    "site_admin": false
  },
  "repository_selection": "all",
  "access_tokens_url": "https://api.github.com/app/installations/1/access_tokens",
  "repositories_url": "https://api.github.com/installation/repositories",
  "html_url": "https://github.com/organizations/github/settings/installations/1",
  "app_id": 1,
  "client_id": "Iv1.ab1112223334445c",
  "target_id": 1,
  "target_type": "Organization",
  "permissions": {
    "checks": "write",
    "metadata": "read",
    "contents": "read"
  },
  "events": [
    "push",
    "pull_request"
  ],
  "created_at": "2018-02-09T20:51:14Z",
  "updated_at": "2018-02-09T20:51:14Z",
  "single_file_name": "config.yml",
  "has_multiple_single_files": true,
  "single_file_paths": [
    "config.yml",
    ".github/issue_TEMPLATE.md"
  ],
  "app_slug": "github-actions",
  "suspended_at": null,
  "suspended_by": null
}Get a repository installation for the authenticated appEnables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Get a repository installation for the authenticated app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get a repository installation for the authenticated app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.HTTP response status codes for "Get a repository installation for the authenticated app"Status codeDescription200OK301Moved permanently404Resource not foundCode samples for "Get a repository installation for the authenticated app"Request exampleget/repos/{owner}/{repo}/installationcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/installationResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "account": {
    "login": "github",
    "id": 1,
    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/orgs/github",
    "html_url": "https://github.com/github",
    "followers_url": "https://api.github.com/users/github/followers",
    "following_url": "https://api.github.com/users/github/following{/other_user}",
    "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github/subscriptions",
    "organizations_url": "https://api.github.com/users/github/orgs",
    "repos_url": "https://api.github.com/orgs/github/repos",
    "events_url": "https://api.github.com/orgs/github/events",
    "received_events_url": "https://api.github.com/users/github/received_events",
    "type": "Organization",
    "site_admin": false
  },
  "repository_selection": "all",
  "access_tokens_url": "https://api.github.com/app/installations/1/access_tokens",
  "repositories_url": "https://api.github.com/installation/repositories",
  "html_url": "https://github.com/organizations/github/settings/installations/1",
  "app_id": 1,
  "client_id": "Iv1.ab1112223334445c",
  "target_id": 1,
  "target_type": "Organization",
  "permissions": {
    "checks": "write",
    "metadata": "read",
    "contents": "read"
  },
  "events": [
    "push",
    "pull_request"
  ],
  "created_at": "2018-02-09T20:51:14Z",
  "updated_at": "2018-02-09T20:51:14Z",
  "single_file_name": "config.yml",
  "has_multiple_single_files": true,
  "single_file_paths": [
    "config.yml",
    ".github/issue_TEMPLATE.md"
  ],
  "app_slug": "github-actions",
  "suspended_at": null,
  "suspended_by": null
}Get a user installation for the authenticated appEnables an authenticated GitHub App to find the user’s installation information.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Get a user installation for the authenticated app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get a user installation for the authenticated app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.HTTP response status codes for "Get a user installation for the authenticated app"Status codeDescription200OKCode samples for "Get a user installation for the authenticated app"Request exampleget/users/{username}/installationcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/installationResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "account": {
    "login": "github",
    "id": 1,
    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/orgs/github",
    "html_url": "https://github.com/github",
    "followers_url": "https://api.github.com/users/github/followers",
    "following_url": "https://api.github.com/users/github/following{/other_user}",
    "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/github/subscriptions",
    "organizations_url": "https://api.github.com/users/github/orgs",
    "repos_url": "https://api.github.com/orgs/github/repos",
    "events_url": "https://api.github.com/orgs/github/events",
    "received_events_url": "https://api.github.com/users/github/received_events",
    "type": "Organization",
    "site_admin": false
  },
  "repository_selection": "all",
  "access_tokens_url": "https://api.github.com/app/installations/1/access_tokens",
  "repositories_url": "https://api.github.com/installation/repositories",
  "html_url": "https://github.com/organizations/github/settings/installations/1",
  "app_id": 1,
  "client_id": "Iv1.ab1112223334445c",
  "target_id": 1,
  "target_type": "Organization",
  "permissions": {
    "checks": "write",
    "metadata": "read",
    "contents": "read"
  },
  "events": [
    "push",
    "pull_request"
  ],
  "created_at": "2018-02-09T20:51:14Z",
  "updated_at": "2018-02-09T20:51:14Z",
  "single_file_name": "config.yml",
  "has_multiple_single_files": true,
  "single_file_paths": [
    "config.yml",
    ".github/issue_TEMPLATE.md"
  ],
  "app_slug": "github-actions",
  "suspended_at": null,
  "suspended_by": null
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Apps/InstallationsREST API endpoints for GitHub App installationsUse the REST API to get information about GitHub App installations and perform actions within those installations.About GitHub App installations
A GitHub App installation refers to any user or organization account that has installed the app. For information on how to authenticate as an installation and limit access to specific repositories, see Authenticating as a GitHub App installation.
To list all GitHub App installations for an organization, see REST API endpoints for organizations.List repositories accessible to the app installationList repositories that an app installation can access.Fine-grained access tokens for "List repositories accessible to the app installation"This endpoint works with the following fine-grained token types:GitHub App installation access tokensThe fine-grained token does not require any permissions.This endpoint can be used without authentication if only public resources are requested.Parameters for "List repositories accessible to the app installation"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repositories accessible to the app installation"Status codeDescription200OK304Not modified401Requires authentication403ForbiddenCode samples for "List repositories accessible to the app installation"Request exampleget/installation/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/installation/repositoriesResponseExample responseResponse schemaStatus: 200{
  "total_count": 1,
  "repositories": [
    {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "clone_url": "https://github.com/octocat/Hello-World.git",
      "mirror_url": "git:git.example.com/octocat/Hello-World",
      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
      "svn_url": "https://svn.github.com/octocat/Hello-World",
      "homepage": "https://github.com",
      "language": null,
      "forks_count": 9,
      "stargazers_count": 80,
      "watchers_count": 80,
      "size": 108,
      "default_branch": "master",
      "open_issues_count": 0,
      "is_template": true,
      "topics": [
        "octocat",
        "atom",
        "electron",
        "api"
      ],
      "has_issues": true,
      "has_projects": true,
      "has_wiki": true,
      "has_pages": false,
      "has_downloads": true,
      "archived": false,
      "disabled": false,
      "visibility": "public",
      "pushed_at": "2011-01-26T19:06:43Z",
      "created_at": "2011-01-26T19:01:12Z",
      "updated_at": "2011-01-26T19:14:43Z",
      "allow_rebase_merge": true,
      "template_repository": null,
      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
      "allow_squash_merge": true,
      "allow_auto_merge": false,
      "delete_branch_on_merge": true,
      "allow_merge_commit": true,
      "subscribers_count": 42,
      "network_count": 0,
      "license": {
        "key": "mit",
        "name": "MIT License",
        "url": "https://api.github.com/licenses/mit",
        "spdx_id": "MIT",
        "node_id": "MDc6TGljZW5zZW1pdA==",
        "html_url": "https://github.com/licenses/mit"
      },
      "forks": 1,
      "open_issues": 1,
      "watchers": 1
    }
  ]
}Revoke an installation access tokenRevokes the installation token you're using to authenticate as an installation and access this endpoint.
Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "Create an installation access token for an app" endpoint.Fine-grained access tokens for "Revoke an installation access token"This endpoint works with the following fine-grained token types:GitHub App installation access tokensThe fine-grained token does not require any permissions.This endpoint can be used without authentication if only public resources are requested.HTTP response status codes for "Revoke an installation access token"Status codeDescription204No ContentCode samples for "Revoke an installation access token"Request exampledelete/installation/tokencURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/installation/tokenResponseStatus: 204List app installations accessible to the user access tokenLists installations of your GitHub App that the authenticated user has explicit permission (:read, :write, or :admin) to access.
The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
You can find the permissions for the installation under the permissions key.Fine-grained access tokens for "List app installations accessible to the user access token"This endpoint works with the following fine-grained token types:GitHub App user access tokensThe fine-grained token does not require any permissions.Parameters for "List app installations accessible to the user access token"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List app installations accessible to the user access token"Status codeDescription200You can find the permissions for the installation under the permissions key.304Not modified401Requires authentication403ForbiddenCode samples for "List app installations accessible to the user access token"Request exampleget/user/installationscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/installationsYou can find the permissions for the installation under the permissions key.Example responseResponse schemaStatus: 200{
  "total_count": 2,
  "installations": [
    {
      "id": 1,
      "account": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "access_tokens_url": "https://api.github.com/app/installations/1/access_tokens",
      "repositories_url": "https://api.github.com/installation/repositories",
      "html_url": "https://github.com/organizations/github/settings/installations/1",
      "app_id": 1,
      "target_id": 1,
      "target_type": "Organization",
      "permissions": {
        "checks": "write",
        "metadata": "read",
        "contents": "read"
      },
      "events": [
        "push",
        "pull_request"
      ],
      "single_file_name": "config.yaml",
      "has_multiple_single_files": true,
      "single_file_paths": [
        "config.yml",
        ".github/issue_TEMPLATE.md"
      ],
      "repository_selection": "all",
      "created_at": "2017-07-08T16:18:44-04:00",
      "updated_at": "2017-07-08T16:18:44-04:00",
      "app_slug": "github-actions",
      "suspended_at": null,
      "suspended_by": null
    },
    {
      "id": 3,
      "account": {
        "login": "octocat",
        "id": 2,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "access_tokens_url": "https://api.github.com/app/installations/1/access_tokens",
      "repositories_url": "https://api.github.com/installation/repositories",
      "html_url": "https://github.com/organizations/github/settings/installations/1",
      "app_id": 1,
      "target_id": 1,
      "target_type": "Organization",
      "permissions": {
        "checks": "write",
        "metadata": "read",
        "contents": "read"
      },
      "events": [
        "push",
        "pull_request"
      ],
      "single_file_name": "config.yaml",
      "has_multiple_single_files": true,
      "single_file_paths": [
        "config.yml",
        ".github/issue_TEMPLATE.md"
      ],
      "repository_selection": "all",
      "created_at": "2017-07-08T16:18:44-04:00",
      "updated_at": "2017-07-08T16:18:44-04:00",
      "app_slug": "github-actions",
      "suspended_at": null,
      "suspended_by": null
    }
  ]
}List repositories accessible to the user access tokenList repositories that the authenticated user has explicit permission (:read, :write, or :admin) to access for an installation.
The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
The access the user has to each repository is included in the hash under the permissions key.Fine-grained access tokens for "List repositories accessible to the user access token"This endpoint works with the following fine-grained token types:GitHub App user access tokensThe fine-grained token must have the following permission set:"Metadata" repository permissions (read)Parameters for "List repositories accessible to the user access token"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioninstallation_id integer RequiredThe unique identifier of the installation.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List repositories accessible to the user access token"Status codeDescription200The access the user has to each repository is included in the hash under the permissions key.304Not modified403Forbidden404Resource not foundCode samples for "List repositories accessible to the user access token"Request exampleget/user/installations/{installation_id}/repositoriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/installations/1/repositoriesThe access the user has to each repository is included in the hash under the permissions key.Example responseResponse schemaStatus: 200{
  "total_count": 1,
  "repositories": [
    {
      "id": 1296269,
      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
      "name": "Hello-World",
      "full_name": "octocat/Hello-World",
      "owner": {
        "login": "octocat",
        "id": 1,
        "node_id": "MDQ6VXNlcjE=",
        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
        "gravatar_id": "",
        "url": "https://api.github.com/users/octocat",
        "html_url": "https://github.com/octocat",
        "followers_url": "https://api.github.com/users/octocat/followers",
        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
        "organizations_url": "https://api.github.com/users/octocat/orgs",
        "repos_url": "https://api.github.com/users/octocat/repos",
        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
        "received_events_url": "https://api.github.com/users/octocat/received_events",
        "type": "User",
        "site_admin": false
      },
      "private": false,
      "html_url": "https://github.com/octocat/Hello-World",
      "description": "This your first repo!",
      "fork": false,
      "url": "https://api.github.com/repos/octocat/Hello-World",
      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
      "git_url": "git:github.com/octocat/Hello-World.git",
      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
      "ssh_url": "git@github.com:octocat/Hello-World.git",
      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
      "clone_url": "https://github.com/octocat/Hello-World.git",
      "mirror_url": "git:git.example.com/octocat/Hello-World",
      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
      "svn_url": "https://svn.github.com/octocat/Hello-World",
      "homepage": "https://github.com",
      "language": null,
      "forks_count": 9,
      "stargazers_count": 80,
      "watchers_count": 80,
      "size": 108,
      "default_branch": "master",
      "open_issues_count": 0,
      "is_template": true,
      "topics": [
        "octocat",
        "atom",
        "electron",
        "api"
      ],
      "has_issues": true,
      "has_projects": true,
      "has_wiki": true,
      "has_pages": false,
      "has_downloads": true,
      "archived": false,
      "disabled": false,
      "visibility": "public",
      "pushed_at": "2011-01-26T19:06:43Z",
      "created_at": "2011-01-26T19:01:12Z",
      "updated_at": "2011-01-26T19:14:43Z",
      "permissions": {
        "admin": false,
        "push": false,
        "pull": true
      },
      "allow_rebase_merge": true,
      "template_repository": null,
      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
      "allow_squash_merge": true,
      "allow_auto_merge": false,
      "delete_branch_on_merge": true,
      "allow_merge_commit": true,
      "subscribers_count": 42,
      "network_count": 0,
      "license": {
        "key": "mit",
        "name": "MIT License",
        "url": "https://api.github.com/licenses/mit",
        "spdx_id": "MIT",
        "node_id": "MDc6TGljZW5zZW1pdA==",
        "html_url": "https://github.com/licenses/mit"
      },
      "forks": 1,
      "open_issues": 1,
      "watchers": 1
    }
  ]
}Add a repository to an app installationAdd a single repository to an installation. The authenticated user must have admin access to the repository.
This endpoint only works for PATs (classic) with the repo scope.Fine-grained access tokens for "Add a repository to an app installation"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Add a repository to an app installation"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioninstallation_id integer RequiredThe unique identifier of the installation.repository_id integer RequiredThe unique identifier of the repository.HTTP response status codes for "Add a repository to an app installation"Status codeDescription204No Content304Not modified403Forbidden404Resource not foundCode samples for "Add a repository to an app installation"Request exampleput/user/installations/{installation_id}/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PUT \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/installations/1/repositories/REPOSITORY_IDResponseStatus: 204Remove a repository from an app installationRemove a single repository from an installation. The authenticated user must have admin access to the repository. The installation must have the repository_selection of selected.
This endpoint only works for PATs (classic) with the repo scope.Fine-grained access tokens for "Remove a repository from an app installation"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Remove a repository from an app installation"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptioninstallation_id integer RequiredThe unique identifier of the installation.repository_id integer RequiredThe unique identifier of the repository.HTTP response status codes for "Remove a repository from an app installation"Status codeDescription204No Content304Not modified403Forbidden404Resource not found422Returned when the application is installed on all repositories in the organization, or if this request would remove the last repository that the application has access to in the organization.Code samples for "Remove a repository from an app installation"Request exampledelete/user/installations/{installation_id}/repositories/{repository_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/installations/1/repositories/REPOSITORY_IDResponseStatus: 204\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Apps/MarketplaceREST API endpoints for GitHub MarketplaceUse the REST API to interact with GitHub MarketplaceAbout GitHub Marketplace
For more information about GitHub Marketplace, see GitHub Marketplace.
These endpoints allow you to see which customers are using a pricing plan, see a customer's purchases, and see if an account has an active subscription.
Testing with stubbed endpoints
You can test your GitHub App with stubbed data. Stubbed data is hard-coded, fake data that will not change based on actual subscriptions.
To test with stubbed data, use a stubbed endpoint in place of its production counterpart. This allows you to test whether the API logic succeeds before listing GitHub Apps on GitHub Marketplace.
Make sure to replace stubbed endpoints with production endpoints before deploying your GitHub App.Get a subscription plan for an accountShows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
GitHub Apps must use a JWT to access this endpoint. OAuth apps must use basic authentication with their client ID and client secret to access this endpoint.Fine-grained access tokens for "Get a subscription plan for an account"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get a subscription plan for an account"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionaccount_id integer Requiredaccount_id parameterHTTP response status codes for "Get a subscription plan for an account"Status codeDescription200OK401Requires authentication404Not Found when the account has not purchased the listingCode samples for "Get a subscription plan for an account"Request exampleget/marketplace_listing/accounts/{account_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/marketplace_listing/accounts/ACCOUNT_IDResponseExample responseResponse schemaStatus: 200{
  "url": "https://api.github.com/orgs/github",
  "type": "Organization",
  "id": 4,
  "login": "github",
  "organization_billing_email": "billing@github.com",
  "email": "billing@github.com",
  "marketplace_pending_change": {
    "effective_date": "2017-11-11T00:00:00Z",
    "unit_count": null,
    "id": 77,
    "plan": {
      "url": "https://api.github.com/marketplace_listing/plans/1111",
      "accounts_url": "https://api.github.com/marketplace_listing/plans/1111/accounts",
      "id": 1111,
      "number": 2,
      "name": "Startup",
      "description": "A professional-grade CI solution",
      "monthly_price_in_cents": 699,
      "yearly_price_in_cents": 7870,
      "price_model": "FLAT_RATE",
      "has_free_trial": true,
      "state": "published",
      "unit_name": null,
      "bullets": [
        "Up to 10 private repositories",
        "3 concurrent builds"
      ]
    }
  },
  "marketplace_purchase": {
    "billing_cycle": "monthly",
    "next_billing_date": "2017-11-11T00:00:00Z",
    "unit_count": null,
    "on_free_trial": true,
    "free_trial_ends_on": "2017-11-11T00:00:00Z",
    "updated_at": "2017-11-02T01:12:12Z",
    "plan": {
      "url": "https://api.github.com/marketplace_listing/plans/1313",
      "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
      "id": 1313,
      "number": 3,
      "name": "Pro",
      "description": "A professional-grade CI solution",
      "monthly_price_in_cents": 1099,
      "yearly_price_in_cents": 11870,
      "price_model": "FLAT_RATE",
      "has_free_trial": true,
      "unit_name": null,
      "state": "published",
      "bullets": [
        "Up to 25 private repositories",
        "11 concurrent builds"
      ]
    }
  }
}List plansLists all plans that are part of your GitHub Marketplace listing.
GitHub Apps must use a JWT to access this endpoint. OAuth apps must use basic authentication with their client ID and client secret to access this endpoint.Fine-grained access tokens for "List plans"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List plans"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List plans"Status codeDescription200OK401Requires authentication404Resource not foundCode samples for "List plans"Request exampleget/marketplace_listing/planscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/marketplace_listing/plansResponseExample responseResponse schemaStatus: 200[
  {
    "url": "https://api.github.com/marketplace_listing/plans/1313",
    "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
    "id": 1313,
    "number": 3,
    "name": "Pro",
    "description": "A professional-grade CI solution",
    "monthly_price_in_cents": 1099,
    "yearly_price_in_cents": 11870,
    "price_model": "FLAT_RATE",
    "has_free_trial": true,
    "unit_name": null,
    "state": "published",
    "bullets": [
      "Up to 25 private repositories",
      "11 concurrent builds"
    ]
  }
]List accounts for a planReturns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
GitHub Apps must use a JWT to access this endpoint. OAuth apps must use basic authentication with their client ID and client secret to access this endpoint.Fine-grained access tokens for "List accounts for a plan"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List accounts for a plan"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionplan_id integer RequiredThe unique identifier of the plan.Query parametersName, Type, Descriptionsort string The property to sort the results by.Default: createdCan be one of: created, updated direction string To return the oldest accounts first, set to asc. Ignored without the sort parameter.Can be one of: asc, desc per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List accounts for a plan"Status codeDescription200OK401Requires authentication404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "List accounts for a plan"Request exampleget/marketplace_listing/plans/{plan_id}/accountscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/marketplace_listing/plans/PLAN_ID/accountsResponseExample responseResponse schemaStatus: 200[
  {
    "url": "https://api.github.com/orgs/github",
    "type": "Organization",
    "id": 4,
    "login": "github",
    "organization_billing_email": "billing@github.com",
    "marketplace_pending_change": {
      "effective_date": "2017-11-11T00:00:00Z",
      "unit_count": null,
      "id": 77,
      "plan": {
        "url": "https://api.github.com/marketplace_listing/plans/1111",
        "accounts_url": "https://api.github.com/marketplace_listing/plans/1111/accounts",
        "id": 1111,
        "number": 2,
        "name": "Startup",
        "description": "A professional-grade CI solution",
        "monthly_price_in_cents": 699,
        "yearly_price_in_cents": 7870,
        "price_model": "FLAT_RATE",
        "has_free_trial": true,
        "state": "published",
        "unit_name": null,
        "bullets": [
          "Up to 10 private repositories",
          "3 concurrent builds"
        ]
      }
    },
    "marketplace_purchase": {
      "billing_cycle": "monthly",
      "next_billing_date": "2017-11-11T00:00:00Z",
      "unit_count": null,
      "on_free_trial": true,
      "free_trial_ends_on": "2017-11-11T00:00:00Z",
      "updated_at": "2017-11-02T01:12:12Z",
      "plan": {
        "url": "https://api.github.com/marketplace_listing/plans/1313",
        "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
        "id": 1313,
        "number": 3,
        "name": "Pro",
        "description": "A professional-grade CI solution",
        "monthly_price_in_cents": 1099,
        "yearly_price_in_cents": 11870,
        "price_model": "FLAT_RATE",
        "has_free_trial": true,
        "unit_name": null,
        "state": "published",
        "bullets": [
          "Up to 25 private repositories",
          "11 concurrent builds"
        ]
      }
    }
  }
]Get a subscription plan for an account (stubbed)Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
GitHub Apps must use a JWT to access this endpoint. OAuth apps must use basic authentication with their client ID and client secret to access this endpoint.Fine-grained access tokens for "Get a subscription plan for an account (stubbed)"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get a subscription plan for an account (stubbed)"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionaccount_id integer Requiredaccount_id parameterHTTP response status codes for "Get a subscription plan for an account (stubbed)"Status codeDescription200OK401Requires authentication404Not Found when the account has not purchased the listingCode samples for "Get a subscription plan for an account (stubbed)"Request exampleget/marketplace_listing/stubbed/accounts/{account_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/marketplace_listing/stubbed/accounts/ACCOUNT_IDResponseExample responseResponse schemaStatus: 200{
  "url": "https://api.github.com/orgs/github",
  "type": "Organization",
  "id": 4,
  "login": "github",
  "organization_billing_email": "billing@github.com",
  "email": "billing@github.com",
  "marketplace_pending_change": {
    "effective_date": "2017-11-11T00:00:00Z",
    "unit_count": null,
    "id": 77,
    "plan": {
      "url": "https://api.github.com/marketplace_listing/plans/1111",
      "accounts_url": "https://api.github.com/marketplace_listing/plans/1111/accounts",
      "id": 1111,
      "number": 2,
      "name": "Startup",
      "description": "A professional-grade CI solution",
      "monthly_price_in_cents": 699,
      "yearly_price_in_cents": 7870,
      "price_model": "FLAT_RATE",
      "has_free_trial": true,
      "state": "published",
      "unit_name": null,
      "bullets": [
        "Up to 10 private repositories",
        "3 concurrent builds"
      ]
    }
  },
  "marketplace_purchase": {
    "billing_cycle": "monthly",
    "next_billing_date": "2017-11-11T00:00:00Z",
    "unit_count": null,
    "on_free_trial": true,
    "free_trial_ends_on": "2017-11-11T00:00:00Z",
    "updated_at": "2017-11-02T01:12:12Z",
    "plan": {
      "url": "https://api.github.com/marketplace_listing/plans/1313",
      "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
      "id": 1313,
      "number": 3,
      "name": "Pro",
      "description": "A professional-grade CI solution",
      "monthly_price_in_cents": 1099,
      "yearly_price_in_cents": 11870,
      "price_model": "FLAT_RATE",
      "has_free_trial": true,
      "unit_name": null,
      "state": "published",
      "bullets": [
        "Up to 25 private repositories",
        "11 concurrent builds"
      ]
    }
  }
}List plans (stubbed)Lists all plans that are part of your GitHub Marketplace listing.
GitHub Apps must use a JWT to access this endpoint. OAuth apps must use basic authentication with their client ID and client secret to access this endpoint.Fine-grained access tokens for "List plans (stubbed)"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List plans (stubbed)"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List plans (stubbed)"Status codeDescription200OK401Requires authenticationCode samples for "List plans (stubbed)"Request exampleget/marketplace_listing/stubbed/planscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/marketplace_listing/stubbed/plansResponseExample responseResponse schemaStatus: 200[
  {
    "url": "https://api.github.com/marketplace_listing/plans/1313",
    "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
    "id": 1313,
    "number": 3,
    "name": "Pro",
    "description": "A professional-grade CI solution",
    "monthly_price_in_cents": 1099,
    "yearly_price_in_cents": 11870,
    "price_model": "FLAT_RATE",
    "has_free_trial": true,
    "unit_name": null,
    "state": "published",
    "bullets": [
      "Up to 25 private repositories",
      "11 concurrent builds"
    ]
  }
]List accounts for a plan (stubbed)Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
GitHub Apps must use a JWT to access this endpoint. OAuth apps must use basic authentication with their client ID and client secret to access this endpoint.Fine-grained access tokens for "List accounts for a plan (stubbed)"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List accounts for a plan (stubbed)"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionplan_id integer RequiredThe unique identifier of the plan.Query parametersName, Type, Descriptionsort string The property to sort the results by.Default: createdCan be one of: created, updated direction string To return the oldest accounts first, set to asc. Ignored without the sort parameter.Can be one of: asc, desc per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List accounts for a plan (stubbed)"Status codeDescription200OK401Requires authenticationCode samples for "List accounts for a plan (stubbed)"Request exampleget/marketplace_listing/stubbed/plans/{plan_id}/accountscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/marketplace_listing/stubbed/plans/PLAN_ID/accountsResponseExample responseResponse schemaStatus: 200[
  {
    "url": "https://api.github.com/orgs/github",
    "type": "Organization",
    "id": 4,
    "login": "github",
    "organization_billing_email": "billing@github.com",
    "marketplace_pending_change": {
      "effective_date": "2017-11-11T00:00:00Z",
      "unit_count": null,
      "id": 77,
      "plan": {
        "url": "https://api.github.com/marketplace_listing/plans/1111",
        "accounts_url": "https://api.github.com/marketplace_listing/plans/1111/accounts",
        "id": 1111,
        "number": 2,
        "name": "Startup",
        "description": "A professional-grade CI solution",
        "monthly_price_in_cents": 699,
        "yearly_price_in_cents": 7870,
        "price_model": "FLAT_RATE",
        "has_free_trial": true,
        "state": "published",
        "unit_name": null,
        "bullets": [
          "Up to 10 private repositories",
          "3 concurrent builds"
        ]
      }
    },
    "marketplace_purchase": {
      "billing_cycle": "monthly",
      "next_billing_date": "2017-11-11T00:00:00Z",
      "unit_count": null,
      "on_free_trial": true,
      "free_trial_ends_on": "2017-11-11T00:00:00Z",
      "updated_at": "2017-11-02T01:12:12Z",
      "plan": {
        "url": "https://api.github.com/marketplace_listing/plans/1313",
        "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
        "id": 1313,
        "number": 3,
        "name": "Pro",
        "description": "A professional-grade CI solution",
        "monthly_price_in_cents": 1099,
        "yearly_price_in_cents": 11870,
        "price_model": "FLAT_RATE",
        "has_free_trial": true,
        "unit_name": null,
        "state": "published",
        "bullets": [
          "Up to 25 private repositories",
          "11 concurrent builds"
        ]
      }
    }
  }
]List subscriptions for the authenticated userLists the active subscriptions for the authenticated user.Fine-grained access tokens for "List subscriptions for the authenticated user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List subscriptions for the authenticated user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List subscriptions for the authenticated user"Status codeDescription200OK304Not modified401Requires authentication404Resource not foundCode samples for "List subscriptions for the authenticated user"Request exampleget/user/marketplace_purchasescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/marketplace_purchasesResponseExample responseResponse schemaStatus: 200[
  {
    "billing_cycle": "monthly",
    "next_billing_date": "2017-11-11T00:00:00Z",
    "unit_count": null,
    "on_free_trial": true,
    "free_trial_ends_on": "2017-11-11T00:00:00Z",
    "updated_at": "2017-11-02T01:12:12Z",
    "account": {
      "login": "github",
      "id": 4,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
      "url": "https://api.github.com/orgs/github",
      "email": null,
      "organization_billing_email": "billing@github.com",
      "type": "Organization"
    },
    "plan": {
      "url": "https://api.github.com/marketplace_listing/plans/1313",
      "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
      "id": 1313,
      "number": 3,
      "name": "Pro",
      "description": "A professional-grade CI solution",
      "monthly_price_in_cents": 1099,
      "yearly_price_in_cents": 11870,
      "price_model": "FLAT_RATE",
      "has_free_trial": true,
      "unit_name": null,
      "state": "published",
      "bullets": [
        "Up to 25 private repositories",
        "11 concurrent builds"
      ]
    }
  }
]List subscriptions for the authenticated user (stubbed)Lists the active subscriptions for the authenticated user.Fine-grained access tokens for "List subscriptions for the authenticated user (stubbed)"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token does not require any permissions.Parameters for "List subscriptions for the authenticated user (stubbed)"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List subscriptions for the authenticated user (stubbed)"Status codeDescription200OK304Not modified401Requires authenticationCode samples for "List subscriptions for the authenticated user (stubbed)"Request exampleget/user/marketplace_purchases/stubbedcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/user/marketplace_purchases/stubbedResponseExample responseResponse schemaStatus: 200[
  {
    "billing_cycle": "monthly",
    "next_billing_date": "2017-11-11T00:00:00Z",
    "unit_count": null,
    "on_free_trial": true,
    "free_trial_ends_on": "2017-11-11T00:00:00Z",
    "updated_at": "2017-11-02T01:12:12Z",
    "account": {
      "login": "github",
      "id": 4,
      "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
      "url": "https://api.github.com/orgs/github",
      "email": null,
      "organization_billing_email": "billing@github.com",
      "type": "Organization"
    },
    "plan": {
      "url": "https://api.github.com/marketplace_listing/plans/1313",
      "accounts_url": "https://api.github.com/marketplace_listing/plans/1313/accounts",
      "id": 1313,
      "number": 3,
      "name": "Pro",
      "description": "A professional-grade CI solution",
      "monthly_price_in_cents": 1099,
      "yearly_price_in_cents": 11870,
      "price_model": "FLAT_RATE",
      "has_free_trial": true,
      "unit_name": null,
      "state": "published",
      "bullets": [
        "Up to 25 private repositories",
        "11 concurrent builds"
      ]
    }
  }
]\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Apps/OAuth authorizationsREST API endpoints for OAuth authorizationsUse the REST API to interact with OAuth apps and OAuth authorizations of GitHub AppsAbout OAuth apps and OAuth authorizations of GitHub Apps
You can use these endpoints to manage the OAuth tokens that OAuth apps or GitHub Apps use to access people's accounts on GitHub.
Tokens for OAuth apps have the prefix gho_, while OAuth tokens for GitHub Apps, used for authenticating on behalf of the user, have the prefix ghu_. You can use the following endpoints for both types of OAuth tokens.Delete an app authorizationOAuth and GitHub application owners can revoke a grant for their application and a specific user. You must provide a valid OAuth access_token as an input parameter and the grant for the token's owner will be deleted.
Deleting an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on the application authorizations settings screen within GitHub.Basic authentication for "Delete an app authorization"You must use Basic Authentication to use this endpoint. Use the application's client_id as the username and the client_secret as the password.Parameters for "Delete an app authorization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionclient_id string RequiredThe client ID of the GitHub app.Body parametersName, Type, Descriptionaccess_token string RequiredThe OAuth access token used to authenticate to the GitHub API.HTTP response status codes for "Delete an app authorization"Status codeDescription204No Content422Validation failed, or the endpoint has been spammed.Code samples for "Delete an app authorization"Request exampledelete/applications/{client_id}/grantcURLJavaScriptCopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -u "<YOUR_CLIENT_ID>:<YOUR_CLIENT_SECRET>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/applications/Iv1.8a61f9b3a7aba766/grant \
  -d '{"access_token":"e72e16c7e42f292c6912e7710c838347ae178b4a"}'ResponseStatus: 204Check a tokenOAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. Invalid tokens will return 404 NOT FOUND.Basic authentication for "Check a token"You must use Basic Authentication to use this endpoint. Use the application's client_id as the username and the client_secret as the password.Parameters for "Check a token"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionclient_id string RequiredThe client ID of the GitHub app.Body parametersName, Type, Descriptionaccess_token string RequiredThe access_token of the OAuth or GitHub application.HTTP response status codes for "Check a token"Status codeDescription200OK404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Check a token"Request examplepost/applications/{client_id}/tokencURLJavaScriptCopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -u "<YOUR_CLIENT_ID>:<YOUR_CLIENT_SECRET>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/applications/Iv1.8a61f9b3a7aba766/token \
  -d '{"access_token":"e72e16c7e42f292c6912e7710c838347ae178b4a"}'ResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "url": "https://api.github.com/authorizations/1",
  "scopes": [
    "public_repo",
    "user"
  ],
  "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
  "token_last_eight": "Ae178B4a",
  "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
  "app": {
    "url": "http://my-github-app.com",
    "name": "my github app",
    "client_id": "Iv1.8a61f9b3a7aba766"
  },
  "note": "optional note",
  "note_url": "http://optional/note/url",
  "updated_at": "2011-09-06T20:39:23Z",
  "created_at": "2011-09-06T17:26:27Z",
  "fingerprint": "jklmnop12345678",
  "expires_at": "2011-09-08T17:26:27Z",
  "user": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  }
}Reset a tokenOAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. Invalid tokens will return 404 NOT FOUND.Basic authentication for "Reset a token"You must use Basic Authentication to use this endpoint. Use the application's client_id as the username and the client_secret as the password.Parameters for "Reset a token"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionclient_id string RequiredThe client ID of the GitHub app.Body parametersName, Type, Descriptionaccess_token string RequiredThe access_token of the OAuth or GitHub application.HTTP response status codes for "Reset a token"Status codeDescription200OK422Validation failed, or the endpoint has been spammed.Code samples for "Reset a token"Request examplepatch/applications/{client_id}/tokencURLJavaScriptCopy to clipboard curl request examplecurl -L \
  -X PATCH \
  -H "Accept: application/vnd.github+json" \
  -u "<YOUR_CLIENT_ID>:<YOUR_CLIENT_SECRET>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/applications/Iv1.8a61f9b3a7aba766/token \
  -d '{"access_token":"e72e16c7e42f292c6912e7710c838347ae178b4a"}'ResponseExample responseResponse schemaStatus: 200{
  "id": 1,
  "url": "https://api.github.com/authorizations/1",
  "scopes": [
    "public_repo",
    "user"
  ],
  "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
  "token_last_eight": "Ae178B4a",
  "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
  "app": {
    "url": "http://my-github-app.com",
    "name": "my github app",
    "client_id": "Iv1.8a61f9b3a7aba766"
  },
  "note": "optional note",
  "note_url": "http://optional/note/url",
  "updated_at": "2011-09-06T20:39:23Z",
  "created_at": "2011-09-06T17:26:27Z",
  "fingerprint": "jklmnop12345678",
  "expires_at": "2011-09-08T17:26:27Z",
  "user": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  }
}Delete an app tokenOAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an OAuth authorization.Basic authentication for "Delete an app token"You must use Basic Authentication to use this endpoint. Use the application's client_id as the username and the client_secret as the password.Parameters for "Delete an app token"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionclient_id string RequiredThe client ID of the GitHub app.Body parametersName, Type, Descriptionaccess_token string RequiredThe OAuth access token used to authenticate to the GitHub API.HTTP response status codes for "Delete an app token"Status codeDescription204No Content422Validation failed, or the endpoint has been spammed.Code samples for "Delete an app token"Request exampledelete/applications/{client_id}/tokencURLJavaScriptCopy to clipboard curl request examplecurl -L \
  -X DELETE \
  -H "Accept: application/vnd.github+json" \
  -u "<YOUR_CLIENT_ID>:<YOUR_CLIENT_SECRET>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/applications/Iv1.8a61f9b3a7aba766/token \
  -d '{"access_token":"e72e16c7e42f292c6912e7710c838347ae178b4a"}'ResponseStatus: 204\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Apps/WebhooksREST API endpoints for GitHub App webhooksUse the REST API to interact with webhooks for OAuth appsAbout webhooks for GitHub Apps
A GitHub App's webhook allows your server to receive HTTP POST payloads whenever certain events happen for a GitHub App. For more information, see Webhooks documentation and Using webhooks with GitHub Apps.Get a webhook configuration for an appReturns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "Creating a GitHub App."
You must use a JWT to access this endpoint.Fine-grained access tokens for "Get a webhook configuration for an app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.HTTP response status codes for "Get a webhook configuration for an app"Status codeDescription200OKCode samples for "Get a webhook configuration for an app"Request exampleget/app/hook/configcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/hook/configResponseExample responseResponse schemaStatus: 200{
  "content_type": "json",
  "insecure_ssl": "0",
  "secret": "********",
  "url": "https://example.com/webhook"
}Update a webhook configuration for an appUpdates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "Creating a GitHub App."
You must use a JWT to access this endpoint.Fine-grained access tokens for "Update a webhook configuration for an app"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Update a webhook configuration for an app"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Body parametersName, Type, Descriptionurl string The URL to which the payloads will be delivered.content_type string The media type used to serialize the payloads. Supported values include json and form. The default is form.secret string If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers.insecure_ssl string or number Determines whether the SSL certificate of the host for url will be verified when delivering payloads. Supported values include 0 (verification is performed) and 1 (verification is not performed). The default is 0. We strongly recommend not setting this to 1 as you are subject to man-in-the-middle and other attacks.HTTP response status codes for "Update a webhook configuration for an app"Status codeDescription200OKCode samples for "Update a webhook configuration for an app"Request examplepatch/app/hook/configcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X PATCH \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/hook/config \
  -d '{"content_type":"json","insecure_ssl":"0","secret":"********","url":"https://example.com/webhook"}'ResponseExample responseResponse schemaStatus: 200{
  "content_type": "json",
  "insecure_ssl": "0",
  "secret": "********",
  "url": "https://example.com/webhook"
}List deliveries for an app webhookReturns a list of webhook deliveries for the webhook configured for a GitHub App.
You must use a JWT to access this endpoint.Fine-grained access tokens for "List deliveries for an app webhook"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "List deliveries for an app webhook"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Query parametersName, Type, Descriptionper_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30cursor string Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the link header for the next and previous page cursors.HTTP response status codes for "List deliveries for an app webhook"Status codeDescription200OK400Bad Request422Validation failed, or the endpoint has been spammed.Code samples for "List deliveries for an app webhook"Request exampleget/app/hook/deliveriescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/hook/deliveriesResponseExample responseResponse schemaStatus: 200[
  {
    "id": 12345678,
    "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
    "delivered_at": "2019-06-03T00:57:16Z",
    "redelivery": false,
    "duration": 0.27,
    "status": "OK",
    "status_code": 200,
    "event": "issues",
    "action": "opened",
    "installation_id": 123,
    "repository_id": 456,
    "throttled_at": "2019-06-03T00:57:16Z"
  },
  {
    "id": 123456789,
    "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
    "delivered_at": "2019-06-04T00:57:16Z",
    "redelivery": true,
    "duration": 0.28,
    "status": "OK",
    "status_code": 200,
    "event": "issues",
    "action": "opened",
    "installation_id": 123,
    "repository_id": 456,
    "throttled_at": null
  }
]Get a delivery for an app webhookReturns a delivery for the webhook configured for a GitHub App.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Get a delivery for an app webhook"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Get a delivery for an app webhook"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptiondelivery_id integer RequiredHTTP response status codes for "Get a delivery for an app webhook"Status codeDescription200OK400Bad Request422Validation failed, or the endpoint has been spammed.Code samples for "Get a delivery for an app webhook"Request exampleget/app/hook/deliveries/{delivery_id}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/hook/deliveries/DELIVERY_IDResponseExample responseResponse schemaStatus: 200{
  "id": 12345678,
  "guid": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
  "delivered_at": "2019-06-03T00:57:16Z",
  "redelivery": false,
  "duration": 0.27,
  "status": "OK",
  "status_code": 200,
  "event": "issues",
  "action": "opened",
  "installation_id": 123,
  "repository_id": 456,
  "url": "https://www.example.com",
  "throttled_at": "2019-06-03T00:57:16Z",
  "request": {
    "headers": {
      "X-GitHub-Delivery": "0b989ba4-242f-11e5-81e1-c7b6966d2516",
      "X-Hub-Signature-256": "sha256=6dcb09b5b57875f334f61aebed695e2e4193db5e",
      "Accept": "*/*",
      "X-GitHub-Hook-ID": "42",
      "User-Agent": "GitHub-Hookshot/b8c71d8",
      "X-GitHub-Event": "issues",
      "X-GitHub-Hook-Installation-Target-ID": "123",
      "X-GitHub-Hook-Installation-Target-Type": "repository",
      "content-type": "application/json",
      "X-Hub-Signature": "sha1=a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d"
    },
    "payload": {
      "action": "opened",
      "issue": {
        "body": "foo"
      },
      "repository": {
        "id": 123
      }
    }
  },
  "response": {
    "headers": {
      "Content-Type": "text/html;charset=utf-8"
    },
    "payload": "ok"
  }
}Redeliver a delivery for an app webhookRedeliver a delivery for the webhook configured for a GitHub App.
You must use a JWT to access this endpoint.Fine-grained access tokens for "Redeliver a delivery for an app webhook"This endpoint does not work with GitHub App user access tokens, GitHub App installation access tokens, or fine-grained personal access tokens.Parameters for "Redeliver a delivery for an app webhook"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptiondelivery_id integer RequiredHTTP response status codes for "Redeliver a delivery for an app webhook"Status codeDescription202Accepted400Bad Request422Validation failed, or the endpoint has been spammed.Code samples for "Redeliver a delivery for an app webhook"Request examplepost/app/hook/deliveries/{delivery_id}/attemptscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/app/hook/deliveries/DELIVERY_ID/attemptsAcceptedExample responseResponse schemaStatus: 202\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/BillingREST API endpoints for billingUse the REST API to get billing information for an enterprise.REST API endpoints for billingGet GitHub Actions billing for an organizationGet GitHub Packages billing for an organizationGet shared storage billing for an organizationGet GitHub Actions billing for a userGet GitHub Packages billing for a userGet shared storage billing for a userEnhanced billing platformGet billing usage report for an organization\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Billing/BillingREST API endpoints for billingUse the REST API to get billing information for an enterprise.About billing
You can get billing information for an enterprise. For more information, see REST API endpoints for enterprise billing.Get GitHub Actions billing for an organizationGets the summary of the free and paid GitHub Actions minutes used.
Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "Managing billing for GitHub Actions".
OAuth app tokens and personal access tokens (classic) need the repo or admin:org scope to use this endpoint.Fine-grained access tokens for "Get GitHub Actions billing for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get GitHub Actions billing for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get GitHub Actions billing for an organization"Status codeDescription200OKCode samples for "Get GitHub Actions billing for an organization"Request exampleget/orgs/{org}/settings/billing/actionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/settings/billing/actionsResponseExample responseResponse schemaStatus: 200{
  "total_minutes_used": 305,
  "total_paid_minutes_used": 0,
  "included_minutes": 3000,
  "minutes_used_breakdown": {
    "UBUNTU": 205,
    "MACOS": 10,
    "WINDOWS": 90
  }
}Get GitHub Packages billing for an organizationGets the free and paid storage used for GitHub Packages in gigabytes.
Paid minutes only apply to packages stored for private repositories. For more information, see "Managing billing for GitHub Packages."
OAuth app tokens and personal access tokens (classic) need the repo or admin:org scope to use this endpoint.Fine-grained access tokens for "Get GitHub Packages billing for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get GitHub Packages billing for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get GitHub Packages billing for an organization"Status codeDescription200OKCode samples for "Get GitHub Packages billing for an organization"Request exampleget/orgs/{org}/settings/billing/packagescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/settings/billing/packagesResponseExample responseResponse schemaStatus: 200{
  "total_gigabytes_bandwidth_used": 50,
  "total_paid_gigabytes_bandwidth_used": 40,
  "included_gigabytes_bandwidth": 10
}Get shared storage billing for an organizationGets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
Paid minutes only apply to packages stored for private repositories. For more information, see "Managing billing for GitHub Packages."
OAuth app tokens and personal access tokens (classic) need the repo or admin:org scope to use this endpoint.Fine-grained access tokens for "Get shared storage billing for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get shared storage billing for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.HTTP response status codes for "Get shared storage billing for an organization"Status codeDescription200OKCode samples for "Get shared storage billing for an organization"Request exampleget/orgs/{org}/settings/billing/shared-storagecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/orgs/ORG/settings/billing/shared-storageResponseExample responseResponse schemaStatus: 200{
  "days_left_in_billing_cycle": 20,
  "estimated_paid_storage_for_month": 15,
  "estimated_storage_for_month": 40
}Get GitHub Actions billing for a userGets the summary of the free and paid GitHub Actions minutes used.
Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "Managing billing for GitHub Actions".
OAuth app tokens and personal access tokens (classic) need the user scope to use this endpoint.Fine-grained access tokens for "Get GitHub Actions billing for a user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Plan" user permissions (read)Parameters for "Get GitHub Actions billing for a user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.HTTP response status codes for "Get GitHub Actions billing for a user"Status codeDescription200OKCode samples for "Get GitHub Actions billing for a user"Request exampleget/users/{username}/settings/billing/actionscURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/settings/billing/actionsResponseExample responseResponse schemaStatus: 200{
  "total_minutes_used": 305,
  "total_paid_minutes_used": 0,
  "included_minutes": 3000,
  "minutes_used_breakdown": {
    "UBUNTU": 205,
    "MACOS": 10,
    "WINDOWS": 90
  }
}Get GitHub Packages billing for a userGets the free and paid storage used for GitHub Packages in gigabytes.
Paid minutes only apply to packages stored for private repositories. For more information, see "Managing billing for GitHub Packages."
OAuth app tokens and personal access tokens (classic) need the user scope to use this endpoint.Fine-grained access tokens for "Get GitHub Packages billing for a user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Plan" user permissions (read)Parameters for "Get GitHub Packages billing for a user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.HTTP response status codes for "Get GitHub Packages billing for a user"Status codeDescription200OKCode samples for "Get GitHub Packages billing for a user"Request exampleget/users/{username}/settings/billing/packagescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/settings/billing/packagesResponseExample responseResponse schemaStatus: 200{
  "total_gigabytes_bandwidth_used": 50,
  "total_paid_gigabytes_bandwidth_used": 40,
  "included_gigabytes_bandwidth": 10
}Get shared storage billing for a userGets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
Paid minutes only apply to packages stored for private repositories. For more information, see "Managing billing for GitHub Packages."
OAuth app tokens and personal access tokens (classic) need the user scope to use this endpoint.Fine-grained access tokens for "Get shared storage billing for a user"This endpoint works with the following fine-grained token types:GitHub App user access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Plan" user permissions (read)Parameters for "Get shared storage billing for a user"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionusername string RequiredThe handle for the GitHub user account.HTTP response status codes for "Get shared storage billing for a user"Status codeDescription200OKCode samples for "Get shared storage billing for a user"Request exampleget/users/{username}/settings/billing/shared-storagecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/users/USERNAME/settings/billing/shared-storageResponseExample responseResponse schemaStatus: 200{
  "days_left_in_billing_cycle": 20,
  "estimated_paid_storage_for_month": 15,
  "estimated_storage_for_month": 40
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Billing/Enhanced billing platformEnhanced billing platformUse the REST API to get billing usage information from the enhanced billing platform.Get billing usage report for an organizationGets a report of the total usage for an organization. To use this endpoint, you must be an administrator of an organization within an enterprise or an organization account.
Note: This endpoint is only available to organizations with access to the enhanced billing platform. For more information, see "About the enhanced billing platform."Fine-grained access tokens for "Get billing usage report for an organization"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Administration" organization permissions (read)Parameters for "Get billing usage report for an organization"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionorg string RequiredThe organization name. The name is not case sensitive.Query parametersName, Type, Descriptionyear integer If specified, only return results for a single year. The value of year is an integer with four digits representing a year. For example, 2025. Default value is the current year.month integer If specified, only return results for a single month. The value of month is an integer between 1 and 12. If no year is specified the default year is used.day integer If specified, only return results for a single day. The value of day is an integer between 1 and 31. If no year or month is specified, the default year and month are used.hour integer If specified, only return results for a single hour. The value of hour is an integer between 0 and 23. If no year, month, or day is specified, the default year, month, and day are used.HTTP response status codes for "Get billing usage report for an organization"Status codeDescription200Billing usage report response for an organization400Bad Request403Forbidden500Internal Error503Service unavailableCode samples for "Get billing usage report for an organization"Request exampleget/organizations/{org}/settings/billing/usagecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/organizations/ORG/settings/billing/usageBilling usage report response for an organizationExample responseResponse schemaStatus: 200{
  "usageItems": [
    {
      "date": "2023-08-01",
      "product": "Actions",
      "sku": "Actions Linux",
      "quantity": 100,
      "unitType": "minutes",
      "pricePerUnit": 0.008,
      "grossAmount": 0.8,
      "discountAmount": 0,
      "netAmount": 0.8,
      "organizationName": "GitHub",
      "repositoryName": "github/example"
    }
  ]
}\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/BranchesREST API endpoints for branches and their settingsUse the REST API to modify branches and their protection settings.REST API endpoints for branchesList branchesGet a branchRename a branchSync a fork branch with the upstream repositoryMerge a branchREST API endpoints for protected branchesGet branch protectionUpdate branch protectionDelete branch protectionGet admin branch protectionSet admin branch protectionDelete admin branch protectionGet pull request review protectionUpdate pull request review protectionDelete pull request review protectionGet commit signature protectionCreate commit signature protectionDelete commit signature protectionGet status checks protectionUpdate status check protectionRemove status check protectionGet all status check contextsAdd status check contextsSet status check contextsRemove status check contextsGet access restrictionsDelete access restrictionsGet apps with access to the protected branchAdd app access restrictionsSet app access restrictionsRemove app access restrictionsGet teams with access to the protected branchAdd team access restrictionsSet team access restrictionsRemove team access restrictionsGet users with access to the protected branchAdd user access restrictionsSet user access restrictionsRemove user access restrictions\n\n\n\nThe REST API is now versioned. For more information, see "About API versioning."REST API/Branches/BranchesREST API endpoints for branchesUse the REST API to modify branches and their protection settings.List branchesFine-grained access tokens for "List branches"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Contents" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "List branches"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Query parametersName, Type, Descriptionprotected boolean Setting to true returns only branches protected by branch protections or rulesets. When set to false, only unprotected branches are returned. Omitting this parameter returns all branches.per_page integer The number of results per page (max 100). For more information, see "Using pagination in the REST API."Default: 30page integer The page number of the results to fetch. For more information, see "Using pagination in the REST API."Default: 1HTTP response status codes for "List branches"Status codeDescription200OK404Resource not foundCode samples for "List branches"Request exampleget/repos/{owner}/{repo}/branchescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/branchesResponseExample responseResponse schemaStatus: 200[
  {
    "name": "master",
    "commit": {
      "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
      "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
    },
    "protected": true,
    "protection": {
      "required_status_checks": {
        "enforcement_level": "non_admins",
        "contexts": [
          "ci-test",
          "linter"
        ]
      }
    },
    "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
  }
]Get a branchFine-grained access tokens for "Get a branch"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Contents" repository permissions (read)This endpoint can be used without authentication or the aforementioned permissions if only public resources are requested.Parameters for "Get a branch"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.branch string RequiredThe name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use the GraphQL API.HTTP response status codes for "Get a branch"Status codeDescription200OK301Moved permanently404Resource not foundCode samples for "Get a branch"Request exampleget/repos/{owner}/{repo}/branches/{branch}cURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/branches/BRANCHResponseExample responseResponse schemaStatus: 200{
  "name": "main",
  "commit": {
    "sha": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
    "node_id": "MDY6Q29tbWl0MTI5NjI2OTo3ZmQxYTYwYjAxZjkxYjMxNGY1OTk1NWE0ZTRkNGU4MGQ4ZWRmMTFk",
    "commit": {
      "author": {
        "name": "The Octocat",
        "email": "octocat@nowhere.com",
        "date": "2012-03-06T23:06:50Z"
      },
      "committer": {
        "name": "The Octocat",
        "email": "octocat@nowhere.com",
        "date": "2012-03-06T23:06:50Z"
      },
      "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
      "tree": {
        "sha": "b4eecafa9be2f2006ce1b709d6857b07069b4608",
        "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608"
      },
      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
      "comment_count": 77,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null,
        "verified_at": null
      }
    },
    "url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
    "html_url": "https://github.com/octocat/Hello-World/commit/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d/comments",
    "author": {
      "login": "octocat",
      "id": 583231,
      "node_id": "MDQ6VXNlcjU4MzIzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "octocat",
      "id": 583231,
      "node_id": "MDQ6VXNlcjU4MzIzMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/octocat",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
        "url": "https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
        "html_url": "https://github.com/octocat/Hello-World/commit/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e"
      },
      {
        "sha": "762941318ee16e59dabbacb1b4049eec22f0d303",
        "url": "https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303",
        "html_url": "https://github.com/octocat/Hello-World/commit/762941318ee16e59dabbacb1b4049eec22f0d303"
      }
    ]
  },
  "_links": {
    "self": "https://api.github.com/repos/octocat/Hello-World/branches/main",
    "html": "https://github.com/octocat/Hello-World/tree/main"
  },
  "protected": false,
  "protection": {
    "enabled": false,
    "required_status_checks": {
      "enforcement_level": "off",
      "contexts": [],
      "checks": []
    }
  },
  "protection_url": "https://api.github.com/repos/octocat/Hello-World/branches/main/protection"
}Rename a branchRenames a branch in a repository.
Note

Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "Renaming a branch".

The authenticated user must have push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner permissions.
In order to rename the default branch, fine-grained access tokens also need the administration:write repository permission.Fine-grained access tokens for "Rename a branch"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Contents" repository permissions (write)Parameters for "Rename a branch"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.branch string RequiredThe name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use the GraphQL API.Body parametersName, Type, Descriptionnew_name string RequiredThe new name of the branch.HTTP response status codes for "Rename a branch"Status codeDescription201Created403Forbidden404Resource not found422Validation failed, or the endpoint has been spammed.Code samples for "Rename a branch"Request examplepost/repos/{owner}/{repo}/branches/{branch}/renamecURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/branches/BRANCH/rename \
  -d '{"new_name":"my_renamed_branch"}'ResponseExample responseResponse schemaStatus: 201{
  "name": "master",
  "commit": {
    "sha": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
    "node_id": "MDY6Q29tbWl0N2ZkMWE2MGIwMWY5MWIzMTRmNTk5NTVhNGU0ZDRlODBkOGVkZjExZA==",
    "commit": {
      "author": {
        "name": "The Octocat",
        "date": "2012-03-06T15:06:50-08:00",
        "email": "octocat@nowhere.com"
      },
      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
      "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
      "tree": {
        "sha": "b4eecafa9be2f2006ce1b709d6857b07069b4608",
        "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608"
      },
      "committer": {
        "name": "The Octocat",
        "date": "2012-03-06T15:06:50-08:00",
        "email": "octocat@nowhere.com"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null,
        "verified_at": null
      },
      "comment_count": 0
    },
    "author": {
      "gravatar_id": "",
      "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
      "url": "https://api.github.com/users/octocat",
      "id": 583231,
      "login": "octocat",
      "node_id": "MDQ6VXNlcjE=",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": true
    },
    "parents": [
      {
        "sha": "553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
        "url": "https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e"
      },
      {
        "sha": "762941318ee16e59dabbacb1b4049eec22f0d303",
        "url": "https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303"
      }
    ],
    "url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
    "committer": {
      "gravatar_id": "",
      "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
      "url": "https://api.github.com/users/octocat",
      "id": 583231,
      "login": "octocat",
      "node_id": "MDQ6VXNlcjE=",
      "html_url": "https://github.com/octocat",
      "followers_url": "https://api.github.com/users/octocat/followers",
      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
      "organizations_url": "https://api.github.com/users/octocat/orgs",
      "repos_url": "https://api.github.com/users/octocat/repos",
      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
      "received_events_url": "https://api.github.com/users/octocat/received_events",
      "type": "User",
      "site_admin": true
    },
    "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
    "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
  },
  "_links": {
    "html": "https://github.com/octocat/Hello-World/tree/master",
    "self": "https://api.github.com/repos/octocat/Hello-World/branches/master"
  },
  "protected": true,
  "protection": {
    "required_status_checks": {
      "enforcement_level": "non_admins",
      "contexts": [
        "ci-test",
        "linter"
      ]
    }
  },
  "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
}Sync a fork branch with the upstream repositorySync a branch of a forked repository to keep it up-to-date with the upstream repository.Fine-grained access tokens for "Sync a fork branch with the upstream repository"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Contents" repository permissions (write)Parameters for "Sync a fork branch with the upstream repository"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionbranch string RequiredThe name of the branch which should be updated to match upstream.HTTP response status codes for "Sync a fork branch with the upstream repository"Status codeDescription200The branch has been successfully synced with the upstream repository409The branch could not be synced because of a merge conflict422The branch could not be synced for some other reasonCode samples for "Sync a fork branch with the upstream repository"Request examplepost/repos/{owner}/{repo}/merge-upstreamcURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/merge-upstream \
  -d '{"branch":"main"}'The branch has been successfully synced with the upstream repositoryExample responseResponse schemaStatus: 200{
  "message": "Successfully fetched and fast-forwarded from upstream defunkt:main",
  "merge_type": "fast-forward",
  "base_branch": "defunkt:main"
}Merge a branchFine-grained access tokens for "Merge a branch"This endpoint works with the following fine-grained token types:GitHub App user access tokensGitHub App installation access tokensFine-grained personal access tokensThe fine-grained token must have the following permission set:"Contents" repository permissions (write)Parameters for "Merge a branch"HeadersName, Type, Descriptionaccept string Setting to application/vnd.github+json is recommended.Path parametersName, Type, Descriptionowner string RequiredThe account owner of the repository. The name is not case sensitive.repo string RequiredThe name of the repository without the .git extension. The name is not case sensitive.Body parametersName, Type, Descriptionbase string RequiredThe name of the base branch that the head will be merged into.head string RequiredThe head to merge. This can be a branch name or a commit SHA1.commit_message string Commit message to use for the merge commit. If omitted, a default message will be used.HTTP response status codes for "Merge a branch"Status codeDescription201Successful Response (The resulting merge commit)204Response when already merged403Forbidden404Not Found when the base or head does not exist409Conflict when there is a merge conflict422Validation failed, or the endpoint has been spammed.Code samples for "Merge a branch"Request examplepost/repos/{owner}/{repo}/mergescURLJavaScriptGitHub CLICopy to clipboard curl request examplecurl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer <YOUR-TOKEN>" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/OWNER/REPO/merges \
  -d '{"base":"master","head":"cool_feature","commit_message":"Shipped cool_feature!"}'Successful Response (The resulting merge commit)Example responseResponse schemaStatus: 201{
  "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
  "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
  "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
  "commit": {
    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
    "author": {
      "name": "Monalisa Octocat",
      "email": "mona@github.com",
      "date": "2011-04-14T16:00:49Z"
    },
    "committer": {
      "name": "Monalisa Octocat",
      "email": "mona@github.com",
      "date": "2011-04-14T16:00:49Z"
    },
    "message": "Fix all the bugs",
    "tree": {
      "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
    },
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null,
      "verified_at": null
    }
  },
  "author": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "octocat",
    "id": 1,
    "node_id": "MDQ6VXNlcjE=",
    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
    "gravatar_id": "",
    "url": "https://api.github.com/users/octocat",
    "html_url": "https://github.com/octocat",
    "followers_url": "https://api.github.com/users/octocat/followers",
    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
    "organizations_url": "https://api.github.com/users/octocat/orgs",
    "repos_url": "https://api.github.com/users/octocat/repos",
    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
    "received_events_url": "https://api.github.com/users/octocat/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
    }
  ],
  "stats": {
    "additions": 104,
    "deletions": 4,
    "total": 108
  },
  "files": [
    {
      "filename": "file1.txt",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "status": "modified",
      "raw_url": "https://github.com/octocat/Hello-World/raw/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
      "blob_url": "https://github.com/octocat/Hello-World/blob/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
      "patch": "@@ -29,7 +29,7 @@\n....."
    }
  ]
}\n\n\n\n