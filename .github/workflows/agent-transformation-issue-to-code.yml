# .github/workflows/agent-transformation-issue-to-code.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: transformation-06-issue-to-code
#concurrency: agentic-lib-main
run-name: "issue@ready >> tests, code & docs"

on:
  workflow_dispatch:
    inputs:
      issueNumber:
        description: 'The issue number to resolve. If not provided, the workflow will select one based on label. e.g. "123"'
        required: false
        type: string
        default: ''
      selectionLabel:
        description: 'Label used to filter issues for resolution. e.g. "ready"'
        required: false
        type: string
        default: 'ready'
  #workflow_run:
  #  workflows:
  #    - agent-transformation-issue-to-ready-issue
  #    - agent-library-to-feature
  #    - agent-maintenance-activity-to-issue
  #    - agent-linting-to-issue
  #  types:
  #    - completed
  workflow_call:
    inputs:
      issueNumber:
          description: 'The issue number to resolve. If not provided, the workflow will select one based on label. e.g. "123"'
          required: false
          type: string
          default: ''
      selectionLabel:
          description: 'Label used to filter issues for resolution. e.g. "ready"'
          required: false
          type: string
          default: 'ready'
    secrets:
      PERSONAL_ACCESS_TOKEN:
          required: false
      CHATGPT_API_SECRET_KEY:
          required: false
  schedule:
    - cron: '39 4 */7 * *' # schedule-1
    #- cron: '39 4 * * *' # schedule-2
    #- cron: '39 * * * *' # schedule-3
    #- cron: '39 * * * *' # schedule-4

env:
  gitUserEmail: 'action@github.com'
  gitUserName: 'GitHub Actions[bot]'
  issueNumber: ${{ inputs.issueNumber || '' }}
  selectionLabel: ${{ inputs.selectionLabel || 'ready' }}
  npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
  s3BucketUrl: ${{ vars.s3BucketUrl || 's3://agentic-lib-telemetry-bucket/events/' }}
  s3WebsiteBucketUrl: ${{ vars.s3WebsiteBucketUrl || 's3://agentic-lib-public-website-stats-bucket/' }}
  iamActionsRoleArn: ${{ vars.iamActionsRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role' }}
  iamStatsBucketWriterRoleArn: ${{ vars.iamStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role' }}
  iamPublicWebsiteStatsBucketWriterRoleArn: ${{ vars.iamPublicWebsiteStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role' }}

jobs:

  check-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check if CHATGPT_API_SECRET_KEY is available
        run: |
          if [ -z "${{ secrets.CHATGPT_API_SECRET_KEY }}" ]; then
            echo "::error::CHATGPT_API_SECRET_KEY is not available. Stopping workflow."
            exit 1
          fi
          echo "CHATGPT_API_SECRET_KEY is available."

  agentic-lib:
    needs:
      - check-secrets
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-agent-config.yml@6.8.1'
    with:
      configPath: ${{ vars.configPath || '.github/agents/agentic-lib.yml' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  # GitHub Script job which checks if the target path starts with one of writeableFilepaths and fails out if not
  check-writeable-filepaths:
    needs:
      - agentic-lib
    runs-on: ubuntu-latest
    steps:
      - name: Check if target is writeable
        id: check-writeable-filepaths
        uses: actions/github-script@v7
        env:
          targetFilepath1: ${{ needs.agentic-lib.outputs.targetTestsPath }}
          targetFilepath2: ${{ needs.agentic-lib.outputs.targetSourcePath }}
          targetFilepath3: ${{ needs.agentic-lib.outputs.dependenciesFilepath }}
          targetFilepath4: ${{ needs.agentic-lib.outputs.documentationPath }}
          writeableFilepaths: ${{ needs.agentic-lib.outputs.writeableFilepaths }}
        with:
          script: |
            const writeableFilepaths = process.env.writeableFilepaths.split(';');
            let targetFilepath1;
            let targetFilepath2;
            let targetFilepath3;
            let targetFilepath4;
            targetFilepath1 = process.env.targetFilepath1;
            targetFilepath2 = process.env.targetFilepath2;
            targetFilepath3 = process.env.targetFilepath3;
            targetFilepath4 = process.env.targetFilepath4;
            if (!writeableFilepaths.some(path => targetFilepath1.startsWith(path) ||  targetFilepath2.startsWith(path) || targetFilepath3.startsWith(path) || targetFilepath4.startsWith(path))) {
              core.setFailed(`None of the targetFilepaths "${targetFilepath1}", "${targetFilepath2}", "${targetFilepath3}", and "${targetFilepath4}" are in the list of writeable filepaths.`);
              return;
            } else {
              core.info(`One of the targetFilepaths "${targetFilepath1}", "${targetFilepath2}", "${targetFilepath3}", or "${targetFilepath4}" is in the list of writeable filepaths.`);
            }

  select-issue:
    needs:
      - agentic-lib
      - check-writeable-filepaths
    permissions:
      issues: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-select-issue.yml@6.8.1'
    with:
      issueNumber: ${{ inputs.issueNumber || '' }}
      selectionLabel: ${{ inputs.selectionLabel || 'ready' }}
      filterLabel: 'in-progress'
    secrets:
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}

  needs-resolution:
    needs:
      - select-issue
    runs-on: ubuntu-latest
    steps:
      - name: todo
        shell: bash
        run: |
          echo "TODO: Check if this issue has been resolved already by examining the current state and recent commits"

  validate-issue-number:
    needs:
      - select-issue
    runs-on: ubuntu-latest
    steps:
      - id: validate-issue-number
        run: |
          issueNumber="${{ needs.select-issue.outputs.issueNumber }}"
          if [[ -n "$issueNumber" && "$issueNumber" =~ [0-9] ]]; then
            echo "[$issueNumber] is a valid issue number."
            echo "isValid=true" >> $GITHUB_OUTPUT
          else
            echo "[$issueNumber] is not a valid issue number."
            echo "isValid=false" >> $GITHUB_OUTPUT
          fi
    outputs:
      isValid: ${{ steps.validate-issue-number.outputs.isValid }}

  check-branch:
    needs:
      - select-issue
      - needs-resolution
      - validate-issue-number
    if: needs.validate-issue-number.outputs.isValid == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      branchPrefix: 'agentic-lib-issue-'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Ensure there isn't already a branch for this prefix
        shell: bash
        run: |
          git fetch origin
          if git branch -r | grep -q 'origin/${{ env.branchPrefix }}'; then
            echo "A branch with the prefix '${{ env.branchPrefix }}' already exists."
            exit 1
          else
            echo "No existing branch with the prefix found."
          fi

  check-attempts-limit:
    needs:
      - agentic-lib
      - select-issue
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write
      id-token: write
    env:
      issueNumber: ${{ needs.select-issue.outputs.issueNumber }}
      attemptsPerIssue: ${{ needs.agentic-lib.outputs.attemptsPerIssue }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - id: validate-issue-number
        run: |
          issueNumber="${{ env.issueNumber }}"
          if [[ -n "$issueNumber" && "$issueNumber" =~ [0-9] ]]; then
            echo "[$issueNumber] is a valid issue number."
            echo "isValid=true" >> $GITHUB_OUTPUT
          else
            echo "[$issueNumber] is not a valid issue number."
            echo "isValid=false" >> $GITHUB_OUTPUT
          fi
      - name: check
        id: check
        if: ${{ steps.validate-issue-number.outputs.isValid == 'true' && env.attemptsPerIssue != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = process.env.issueNumber;
            const attemptsPerIssueStr = process.env.attemptsPerIssue;
            const attemptsPerIssue = (parseInt(attemptsPerIssueStr) ? parseInt(attemptsPerIssueStr) : "");

            // If attempts to [work++fix] a branch exceed the limit as per agentic-lib.yml, then comment the issue and close it      
            core.info(`Retrieving issue ${issueNumber} details...`);
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            core.info(`Issue title: ${issue.title}`);
            const issueLabelsStartingWithApplyFix = issue.labels.filter(label => label.name.startsWith("apply-fix-"));
            const issueLabelsStartingWithIssueWorker = issue.labels.filter(label => label.name.startsWith("issue-worker-"));
            const attemptsOnIssue = issueLabelsStartingWithApplyFix.length + issueLabelsStartingWithIssueWorker.length
            if(attemptsPerIssue && attemptsOnIssue >= attemptsPerIssue) {
               const message = `Reached the limit of ${attemptsPerIssue} attempts with ${attemptsOnIssue} attempts.`;

              // Comment the issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: message
              });

              // Close the issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: "closed"
              });

              core.setFailed(`${message}`);
              return;
            }

            core.setOutput("attemptsOnIssue", attemptsOnIssue);
            core.info(`attemptsOnIssue: ${attemptsOnIssue}`);
    outputs:
      attemptsOnIssue: ${{ steps.check.outputs.attemptsOnIssue }}

  npm-test-before-issue-resolution:
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: npm run test:unit

  npm-build-before-issue-resolution:
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: npm run build

  npm-run-before-issue-resolution:
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  label-issue-before-attempt:
    needs:
      - select-issue
      - check-attempts-limit
      - needs-resolution
      - npm-test-before-issue-resolution
      - npm-build-before-issue-resolution
      - npm-run-before-issue-resolution
      - check-branch
      - validate-issue-number
    if: needs.validate-issue-number.outputs.isValid == 'true'
    permissions:
      contents: write
      issues: write
      pull-requests: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ env.cache }}

      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Add "issueWorker-<run-id>" and "in-progress" labels
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: "${{ needs.select-issue.outputs.issueNumber }}",
              labels: [`issue-worker-${{ github.run_id }}`, `in-progress`]
            });

  apply-issue-resolution:
    needs:
      - agentic-lib
      - select-issue
      - needs-resolution
      - check-attempts-limit
      - npm-test-before-issue-resolution
      - npm-build-before-issue-resolution
      - npm-run-before-issue-resolution
      - check-branch
      - validate-issue-number
    if: needs.validate-issue-number.outputs.isValid == 'true'
    permissions:
      contents: write
      issues: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-completion-generate-issue-resolution-in-code.yml@6.8.1'
    with:
      promptFilepath: '.github/agents/agent-issue-resolution.md'
      agentConfigContent: ${{ needs.agentic-lib.outputs.agentConfigContent }}
      issueNumber: ${{ needs.select-issue.outputs.issueNumber }}
      allSourcePaths: ${{ needs.agentic-lib.outputs.allSourcePaths }}
      targetSourcePath: ${{ needs.agentic-lib.outputs.targetSourcePath }}
      allTestsPaths: ${{ needs.agentic-lib.outputs.allTestsPaths }}
      targetTestsPath: ${{ needs.agentic-lib.outputs.targetTestsPath }}
      readmeFilepath: ${{ needs.agentic-lib.outputs.readmeFilepath }}
      documentationPath: ${{ needs.agentic-lib.outputs.documentationPath }}
      missionFilepath: ${{ needs.agentic-lib.outputs.missionFilepath }}
      contributingFilepath: ${{ needs.agentic-lib.outputs.contributingFilepath }}
      dependenciesFilepath: ${{ needs.agentic-lib.outputs.dependenciesFilepath }}
      formattingFilepath: ${{ needs.agentic-lib.outputs.formattingFilepath }}
      lintingFilepath: ${{ needs.agentic-lib.outputs.lintingFilepath }}
      intentionFilepath: ${{ needs.agentic-lib.outputs.intentionFilepath }}
      branchPrefix: 'agentic-lib-issue-'
      buildScript: ${{ needs.agentic-lib.outputs.buildScript }}
      testScript: ${{ needs.agentic-lib.outputs.testScript }}
      mainScript: ${{ needs.agentic-lib.outputs.mainScript }}
      writeableFilepaths: ${{ needs.agentic-lib.outputs.writeableFilepaths }}
      model: ${{ vars.CHATGPT_API_MODEL || 'o4-mini' }}
      npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    secrets:
      CHATGPT_API_SECRET_KEY: ${{ secrets.CHATGPT_API_SECRET_KEY }}
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  log-intention-activity:
    needs:
      - agentic-lib
      - select-issue
      - apply-issue-resolution
    runs-on: ubuntu-latest
    env:
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ github.ref }}

      - name: log-intention-activity
        id: log-intention-activity
        uses: actions/github-script@v7
        env:
          issueNumber: ${{ needs.select-issue.outputs.issueNumber }}
          issueTitle: "${{ needs.apply-issue-resolution.outputs.issueTitle }}"
          fixApplied: "${{ needs.apply-issue-resolution.outputs.fixApplied }}"
          message: "${{ needs.apply-issue-resolution.outputs.message }}"
          gitDiff: "${{ needs.apply-issue-resolution.outputs.gitDiff }}"
          mainOutput: "${{ needs.apply-issue-resolution.outputs.mainOutput }}"
          intentionFilepath: ${{ needs.agentic-lib.outputs.intentionFilepath }}
          usage: ${{ needs.apply-issue-resolution.outputs.usage }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const issueNumber = process.env.issueNumber;
            const issueTitle = process.env.issueTitle;
            const fixApplied = process.env.fixApplied;
            const message = process.env.message;
            const gitDiff = process.env.gitDiff;
            const mainOutput = process.env.mainOutput;
            const issueUrl = `https://github.com/${owner}/${repo}/issues/${issueNumber}`;
            const activity = `fixApplied: ${fixApplied}\n\n${message}\n\nGit Diff:\n\n\`\`\`\n${gitDiff}\n\`\`\`\nmainOutput:\n\`\`\`\n${mainOutput}\n\n\`\`\`\n[for issue ${issueUrl} with title: "${issueTitle}"]`;
            const intentionFilepath = process.env.intentionFilepath;
            const usage = process.env.usage;

            core.info(`Activity: ${activity}`);
            core.info(`Seed discussion filepath: ${intentionFilepath}`);

            const fs = require('fs');
            const path = require('path');

            // Create trace file and the parent directory of intentionFilepath if it doesn't exist
            if (!fs.existsSync(path.dirname(intentionFilepath))) {
              fs.mkdirSync(path.dirname(intentionFilepath), { recursive: true });
            }
            const isoDate = new Date().toISOString();
            const activityLogContent = `## Issue to Code at ${isoDate}\n\n${activity}\n\nLLM API Usage:\n\n\`\`\`json\n${usage}\n\`\`\`\n---\n\n`;
            fs.appendFileSync(intentionFilepath, activityLogContent);
            core.info(`Activity logged to ${intentionFilepath}`);

      - name: Commit changes
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git add  ${{ needs.agentic-lib.outputs.intentionFilepath }}
          git commit -m "Activity logged by agent-transformation-issue-to-code.yml" || echo "No changes to commit"
          git push

  npm-test-after-issue-resolution:
    needs:
      - needs-resolution
      - check-attempts-limit
      - npm-test-before-issue-resolution
      - npm-build-before-issue-resolution
      - npm-run-before-issue-resolution
      - apply-issue-resolution
    name: 'npm test with coverage'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.apply-issue-resolution.outputs.branch }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.apply-issue-resolution.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: npm run test:unit

  npm-build-after-issue-resolution:
    needs:
      - needs-resolution
      - check-attempts-limit
      - npm-test-before-issue-resolution
      - npm-build-before-issue-resolution
      - npm-run-before-issue-resolution
      - apply-issue-resolution
    name: 'npm run build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.apply-issue-resolution.outputs.branch }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.apply-issue-resolution.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: npm run build

  npm-run-after-issue-resolution:
    needs:
      - needs-resolution
      - check-attempts-limit
      - npm-test-before-issue-resolution
      - npm-build-before-issue-resolution
      - npm-run-before-issue-resolution
      - apply-issue-resolution
    name: 'npm run start'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.apply-issue-resolution.outputs.branch }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
      - name: Get latest from remote
        run: |
          git config --local user.email "${{ env.gitUserEmail }}"
          git config --local user.name "${{ env.gitUserName }}"
          git pull --ff-only origin ${{ needs.apply-issue-resolution.outputs.branch }}
      - name: Set up .npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}" >> .npmrc
          echo "always-auth=true" >> .npmrc
      - run: npm ci || npm install
      - run: ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  needs-fix-after-issue-resolution:
    needs:
      - needs-resolution
      - check-attempts-limit
      - npm-test-before-issue-resolution
      - npm-build-before-issue-resolution
      - npm-run-before-issue-resolution
      - apply-issue-resolution
      - npm-test-after-issue-resolution
      - npm-build-after-issue-resolution
      - npm-run-after-issue-resolution
    if: >
      ${{ !cancelled() &&
         (
           needs.npm-test-after-issue-resolution.result != 'success' ||
           needs.npm-build-after-issue-resolution.result != 'success' ||
           needs.npm-run-after-issue-resolution.result != 'success'
         )
      }}
    runs-on: ubuntu-latest
    steps:
      - name: set-needs-fix
        id: set-needs-fix
        uses: actions/github-script@v7
        with:
          script: |
            const anySkipped = "${{ needs.npm-test-after-issue-resolution.result == 'skipped' || needs.npm-build-after-issue-resolution.result == 'skipped' || needs.npm-run-after-issue-resolution.result == 'skipped' }}" === "true";
            const anyDidntSucceed = "${{ needs.npm-test-after-issue-resolution.result != 'success' || needs.npm-build-after-issue-resolution.result != 'success' || needs.npm-run-after-issue-resolution.result != 'success' }}" === "true";
            const readyToMerge = !anySkipped && !anyDidntSucceed;

            core.setOutput("anySkipped", anySkipped);
            core.setOutput("anyDidntSucceed", anyDidntSucceed);
            core.setOutput("readyToMerge", readyToMerge);     

            core.info(`Any skipped: ${anySkipped}`);
            core.info(`Any didn't succeed: ${anyDidntSucceed}`);
            core.info(`Ready to merge: ${readyToMerge}`);

    outputs:
      allSkipped: ${{ steps.set-needs-fix.outputs.allSkipped }}
      anyDidntSucceed: ${{ steps.set-needs-fix.outputs.anyDidntSucceed }}
      readyToMerge: ${{ steps.set-needs-fix.outputs.readyToMerge }}

  create-pr:
    needs:
      - select-issue
      - needs-resolution
      - check-attempts-limit
      - apply-issue-resolution
      - needs-fix-after-issue-resolution
      - validate-issue-number
    if: ${{ needs.validate-issue-number.outputs.isValid == 'true' && needs.apply-issue-resolution.outputs.fixApplied == 'true' && needs.needs-fix-after-issue-resolution.outputs.readyToMerge == 'true' }}
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
      checks: write
      id-token: write
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-github-create-pr.yml@6.8.1'
    with:
      branch: '${{ needs.apply-issue-resolution.outputs.branch }}'
      baseBranch: 'main'
      gitCommitMessage: "${{ needs.apply-issue-resolution.outputs.message }} (working on #${{ needs.select-issue.outputs.issueNumber }})"
      label: 'automerge'
