# .github/workflows/utils-truncate-issue-history.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: âˆž Truncate Issue History
concurrency: truncate-issue-history
run-name: "truncate issue history"

on:
  workflow_dispatch:
  schedule:
    - cron: '37 3 * * 4'

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Redact old GitHub issues and delete their comments
        uses: actions/github-script@v7
        with:
          script: |
            // Set retention period (in days)
            const retentionDays = 365;
            const cutoffDate = new Date(Date.now() - retentionDays * 24 * 60 * 60 * 1000);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const perPage = 100;
            let issuesRedacted = 0;
            let commentsDeleted = 0;

            core.info(`Redacting issues not updated in the last ${retentionDays} days (before ${cutoffDate.toISOString()})...`);

            let page = 1;
            while (true) {
              const issuesResponse = await github.rest.issues.listForRepo({
                owner,
                repo,
                state: 'all',
                per_page: perPage,
                page
              });
              const issues = issuesResponse.data;
              if (!issues || issues.length === 0) break;
              for (const issue of issues) {
                // Skip pull requests
                if (issue.pull_request) continue;
                const updatedAt = new Date(issue.updated_at);
                if (updatedAt < cutoffDate) {
                  try {
                    // Update the issue's title and body to "redact" details.
                    await github.rest.issues.update({
                      owner,
                      repo,
                      issue_number: issue.number,
                      title: "Redacted",
                      body: "This issue has been redacted."
                    });
                    core.info(`Redacted issue #${issue.number} (last updated at ${issue.updated_at})`);
                    issuesRedacted++;

                    // List and delete all comments for the issue.
                    let commentPage = 1;
                    while (true) {
                      const commentsResponse = await github.rest.issues.listComments({
                        owner,
                        repo,
                        issue_number: issue.number,
                        per_page: perPage,
                        page: commentPage
                      });
                      const comments = commentsResponse.data;
                      if (!comments || comments.length === 0) break;
                      for (const comment of comments) {
                        try {
                          await github.rest.issues.deleteComment({
                            owner,
                            repo,
                            comment_id: comment.id
                          });
                          core.info(`Deleted comment ${comment.id} on issue #${issue.number}`);
                          commentsDeleted++;
                        } catch (err) {
                          console.error(`Failed to delete comment ${comment.id} on issue #${issue.number}: ${err.message}`);
                        }
                      }
                      commentPage++;
                    }
                  } catch (error) {
                    console.error(`Failed to update issue #${issue.number}: ${error.message}`);
                  }
                }
              }
              page++;
            }
            core.info(`Total issues redacted: ${issuesRedacted}`);
            core.info(`Total comments deleted: ${commentsDeleted}`);
            return `Cleanup complete. Redacted ${issuesRedacted} issues and deleted ${commentsDeleted} comments.`;
          result-encoding: string
