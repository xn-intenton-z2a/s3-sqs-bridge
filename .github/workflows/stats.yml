# .github/workflows/stats.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: âˆž Stats

on:
  workflow_dispatch:
  schedule:
    #- cron: '0 */2 * * *' # schedule-1
    #- cron: '*/15 * * * *' # schedule-2
    - cron: '*/5 * * * *' # schedule-3

jobs:
  generate-site:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm install

      - name: engine
        id: engine
        shell: bash
        run: |
          engine=$(grep '^[[:space:]]*- cron:.*#' .github/workflows/stats.yml | sed 's/^[[:space:]]*- cron:.*# //g')
          echo "engine=${engine}"
          echo "engine=${engine}" >> $GITHUB_OUTPUT

      - name: Generate statistics page
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            // Helper: truncate string to max length with ellipsis.
            function truncate(str, max) {
              return str.length > max ? str.substring(0, max) + "..." : str;
            }

            const now = new Date();
            const { owner, repo } = context.repo;
            core.info(`Gathering stats for ${owner}/${repo}...`);

            // Open issues count (up to 256)
            const issuesResp = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: "open",
              per_page: 256
            });
            const openIssues = issuesResp.data.length;
            core.info(`Open issues: ${openIssues}`);

            // Issues closed in last hour and last 24 hours.
            const sinceOneHour = new Date(now.getTime() - (60 * 60 * 1000)).toISOString();
            const closedHourResp = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: "closed",
              since: sinceOneHour,
              per_page: 256
            });
            const issuesClosedLastHour = closedHourResp.data.length;
            const sinceOneDay = new Date(now.getTime() - (24 * 60 * 60 * 1000)).toISOString();
            const closedDayResp = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: "closed",
              since: sinceOneDay,
              per_page: 256
            });
            const issuesClosedLastDay = closedDayResp.data.length;

            // Open pull requests with age annotation (in minutes).
            const pullsResp = await github.rest.pulls.list({
              owner,
              repo,
              state: "open",
              per_page: 256
            });
            const prDetails = pullsResp.data.map(pr => {
              const createdAt = new Date(pr.created_at);
              const ageMinutes = Math.floor((now - createdAt) / (1000 * 60));
              return `[${ageMinutes}m] ${pr.title}`;
            });
            const openPRs = prDetails.length;
            core.info(`Open PRs (${openPRs}): ${prDetails.join('; ')}`);

            // Repository push details, converted to minutes.
            const repoResp = await github.rest.repos.get({ owner, repo });
            const pushedAt = new Date(repoResp.data.pushed_at);
            const diffMinutes = Math.floor((now - pushedAt) / (1000 * 60));

            const mainBranchResp = await github.rest.repos.getBranch({ owner, repo, branch: "main" });
            const mainPushedAt = new Date(mainBranchResp.data.commit.commit.author.date);
            const diffMinutesMain = Math.floor((now - mainPushedAt) / (1000 * 60));

            // Commits in the last hour and last day.
            const commitsLastHourResp = await github.rest.repos.listCommits({
              owner,
              repo,
              since: sinceOneHour,
              per_page: 256
            });
            const commitsLastHour = commitsLastHourResp.data.length;
            const commitsLastDayResp = await github.rest.repos.listCommits({
              owner,
              repo,
              since: sinceOneDay,
              per_page: 256
            });
            const commitsLastDay = commitsLastDayResp.data.length;

            // Last 5 commit messages from main with timestamp (HH:MM) and truncated.
            const lastFiveCommitsResp = await github.rest.repos.listCommits({
              owner,
              repo,
              sha: "main",
              per_page: 5
            });
            const lastFiveCommitMessages = lastFiveCommitsResp.data.map(commit => {
              const commitDate = new Date(commit.commit.author.date);
              const hh = commitDate.getHours().toString().padStart(2, '0');
              const mm = commitDate.getMinutes().toString().padStart(2, '0');
              const truncatedMsg = truncate(commit.commit.message, 64);
              return `[${hh}:${mm}] - ${truncatedMsg}`;
            });

            // Branches excluding "main" and "github-pages", with last commit time (in minutes).
            const branchesResp = await github.rest.repos.listBranches({
              owner,
              repo,
              per_page: 256
            });
            const branchData = branchesResp.data.filter(branch => branch.name !== "main" && branch.name !== "github-pages");
            const branchDetails = await Promise.all(branchData.map(async branch => {
              const branchResp = await github.rest.repos.getBranch({ owner, repo, branch: branch.name });
              const lastCommitDate = new Date(branchResp.data.commit.commit.author.date);
              const minutesSinceLastCommit = Math.floor((now - lastCommitDate) / (1000 * 60));
              // For lack of branch creation time, duplicate the last commit time.
              return `[${minutesSinceLastCommit}m/${minutesSinceLastCommit}m] ${branch.name}`;
            }));
            const branchCount = branchDetails.length;

            // Additional metrics: Average PR age and placeholder test status.
            const averagePRAge = openPRs > 0 ? Math.floor(prDetails.reduce((sum, prText) => {
              const match = prText.match(/^\[(\d+)m\]/);
              return sum + (match ? parseInt(match[1]) : 0);
            }, 0) / openPRs) : 0;
            const testStatus = "PASS"; // Placeholder (if tests info available, include it)
            const testsLastPassedMinutes = 15; // Placeholder

            const html = `
              <!DOCTYPE html>
              <html lang="en">
              <head>
              <meta charset="UTF-8">
              <title>${repo} stats</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 2em; background-color: #f9f9f9; color: #333; }
                h1 { font-size: 1.5em; font-family: monospace; }
                section { margin-bottom: 1em; }
                ul { list-style: none; padding: 0; }
                li { margin: 0.5em 0; }
                .label { font-weight: bold; }
                footer { margin-top: 2em; font-size: 0.9em; color: #777; }
              </style>
              </head>
              <body>
                <header>
                  <h1>${repo}</h1>
                </header>
                <section>
                  <p><span class="label">Open Pull Requests (${openPRs}):</span> ${prDetails.join('; ') || 'None'}</p>
                </section>
                <section>
                  <p><span class="label">Branches (${branchCount}):</span> ${branchDetails.join(', ') || 'None'}</p>
                </section>
                <section>
                  <p><span class="label">Open Issues:</span> ${openIssues}</p>
                  <p><span class="label">Issues closed in last hour:</span> ${issuesClosedLastHour}</p>
                  <p><span class="label">Issues closed in last 24 hours:</span> ${issuesClosedLastDay}</p>
                </section>
                <section>
                  <p><span class="label">Engine:</span> ${{ steps.engine.outputs.engine }}</p>
                </section>
                <section>
                  <p><span class="label">Minutes since push anywhere:</span> ${diffMinutes}</p>
                  <p><span class="label">Minutes since push to main:</span> ${diffMinutesMain}</p>
                </section>
                <section>
                  <p><span class="label">Commits to main last hour:</span> ${commitsLastHour}</p>
                  <p><span class="label">Commits to main last day:</span> ${commitsLastDay}</p>
                </section>
                <section>
                  <p><span class="label">Last 5 commit messages from main:</span></p>
                  <ul>
                    ${lastFiveCommitMessages.map(msg => `<li>${msg}</li>`).join('')}
                  </ul>
                </section>
                <section>
                  <p>
                    <a href="https://github.com/${owner}/${repo}" target="_blank">repository ðŸ”—</a> - 
                    <a href="https://${owner}.github.io/${repo}/index.html" target="_blank">site ðŸ”—</a> - 
                    <a href="https://${owner}.github.io/${repo}/latest.html" target="_blank">stats ðŸ”—</a> - 
                    <a href="https://${owner}.github.io/${repo}/all.html" target="_blank">all stats ðŸ”—</a>
                  </p>
                </section>
                <footer>
                  <p>Generated on ${now.toISOString()}</p>
                </footer>
              </body>
              </html>
            `;
            
            // Ensure the output directory exists.
            const outputDir = "public";
            if (!fs.existsSync(outputDir)) {
              fs.mkdirSync(outputDir);
            }
            const outputPath = path.join(outputDir, "latest.html");
            fs.writeFileSync(outputPath, html, "utf8");
            core.info(`Static site generated at ${outputPath}.`);
            core.setOutput("sitePath", outputPath);

      - name: Generate index page
        shell: bash
        run: |
          ./scripts/md-to-html.js < README.md > public/index.agentic-lib.html
          cat public/index.agentic-lib.html | sed 's/agentic-lib/${{ github.event.repository.name }}/g' > public/index.html

      - name: Generate unique filename for this version
        id: uniqueFile
        run: |
          echo "[INFO] Generating a unique filename..."
          unique=$(date +%Y%m%d%H%M%S)-$(uuidgen).html
          cp public/latest.html "public/${unique}"
          echo "uniqueFile=${unique}" >> $GITHUB_OUTPUT
          echo "[INFO] Unique file created: public/${unique}"

      - name: Upload generated site as artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: 'public'

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: 'public'
          publish_branch: github-pages
          keep_files: true
          enable_jekyll: 'true'

      - name: Output published URLs
        run: |
          echo "[INFO] Determining GitHub Pages URL..."
          # GitHub Pages URL typically: https://<owner>.github.io/<repo>/
          repoName=${{ github.event.repository.name }}
          owner=${{ github.repository_owner }}
          baseUrl="https://${owner}.github.io/${repoName}"
          latestUrl="${baseUrl}/latest.html"
          uniqueFile=$(echo "${{ steps.uniqueFile.outputs.uniqueFile }}" | tr -d '\n')
          uniqueUrl="${baseUrl}/${uniqueFile}"
          pwd
          echo "public:"
          ls -larth "public"
          echo "public/latest.html:"
          ls -larth "public/latest.html"
          echo "public/${uniqueFile}:"
          ls -larth "public/${uniqueFile}"
          echo "::notice:: latestUrl: ${latestUrl}"
          echo "::notice:: uniqueUrl: ${uniqueUrl}"
          echo "latestUrl=${latestUrl}" >> $GITHUB_OUTPUT
          echo "uniqueUrl=${uniqueUrl}" >> $GITHUB_OUTPUT
