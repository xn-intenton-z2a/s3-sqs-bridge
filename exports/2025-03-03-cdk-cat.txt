cdk/src/test/java/com/intentïon/TansuSqsBridge/TansuSqsBridgeStackTest.java
==== Content of cdk/src/test/java/com/intentïon/TansuSqsBridge/TansuSqsBridgeStackTest.java ====
package com.intentïon.TansuSqsBridge;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import software.amazon.awscdk.App;
import software.amazon.awscdk.assertions.Template;

public class TansuSqsBridgeStackTest {
    @Test
    public void testStackResources() {
        App app = new App();
        TansuSqsBridgeStack stack = new TansuSqsBridgeStack(app, "TestStack");
        Template template = Template.fromStack(stack);
        // Verify that one SQS queue is created
        template.resourceCountIs("AWS::SQS::Queue", 1);
        // Verify that one Lambda function is created
        template.resourceCountIs("AWS::Lambda::Function", 1);
        // Verify that one App Runner service is created
        template.resourceCountIs("AWS::AppRunner::Service", 1);
    }
}
cdk/src/main/java/com/intentïon/TansuSqsBridge/TansuSqsBridgeApp.java
==== Content of cdk/src/main/java/com/intentïon/TansuSqsBridge/TansuSqsBridgeApp.java ====
package com.intentïon.TansuSqsBridge;

import software.amazon.awscdk.App;

public class TansuSqsBridgeApp {
    public static void main(final String[] args) {
        App app = new App();
        new TansuSqsBridgeStack(app, "TansuSqsBridgeStack");
        app.synth();
    }
}
cdk/src/main/java/com/intentïon/TansuSqsBridge/TansuSqsBridgeStack.java
==== Content of cdk/src/main/java/com/intentïon/TansuSqsBridge/TansuSqsBridgeStack.java ====
package com.intentïon.TansuSqsBridge;

import java.util.Map;
import java.util.HashMap;
import software.amazon.awscdk.CfnOutput;
import software.amazon.awscdk.RemovalPolicy;
import software.amazon.awscdk.Stack;
import software.amazon.awscdk.StackProps;
import software.amazon.awscdk.services.apprunner.CfnService;
import software.amazon.awscdk.services.apprunner.CfnService.ImageConfigurationProperty;
import software.amazon.awscdk.services.apprunner.CfnService.ImageRepositoryProperty;
import software.amazon.awscdk.services.apprunner.CfnService.SourceConfigurationProperty;
import software.amazon.awscdk.services.dynamodb.Attribute;
import software.amazon.awscdk.services.dynamodb.AttributeType;
import software.amazon.awscdk.services.dynamodb.Table;
import software.amazon.awscdk.services.ecr.assets.DockerImageAsset;
import software.amazon.awscdk.services.lambda.Function;
import software.amazon.awscdk.services.lambda.Runtime;
import software.amazon.awscdk.services.lambda.Code;
import software.amazon.awscdk.services.lambda.eventsources.SqsEventSource;
import software.amazon.awscdk.services.sqs.Queue;
import software.constructs.Construct;

public class TansuSqsBridgeStack extends Stack {
    public TansuSqsBridgeStack(final Construct scope, final String id) {
        this(scope, id, null);
    }

    public TansuSqsBridgeStack(final Construct scope, final String id, final StackProps props) {
        super(scope, id, props);

        // Create an SQS queue for Tansu messages
        Queue tansuQueue = Queue.Builder.create(this, "TansuQueue")
                .queueName("tansu-sqs-bridge-queue")
                .build();

        // Create a DynamoDB table for GitHub projections
        Table githubProjectionTable = Table.Builder.create(this, "GithubProjectionTable")
                .tableName("GithubProjections")
                .partitionKey(Attribute.builder()
                        .name("ResourceId")
                        .type(AttributeType.STRING)
                        .build())
                .removalPolicy(RemovalPolicy.DESTROY) // Use RETAIN in production
                .build();

        // Create the loggingLambda function
        Function tansuLambda = Function.Builder.create(this, "SQSLambda")
                .runtime(Runtime.NODEJS_16_X)
                .handler("lambda.handler")
                .code(Code.fromAsset("../src/lib/main.js"))
                .functionName("loggingLambdaHandler")
                .build();

        // Attach Tansu SQS queue as an event source to the Tansu Lambda
        tansuLambda.addEventSource(new SqsEventSource(tansuQueue));

        // Create the GitHub Projection Lambda function
        //Function githubProjectionLambda = Function.Builder.create(this, "GithubProjectionLambda")
        //        .runtime(Runtime.NODEJS_16_X)
        //        .handler("lambda.handler")
        //        .code(Code.fromAsset("../src/lib/main.js"))
        //        .functionName("githubProjectionLambdaHandler")
        //        .environment(Map.of("GITHUB_PROJECTION_TABLE", githubProjectionTable.getTableName()))
        //        .build();

        // Grant the GitHub Projection Lambda write access to the DynamoDB table
        //githubProjectionTable.grantWriteData(githubProjectionLambda);

        // Attach the GitHub events SQS queue as an event source to the GitHub Projection Lambda
        //githubProjectionLambda.addEventSource(new SqsEventSource(tansuQueue));

        // Build Docker image asset for the consumer container (from consumer/ folder)
        DockerImageAsset dockerImage = DockerImageAsset.Builder.create(this, "ConsumerImage")
                .directory(".")
                .build();

        // Create an App Runner service for the consumer container
        ImageRepositoryProperty imageRepository = ImageRepositoryProperty.builder()
                .imageIdentifier(dockerImage.getImageUri())
                .imageRepositoryType("ECR")
                .build();

        ImageConfigurationProperty imageConfiguration = ImageConfigurationProperty.builder()
                .port("8080")
                .build();

        SourceConfigurationProperty sourceConfiguration = SourceConfigurationProperty.builder()
                .autoDeploymentsEnabled(true)
                .imageRepository(imageRepository)
                //.imageConfiguration(imageConfiguration)
                .build();

        CfnService appRunnerService = CfnService.Builder.create(this, "ConsumerService")
                .serviceName("TansuSqsBridgeConsumer")
                .sourceConfiguration(sourceConfiguration)
                .instanceConfiguration(CfnService.InstanceConfigurationProperty.builder()
                        .cpu("1024")
                        .memory("2048")
                        .build())
                .build();

        // Outputs
        CfnOutput.Builder.create(this, "TansuQueueUrl")
                .value(tansuQueue.getQueueUrl())
                .build();

        CfnOutput.Builder.create(this, "GithubProjectionTableName")
                .value(githubProjectionTable.getTableName())
                .build();

        CfnOutput.Builder.create(this, "AppRunnerServiceUrl")
                .value(appRunnerService.getAttrServiceUrl())
                .build();
    }
}
