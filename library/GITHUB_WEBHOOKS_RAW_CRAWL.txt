Webhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nGitHub DocsHelp for wherever you are on your GitHub journey.Get startedGet startedMigrationsAccount and profileAuthenticationBilling and paymentsSite policyCollaborative codingCodespacesRepositoriesPull requestsGitHub DiscussionsGitHub CopilotGitHub CopilotGet code suggestionsPrompt engineeringChat in GitHubCopilot Chat CookbookExtensions quickstartCI/CD and DevOpsGitHub ActionsGitHub PackagesGitHub PagesSecuritySecure codingSecret scanningSupply chain securityDependabotCode scanningSecurity advisoriesClient appsGitHub CLIGitHub MobileGitHub DesktopProject managementGitHub IssuesProjectsSearch on GitHubEnterprise and TeamsOrganizationsSecure your organizationEnterprise onboardingEnterprise administratorsGitHub Well-ArchitectedDevelopersAppsREST APIGraphQL APIWebhooksBuild Copilot ExtensionsGitHub ModelsCommunityBuilding communitiesGitHub SponsorsGitHub EducationGitHub for NonprofitsGitHub SupportContribute to GitHub DocsMore docsCodeQL query writingElectronnpmGetting startedSet up GitAt the heart of GitHub is an open-source version control system (VCS) called Git. Git is responsible for everything GitHub-related that happens locally on your computer.Connecting to GitHub with SSHYou can connect to GitHub using the Secure Shell Protocol (SSH), which provides a secure channel over an unsecured network.Creating and managing repositoriesYou can create a repository on GitHub to store and collaborate on your project's files, then manage the repository's name and location.Basic writing and formatting syntaxCreate sophisticated formatting for your prose and code on GitHub with simple syntax.PopularAbout pull requestsLearn about pull requests and draft pull requests on GitHub. Pull requests communicate changes to a branch in a repository. Once a pull request is opened, you can review changes with collaborators and add follow-up commits.Authentication documentationKeep your account and data secure with features like two-factor authentication, SSH, and commit signature verification.Getting code suggestions in your IDE with GitHub CopilotUse GitHub Copilot to get code suggestions in your editor.Managing remote repositoriesLearn to work with your local repositories on your computer and remote repositories hosted on GitHub.\n\n\n\nWebhooks documentation Webhooks can let your integrations take an action in response to events that occur on GitHub.Overview Reference Start hereCreating webhooksYou can create webhooks to subscribe to specific events that occur on GitHub.Handling webhook deliveriesLearn how to write code to listen for and respond to webhook deliveries.Validating webhook deliveriesYou can use a webhook secret to verify that a webhook delivery is from GitHub.PopularWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.Best practices for using webhooksFollow these best practices to improve security and performance when using webhooks.Troubleshooting webhooksLearn how to diagnose and resolve common errors for webhooks.What's newView all Secret scanning adds webhook support for validity checksFebruary 12Webhook delivery logs will only be retained for 3 daysOctober 18Merges by pull request merge queue now attributed to the GitHub Merge Queue botJune 21GuidesHandling webhook deliveriesLearn how to write code to listen for and respond to webhook deliveries.@GitHubHandling failed webhook deliveriesGitHub does not automatically redeliver failed webhook deliveries, but you can handle failed deliveries manually or by writing code.@GitHubTesting webhooksLearn how to test your webhooks and your code that handles webhook deliveries.@GitHubAll Webhooks docsUsing webhooksCreating webhooksHandling webhook deliveriesValidating webhook deliveriesDelivering webhooks to private systemsEditing webhooksDisabling webhooksBest practices for using webhooksHandling failed webhook deliveriesAutomatically redelivering failed deliveries for a repository webhookAutomatically redelivering failed deliveries for an organization webhookAutomatically redelivering failed deliveries for a GitHub App webhookTesting and troubleshooting webhooksViewing webhook deliveriesRedelivering webhooksTesting webhooksTroubleshooting webhooksUsing the GitHub CLI to forward webhooks for testing\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/About webhooksAbout webhooksWebhooks provide a way for notifications to be delivered to an external web server whenever certain events occur on GitHub.In this articleAbout webhooksAbout webhooks on GitHubChoosing webhooks or the REST APIFurther readingAbout webhooks
Webhooks let you subscribe to events happening in a software system and automatically receive a delivery of data to your server whenever those events occur.
Webhooks are used to receive data as it happens, as opposed to polling an API (calling an API intermittently) to see if data is available. With webhooks, you only need to express interest in an event once, when you create the webhook.
Webhooks are used in a wide range of scenarios, including:

Triggering CI (continuous integration) pipelines on an external CI server. For example, to trigger CI in Jenkins or CircleCI when code is pushed to a branch.
Sending notifications about events on GitHub to collaboration platforms. For example, sending a notification to Discord or Slack when there's a review on a pull request.
Updating an external issue tracker like Jira.
Deploying to a production server.
Logging events as they happen on GitHub, for audit purposes.

About webhooks on GitHub
When you create a webhook, you specify a URL and subscribe to events that occur on GitHub. When an event that your webhook is subscribed to occurs, GitHub will send an HTTP request with data about the event to the URL that you specified. If your server is set up to listen for webhook deliveries at that URL, it can take action when it receives one.
For example, you could subscribe your webhook to events that occur when code is pushed to a repository, a pull request is opened, a GitHub Pages site is built, or a new member is added to a team. Your server could respond by deploying code to production, triggering a CI pipeline, sending a notification, or creating a GitHub project for the new team member.
You must create a webhook within a specific repository, organization,  GitHub Marketplace account,  GitHub Sponsors account,  or GitHub App. The webhook can only access resources that are available in the repository, organization,  GitHub Marketplace account,  GitHub Sponsors account,  or GitHub App where it is installed. For more information, see Types of webhooks.
For more information about creating webhooks, see Creating webhooks. For more information about the types of events you can subscribe to, see Webhook events and payloads. For more information about configuring your server to take an action in response to a payload delivery, see Handling webhook deliveries.
Note

GitHub webhooks do not currently support IPv6 but will in the future. The /meta REST API endpoint returns IPv6 ranges to enable that transition.

Choosing webhooks or the REST API
Using webhooks has the following advantages over using the API:

Webhooks require less effort and less resources than polling an API.
Webhooks scale better than API calls. If you need to monitor many resources, calling the API for each resource may cause you to hit your API rate limit quota quickly. Instead, you can subscribe to multiple webhook events and receive information only when an event happens.
Webhooks allow near real-time updates, since webhooks are triggered when an event happens.

If you only need information once or intermittently, or only want to get information from a small set of resources with no plans to scale up, you can call the API when you need the relevant information.
For information on best practices to follow when using webhooks, see Best practices for using webhooks.
Note

GitHub Services (sometimes referred to as Service Hooks) is retired, in favor of integrating with webhooks. For more information about migrating your integration from using GitHub Services to using webhooks, see the blog post.

Further reading

Types of webhooks\n\n\n\nWebhooks/Types of webhooksTypes of webhooksYou can create webhooks to subscribe to events that occur in a specific repository, organization,  GitHub Marketplace account,  GitHub Sponsors account,  or GitHub App.In this articleAbout webhook typesRepository webhooksOrganization webhooksGitHub Marketplace webhooksGitHub Sponsors webhooksGitHub App webhooksAbout webhook types
A webhook can only access events that are available in the repository, organization,  GitHub Marketplace account,  GitHub Sponsors account,  or GitHub App where it is installed.
You cannot create webhooks for individual user accounts, or for events that are specific to user resources, like personal notifications or mentions.
To create and manage webhooks, you must own or have admin access to the resource where the webhook is created and listening for events on. For example, to manage webhooks in an organization, you need admin permissions for that organization.
Some webhook events are unique to certain types of webhooks. For example, an organization webhook can subscribe to events that only occur at the organization level, which a repository webhook cannot subscribe to. For more information about the specific availability of each webhook, see Webhook events and payloads.
For more information, see About webhooks.
Repository webhooks
You can create webhooks in a repository to subscribe to events that occur in that repository. You must be a repository owner or have admin access in the repository to create and manage webhooks in a repository. You cannot create, edit, or delete webhooks in a repository where you do not have the required permissions.
You can create multiple webhooks in a single repository. However, you can only create up to 20 webhooks that subscribe to each individual event type. For example, in a single repository you could only create up to 20 different webhooks that each subscribe to the push event.
You can use the GitHub web interface or the REST API to manage repository webhooks. For more information, see Creating webhooks, Editing webhooks, and Disabling webhooks. For more information about using the REST API to manage repository webhooks, see REST API endpoints for repository webhooks.
Organization webhooks
You can create webhooks in an organization to subscribe to events that occur in that organization. Organization webhooks can subscribe to events that happen in all repositories owned by the organization. They can also subscribe to events that happen at the organization level that are outside of any particular repository, like when a new member is added to the organization.
You must be an organization owner to create and manage webhooks in an organization.
You can create multiple webhooks in a single organization. However, you can only create up to 20 webhooks that subscribe to each individual event type. For example, in a single organization you could only create up to 20 different webhooks that each subscribe to the push event.
You can use the GitHub web interface or the REST API to manage organization webhooks. For more information, see Creating webhooks, Editing webhooks, and Disabling webhooks. For more information about using the REST API to manage organization webhooks, see REST API endpoints for organization webhooks.
GitHub Marketplace webhooks
You can create a webhook to subscribe to events relating to an app that you published in GitHub Marketplace. You can only create one webhook for each app in GitHub Marketplace. Only the owner of the app, or an app manager for the organization that owns the app, can create and manage a GitHub Marketplace webhook.
A GitHub Marketplace webhook cannot be deleted, but you can deactivate it to stop receiving webhook deliveries.
You can use the GitHub web interface to manage a GitHub Marketplace webhook. For more information, see Creating webhooks, Editing webhooks, and Disabling webhooks.
GitHub Sponsors webhooks
You can create webhooks to subscribe to events relating to GitHub Sponsors. You can only create up to 20 webhooks for a GitHub Sponsors account.
You must be an account owner or have admin access in the sponsored account to manage sponsorship webhooks.
You can use the GitHub web interface to manage GitHub Sponsors webhooks. For more information, see Creating webhooks, Editing webhooks, and Disabling webhooks.
GitHub App webhooks
You can configure a GitHub App to receive webhooks when specific events occur in a repository or organization that the app has been granted access to.
Each GitHub App has a single webhook that is automatically created by GitHub. By default, the webhook is not subscribed to any events. You can configure the events that the webhook subscribes to. A GitHub App webhook cannot be deleted, but you can deactivate it to stop receiving webhook deliveries.
You can use the GitHub web interface or the REST API to manage a GitHub App webhook. For more information, see Creating webhooks, Editing webhooks, and Disabling webhooks. For more information about using the REST API to manage GitHub App webhooks, see REST API endpoints for GitHub App webhooks.\n\n\n\nWebhooks/Using webhooks/Create webhooksCreating webhooksYou can create webhooks to subscribe to specific events that occur on GitHub.In this articleAbout creating webhooksCreating a repository webhookCreating an organization webhookCreating a GitHub Marketplace webhookCreating a GitHub Sponsors webhookCreating webhooks for a GitHub AppFurther readingAbout creating webhooks
You can create webhooks to subscribe to specific events on GitHub that occur in a repository, organization,  GitHub Marketplace account,  GitHub Sponsors account,  or GitHub App.
For more information about the different types of webhooks, see Types of webhooks.
For a complete list of webhook events, see Webhook events and payloads.
Creating a repository webhook
You can create a webhook to subscribe to events that occur in a specific repository. You must be a repository owner or have admin access in the repository to create webhooks in that repository.
You can use the GitHub web interface or the REST API to create a repository webhook. For more information about using the REST API to create a repository webhook, see REST API endpoints for repository webhooks.


On GitHub, navigate to the main page of the repository.


Under your repository name, click  Settings. If you cannot see the "Settings" tab, select the  dropdown menu, then click Settings.



In the left sidebar, click  Webhooks.


Click Add webhook.


Under "Payload URL", type the URL where you'd like to receive payloads.


Optionally, select the Content type drop-down menu, and click a data format to receive the webhook payload in.

application/json will deliver the JSON payload directly as the body of the POST request.
application/x-www-form-urlencoded will send the JSON payload as a form parameter called payload.



Optionally, under "Secret", type a string to use as a secret key. You should choose a random string of text with high entropy. You can use the webhook secret to limit incoming requests to only those originating from GitHub. For more information, see Validating webhook deliveries.


Under "Which events would you like to trigger this webhook?", select the webhook events that you want to receive. You should only subscribe to the webhook events that you need.


If you chose Let me select individual events, select the events that you want to trigger the webhook.


To make the webhook active immediately after adding the configuration, select Active.


Click Add webhook.


After you create a new webhook, GitHub will send you a simple ping event to let you know you've set up the webhook correctly. For more information, see Webhook events and payloads.
Creating an organization webhook
You can create a webhook to subscribe to events that occur in a specific organization. You must be an organization owner to create webhooks in that organization.
You can use the GitHub web interface or the REST API to create an organization webhook. For more information about using the REST API to create an organization webhook, see REST API endpoints for organization webhooks.

In the upper-right corner of any page on GitHub, click your profile photo.
Click Your organizations.
To the right of the organization, click Settings.
In the left sidebar, click  Webhooks.
Click Add webhook.
Under "Payload URL", type the URL where you'd like to receive payloads.
Optionally, select the Content type drop-down menu, and click a data format to receive the webhook payload in.

application/json will deliver the JSON payload directly as the body of the POST request.
application/x-www-form-urlencoded will send the JSON payload as a form parameter called payload.


Optionally, under "Secret", type a string to use as a secret key. You should choose a random string of text with high entropy. You can use the webhook secret to limit incoming requests to only those originating from GitHub. For more information, see Validating webhook deliveries.
Under "Which events would you like to trigger this webhook?", select the types of webhooks you'd like to receive. You should only subscribe to the webhook events that you need.
If you chose Let me select individual events, select the events that will trigger the webhook.
To make the webhook active immediately after adding the configuration, select Active.
Click Add webhook.

After you create a new webhook, GitHub will send you a simple ping event to let you know you've set up the webhook correctly. For more information, see Webhook events and payloads.
Creating a GitHub Marketplace webhook
You can create a webhook to subscribe to events relating to an app that you published in GitHub Marketplace. Only the owner of the app, or an app manager for the organization that owns the app, can create a GitHub Marketplace webhook.

Navigate to your GitHub Marketplace listing page.
Next to the GitHub Marketplace listing that you want to view webhook deliveries for, click Manage listing.
In the sidebar, click Webhook.
Under "Payload URL", type the URL where you'd like to receive payloads.
Optionally, select the Content type drop-down menu, and click a data format to receive the webhook payload in.

application/json will deliver the JSON payload directly as the body of the POST request.
application/x-www-form-urlencoded will send the JSON payload as a form parameter called payload.


Optionally, under "Secret", type a string to use as a secret key. You should choose a random string of text with high entropy. You can use the webhook secret to limit incoming requests to only those originating from GitHub. For more information, see Validating webhook deliveries.
To make the webhook active immediately after adding the configuration, select Active.
Click Create webhook.

After you create a new webhook, GitHub will send you a simple ping event to let you know you've set up the webhook correctly. For more information, see Webhook events and payloads.
Creating a GitHub Sponsors webhook
You can create a webhook to subscribe to events relating to your sponsorships. Only the owner of the sponsored account can create sponsorship webhooks for that account. For more information about the event that a sponsorship webhook is subscribed to, see the sponsorship webhook event.

In the upper-right corner of any page, click your profile photo, then click Your sponsors.
Next to the account you want to create a webhook for, click Dashboard.
In the left sidebar, click Webhooks.
Click Add webhook.
Under "Payload URL", type the URL where you'd like to receive payloads.
Optionally, select the Content type drop-down menu, and click a data format to receive the webhook payload in.

application/json will deliver the JSON payload directly as the body of the POST request.
application/x-www-form-urlencoded will send the JSON payload as a form parameter called payload.


Optionally, under "Secret", type a string to use as a secret key. You should choose a random string of text with high entropy. You can use the webhook secret to limit incoming requests to only those originating from GitHub. For more information, see Validating webhook deliveries.
To make the webhook active immediately after adding the configuration, select Active.
Click Create webhook.

Creating webhooks for a GitHub App
The owner of a GitHub App can subscribe the app to webhook events to receive notifications whenever certain events occur. If an organization has designated any app managers for a GitHub App owned by the organization, the app managers can also subscribe the app to webhook events. For more information, see Using webhooks with GitHub Apps.
Each GitHub App has one webhook. You can configure the webhook when you register a GitHub App, or you can edit the webhook configuration for an existing GitHub App registration.
For more information about configuring a webhook when you register a GitHub App, see Registering a GitHub App.
To configure a webhook for an existing GitHub App registration:


In the upper-right corner of any page on GitHub, click your profile photo.


Navigate to your account settings.

For an app owned by a personal account, click Settings.
For an app owned by an organization:

Click Your organizations.
To the right of the organization, click Settings.





In the left sidebar, click  Developer settings.


In the left sidebar, click GitHub Apps.


Next to the GitHub App that you want to configure the webhook for, click Edit.


Under "Webhook," select Active.


Under "Webhook URL", type the URL where you'd like to receive payloads.


Optionally, under "Webhook secret", type a string to use as a secret key. You should choose a random string of text with high entropy. You can use the webhook secret to limit incoming requests to only those originating from GitHub. For more information, see Validating webhook deliveries.


Click Save changes.


In the sidebar, click Permissions & events.


The specific webhook events that you can select for your GitHub App registration are determined by the type of permissions you selected for your app. You will first need to select the permissions you would like your app to have, and then you can subscribe your app to webhook events that are related to that set of permissions.
Under the sections "Repository permissions," "Organization permissions," and "Account permissions," select the permissions that are required for the events your app will subscribe to. For more information, see Choosing permissions for a GitHub App. For more information about things to consider when changing the permissions, see Modifying a GitHub App registration.


Under "Subscribe to Events," select the webhook events you would like your GitHub App to receive.


Click Save changes.


You can also use the REST API to create a webhook for a GitHub App. For more information, see REST API endpoints for GitHub App webhooks.
Further reading

About webhooks
Handling webhook deliveries\n\n\n\nWebhooks/Using webhooks/Handle deliveriesHandling webhook deliveriesLearn how to write code to listen for and respond to webhook deliveries.In this articleIntroductionSetupWrite code to handle webhook deliveriesTroubleshootingNext stepsFurther readingIntroduction
When you create a webhook, you specify a URL and subscribe to event types. When an event that your webhook is subscribed to occurs, GitHub will send an HTTP request with data about the event to the URL that you specified. If your server is set up to listen for webhook deliveries at that URL, it can take action when it receives one.
This article describes how to write code to let your server listen for and respond to webhook deliveries. You will test your code by using your computer or codespace as a local server.
Setup
In order to test your webhook locally, you can use a webhook proxy URL to forward webhooks from GitHub to your computer or codespace. This article uses smee.io to provide a webhook proxy URL and forward webhooks.
Get a webhook proxy URL

In your browser, navigate to https://smee.io/.
Click Start a new channel.
Copy the full URL under "Webhook Proxy URL". You will use this URL in the following setup steps.

Forward webhooks


If you don't already have smee-client installed, run the following command in your terminal:
Shellnpm install --global smee-client
npm install --global smee-client



To receive forwarded webhooks from smee.io, run the following command in your terminal. Replace WEBHOOK_PROXY_URL with your webhook proxy URL from earlier.
Shellsmee --url WEBHOOK_PROXY_URL --path /webhook --port 3000
smee --url WEBHOOK_PROXY_URL --path /webhook --port 3000

You should see output that looks like this, where WEBHOOK_PROXY_URL is your webhook proxy URL:
ShellForwarding WEBHOOK_PROXY_URL to http://127.0.0.1:3000/webhook
Connected WEBHOOK_PROXY_URL
Forwarding WEBHOOK_PROXY_URL to http://127.0.0.1:3000/webhook
Connected WEBHOOK_PROXY_URL

Note that the path is /webhook and the port is 3000. You will use these values later when you write code to handle webhook deliveries.


Keep this running while you test out your webhook. When you want to stop forwarding webhooks, enter Ctrl+C .


Create a webhook


Create a webhook with the following settings. For more information, see Creating webhooks.

For the URL, use your webhook proxy URL from earlier.
If you have an option to choose the content type, use JSON.



Write code to handle webhook deliveries
In order to handle webhook deliveries, you need to write code that will:

Initialize your server to listen for requests to your webhook URL
Read the HTTP headers and body from the request
Take the desired action in response to the request

You can use any programming language that you can run on your server.
The following examples print a message when a webhook delivery is received. However, you can modify the code to take another action, such as making a request to the GitHub API or sending a Slack message.

Ruby example
JavaScript example

Ruby example
This example uses the Ruby gem, Sinatra, to define routes and handle HTTP requests. For more information, see the Sinatra README.
Ruby example: Install dependencies
To use this example, you must install the sinatra gem in your Ruby project. For example, you can do this with Bundler:


If you don't already have Bundler installed, run the following command in your terminal:
Shellgem install bundler
gem install bundler



If you don't already have a Gemfile for your app, run the following command in your terminal:
Shellbundle init
bundle init



If you don't already have a Gemfile.lock for your app, run the following command in your terminal:
Shellbundle install
bundle install



Install the Sinatra gem by running the following command in your terminal:
Shellbundle add sinatra
bundle add sinatra



Ruby example: Write the code
Create a Ruby file with the following contents. Modify the code to handle the event types that your webhook is subscribed to, as well as the ping event that GitHub sends when you create a webhook. This example handles the issues and ping events.
RubyBesideInline# These are the dependencies for this code. You installed the `sinatra` gem earlier. For more information, see [Ruby example: Install dependencies](#ruby-example-install-dependencies). The `json` library is a standard Ruby library, so you don't need to install it.
require 'sinatra'
require 'json'

# The `/webhook` route matches the path that you specified for the smee.io forwarding. For more information, see [Forward webhooks](#forward-webhooks).
#
# Once you deploy your code to a server and update your webhook URL, you should change this to match the path portion of the URL for your webhook.
post '/webhook' do

  # Respond to indicate that the delivery was successfully received.
  # Your server should respond with a 2XX response within 10 seconds of receiving a webhook delivery. If your server takes longer than that to respond, then GitHub terminates the connection and considers the delivery a failure.
  status 202

  # Check the `X-GitHub-Event` header to learn what event type was sent.
  # Sinatra changes `X-GitHub-Event` to `HTTP_X_GITHUB_EVENT`.
  github_event = request.env['HTTP_X_GITHUB_EVENT']

  # You should add logic to handle each event type that your webhook is subscribed to.
  # For example, this code handles the `issues` and `ping` events.
  #
  # If any events have an `action` field, you should also add logic to handle each action that you are interested in.
  # For example, this code handles the `opened` and `closed` actions for the `issue` event.
  #
  # For more information about the data that you can expect for each event type, see [AUTOTITLE](/webhooks/webhook-events-and-payloads).
  if github_event == "issues"
    data = JSON.parse(request.body.read)
    action = data['action']
    if action == "opened"
      puts "An issue was opened with this title: #{data['issue']['title']}"
    elsif action == "closed"
      puts "An issue was closed by #{data['issue']['user']['login']}"
    else
      puts "Unhandled action for the issue event: #{action}"
    end
  elsif github_event == "ping"
    puts "GitHub sent the ping event"
  else
    puts "Unhandled event: #{github_event}"
  end
end
require 'sinatra'
require 'json'These are the dependencies for this code. You installed the sinatra gem earlier. For more information, see Ruby example: Install dependencies. The json library is a standard Ruby library, so you don't need to install it.post '/webhook' doThe /webhook route matches the path that you specified for the smee.io forwarding. For more information, see Forward webhooks.
Once you deploy your code to a server and update your webhook URL, you should change this to match the path portion of the URL for your webhook.  status 202Respond to indicate that the delivery was successfully received.
Your server should respond with a 2XX response within 10 seconds of receiving a webhook delivery. If your server takes longer than that to respond, then GitHub terminates the connection and considers the delivery a failure.  github_event = request.env['HTTP_X_GITHUB_EVENT']Check the X-GitHub-Event header to learn what event type was sent.
Sinatra changes X-GitHub-Event to HTTP_X_GITHUB_EVENT.  if github_event == "issues"
    data = JSON.parse(request.body.read)
    action = data['action']
    if action == "opened"
      puts "An issue was opened with this title: #{data['issue']['title']}"
    elsif action == "closed"
      puts "An issue was closed by #{data['issue']['user']['login']}"
    else
      puts "Unhandled action for the issue event: #{action}"
    end
  elsif github_event == "ping"
    puts "GitHub sent the ping event"
  else
    puts "Unhandled event: #{github_event}"
  end
endYou should add logic to handle each event type that your webhook is subscribed to.
For example, this code handles the issues and ping events.
If any events have an action field, you should also add logic to handle each action that you are interested in.
For example, this code handles the opened and closed actions for the issue event.
For more information about the data that you can expect for each event type, see AUTOTITLE.# These are the dependencies for this code. You installed the `sinatra` gem earlier. For more information, see [Ruby example: Install dependencies](#ruby-example-install-dependencies). The `json` library is a standard Ruby library, so you don't need to install it.
require 'sinatra'
require 'json'

# The `/webhook` route matches the path that you specified for the smee.io forwarding. For more information, see [Forward webhooks](#forward-webhooks).
#
# Once you deploy your code to a server and update your webhook URL, you should change this to match the path portion of the URL for your webhook.
post '/webhook' do

  # Respond to indicate that the delivery was successfully received.
  # Your server should respond with a 2XX response within 10 seconds of receiving a webhook delivery. If your server takes longer than that to respond, then GitHub terminates the connection and considers the delivery a failure.
  status 202

  # Check the `X-GitHub-Event` header to learn what event type was sent.
  # Sinatra changes `X-GitHub-Event` to `HTTP_X_GITHUB_EVENT`.
  github_event = request.env['HTTP_X_GITHUB_EVENT']

  # You should add logic to handle each event type that your webhook is subscribed to.
  # For example, this code handles the `issues` and `ping` events.
  #
  # If any events have an `action` field, you should also add logic to handle each action that you are interested in.
  # For example, this code handles the `opened` and `closed` actions for the `issue` event.
  #
  # For more information about the data that you can expect for each event type, see [AUTOTITLE](/webhooks/webhook-events-and-payloads).
  if github_event == "issues"
    data = JSON.parse(request.body.read)
    action = data['action']
    if action == "opened"
      puts "An issue was opened with this title: #{data['issue']['title']}"
    elsif action == "closed"
      puts "An issue was closed by #{data['issue']['user']['login']}"
    else
      puts "Unhandled action for the issue event: #{action}"
    end
  elsif github_event == "ping"
    puts "GitHub sent the ping event"
  else
    puts "Unhandled event: #{github_event}"
  end
end

Ruby example: Test the code
To test your webhook, you can use your computer or codespace to act as a local server. If you have trouble with these steps, see Troubleshooting.


Make sure that you are forwarding webhooks. If you are no longer forwarding webhooks, follow the steps in Forward webhooks again.


In a separate terminal window, run the following command to start a local server on your computer or codespace. Replace FILE_PATH with the path to the file where your code from the previous section is stored. Note that PORT=3000 matches the port that you specified for the webhook forwarding in the previous step.
ShellPORT=3000 ruby FILE_NAME
PORT=3000 ruby FILE_NAME

You should see output that indicates something like "Sinatra has taken the stage on 3000".


Trigger your webhook. For example, if you created a repository webhook that is subscribed to the issues event, open an issue in your repository. You can also redeliver a previous webhook delivery. For more information, see Redelivering webhooks.


Navigate to your webhook proxy URL on smee.io. You should see an event that corresponds to the event that you triggered or redelivered. This indicates that GitHub successfully sent a webhook delivery to the payload URL that you specified.


In the terminal window where you ran smee --url WEBHOOK_PROXY_URL --path /webhook --port 3000, you should see something like POST http://127.0.0.1:3000/webhook - 202. This indicates that smee successfully forwarded your webhook to your local server.


In the terminal window where you ran PORT=3000 ruby FILE_NAME, you should see a message corresponding to the event that was sent. For example, if you use the example code from above and you redelivered the ping event, you should see "GitHub sent the ping event". You may also see some other lines that Sinatra automatically prints.


In both terminal windows, enter Ctrl+C to stop your local server and stop listening for forwarded webhooks.


Now that you have tested out your code locally, you can make changes to use your webhook in production. For more information, see Next steps. If you had trouble testing your code, try the steps in Troubleshooting.
JavaScript example
This example uses Node.js and the Express library to define routes and handle HTTP requests. For more information, see expressjs.com.
For an example that uses GitHub's Octokit.js SDK, see Building a GitHub App that responds to webhook events.
This example requires your computer or codespace to run Node.js version 12 or greater and npm version 6.12.0 or greater. For more information, see Node.js.
JavaScript example: Install dependencies
To use this example, you must install the express library in your Node.js project. For example:
Shellnpm install express
npm install express

JavaScript example: Write the code
Create a JavaScript file with the following contents. Modify the code to handle the event types that your webhook is subscribed to, as well as the ping event that GitHub sends when you create a webhook. This example handles the issues and ping events.
JavaScriptBesideInline// You installed the `express` library earlier. For more information, see [JavaScript example: Install dependencies](#javascript-example-install-dependencies).
const express = require('express');

// This initializes a new Express application.
const app = express();

// This defines a POST route at the `/webhook` path. This path matches the path that you specified for the smee.io forwarding. For more information, see [Forward webhooks](#forward-webhooks).
//
// Once you deploy your code to a server and update your webhook URL, you should change this to match the path portion of the URL for your webhook.
app.post('/webhook', express.json({type: 'application/json'}), (request, response) => {

  // Respond to indicate that the delivery was successfully received.
  // Your server should respond with a 2XX response within 10 seconds of receiving a webhook delivery. If your server takes longer than that to respond, then GitHub terminates the connection and considers the delivery a failure.
  response.status(202).send('Accepted');

  // Check the `x-github-event` header to learn what event type was sent.
  const githubEvent = request.headers['x-github-event'];

  // You should add logic to handle each event type that your webhook is subscribed to.
  // For example, this code handles the `issues` and `ping` events.
  //
  // If any events have an `action` field, you should also add logic to handle each action that you are interested in.
  // For example, this code handles the `opened` and `closed` actions for the `issue` event.
  //
  // For more information about the data that you can expect for each event type, see [AUTOTITLE](/webhooks/webhook-events-and-payloads).
  if (githubEvent === 'issues') {
    const data = request.body;
    const action = data.action;
    if (action === 'opened') {
      console.log(`An issue was opened with this title: ${data.issue.title}`);
    } else if (action === 'closed') {
      console.log(`An issue was closed by ${data.issue.user.login}`);
    } else {
      console.log(`Unhandled action for the issue event: ${action}`);
    }
  } else if (githubEvent === 'ping') {
    console.log('GitHub sent the ping event');
  } else {
    console.log(`Unhandled event: ${githubEvent}`);
  }
});

// This defines the port where your server should listen.
// 3000 matches the port that you specified for webhook forwarding. For more information, see [Forward webhooks](#forward-webhooks).
//
// Once you deploy your code to a server, you should change this to match the port where your server is listening.
const port = 3000;

// This starts the server and tells it to listen at the specified port.
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
const express = require('express');You installed the express library earlier. For more information, see JavaScript example: Install dependencies.const app = express();This initializes a new Express application.app.post('/webhook', express.json({type: 'application/json'}), (request, response) => {This defines a POST route at the /webhook path. This path matches the path that you specified for the smee.io forwarding. For more information, see Forward webhooks.
Once you deploy your code to a server and update your webhook URL, you should change this to match the path portion of the URL for your webhook.  response.status(202).send('Accepted');Respond to indicate that the delivery was successfully received.
Your server should respond with a 2XX response within 10 seconds of receiving a webhook delivery. If your server takes longer than that to respond, then GitHub terminates the connection and considers the delivery a failure.  const githubEvent = request.headers['x-github-event'];Check the x-github-event header to learn what event type was sent.  if (githubEvent === 'issues') {
    const data = request.body;
    const action = data.action;
    if (action === 'opened') {
      console.log(`An issue was opened with this title: ${data.issue.title}`);
    } else if (action === 'closed') {
      console.log(`An issue was closed by ${data.issue.user.login}`);
    } else {
      console.log(`Unhandled action for the issue event: ${action}`);
    }
  } else if (githubEvent === 'ping') {
    console.log('GitHub sent the ping event');
  } else {
    console.log(`Unhandled event: ${githubEvent}`);
  }
});You should add logic to handle each event type that your webhook is subscribed to.
For example, this code handles the issues and ping events.
If any events have an action field, you should also add logic to handle each action that you are interested in.
For example, this code handles the opened and closed actions for the issue event.
For more information about the data that you can expect for each event type, see AUTOTITLE.const port = 3000;This defines the port where your server should listen.
3000 matches the port that you specified for webhook forwarding. For more information, see Forward webhooks.
Once you deploy your code to a server, you should change this to match the port where your server is listening.app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});This starts the server and tells it to listen at the specified port.// You installed the `express` library earlier. For more information, see [JavaScript example: Install dependencies](#javascript-example-install-dependencies).
const express = require('express');

// This initializes a new Express application.
const app = express();

// This defines a POST route at the `/webhook` path. This path matches the path that you specified for the smee.io forwarding. For more information, see [Forward webhooks](#forward-webhooks).
//
// Once you deploy your code to a server and update your webhook URL, you should change this to match the path portion of the URL for your webhook.
app.post('/webhook', express.json({type: 'application/json'}), (request, response) => {

  // Respond to indicate that the delivery was successfully received.
  // Your server should respond with a 2XX response within 10 seconds of receiving a webhook delivery. If your server takes longer than that to respond, then GitHub terminates the connection and considers the delivery a failure.
  response.status(202).send('Accepted');

  // Check the `x-github-event` header to learn what event type was sent.
  const githubEvent = request.headers['x-github-event'];

  // You should add logic to handle each event type that your webhook is subscribed to.
  // For example, this code handles the `issues` and `ping` events.
  //
  // If any events have an `action` field, you should also add logic to handle each action that you are interested in.
  // For example, this code handles the `opened` and `closed` actions for the `issue` event.
  //
  // For more information about the data that you can expect for each event type, see [AUTOTITLE](/webhooks/webhook-events-and-payloads).
  if (githubEvent === 'issues') {
    const data = request.body;
    const action = data.action;
    if (action === 'opened') {
      console.log(`An issue was opened with this title: ${data.issue.title}`);
    } else if (action === 'closed') {
      console.log(`An issue was closed by ${data.issue.user.login}`);
    } else {
      console.log(`Unhandled action for the issue event: ${action}`);
    }
  } else if (githubEvent === 'ping') {
    console.log('GitHub sent the ping event');
  } else {
    console.log(`Unhandled event: ${githubEvent}`);
  }
});

// This defines the port where your server should listen.
// 3000 matches the port that you specified for webhook forwarding. For more information, see [Forward webhooks](#forward-webhooks).
//
// Once you deploy your code to a server, you should change this to match the port where your server is listening.
const port = 3000;

// This starts the server and tells it to listen at the specified port.
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

JavaScript example: Test the code
To test your webhook, you can use your computer or codespace to act as a local server. If you have trouble with these steps, see Troubleshooting.


Make sure that you are forwarding webhooks. If you are no longer forwarding webhooks, follow the steps in Forward webhooks again.


In a separate terminal window, run the following command to start a local server on your computer or codespace. Replace FILE_PATH with the path to the file where your code from the previous section is stored.
Shellnode FILE_NAME
node FILE_NAME

You should see output that says Server is running on port 3000.


Trigger your webhook. For example, if you created a repository webhook that is subscribed to the issues event, open an issue in your repository. You can also redeliver a previous webhook delivery. For more information, see Redelivering webhooks.


Navigate to your webhook proxy URL on smee.io. You should see an event that corresponds to the event that you triggered or redelivered. This indicates that GitHub successfully sent a webhook delivery to the payload URL that you specified.


In the terminal window where you ran smee --url WEBHOOK_PROXY_URL --path /webhook --port 3000, you should see something like POST http://127.0.0.1:3000/webhook - 202. This indicates that smee successfully forwarded your webhook to your local server.


In the terminal window where you ran node FILE_NAME, you should see a message corresponding to the event that was sent. For example, if you use the example code from above and you redelivered the ping event, you should see "GitHub sent the ping event".


In both terminal windows, enter Ctrl+C to stop your local server and stop listening for forwarded webhooks.


Now that you have tested out your code locally, you can make changes to use your webhook in production. For more information, see Next steps. If you had trouble testing your code, try the steps in Troubleshooting.
Troubleshooting
If you don't see the expected results described in the testing steps, try the following:

Make sure that your webhook is using your webhook proxy URL (Smee.io URL). For more information about your webhook proxy URL, see Get a webhook proxy URL. For more information about your webhook settings, see Creating webhooks.
Make sure that your webhook uses the JSON content type, if you have a choice about what content type to use. For more information about your webhook settings, see Creating webhooks.
Make sure that both the smee client and your local server are running. You will have these processes running in two separate terminal windows.
Make sure that your server is listening to the same port where smee.io is forwarding webhooks. All of the examples in this article use port 3000.
Make sure that the path where smee.io is forwarding webhooks matches a route that is defined in your code. All of the examples in this article use the /webhooks path.
Check for error messages in the terminal windows where you are running the smee client and your local server.
Check GitHub to verify that a webhook delivery was triggered. For more information, see Viewing webhook deliveries.
Check your webhook proxy URL on smee.io. You should see an event that corresponds to the event that you triggered or redelivered. This indicates that GitHub successfully sent a webhook delivery to the payload URL that you specified.

Next steps
This article demonstrated how to write code to handle webhook deliveries. It also demonstrated how to test your code by using your computer or codespace as a local server and by forwarding webhook deliveries from GitHub to your local server via smee.io. Once you are done testing your code, you might want to modify the code and deploy your code to a server.
Modify the code
This article gave basic examples that print a message when a webhook delivery is received. You may want to modify the code to take some other action. For example, you could modify the code to:

Make a request to the GitHub API
Send a message on Slack
Log events
Update an external project management tool

Verify that the delivery is from GitHub
In your code that handles webhook deliveries, you should validate that the delivery is from GitHub before processing the delivery further. For more information, see Validating webhook deliveries.
Deploy your code to a server
This article demonstrated how to use your computer or codespace as a server while you develop your code. Once the code is ready for production use, you should deploy your code to a dedicated server.
When you do so, you may need to update your code to reflect the host and port where your server is listening.
Update the webhook URL
Once you have a server that is set up to receive webhook traffic from GitHub, update the URL in your webhook settings. You may need to update the route that your code handles to match the path portion of the new URL. For example, if your new webhook URL is https://example.com/github-webhooks, you should change the route in these examples from /webhooks to /github-webhooks.
You should not use smee.io to forward your webhooks in production.
Follow best practices
You should aim to follow best practices with your webhooks. For more information, see Best practices for using webhooks.
Further reading

Building a GitHub App that responds to webhook events
Best practices for using webhooks\n\n\n\nWebhooks/Using webhooks/Validate deliveriesValidating webhook deliveriesYou can use a webhook secret to verify that a webhook delivery is from GitHub.In this articleAbout validating webhook deliveriesCreating a secret tokenSecurely storing the secret tokenValidating webhook deliveriesTroubleshootingFurther readingAbout validating webhook deliveries
Once your server is configured to receive payloads, it will listen for any delivery that's sent to the endpoint you configured. To ensure that your server only processes webhook deliveries that were sent by GitHub and to ensure that the delivery was not tampered with, you should validate the webhook signature before processing the delivery further. This will help you avoid spending server time to process deliveries that are not from GitHub and will help avoid man-in-the-middle attacks.
To do this, you need to:

Create a secret token for a webhook.
Store the token securely on your server.
Validate incoming webhook payloads against the token, to verify that they are coming from GitHub and were not tampered with.

Creating a secret token
You can create a new webhook with a secret token, or you can add a secret token to an existing webhook. When creating a secret token, you should choose a random string of text with high entropy.

To create a new webhook with a secret token, see Creating webhooks.
To add a secret token to an existing webhook, edit the webhook's settings. Under "Secret", type a string to use as a secret key. For more information, see Editing webhooks.

Securely storing the secret token
After creating a secret token, you should store it in a secure location that your server can access. Never hardcode a token into an application or push a token to any repository. For more information about how to use authentication credentials securely in your code, see Keeping your API credentials secure.
Validating webhook deliveries
GitHub will use your secret token to create a hash signature that's sent to you with each payload. The hash signature will appear in each delivery as the value of the X-Hub-Signature-256 header. For more information, see Webhook events and payloads.
In your code that handles webhook deliveries, you should calculate a hash using your secret token. Then, compare the hash that GitHub sent with the expected hash that you calculated, and ensure that they match. For examples showing how to validate the hashes in various programming languages, see Examples.
There are a few important things to keep in mind when validating webhook payloads:

GitHub uses an HMAC hex digest to compute the hash.
The hash signature always starts with sha256=.
The hash signature is generated using your webhook's secret token and the payload contents.
If your language and server implementation specifies a character encoding, ensure that you handle the payload as UTF-8. Webhook payloads can contain unicode characters.
Never use a plain == operator. Instead consider using a method like secure_compare or crypto.timingSafeEqual, which performs a "constant time" string comparison to help mitigate certain timing attacks against regular equality operators, or regular loops in JIT-optimized languages.

Testing the webhook payload validation
You can use the following secret and payload values to verify that your implementation is correct:

secret: It's a Secret to Everybody
payload: Hello, World!

If your implementation is correct, the signatures that you generate should match the following signature values:

signature: 757107ea0eb2509fc211221cce984b8a37570b6d7586c22c46f4379c8b043e17 
X-Hub-Signature-256: sha256=757107ea0eb2509fc211221cce984b8a37570b6d7586c22c46f4379c8b043e17

Examples
You can use your programming language of choice to implement HMAC verification in your code. Following are some examples showing how an implementation might look in various programming languages.
Ruby example
For example, you can define the following verify_signature function:
def verify_signature(payload_body)
  signature = 'sha256=' + OpenSSL::HMAC.hexdigest(OpenSSL::Digest.new('sha256'), ENV['SECRET_TOKEN'], payload_body)
  return halt 500, "Signatures didn't match!" unless Rack::Utils.secure_compare(signature, request.env['HTTP_X_HUB_SIGNATURE_256'])
end

Then you can call it when you receive a webhook payload:
post '/payload' do
  request.body.rewind
  payload_body = request.body.read
  verify_signature(payload_body)
  push = JSON.parse(payload_body)
  "I got some JSON: #{push.inspect}"
end

Python example
For example, you can define the following verify_signature function and call it when you receive a webhook payload:
import hashlib
import hmac
def verify_signature(payload_body, secret_token, signature_header):
    """Verify that the payload was sent from GitHub by validating SHA256.

    Raise and return 403 if not authorized.

    Args:
        payload_body: original request body to verify (request.body())
        secret_token: GitHub app webhook token (WEBHOOK_SECRET)
        signature_header: header received from GitHub (x-hub-signature-256)
    """
    if not signature_header:
        raise HTTPException(status_code=403, detail="x-hub-signature-256 header is missing!")
    hash_object = hmac.new(secret_token.encode('utf-8'), msg=payload_body, digestmod=hashlib.sha256)
    expected_signature = "sha256=" + hash_object.hexdigest()
    if not hmac.compare_digest(expected_signature, signature_header):
        raise HTTPException(status_code=403, detail="Request signatures didn't match!")

JavaScript example
For example, you can define the following verifySignature function and call it in any JavaScript environment when you receive a webhook payload:
let encoder = new TextEncoder();

async function verifySignature(secret, header, payload) {
    let parts = header.split("=");
    let sigHex = parts[1];

    let algorithm = { name: "HMAC", hash: { name: 'SHA-256' } };

    let keyBytes = encoder.encode(secret);
    let extractable = false;
    let key = await crypto.subtle.importKey(
        "raw",
        keyBytes,
        algorithm,
        extractable,
        [ "sign", "verify" ],
    );

    let sigBytes = hexToBytes(sigHex);
    let dataBytes = encoder.encode(payload);
    let equal = await crypto.subtle.verify(
        algorithm.name,
        key,
        sigBytes,
        dataBytes,
    );

    return equal;
}

function hexToBytes(hex) {
    let len = hex.length / 2;
    let bytes = new Uint8Array(len);

    let index = 0;
    for (let i = 0; i < hex.length; i += 2) {
        let c = hex.slice(i, i + 2);
        let b = parseInt(c, 16);
        bytes[index] = b;
        index += 1;
    }

    return bytes;
}

TypeScript example
For example, you can define the following verify_signature function and call it when you receive a webhook payload:
JavaScriptimport { Webhooks } from "@octokit/webhooks";

const webhooks = new Webhooks({
  secret: process.env.WEBHOOK_SECRET,
});

const handleWebhook = async (req, res) => {
  const signature = req.headers["x-hub-signature-256"];
  const body = await req.text();

  if (!(await webhooks.verify(body, signature))) {
    res.status(401).send("Unauthorized");
    return;
  }

  // The rest of your logic here
};
import { Webhooks } from "@octokit/webhooks";

const webhooks = new Webhooks({
  secret: process.env.WEBHOOK_SECRET,
});

const handleWebhook = async (req, res) => {
  const signature = req.headers["x-hub-signature-256"];
  const body = await req.text();

  if (!(await webhooks.verify(body, signature))) {
    res.status(401).send("Unauthorized");
    return;
  }

  // The rest of your logic here
};

Troubleshooting
If you are sure that the payload is from GitHub but the signature verification fails:

Make sure that you have configured a secret for your webhook. The X-Hub-Signature-256 header will not be present if you have not configured a secret for your webhook. For more information about configuring a secret for your webhook, see Editing webhooks.
Make sure you are using the correct header. GitHub recommends that you use the X-Hub-Signature-256 header, which uses the HMAC-SHA256 algorithm. The X-Hub-Signature header uses the HMAC-SHA1 algorithm and is only included for legacy purposes.
Make sure that you are using the correct algorithm. If you are using the X-Hub-Signature-256 header, you should use the HMAC-SHA256 algorithm.
Make sure you are using the correct webhook secret. If you don't know the value of your webhook secret, you can update your webhook's secret. For more information, see Editing webhooks.
Make sure that the payload and headers are not modified before verification. For example, if you use a proxy or load balancer, make sure that the proxy or load balancer does not modify the payload or headers.
If your language and server implementation specifies a character encoding, ensure that you handle the payload as UTF-8. Webhook payloads can contain unicode characters.

Further reading

Handling webhook deliveries
Best practices for using webhooks\n\n\n\nWebhooks/Using webhooks/Deliver to private systemsDelivering webhooks to private systemsIn order to limit exposure of your private system to the internet, you can use a reverse proxy to forward webhooks from GitHub to your private system.In this articleAbout integrating with private systems via reverse proxySecuring traffic to your reverse proxyAbout integrating with private systems via reverse proxy
You may want to deliver GitHub webhooks to private systems that are not directly accessible from the internet, such as CI systems, work management tools, and custom apps. You can use a reverse proxy to receive webhook payloads from GitHub and deliver them to the your private system.
A reverse proxy is a web server that sits between a client and an application. The reverse proxy receives requests from the client and forwards them to the application. This ensures no direct communication occurs between clients on the internet and the underlying application. A variety of systems can serve a reverse proxy, including:

Web servers, like nginx
API gateways
Free, open-source overlay networks, like OpenZiti
Commercial ingress management tools, like ngrok
Free, open-source ingress management tools, like zrok

How you configure your reverse proxy varies based on the system you're using.
Securing traffic to your reverse proxy
When deploying a reverse proxy, you should follow all practices recommended by your reverse proxy provider to secure the underlying proxy server. Additionally, you should take the following steps to verify that only requests from GitHub are forwarded to your application.
Limiting inbound traffic to GitHub webhooks
You should configure your reverse proxy to only allow HTTPS POST requests from the subset of GitHub IP ranges that are used to deliver webhooks. This ensures that your reverse proxy does not process or forward other requests.
The /meta endpoint returns a JSON object listing GitHub's IP ranges. IP ranges used to deliver webhooks are listed in the hooks element.
Validating webhook payloads
If your webhook is configured with a secret token, GitHub will include a cryptographic hash of each webhook payload. You should use this hash to validate the payload received from GitHub before any action is taken by your private system. For more information, see Validating webhook deliveries.
You can implement payload validation either on the reverse proxy or on your private system.\n\n\n\nWebhooks/Using webhooks/Edit webhooksEditing webhooksAfter creating a webhook, you can make changes to it.In this articleAbout editing webhooksEditing a repository webhookEditing an organization webhookEditing a GitHub Marketplace webhookEditing a GitHub Sponsors webhookEditing webhooks for a GitHub AppAbout editing webhooks
You can edit a webhook to change any of the settings that were selected when the webhook was initially created. For more information about the settings you can select while creating a webhook, see Creating webhooks.
Editing a repository webhook
You can edit a webhook that was created in a specific repository. You must be a repository owner or have admin access in the repository to edit webhooks in that repository.
You can use the GitHub web interface or the REST API to edit a repository webhook. For more information about using the REST API to edit a repository webhook, see REST API endpoints for repository webhooks.


On GitHub, navigate to the main page of the repository.


Under your repository name, click  Settings. If you cannot see the "Settings" tab, select the  dropdown menu, then click Settings.



In the left sidebar, click  Webhooks.


Next to the webhook you'd like to edit, click Edit.


Make any desired changes to the webhook settings.


Click Update Webhook.


Editing an organization webhook
You can edit a webhook that was created in a specific organization. You must be an organization owner to edit webhooks in that organization.
You can use the GitHub web interface or the REST API to edit an organization webhook. For more information about using the REST API to create an organization webhook, see REST API endpoints for organization webhooks.


On GitHub, navigate to the main page of the repository.


Under your repository name, click  Settings. If you cannot see the "Settings" tab, select the  dropdown menu, then click Settings.



In the left sidebar, click  Webhooks.


Next to the webhook you'd like to edit, click Edit.


Make any desired changes to the webhook settings.


Click Update Webhook.


Editing a GitHub Marketplace webhook
You can edit a webhook that was created for an app that you published in GitHub Marketplace. Only the owner of the app, or an app manager for the organization that owns the app, can edit a GitHub Marketplace webhook. For more information, see Webhook events for the GitHub Marketplace API.

Navigate to your GitHub Marketplace listing page.
Next to the GitHub Marketplace listing that you want to view webhook deliveries for, click Manage listing.
In the sidebar, click Webhook.
Make any desired changes to the webhook settings.
Click Update Webhook.

Editing a GitHub Sponsors webhook
You can edit a webhook that was created for a GitHub Sponsors account. Only the owner of the sponsored account can edit sponsorship webhooks for that account.

In the upper-right corner of any page, click your profile photo, then click Your sponsors.
Next to the account you want to edit a webhook for, click Dashboard.
In the left sidebar, click Webhooks.
Next to the webhook you'd like to edit, click Edit.
Make any desired changes to the webhook settings.
Click Update Webhook.

Editing webhooks for a GitHub App
Each GitHub App has one webhook. You cannot delete the webhook, but you can activate or deactivate the webhook, change the webhook events that the webhook subscribes to, or make changes to other basic settings for the webhook.
The owner of a GitHub App can edit the webhook configuration for the app. If an organization has designated any app managers for a GitHub App owned by the organization, the app managers can also edit the webhook configuration. For more information, see Using webhooks with GitHub Apps.

In the upper-right corner of any page on GitHub, click your profile photo.
Navigate to your account settings.

For an app owned by a personal account, click Settings.
For an app owned by an organization:

Click Your organizations.
To the right of the organization, click Settings.




In the left sidebar, click  Developer settings.
In the left sidebar, click GitHub Apps.
Next to the GitHub App that you want to update the webhook configuration for, click Edit.
To edit the basic webhook settings:

Under "Webhook", any desired changes to the webhook settings.
Click Save changes.


To make changes to the events that the webhook is subscribed to:


In the sidebar, click Permissions & events.


The specific webhook events that you can select for your GitHub App registration are determined by the type of permissions you selected for your app. You will first need to select the permissions you would like your app to have, and then you can subscribe your app to webhook events that are related to that set of permissions.
Under the sections "Repository permissions," "Organization permissions," and "Account permissions," select the permissions that are required for the events your app will subscribe to. For more information, see Choosing permissions for a GitHub App. For more information about things to consider when changing the permissions, see Modifying a GitHub App registration.


Under "Subscribe to Events," select the webhook events you would like your GitHub App to receive.


Click Save changes.




You can use the REST API to edit the webhook configuration for a GitHub App. For more information about using the REST API to view recent deliveries, see REST API endpoints for GitHub App webhooks.\n\n\n\nWebhooks/Using webhooks/Disable webhooksDisabling webhooksYou can disable a webhook to unsubscribe from events that occur on GitHub.In this articleAbout disabling webhooksDisabling a repository webhookDisabling an organization webhookDisabling a GitHub Marketplace webhookDisabling a GitHub Sponsors webhookDisabling webhooks for a GitHub AppAbout disabling webhooks
You can disable a webhook that was previously enabled for a repository, organization, GitHub Marketplace account, GitHub Sponsors account, or GitHub App.
To disable a webhook, you can choose to deactivate or delete it. When you deactivate a webhook, the webhook deliveries will stop, and you can choose to reactivate the webhook at a later time. When you delete a webhook, it cannot be restored.
For more information, see About webhooks and Creating webhooks.
Disabling a repository webhook
To disable a repository webhook, you can deactivate or delete it. You must be a repository owner, or have admin access in the repository, to disable webhooks.
You can use the GitHub web interface or the REST API to delete a webhook for a repository. For more information about using the REST API to delete a repository webhook, see REST API endpoints for repository webhooks.


On GitHub, navigate to the main page of the repository.


Under your repository name, click  Settings. If you cannot see the "Settings" tab, select the  dropdown menu, then click Settings.



In the left sidebar, click  Webhooks.


Under "Webhooks", locate the webhook you'd like to disable.


Disable the webhook by either deactivating or deleting it:

To deactivate the webhook:

Click Edit.
Deselect Active.
Click Update webhook.


To delete the webhook, click Delete. This action cannot be undone.



Disabling an organization webhook
To disable an organization webhook, you can deactivate or delete it. Only organization owners can disable webhooks in an organization.
You can use the GitHub web interface or the REST API to delete an organization webhook. For more information about using the REST API to delete an organization webhook, see REST API endpoints for organization webhooks.

In the upper-right corner of any page on GitHub, click your profile photo.
Click Your organizations.
To the right of the organization, click Settings.
In the left sidebar, click  Webhooks.
Under "Webhooks", locate the webhook you'd like to disable.
Disable the webhook by either deactivating or deleting it:

To deactivate the webhook:

Click Edit.
Deselect Active.
Click Update webhook.


To delete the webhook, click Delete. This action cannot be undone.



Disabling a GitHub Marketplace webhook
You can deactivate a webhook that was previously enabled for events relating to an app that you published on GitHub Marketplace. You cannot delete the webhook. Only the owner of the app can deactivate the GitHub Marketplace webhook for the app. If an organization has designated any app managers for a GitHub App owned by the organization, the app managers can also deactivate the GitHub Marketplace webhook.

Navigate to your GitHub Marketplace listing page.
Next to the GitHub Marketplace listing that you want to view webhook deliveries for, click Manage listing.
In the sidebar, click Webhook.
Deselect Active.
Click Update webhook.

Disabling a GitHub Sponsors webhook
You can disable webhooks that were previously enabled for events relating to GitHub Sponsors. Only the owner of the sponsored account can disable sponsorship webhooks for that account.

In the upper-right corner of any page, click your profile photo, then click Your sponsors.
Next to the account you want to edit a webhook for, click Dashboard.
In the left sidebar, click Webhooks.
Under "Webhooks", locate the webhook you'd like to disable.
Disable the webhook by either deactivating or deleting it:

To deactivate the webhook:

Click Edit.
Deselect Active.
Click Update webhook.


To delete the webhook, click Delete. This action cannot be undone.



Disabling webhooks for a GitHub App
Each GitHub App has one webhook. You cannot delete the webhook, but you can deactivate the webhook. The owner of a GitHub App can deactivate the webhook the app. If an organization has designated any app managers for a GitHub App owned by the organization, the app managers can also deactivate the webhook for the app.


In the upper-right corner of any page on GitHub, click your profile photo.


Navigate to your account settings.

For an app owned by a personal account, click Settings.
For an app owned by an organization:

Click Your organizations.
To the right of the organization, click Settings.





In the left sidebar, click  Developer settings.


In the left sidebar, click GitHub Apps.


Next to the GitHub App that you want to deactivate the webhook for, click Edit.


Under "Webhook," deselect Active to disable the webhook.


Click Save changes.\n\n\n\nWebhooks/Using webhooks/Best practicesBest practices for using webhooksFollow these best practices to improve security and performance when using webhooks.In this articleSubscribe to the minimum number of eventsUse a webhook secretUse HTTPS and SSL verificationAllow GitHub's IP addressesRespond within 10 secondsCheck the event type and action before processing the eventRedeliver missed deliveriesUse the X-GitHub-Delivery headerFurther readingSubscribe to the minimum number of events
You should only subscribe to the webhook events that you need. This will reduce the amount of work your server needs to do. For more information about subscribing to events, see Creating webhooks and Editing webhooks.
Use a webhook secret
Warning

To avoid accidental exposure of sensitive information, do not include sensitive information in your payload URL.
This includes your own API keys and other authentication credentials. Instead, to validate that webhook deliveries were sent by GitHub and have not been tampered with, use a webhook secret. For more information, see Validating webhook deliveries.

The webhook secret should be a random string of text with high entropy. You should securely store your webhook secret in a way that your server can access.
Use HTTPS and SSL verification
You should ensure that your server uses an HTTPS connection. By default, GitHub will verify SSL certificates when delivering webhooks. GitHub recommends that you leave SSL verification enabled.
Allow GitHub's IP addresses
You can set up an IP allow list for your server, and add the IP addresses that GitHub uses for webhook deliveries. This can block spoofed requests to your server.
You can use the GET /meta endpoint to find the current list of GitHub's IP addresses. For more information, see REST API endpoints for meta data. GitHub occasionally makes changes to its IP addresses, so you should update your IP allow list periodically.
For more information, see About GitHub's IP addresses.
Respond within 10 seconds
Your server should respond with a 2XX response within 10 seconds of receiving a webhook delivery. If your server takes longer than that to respond, then GitHub terminates the connection and considers the delivery a failure.
In order to respond in a timely manner, you may want to set up a queue to process webhook payloads asynchronously. Your server can respond when it receives the webhook, and then process the payload in the background without blocking future webhook deliveries. For example, you can use services like Hookdeck or libraries like Resque (Ruby), RQ (Python), or RabbitMQ (Java).
Check the event type and action before processing the event
There are multiple webhook event types, and many events can have multiple action types. GitHub continues to add new event types and new actions to existing event types. Your application should check the event type and action of a webhook payload before processing the payload. To determine the event type, you can use the X-GitHub-Event request header. To determine the action type, you can use the top-level action key in the event payload.
Redeliver missed deliveries
If your server goes down, you should redeliver missed webhooks once your server is back up. For more information, see Redelivering webhooks.
Use the X-GitHub-Delivery header
In a replay attack, a bad actor intercepts a webhook delivery and re-sends the delivery. To protect against replay attacks, you can use the X-GitHub-Delivery header to ensure that each delivery is unique per event.
Note

If you request a redelivery, the X-GitHub-Delivery header will be the same as in the original delivery.

Further reading

Best practices for using the REST API
Best practices for creating a GitHub App\n\n\n\nWebhooks/Using webhooks/Handle failed deliveriesHandling failed webhook deliveriesGitHub does not automatically redeliver failed webhook deliveries, but you can handle failed deliveries manually or by writing code.In this articleAbout webhook delivery failuresHandling delivery failuresAbout webhook delivery failures
A webhook delivery can fail for multiple reasons. For example, if your server is down or takes longer than 10 seconds to respond, GitHub will record the delivery as a failure.
GitHub does not automatically redeliver failed deliveries.
Handling delivery failures
You can manually redeliver failed deliveries. For more information, see Redelivering webhooks.
You can also write a script that checks for failed deliveries and attempts to redeliver any that failed. Your script should run on a schedule and do the following:


Use the GitHub REST API to fetch data about any webhook deliveries that were attempted since the last time that your script ran. For more information, see REST API endpoints for repository webhooks, REST API endpoints for organization webhooks, and REST API endpoints for GitHub App webhooks.
There are no API endpoints to get data about GitHub Marketplace webhooks or GitHub Sponsors webhooks.


Look at the fetched data to see if any deliveries failed. The data for a failed delivery will have a status value that is not OK.


Use the GitHub REST API to redeliver any deliveries that failed. For more information, see REST API endpoints for repository webhooks, REST API endpoints for organization webhooks, and REST API endpoints for GitHub App webhooks.


For example scripts, see:

Automatically redelivering failed deliveries for a repository webhook
Automatically redelivering failed deliveries for an organization webhook
Automatically redelivering failed deliveries for a GitHub App webhook

If a webhook delivery fails repeatedly, you should investigate the cause. Each failed delivery will give a reason for failure. For more information, see Troubleshooting webhooks.\n\n\n\nWebhooks/Using webhooks/Automatically redeliver for repositoryAutomatically redelivering failed deliveries for a repository webhookYou can write a script to handle failed deliveries of a repository webhook.In this articleAbout automatically redelivering failed deliveriesStoring credentials for the scriptAdding a workflow that will run the scriptAdding the scriptTesting the scriptAlternative methodsAbout automatically redelivering failed deliveries
This article describes how to write a script to find and redeliver failed deliveries for a repository webhook. For more information about failed deliveries, see Handling failed webhook deliveries.
This example shows you:

A script that will find and redeliver failed deliveries for a repository webhook
What credentials your script will need, and how to store the credentials securely as GitHub Actions secrets
A GitHub Actions workflow that can securely access your credentials and run the script periodically

This example uses GitHub Actions, but you can also run this script on your server that handles webhook deliveries. For more information, see Alternative methods.
Storing credentials for the script
The built in GITHUB_TOKEN does not have sufficient permissions to redeliver webhooks. Instead of using GITHUB_TOKEN, this example uses a personal access token. Alternatively, instead of creating a personal access token, you can create a GitHub App and use the app's credentials to create an installation access token during the GitHub Actions workflow. For more information, see Making authenticated API requests with a GitHub App in a GitHub Actions workflow.

Create a personal access token with the following access. For more information, see Managing your personal access tokens.

For a fine-grained personal access token, grant the token:

Access to the repository where your webhook was created
Access to the repository where this workflow will run
Write access to the repository webhooks permission
Write access to the repository variables permission


For a personal access token (classic), grant the token the repo scope.


Store your personal access token as a GitHub Actions secret in the repository where you want the workflow to run. For more information, see Using secrets in GitHub Actions.

Adding a workflow that will run the script
This section demonstrates how you can use a GitHub Actions workflow to securely access the credentials that you stored in the previous section, set environment variables, and periodically run a script to find and redeliver failed deliveries.
Copy this GitHub Actions workflow into a YAML file in the .github/workflows directory in the repository where you want the workflow to run. Replace the placeholders in the Run script step as described below.
YAMLBesideInline#
name: Redeliver failed webhook deliveries

# This workflow runs every 6 hours or when manually triggered.
on:
  schedule:
    - cron: '20 */6 * * *'
  workflow_dispatch:

# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.
permissions:
  contents: read

#
jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:
      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.
      - name: Check out repo content
        uses: actions/checkout@v4

      # This step sets up Node.js. The script that this workflow will run uses Node.js.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      # This step installs the octokit library. The script that this workflow will run uses the octokit library.
      - name: Install dependencies
        run: npm install octokit

      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.
      # - Replace `YOUR_SECRET_NAME` with the name of the secret where you stored your personal access token.
      # - Replace `YOUR_REPO_OWNER` with the owner of the repository where the webhook was created.
      # - Replace `YOUR_REPO_NAME` with the name of the repository where the webhook was created.
      # - Replace `YOUR_HOOK_ID` with the ID of the webhook.
      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
      
      - name: Run script
        env:
          TOKEN: ${{ secrets.YOUR_SECRET_NAME }}
          REPO_OWNER: 'YOUR_REPO_OWNER'
          REPO_NAME: 'YOUR_REPO_NAME'
          HOOK_ID: 'YOUR_HOOK_ID'
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          
          WORKFLOW_REPO_NAME: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.js
name: Redeliver failed webhook deliverieson:
  schedule:
    - cron: '20 */6 * * *'
  workflow_dispatch:This workflow runs every 6 hours or when manually triggered.permissions:
  contents: readThis workflow will use the built in GITHUB_TOKEN to check out the repository contents. This grants GITHUB_TOKEN permission to do that.jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:      - name: Check out repo content
        uses: actions/checkout@v4This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'This step sets up Node.js. The script that this workflow will run uses Node.js.      - name: Install dependencies
        run: npm install octokitThis step installs the octokit library. The script that this workflow will run uses the octokit library.      - name: Run script
        env:
          TOKEN: ${{ secrets.YOUR_SECRET_NAME }}
          REPO_OWNER: 'YOUR_REPO_OWNER'
          REPO_NAME: 'YOUR_REPO_NAME'
          HOOK_ID: 'YOUR_HOOK_ID'
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          WORKFLOW_REPO_NAME: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.jsThis step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.

Replace YOUR_SECRET_NAME with the name of the secret where you stored your personal access token.
Replace YOUR_REPO_OWNER with the owner of the repository where the webhook was created.
Replace YOUR_REPO_NAME with the name of the repository where the webhook was created.
Replace YOUR_HOOK_ID with the ID of the webhook.
Replace YOUR_LAST_REDELIVERY_VARIABLE_NAME with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and _, and does not start with GITHUB_ or a number. For more information, see AUTOTITLE.
#
name: Redeliver failed webhook deliveries

# This workflow runs every 6 hours or when manually triggered.
on:
  schedule:
    - cron: '20 */6 * * *'
  workflow_dispatch:

# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.
permissions:
  contents: read

#
jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:
      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.
      - name: Check out repo content
        uses: actions/checkout@v4

      # This step sets up Node.js. The script that this workflow will run uses Node.js.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      # This step installs the octokit library. The script that this workflow will run uses the octokit library.
      - name: Install dependencies
        run: npm install octokit

      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.
      # - Replace `YOUR_SECRET_NAME` with the name of the secret where you stored your personal access token.
      # - Replace `YOUR_REPO_OWNER` with the owner of the repository where the webhook was created.
      # - Replace `YOUR_REPO_NAME` with the name of the repository where the webhook was created.
      # - Replace `YOUR_HOOK_ID` with the ID of the webhook.
      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
      
      - name: Run script
        env:
          TOKEN: ${{ secrets.YOUR_SECRET_NAME }}
          REPO_OWNER: 'YOUR_REPO_OWNER'
          REPO_NAME: 'YOUR_REPO_NAME'
          HOOK_ID: 'YOUR_HOOK_ID'
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          
          WORKFLOW_REPO_NAME: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.js

Adding the script
This section demonstrates how you can write a script to find and redeliver failed deliveries.
Copy this script into a file called .github/workflows/scripts/redeliver-failed-deliveries.js in the same repository where you saved the GitHub Actions workflow file above.
JavaScriptBesideInline// This script uses GitHub's Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).
const { Octokit } = require("octokit");

//
async function checkAndRedeliverWebhooks() {
  // Get the values of environment variables that were set by the GitHub Actions workflow.
  const TOKEN = process.env.TOKEN;
  const REPO_OWNER = process.env.REPO_OWNER;
  const REPO_NAME = process.env.REPO_NAME;
  const HOOK_ID = process.env.HOOK_ID;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;

  // Create an instance of `Octokit` using the token values that were set in the GitHub Actions workflow.
  const octokit = new Octokit({ 
    auth: TOKEN,
  });

  try {
    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.
    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();

    // Record the time that this script started redelivering webhooks.
    const newWebhookRedeliveryTime = Date.now().toString();

    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.
    const deliveries = await fetchWebhookDeliveriesSince({
      lastWebhookRedeliveryTime,
      repoOwner: REPO_OWNER,
      repoName: REPO_NAME,
      hookId: HOOK_ID,
      octokit,
    });

    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.
    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }

    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
    //
    // This will prevent duplicate redeliveries if a delivery has failed multiple times.
    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.
    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }

    // Redeliver any failed deliveries.
    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({
        deliveryId,
        repoOwner: REPO_OWNER,
        repoName: REPO_NAME,
        hookId: HOOK_ID,
        octokit,
      });
    }

    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
    // This value will be used next time this script runs.
    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });

    // Log the number of redeliveries.
    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {
    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.
    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}

// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.
// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).
//
// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,
// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.
// Otherwise, it will store all of the deliveries from the page and request the next page.
async function fetchWebhookDeliveriesSince({
  lastWebhookRedeliveryTime,
  repoOwner,
  repoName,
  hookId,
  octokit,
}) {
  const iterator = octokit.paginate.iterator(
    "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
    {
      owner: repoOwner,
      repo: repoName,
      hook_id: hookId,
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );

  const deliveries = [];

  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();

    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }

  return deliveries;
}

// This function will redeliver a failed webhook delivery.
async function redeliverWebhook({
  deliveryId,
  repoOwner,
  repoName,
  hookId,
  octokit,
}) {
  await octokit.request(
    "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
    {
      owner: repoOwner,
      repo: repoName,
      hook_id: hookId,
      delivery_id: deliveryId,
    }
  );
}

// This function gets the value of a configuration variable.
// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.
async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}

// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}

// This will execute the `checkAndRedeliverWebhooks` function.
(async () => {
  await checkAndRedeliverWebhooks();
})();

const { Octokit } = require("octokit");This script uses GitHub's Octokit SDK to make API requests. For more information, see AUTOTITLE.async function checkAndRedeliverWebhooks() {  const TOKEN = process.env.TOKEN;
  const REPO_OWNER = process.env.REPO_OWNER;
  const REPO_NAME = process.env.REPO_NAME;
  const HOOK_ID = process.env.HOOK_ID;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;Get the values of environment variables that were set by the GitHub Actions workflow.  const octokit = new Octokit({ 
    auth: TOKEN,
  });
  try {Create an instance of Octokit using the token values that were set in the GitHub Actions workflow.    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.    const newWebhookRedeliveryTime = Date.now().toString();Record the time that this script started redelivering webhooks.    const deliveries = await fetchWebhookDeliveriesSince({
      lastWebhookRedeliveryTime,
      repoOwner: REPO_OWNER,
      repoName: REPO_NAME,
      hookId: HOOK_ID,
      octokit,
    });Get the webhook deliveries that were delivered after lastWebhookRedeliveryTime.    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
This will prevent duplicate redeliveries if a delivery has failed multiple times.
This will also prevent redelivery of failed deliveries that have already been successfully redelivered.    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({
        deliveryId,
        repoOwner: REPO_OWNER,
        repoName: REPO_NAME,
        hookId: HOOK_ID,
        octokit,
      });
    }Redeliver any failed deliveries.    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
This value will be used next time this script runs.    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {Log the number of redeliveries.    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.async function fetchWebhookDeliveriesSince({
  lastWebhookRedeliveryTime,
  repoOwner,
  repoName,
  hookId,
  octokit,
}) {
  const iterator = octokit.paginate.iterator(
    "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
    {
      owner: repoOwner,
      repo: repoName,
      hook_id: hookId,
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );
  const deliveries = [];
  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();
    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }
  return deliveries;
}This function will fetch all of the webhook deliveries that were delivered since lastWebhookRedeliveryTime.
It uses the octokit.paginate.iterator() method to iterate through paginated results. For more information, see AUTOTITLE.
If a page of results includes deliveries that occurred before lastWebhookRedeliveryTime,
it will store only the deliveries that occurred after lastWebhookRedeliveryTime and then stop.
Otherwise, it will store all of the deliveries from the page and request the next page.async function redeliverWebhook({
  deliveryId,
  repoOwner,
  repoName,
  hookId,
  octokit,
}) {
  await octokit.request(
    "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
    {
      owner: repoOwner,
      repo: repoName,
      hook_id: hookId,
      delivery_id: deliveryId,
    }
  );
}This function will redeliver a failed webhook delivery.async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}This function gets the value of a configuration variable.
If the variable does not exist, the endpoint returns a 404 response and this function returns undefined.async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see AUTOTITLE.(async () => {
  await checkAndRedeliverWebhooks();
})();This will execute the checkAndRedeliverWebhooks function.// This script uses GitHub's Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).
const { Octokit } = require("octokit");

//
async function checkAndRedeliverWebhooks() {
  // Get the values of environment variables that were set by the GitHub Actions workflow.
  const TOKEN = process.env.TOKEN;
  const REPO_OWNER = process.env.REPO_OWNER;
  const REPO_NAME = process.env.REPO_NAME;
  const HOOK_ID = process.env.HOOK_ID;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;

  // Create an instance of `Octokit` using the token values that were set in the GitHub Actions workflow.
  const octokit = new Octokit({ 
    auth: TOKEN,
  });

  try {
    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.
    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();

    // Record the time that this script started redelivering webhooks.
    const newWebhookRedeliveryTime = Date.now().toString();

    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.
    const deliveries = await fetchWebhookDeliveriesSince({
      lastWebhookRedeliveryTime,
      repoOwner: REPO_OWNER,
      repoName: REPO_NAME,
      hookId: HOOK_ID,
      octokit,
    });

    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.
    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }

    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
    //
    // This will prevent duplicate redeliveries if a delivery has failed multiple times.
    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.
    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }

    // Redeliver any failed deliveries.
    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({
        deliveryId,
        repoOwner: REPO_OWNER,
        repoName: REPO_NAME,
        hookId: HOOK_ID,
        octokit,
      });
    }

    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
    // This value will be used next time this script runs.
    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });

    // Log the number of redeliveries.
    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {
    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.
    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}

// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.
// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).
//
// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,
// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.
// Otherwise, it will store all of the deliveries from the page and request the next page.
async function fetchWebhookDeliveriesSince({
  lastWebhookRedeliveryTime,
  repoOwner,
  repoName,
  hookId,
  octokit,
}) {
  const iterator = octokit.paginate.iterator(
    "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
    {
      owner: repoOwner,
      repo: repoName,
      hook_id: hookId,
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );

  const deliveries = [];

  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();

    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }

  return deliveries;
}

// This function will redeliver a failed webhook delivery.
async function redeliverWebhook({
  deliveryId,
  repoOwner,
  repoName,
  hookId,
  octokit,
}) {
  await octokit.request(
    "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
    {
      owner: repoOwner,
      repo: repoName,
      hook_id: hookId,
      delivery_id: deliveryId,
    }
  );
}

// This function gets the value of a configuration variable.
// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.
async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}

// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}

// This will execute the `checkAndRedeliverWebhooks` function.
(async () => {
  await checkAndRedeliverWebhooks();
})();


Testing the script
You can manually trigger your workflow to test the script. For more information, see Manually running a workflow and Using workflow run logs.
Alternative methods
This example used GitHub Actions to securely store credentials and to run the script on a schedule. However, if you prefer to run this script on your server that handles webhook deliveries, you can:

Store the credentials in another secure manner, such as a secret manager like Azure key vault. You will also need to update the script to access the credentials from their new location.
Run the script on a schedule on your server, for example by using a cron job or task scheduler.
Update the script to store the last run time somewhere that your server can access and update. If you choose not to store the last run time as a GitHub Actions secret, you can remove the API calls to access and update the configuration variable.\n\n\n\nWebhooks/Using webhooks/Automatically redeliver for organizationAutomatically redelivering failed deliveries for an organization webhookYou can write a script to handle failed deliveries of an organization webhook.In this articleAbout automatically redelivering failed deliveriesStoring credentials for the scriptAdding a workflow that will run the scriptAdding the scriptTesting the scriptAlternative methodsAbout automatically redelivering failed deliveries
This article describes how to write a script to find and redeliver failed deliveries for an organization webhook. For more information about failed deliveries, see Handling failed webhook deliveries.
This example shows you:

A script that will find and redeliver failed deliveries for an organization webhook
What credentials your script will need, and how to store the credentials securely as GitHub Actions secrets
A GitHub Actions workflow that can securely access your credentials and run the script periodically

This example uses GitHub Actions, but you can also run this script on your server that handles webhook deliveries. For more information, see Alternative methods.
Storing credentials for the script
The built in GITHUB_TOKEN does not have sufficient permissions to redeliver webhooks. Instead of using GITHUB_TOKEN, this example uses a personal access token. Alternatively, instead of creating a personal access token, you can create a GitHub App and use the app's credentials to create an installation access token during the GitHub Actions workflow. For more information, see Making authenticated API requests with a GitHub App in a GitHub Actions workflow.

Create a personal access token with the following access. For more information, see Managing your personal access tokens.

For a fine-grained personal access token:

Set resource owner to be the organization where your webhook was created
Grant the token access to the repository where this workflow will run
Grant the token write access to the organization webhooks permission
Grant the token write access to the repository variables permission


For a personal access token (classic), grant the token the admin:org_hook and repo scope.


Store your personal access token as a GitHub Actions secret in the repository where you want the workflow to run. For more information, see Using secrets in GitHub Actions.

Adding a workflow that will run the script
This section demonstrates how you can use a GitHub Actions workflow to securely access the credentials that you stored in the previous section, set environment variables, and periodically run a script to find and redeliver failed deliveries.
Copy this GitHub Actions workflow into a YAML file in the .github/workflows directory in the repository where you want the workflow to run. Replace the placeholders in the Run script step as described below.
YAMLBesideInline#
name: Redeliver failed webhook deliveries

# This workflow runs every 6 hours or when manually triggered.
on:
  schedule:
    - cron: '15 */6 * * *'
  workflow_dispatch:

# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.
permissions:
  contents: read

#
jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:
      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.
      - name: Check out repo content
        uses: actions/checkout@v4

      # This step sets up Node.js. The script that this workflow will run uses Node.js.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      # This step installs the octokit library. The script that this workflow will run uses the octokit library.
      - name: Install dependencies
        run: npm install octokit

      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.
      # - Replace `YOUR_SECRET_NAME` with the name of the secret where you stored your personal access token.
      # - Replace `YOUR_ORGANIZATION_NAME` with the name of the organization where the webhook was created.
      # - Replace `YOUR_HOOK_ID` with the ID of the webhook.
      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
      
      - name: Run script
        env:
          TOKEN: ${{ secrets.YOUR_SECRET_NAME }}
          ORGANIZATION_NAME: 'YOUR_ORGANIZATION_NAME'
          HOOK_ID: 'YOUR_HOOK_ID'
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          
          WORKFLOW_REPO_NAME: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.js
name: Redeliver failed webhook deliverieson:
  schedule:
    - cron: '15 */6 * * *'
  workflow_dispatch:This workflow runs every 6 hours or when manually triggered.permissions:
  contents: readThis workflow will use the built in GITHUB_TOKEN to check out the repository contents. This grants GITHUB_TOKEN permission to do that.jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:      - name: Check out repo content
        uses: actions/checkout@v4This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'This step sets up Node.js. The script that this workflow will run uses Node.js.      - name: Install dependencies
        run: npm install octokitThis step installs the octokit library. The script that this workflow will run uses the octokit library.      - name: Run script
        env:
          TOKEN: ${{ secrets.YOUR_SECRET_NAME }}
          ORGANIZATION_NAME: 'YOUR_ORGANIZATION_NAME'
          HOOK_ID: 'YOUR_HOOK_ID'
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          WORKFLOW_REPO_NAME: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.jsThis step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.

Replace YOUR_SECRET_NAME with the name of the secret where you stored your personal access token.
Replace YOUR_ORGANIZATION_NAME with the name of the organization where the webhook was created.
Replace YOUR_HOOK_ID with the ID of the webhook.
Replace YOUR_LAST_REDELIVERY_VARIABLE_NAME with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and _, and does not start with GITHUB_ or a number. For more information, see AUTOTITLE.
#
name: Redeliver failed webhook deliveries

# This workflow runs every 6 hours or when manually triggered.
on:
  schedule:
    - cron: '15 */6 * * *'
  workflow_dispatch:

# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.
permissions:
  contents: read

#
jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:
      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.
      - name: Check out repo content
        uses: actions/checkout@v4

      # This step sets up Node.js. The script that this workflow will run uses Node.js.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      # This step installs the octokit library. The script that this workflow will run uses the octokit library.
      - name: Install dependencies
        run: npm install octokit

      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.
      # - Replace `YOUR_SECRET_NAME` with the name of the secret where you stored your personal access token.
      # - Replace `YOUR_ORGANIZATION_NAME` with the name of the organization where the webhook was created.
      # - Replace `YOUR_HOOK_ID` with the ID of the webhook.
      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
      
      - name: Run script
        env:
          TOKEN: ${{ secrets.YOUR_SECRET_NAME }}
          ORGANIZATION_NAME: 'YOUR_ORGANIZATION_NAME'
          HOOK_ID: 'YOUR_HOOK_ID'
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          
          WORKFLOW_REPO_NAME: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.js

Adding the script
This section demonstrates how you can write a script to find and redeliver failed deliveries.
Copy this script into a file called .github/workflows/scripts/redeliver-failed-deliveries.js in the same repository where you saved the GitHub Actions workflow file above.
JavaScriptBesideInline// This script uses GitHub's Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).
const { Octokit } = require("octokit");

//
async function checkAndRedeliverWebhooks() {
  // Get the values of environment variables that were set by the GitHub Actions workflow.
  const TOKEN = process.env.TOKEN;
  const ORGANIZATION_NAME = process.env.ORGANIZATION_NAME;
  const HOOK_ID = process.env.HOOK_ID;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;

  // Create an instance of `Octokit` using the token values that were set in the GitHub Actions workflow.
  const octokit = new Octokit({ 
    auth: TOKEN,
  });

  try {
    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.
    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();

    // Record the time that this script started redelivering webhooks.
    const newWebhookRedeliveryTime = Date.now().toString();

    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.
    const deliveries = await fetchWebhookDeliveriesSince({
      lastWebhookRedeliveryTime,
      organizationName: ORGANIZATION_NAME,
      hookId: HOOK_ID,
      octokit,
    });

    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.
    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }

    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
    //
    // This will prevent duplicate redeliveries if a delivery has failed multiple times.
    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.
    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }

    // Redeliver any failed deliveries.
    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({
        deliveryId,
        organizationName: ORGANIZATION_NAME,
        hookId: HOOK_ID,
        octokit,
      });
    }

    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
    // This value will be used next time this script runs.
    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });

    // Log the number of redeliveries.
    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {
    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.
    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}

// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.
// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).
//
// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,
// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.
// Otherwise, it will store all of the deliveries from the page and request the next page.
async function fetchWebhookDeliveriesSince({
  lastWebhookRedeliveryTime,
  organizationName,
  hookId,
  octokit,
}) {
  const iterator = octokit.paginate.iterator(
    "GET /orgs/{org}/hooks/{hook_id}/deliveries",
    {
      org: organizationName,
      hook_id: hookId,
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );

  const deliveries = [];

  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();

    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }

  return deliveries;
}

// This function will redeliver a failed webhook delivery.
async function redeliverWebhook({
  deliveryId,
  organizationName,
  hookId,
  octokit,
}) {
  await octokit.request(
    "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
    {
      org: organizationName,
      hook_id: hookId,
      delivery_id: deliveryId,
    }
  );
}

// This function gets the value of a configuration variable.
// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.
async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}

// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}

// This will execute the `checkAndRedeliverWebhooks` function.
(async () => {
  await checkAndRedeliverWebhooks();
})();

const { Octokit } = require("octokit");This script uses GitHub's Octokit SDK to make API requests. For more information, see AUTOTITLE.async function checkAndRedeliverWebhooks() {  const TOKEN = process.env.TOKEN;
  const ORGANIZATION_NAME = process.env.ORGANIZATION_NAME;
  const HOOK_ID = process.env.HOOK_ID;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;Get the values of environment variables that were set by the GitHub Actions workflow.  const octokit = new Octokit({ 
    auth: TOKEN,
  });
  try {Create an instance of Octokit using the token values that were set in the GitHub Actions workflow.    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.    const newWebhookRedeliveryTime = Date.now().toString();Record the time that this script started redelivering webhooks.    const deliveries = await fetchWebhookDeliveriesSince({
      lastWebhookRedeliveryTime,
      organizationName: ORGANIZATION_NAME,
      hookId: HOOK_ID,
      octokit,
    });Get the webhook deliveries that were delivered after lastWebhookRedeliveryTime.    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
This will prevent duplicate redeliveries if a delivery has failed multiple times.
This will also prevent redelivery of failed deliveries that have already been successfully redelivered.    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({
        deliveryId,
        organizationName: ORGANIZATION_NAME,
        hookId: HOOK_ID,
        octokit,
      });
    }Redeliver any failed deliveries.    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
This value will be used next time this script runs.    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {Log the number of redeliveries.    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.async function fetchWebhookDeliveriesSince({
  lastWebhookRedeliveryTime,
  organizationName,
  hookId,
  octokit,
}) {
  const iterator = octokit.paginate.iterator(
    "GET /orgs/{org}/hooks/{hook_id}/deliveries",
    {
      org: organizationName,
      hook_id: hookId,
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );
  const deliveries = [];
  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();
    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }
  return deliveries;
}This function will fetch all of the webhook deliveries that were delivered since lastWebhookRedeliveryTime.
It uses the octokit.paginate.iterator() method to iterate through paginated results. For more information, see AUTOTITLE.
If a page of results includes deliveries that occurred before lastWebhookRedeliveryTime,
it will store only the deliveries that occurred after lastWebhookRedeliveryTime and then stop.
Otherwise, it will store all of the deliveries from the page and request the next page.async function redeliverWebhook({
  deliveryId,
  organizationName,
  hookId,
  octokit,
}) {
  await octokit.request(
    "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
    {
      org: organizationName,
      hook_id: hookId,
      delivery_id: deliveryId,
    }
  );
}This function will redeliver a failed webhook delivery.async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}This function gets the value of a configuration variable.
If the variable does not exist, the endpoint returns a 404 response and this function returns undefined.async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see AUTOTITLE.(async () => {
  await checkAndRedeliverWebhooks();
})();This will execute the checkAndRedeliverWebhooks function.// This script uses GitHub's Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).
const { Octokit } = require("octokit");

//
async function checkAndRedeliverWebhooks() {
  // Get the values of environment variables that were set by the GitHub Actions workflow.
  const TOKEN = process.env.TOKEN;
  const ORGANIZATION_NAME = process.env.ORGANIZATION_NAME;
  const HOOK_ID = process.env.HOOK_ID;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO_NAME;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;

  // Create an instance of `Octokit` using the token values that were set in the GitHub Actions workflow.
  const octokit = new Octokit({ 
    auth: TOKEN,
  });

  try {
    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.
    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();

    // Record the time that this script started redelivering webhooks.
    const newWebhookRedeliveryTime = Date.now().toString();

    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.
    const deliveries = await fetchWebhookDeliveriesSince({
      lastWebhookRedeliveryTime,
      organizationName: ORGANIZATION_NAME,
      hookId: HOOK_ID,
      octokit,
    });

    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.
    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }

    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
    //
    // This will prevent duplicate redeliveries if a delivery has failed multiple times.
    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.
    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }

    // Redeliver any failed deliveries.
    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({
        deliveryId,
        organizationName: ORGANIZATION_NAME,
        hookId: HOOK_ID,
        octokit,
      });
    }

    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
    // This value will be used next time this script runs.
    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });

    // Log the number of redeliveries.
    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {
    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.
    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}

// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.
// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).
//
// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,
// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.
// Otherwise, it will store all of the deliveries from the page and request the next page.
async function fetchWebhookDeliveriesSince({
  lastWebhookRedeliveryTime,
  organizationName,
  hookId,
  octokit,
}) {
  const iterator = octokit.paginate.iterator(
    "GET /orgs/{org}/hooks/{hook_id}/deliveries",
    {
      org: organizationName,
      hook_id: hookId,
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );

  const deliveries = [];

  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();

    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }

  return deliveries;
}

// This function will redeliver a failed webhook delivery.
async function redeliverWebhook({
  deliveryId,
  organizationName,
  hookId,
  octokit,
}) {
  await octokit.request(
    "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
    {
      org: organizationName,
      hook_id: hookId,
      delivery_id: deliveryId,
    }
  );
}

// This function gets the value of a configuration variable.
// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.
async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}

// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}

// This will execute the `checkAndRedeliverWebhooks` function.
(async () => {
  await checkAndRedeliverWebhooks();
})();


Testing the script
You can manually trigger your workflow to test the script. For more information, see Manually running a workflow and Using workflow run logs.
Alternative methods
This example used GitHub Actions to securely store credentials and to run the script on a schedule. However, if you prefer to run this script on your server than handles webhook deliveries, you can:

Store the credentials in another secure manner, such as a secret manager like Azure key vault. You will also need to update the script to access the credentials from their new location.
Run the script on a schedule on your server, for example by using a cron job or task scheduler.
Update the script to store the last run time somewhere that your server can access and update. If you choose not to store the last run time as a GitHub Actions secret, you can remove the API calls to access and update the configuration variable.\n\n\n\nWebhooks/Using webhooks/Automatically redeliver for GitHub AppAutomatically redelivering failed deliveries for a GitHub App webhookYou can write a script to handle failed deliveries of a GitHub App webhook.In this articleAbout automatically redelivering failed deliveriesStoring credentials for the scriptAdding a workflow that will run the scriptAdding the scriptTesting the scriptAlternative methodsAbout automatically redelivering failed deliveries
This article describes how to write a script to find and redeliver failed deliveries for a GitHub App webhook. For more information about failed deliveries, see Handling failed webhook deliveries.
This example shows you:

A script that will find and redeliver failed deliveries for a GitHub App webhook
What credentials your script will need, and how to store the credentials securely as GitHub Actions secrets
A GitHub Actions workflow that can securely access your credentials and run the script periodically

This example uses GitHub Actions, but you can also run this script on your server that handles webhook deliveries. For more information, see Alternative methods.
Storing credentials for the script
The endpoints to find and redeliver failed webhooks require a JSON web token, which is generated from the app ID and private key for your app.
The endpoints to fetch and update the value of environment variables require a personal access token, GitHub App installation access token, or GitHub App user access token. This example uses a personal access token. If your GitHub App is installed on the repository where this workflow will run and has permission to write repository variables, you can modify this example to create an installation access token during the GitHub Actions workflow instead of using a personal access token. For more information, see Making authenticated API requests with a GitHub App in a GitHub Actions workflow.

Find the app ID for your GitHub App. You can find the app ID on the settings page for your app. The app ID is different from the client ID. For more information about navigating to the settings page for your GitHub App, see Modifying a GitHub App registration.
Store the app ID from the previous step as a GitHub Actions secret in the repository where you want the workflow to run. For more information about storing secrets, see Using secrets in GitHub Actions.
Generate a private key for your app. For more information about generating a private key, see Managing private keys for GitHub Apps.
Store the private key, including -----BEGIN RSA PRIVATE KEY----- and -----END RSA PRIVATE KEY-----, from the previous step as a GitHub Actions secret in the repository where you want the workflow to run.
Create a personal access token with the following access. For more information, see Managing your personal access tokens.

For a fine-grained personal access token, grant the token:

Write access to the repository variables permission
Access to the repository where this workflow will run


For a personal access token (classic), grant the token the repo scope.


Store your personal access token from the previous step as a GitHub Actions secret in the repository where you want the workflow to run.

Adding a workflow that will run the script
This section demonstrates how you can use a GitHub Actions workflow to securely access the credentials that you stored in the previous section, set environment variables, and periodically run a script to find and redeliver failed deliveries.
Copy this GitHub Actions workflow into a YAML file in the .github/workflows directory in the repository where you want the workflow to run. Replace the placeholders in the Run script step as described below.
YAMLBesideInline#
name: Redeliver failed webhook deliveries

# This workflow runs every 6 hours or when manually triggered.
on:
  schedule:
    - cron: '40 */6 * * *'
  workflow_dispatch:

# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.
permissions:
  contents: read

#
jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:
      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.
      - name: Check out repo content
        uses: actions/checkout@v4

      # This step sets up Node.js. The script that this workflow will run uses Node.js.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # This step installs the octokit library. The script that this workflow will run uses the octokit library.
      - name: Install dependencies
        run: npm install octokit

      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.
      # - Replace `YOUR_APP_ID_SECRET_NAME` with the name of the secret where you stored your app ID.
      # - Replace `YOUR_PRIVATE_KEY_SECRET_NAME` with the name of the secret where you stored your private key.
      # - Replace `YOUR_TOKEN_SECRET_NAME` with the name of the secret where you stored your personal access token.
      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
      
      - name: Run script
        env:
          APP_ID: ${{ secrets.YOUR_APP_ID_SECRET_NAME }}
          PRIVATE_KEY: ${{ secrets.YOUR_PRIVATE_KEY_SECRET_NAME }}
          TOKEN: ${{ secrets.YOUR_TOKEN_SECRET_NAME }}
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          
          WORKFLOW_REPO: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.mjs
name: Redeliver failed webhook deliverieson:
  schedule:
    - cron: '40 */6 * * *'
  workflow_dispatch:This workflow runs every 6 hours or when manually triggered.permissions:
  contents: readThis workflow will use the built in GITHUB_TOKEN to check out the repository contents. This grants GITHUB_TOKEN permission to do that.jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:      - name: Check out repo content
        uses: actions/checkout@v4This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'This step sets up Node.js. The script that this workflow will run uses Node.js.      - name: Install dependencies
        run: npm install octokitThis step installs the octokit library. The script that this workflow will run uses the octokit library.      - name: Run script
        env:
          APP_ID: ${{ secrets.YOUR_APP_ID_SECRET_NAME }}
          PRIVATE_KEY: ${{ secrets.YOUR_PRIVATE_KEY_SECRET_NAME }}
          TOKEN: ${{ secrets.YOUR_TOKEN_SECRET_NAME }}
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          WORKFLOW_REPO: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.mjsThis step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.

Replace YOUR_APP_ID_SECRET_NAME with the name of the secret where you stored your app ID.
Replace YOUR_PRIVATE_KEY_SECRET_NAME with the name of the secret where you stored your private key.
Replace YOUR_TOKEN_SECRET_NAME with the name of the secret where you stored your personal access token.
Replace YOUR_LAST_REDELIVERY_VARIABLE_NAME with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and _, and does not start with GITHUB_ or a number. For more information, see AUTOTITLE.
#
name: Redeliver failed webhook deliveries

# This workflow runs every 6 hours or when manually triggered.
on:
  schedule:
    - cron: '40 */6 * * *'
  workflow_dispatch:

# This workflow will use the built in `GITHUB_TOKEN` to check out the repository contents. This grants `GITHUB_TOKEN` permission to do that.
permissions:
  contents: read

#
jobs:
  redeliver-failed-deliveries:
    name: Redeliver failed deliveries
    runs-on: ubuntu-latest
    steps:
      # This workflow will run a script that is stored in the repository. This step checks out the repository contents so that the workflow can access the script.
      - name: Check out repo content
        uses: actions/checkout@v4

      # This step sets up Node.js. The script that this workflow will run uses Node.js.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      # This step installs the octokit library. The script that this workflow will run uses the octokit library.
      - name: Install dependencies
        run: npm install octokit

      # This step sets some environment variables, then runs a script to find and redeliver failed webhook deliveries.
      # - Replace `YOUR_APP_ID_SECRET_NAME` with the name of the secret where you stored your app ID.
      # - Replace `YOUR_PRIVATE_KEY_SECRET_NAME` with the name of the secret where you stored your private key.
      # - Replace `YOUR_TOKEN_SECRET_NAME` with the name of the secret where you stored your personal access token.
      # - Replace `YOUR_LAST_REDELIVERY_VARIABLE_NAME` with the name that you want to use for a configuration variable that will be stored in the repository where this workflow is stored. The name can be any string that contains only alphanumeric characters and `_`, and does not start with `GITHUB_` or a number. For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
      
      - name: Run script
        env:
          APP_ID: ${{ secrets.YOUR_APP_ID_SECRET_NAME }}
          PRIVATE_KEY: ${{ secrets.YOUR_PRIVATE_KEY_SECRET_NAME }}
          TOKEN: ${{ secrets.YOUR_TOKEN_SECRET_NAME }}
          LAST_REDELIVERY_VARIABLE_NAME: 'YOUR_LAST_REDELIVERY_VARIABLE_NAME'
          
          WORKFLOW_REPO: ${{ github.event.repository.name }}
          WORKFLOW_REPO_OWNER: ${{ github.repository_owner }}
        run: |
          node .github/workflows/scripts/redeliver-failed-deliveries.mjs

Adding the script
This section demonstrates how you can write a script to find and redeliver failed deliveries.
Copy this script into a file called .github/workflows/scripts/redeliver-failed-deliveries.mjs in the same repository where you saved the GitHub Actions workflow file above.
JavaScriptBesideInline// This script uses GitHub's Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).
import { App, Octokit } from "octokit";

//
async function checkAndRedeliverWebhooks() {
  // Get the values of environment variables that were set by the GitHub Actions workflow.
  const APP_ID = process.env.APP_ID;
  const PRIVATE_KEY = process.env.PRIVATE_KEY;
  const TOKEN = process.env.TOKEN;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;

  // Create an instance of the octokit `App` using the app ID and private key values that were set in the GitHub Actions workflow.
  //
  // This will be used to make API requests to the webhook-related endpoints.
  const app = new App({
    appId: APP_ID,
    privateKey: PRIVATE_KEY,
  });

  // Create an instance of `Octokit` using the token values that were set in the GitHub Actions workflow.
  //
  // This will be used to update the configuration variable that stores the last time that this script ran.
  const octokit = new Octokit({ 
    auth: TOKEN,
  });

  try {
    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.
    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();

    // Record the time that this script started redelivering webhooks.
    const newWebhookRedeliveryTime = Date.now().toString();

    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.
    const deliveries = await fetchWebhookDeliveriesSince({lastWebhookRedeliveryTime, app});

    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.
    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }

    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
    //
    // This will prevent duplicate redeliveries if a delivery has failed multiple times.
    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.
    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }

    // Redeliver any failed deliveries.
    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({deliveryId, app});
    }

    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
    // This value will be used next time this script runs.
    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
      });

    // Log the number of redeliveries.
    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {
    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.
    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}

// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.
// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).
//
// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,
// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.
// Otherwise, it will store all of the deliveries from the page and request the next page.
async function fetchWebhookDeliveriesSince({lastWebhookRedeliveryTime, app}) {
  const iterator = app.octokit.paginate.iterator(
    "GET /app/hook/deliveries",
    {
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );

  const deliveries = [];

  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();

    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }

  return deliveries;
}

// This function will redeliver a failed webhook delivery.
async function redeliverWebhook({deliveryId, app}) {
  await app.octokit.request("POST /app/hook/deliveries/{delivery_id}/attempts", {
    delivery_id: deliveryId,
  });
}

// This function gets the value of a configuration variable.
// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.
async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}

// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}

// This will execute the `checkAndRedeliverWebhooks` function.
(async () => {
  await checkAndRedeliverWebhooks();
})();

import { App, Octokit } from "octokit";This script uses GitHub's Octokit SDK to make API requests. For more information, see AUTOTITLE.async function checkAndRedeliverWebhooks() {  const APP_ID = process.env.APP_ID;
  const PRIVATE_KEY = process.env.PRIVATE_KEY;
  const TOKEN = process.env.TOKEN;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;Get the values of environment variables that were set by the GitHub Actions workflow.  const app = new App({
    appId: APP_ID,
    privateKey: PRIVATE_KEY,
  });Create an instance of the octokit App using the app ID and private key values that were set in the GitHub Actions workflow.
This will be used to make API requests to the webhook-related endpoints.  const octokit = new Octokit({ 
    auth: TOKEN,
  });
  try {Create an instance of Octokit using the token values that were set in the GitHub Actions workflow.
This will be used to update the configuration variable that stores the last time that this script ran.    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.    const newWebhookRedeliveryTime = Date.now().toString();Record the time that this script started redelivering webhooks.    const deliveries = await fetchWebhookDeliveriesSince({lastWebhookRedeliveryTime, app});Get the webhook deliveries that were delivered after lastWebhookRedeliveryTime.    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
This will prevent duplicate redeliveries if a delivery has failed multiple times.
This will also prevent redelivery of failed deliveries that have already been successfully redelivered.    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({deliveryId, app});
    }Redeliver any failed deliveries.    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
      });Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
This value will be used next time this script runs.    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {Log the number of redeliveries.    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.async function fetchWebhookDeliveriesSince({lastWebhookRedeliveryTime, app}) {
  const iterator = app.octokit.paginate.iterator(
    "GET /app/hook/deliveries",
    {
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );
  const deliveries = [];
  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();
    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }
  return deliveries;
}This function will fetch all of the webhook deliveries that were delivered since lastWebhookRedeliveryTime.
It uses the octokit.paginate.iterator() method to iterate through paginated results. For more information, see AUTOTITLE.
If a page of results includes deliveries that occurred before lastWebhookRedeliveryTime,
it will store only the deliveries that occurred after lastWebhookRedeliveryTime and then stop.
Otherwise, it will store all of the deliveries from the page and request the next page.async function redeliverWebhook({deliveryId, app}) {
  await app.octokit.request("POST /app/hook/deliveries/{delivery_id}/attempts", {
    delivery_id: deliveryId,
  });
}This function will redeliver a failed webhook delivery.async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}This function gets the value of a configuration variable.
If the variable does not exist, the endpoint returns a 404 response and this function returns undefined.async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see AUTOTITLE.(async () => {
  await checkAndRedeliverWebhooks();
})();This will execute the checkAndRedeliverWebhooks function.// This script uses GitHub's Octokit SDK to make API requests. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript).
import { App, Octokit } from "octokit";

//
async function checkAndRedeliverWebhooks() {
  // Get the values of environment variables that were set by the GitHub Actions workflow.
  const APP_ID = process.env.APP_ID;
  const PRIVATE_KEY = process.env.PRIVATE_KEY;
  const TOKEN = process.env.TOKEN;
  const LAST_REDELIVERY_VARIABLE_NAME = process.env.LAST_REDELIVERY_VARIABLE_NAME;
  
  const WORKFLOW_REPO_NAME = process.env.WORKFLOW_REPO;
  const WORKFLOW_REPO_OWNER = process.env.WORKFLOW_REPO_OWNER;

  // Create an instance of the octokit `App` using the app ID and private key values that were set in the GitHub Actions workflow.
  //
  // This will be used to make API requests to the webhook-related endpoints.
  const app = new App({
    appId: APP_ID,
    privateKey: PRIVATE_KEY,
  });

  // Create an instance of `Octokit` using the token values that were set in the GitHub Actions workflow.
  //
  // This will be used to update the configuration variable that stores the last time that this script ran.
  const octokit = new Octokit({ 
    auth: TOKEN,
  });

  try {
    // Get the last time that this script ran from the configuration variable. If the variable is not defined, use the current time minus 24 hours.
    const lastStoredRedeliveryTime = await getVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
    });
    const lastWebhookRedeliveryTime = lastStoredRedeliveryTime || (Date.now() - (24 * 60 * 60 * 1000)).toString();

    // Record the time that this script started redelivering webhooks.
    const newWebhookRedeliveryTime = Date.now().toString();

    // Get the webhook deliveries that were delivered after `lastWebhookRedeliveryTime`.
    const deliveries = await fetchWebhookDeliveriesSince({lastWebhookRedeliveryTime, app});

    // Consolidate deliveries that have the same globally unique identifier (GUID). The GUID is constant across redeliveries of the same delivery.
    let deliveriesByGuid = {};
    for (const delivery of deliveries) {
      deliveriesByGuid[delivery.guid]
        ? deliveriesByGuid[delivery.guid].push(delivery)
        : (deliveriesByGuid[delivery.guid] = [delivery]);
    }

    // For each GUID value, if no deliveries for that GUID have been successfully delivered within the time frame, get the delivery ID of one of the deliveries with that GUID.
    //
    // This will prevent duplicate redeliveries if a delivery has failed multiple times.
    // This will also prevent redelivery of failed deliveries that have already been successfully redelivered.
    let failedDeliveryIDs = [];
    for (const guid in deliveriesByGuid) {
      const deliveries = deliveriesByGuid[guid];
      const anySucceeded = deliveries.some(
        (delivery) => delivery.status === "OK"
      );
      if (!anySucceeded) {
        failedDeliveryIDs.push(deliveries[0].id);
      }
    }

    // Redeliver any failed deliveries.
    for (const deliveryId of failedDeliveryIDs) {
      await redeliverWebhook({deliveryId, app});
    }

    // Update the configuration variable (or create the variable if it doesn't already exist) to store the time that this script started.
    // This value will be used next time this script runs.
    await updateVariable({
      variableName: LAST_REDELIVERY_VARIABLE_NAME,
      value: newWebhookRedeliveryTime,
      variableExists: Boolean(lastStoredRedeliveryTime),
      repoOwner: WORKFLOW_REPO_OWNER,
      repoName: WORKFLOW_REPO_NAME,
      octokit,
      });

    // Log the number of redeliveries.
    console.log(
      `Redelivered ${
        failedDeliveryIDs.length
      } failed webhook deliveries out of ${
        deliveries.length
      } total deliveries since ${Date(lastWebhookRedeliveryTime)}.`
    );
  } catch (error) {
    // If there was an error, log the error so that it appears in the workflow run log, then throw the error so that the workflow run registers as a failure.
    if (error.response) {
      console.error(
        `Failed to check and redeliver webhooks: ${error.response.data.message}`
      );
    }
    console.error(error);
    throw(error);
  }
}

// This function will fetch all of the webhook deliveries that were delivered since `lastWebhookRedeliveryTime`.
// It uses the `octokit.paginate.iterator()` method to iterate through paginated results. For more information, see [AUTOTITLE](/rest/guides/scripting-with-the-rest-api-and-javascript#making-paginated-requests).
//
// If a page of results includes deliveries that occurred before `lastWebhookRedeliveryTime`,
// it will store only the deliveries that occurred after `lastWebhookRedeliveryTime` and then stop.
// Otherwise, it will store all of the deliveries from the page and request the next page.
async function fetchWebhookDeliveriesSince({lastWebhookRedeliveryTime, app}) {
  const iterator = app.octokit.paginate.iterator(
    "GET /app/hook/deliveries",
    {
      per_page: 100,
      headers: {
        "x-github-api-version": "2022-11-28",
      },
    }
  );

  const deliveries = [];

  for await (const { data } of iterator) {
    const oldestDeliveryTimestamp = new Date(
      data[data.length - 1].delivered_at
    ).getTime();

    if (oldestDeliveryTimestamp < lastWebhookRedeliveryTime) {
      for (const delivery of data) {
        if (
          new Date(delivery.delivered_at).getTime() > lastWebhookRedeliveryTime
        ) {
          deliveries.push(delivery);
        } else {
          break;
        }
      }
      break;
    } else {
      deliveries.push(...data);
    }
  }

  return deliveries;
}

// This function will redeliver a failed webhook delivery.
async function redeliverWebhook({deliveryId, app}) {
  await app.octokit.request("POST /app/hook/deliveries/{delivery_id}/attempts", {
    delivery_id: deliveryId,
  });
}

// This function gets the value of a configuration variable.
// If the variable does not exist, the endpoint returns a 404 response and this function returns `undefined`.
async function getVariable({ variableName, repoOwner, repoName, octokit }) {
  try {
    const {
      data: { value },
    } = await octokit.request(
      "GET /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
      }
    );
    return value;
  } catch (error) {
    if (error.status === 404) {
      return undefined;
    } else {
      throw error;
    }
  }
}

// This function will update a configuration variable (or create the variable if it doesn't already exist). For more information, see [AUTOTITLE](/actions/learn-github-actions/variables#defining-configuration-variables-for-multiple-workflows).
async function updateVariable({
  variableName,
  value,
  variableExists,
  repoOwner,
  repoName,
  octokit,
}) {
  if (variableExists) {
    await octokit.request(
      "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
      {
        owner: repoOwner,
        repo: repoName,
        name: variableName,
        value: value,
      }
    );
  } else {
    await octokit.request("POST /repos/{owner}/{repo}/actions/variables", {
      owner: repoOwner,
      repo: repoName,
      name: variableName,
      value: value,
    });
  }
}

// This will execute the `checkAndRedeliverWebhooks` function.
(async () => {
  await checkAndRedeliverWebhooks();
})();


Testing the script
You can manually trigger your workflow to test the script. For more information, see Manually running a workflow and Using workflow run logs.
Alternative methods
This example used GitHub Actions to securely store credentials and to run the script on a schedule. However, if you prefer to run this script on your server than handles webhook deliveries, you can:

Store the credentials in another secure manner, such as a secret manager like Azure key vault. You will also need to update the script to access the credentials from their new location.
Run the script on a schedule on your server, for example by using a cron job or task scheduler.
Update the script to store the last run time somewhere that your server can access and update. If you choose not to store the last run time as a GitHub Actions secret, you do not need to use a personal access token, and you can remove the API calls to access and update the configuration variable.\n\n\n\nWebhooks/Testing and troubleshooting webhooks/View deliveriesViewing webhook deliveriesYou can view details about webhook deliveries from the past 3 days.In this articleAbout webhook deliveriesViewing deliveries for repository webhooksViewing deliveries for organization webhooksViewing deliveries for GitHub App webhooksViewing deliveries for GitHub Marketplace webhooksViewing deliveries for GitHub Sponsors webhooksAbout webhook deliveries
You can view details about webhook deliveries that occurred in the past 3 days. Viewing past deliveries can help you verify whether your webhooks are working as expected.
For each webhook delivery, you can view:

The request headers and payload that GitHub sent
The time at which the request was sent
The response that GitHub received from your server

You can also redeliver recent webhook deliveries. For more information, see Redelivering webhooks.
Viewing deliveries for repository webhooks
Only people with admin access to a repository can view deliveries for webhooks in that repository.
You can use the GitHub web interface or the REST API to view recent webhook deliveries for a repository. For more information about using the REST API to view recent deliveries, see REST API endpoints for repository webhooks.


On GitHub, navigate to the main page of the repository.


Under your repository name, click  Settings. If you cannot see the "Settings" tab, select the  dropdown menu, then click Settings.



In the "Code and automation" section of the sidebar, click  Webhooks.


In the list of webhooks, click the URL of the webhook for which you'd like to see deliveries. If you do not have a webhook configured, no webhooks will be listed.



Click Recent deliveries. All deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed.


Click a delivery GUID to view details.


Viewing deliveries for organization webhooks
Only organization owners can view deliveries for webhooks in that organization.
You can use the GitHub web interface or the REST API to view recent webhook deliveries for an organization. For more information about using the REST API to view recent deliveries, see REST API endpoints for organization webhooks.


On GitHub, navigate to the main page of the organization.


Under your organization name, click  Settings. If you cannot see the "Settings" tab, select the  dropdown menu, then click Settings.



In the "Code and automation" section of the sidebar, click  Webhooks.


In the list of webhooks, click the URL of the webhook for which you'd like to see deliveries. If you do not have a webhook configured, no webhooks will be listed.



Click Recent deliveries. All deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed.


Click a delivery GUID to view details.


Viewing deliveries for GitHub App webhooks
The owner of a GitHub App can view recent webhook deliveries for the app. If an organization has designated any app managers for a GitHub App owned by the organization, the app managers can also view recent webhook deliveries.
You can use the GitHub web interface or the REST API to view recent webhook deliveries for a GitHub App. For more information about using the REST API to view recent deliveries, see REST API endpoints for GitHub App webhooks.


In the upper-right corner of any page on GitHub, click your profile photo.


Navigate to your account settings.

For an app owned by a personal account, click Settings.
For an app owned by an organization:

Click Your organizations.
To the right of the organization, click Settings.





In the left sidebar, click  Developer settings.


In the left sidebar, click GitHub Apps.


Next to the GitHub App that you want to view webhook deliveries for, click Edit.


In the sidebar, click Advanced.


Under "Recent deliveries", all deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed. If webhooks are not active, the "Recent Deliveries" section will not be present.
Click a delivery GUID to view details.



Viewing deliveries for GitHub Marketplace webhooks
The owner of a GitHub App can view recent GitHub Marketplace webhook deliveries for the app. If an organization has designated any app managers for a GitHub App owned by the organization, the app managers can also view recent webhook deliveries.


Navigate to your GitHub Marketplace listing page.


Next to the GitHub Marketplace listing that you want to view webhook deliveries for, click Manage listing.


In the sidebar, click Webhook.


Under "Recent deliveries", all deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed. If webhooks are not active, the "Recent Deliveries" section will not be present.
Click a delivery GUID to view details.



Viewing deliveries for GitHub Sponsors webhooks
Only the owner of the sponsored account can view deliveries for sponsorship webhooks for that account.


In the upper-right corner of any page, click your profile photo, then click Your sponsors.


Next to the account you want to view webhook deliveries for, click Dashboard.


In the sidebar, click Webhooks.


In the list of webhooks, click the URL of the webhook for which you'd like to see deliveries. If you do not have a webhook configured, no webhooks will be listed.



Under "Recent deliveries", all deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed. If webhooks are not active, the "Recent Deliveries" section will not be present.
Click a delivery GUID to view details.\n\n\n\nWebhooks/Testing and troubleshooting webhooks/Redeliver webhooksRedelivering webhooksTo help recover from failed deliveries, you can redeliver webhook deliveries from the past 3 days.In this articleAbout redelivering webhooksRedelivering repository webhooksRedelivering organization webhooksRedelivering GitHub App webhooksRedelivering GitHub Marketplace webhooksRedelivering GitHub Sponsors webhooksAbout redelivering webhooks
You may want to redeliver a webhook to help you test your application or to recover from server downtime. You can redeliver webhook deliveries that occurred in the past 3 days. GitHub does not automatically redeliver failed deliveries.
Redelivering repository webhooks
Only people with admin access to a repository can redeliver webhooks in that repository.
You can use the GitHub web interface or the REST API to redeliver webhooks for a repository. For more information about using the REST API to redeliver webhooks, see REST API endpoints for repository webhooks.


On GitHub, navigate to the main page of the repository.


Under your repository name, click  Settings. If you cannot see the "Settings" tab, select the  dropdown menu, then click Settings.



In the "Code and automation" section of the sidebar, click  Webhooks.


In the list of webhooks, click the URL of the webhook you'd like to redeliver. If you do not have a webhook configured, no webhooks will be listed.



Click Recent deliveries. All deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed.


Click the delivery GUID for the delivery that you want to redeliver.


Click Redeliver.


Redelivering organization webhooks
Only organization owners can redeliver webhooks in that organization.
You can use the GitHub web interface or the REST API to redeliver webhooks for an organization. For more information about using the REST API to redeliver webhooks, see REST API endpoints for organization webhooks.


On GitHub, navigate to the main page of the organization.


Under your organization name, click  Settings. If you cannot see the "Settings" tab, select the  dropdown menu, then click Settings.



In the "Code and automation" section of the sidebar, click  Webhooks.


In the list of webhooks, click the URL of the webhook you'd like to redeliver. If you do not have a webhook configured, no webhooks will be listed.



Click Recent deliveries. All deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed.


Click the delivery GUID for the delivery that you want to redeliver.


Click Redeliver.


Redelivering GitHub App webhooks
The owner of a GitHub App can redeliver webhooks for the app. If an organization has designated any app managers for a GitHub App owned by the organization, the app managers can also redeliver webhooks.
You can use the GitHub web interface or the REST API to redeliver webhooks for a GitHub App. For more information about using the REST API redeliver, see REST API endpoints for GitHub App webhooks.


In the upper-right corner of any page on GitHub, click your profile photo.


Navigate to your account settings.

For an app owned by a personal account, click Settings.
For an app owned by an organization:

Click Your organizations.
To the right of the organization, click Settings.





In the left sidebar, click  Developer settings.


In the left sidebar, click GitHub Apps.


Next to the GitHub App that you want to redeliver a webhook for, click Edit.


In the sidebar, click Advanced.


Under "Recent deliveries", all deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed. If webhooks are not active, the "Recent Deliveries" section will not be present.
Click the delivery GUID for the delivery that you want to redeliver.



Click Redeliver.


Redelivering GitHub Marketplace webhooks
The owner of a GitHub App can redeliver GitHub Marketplace webhooks for that app. If an organization has designated any app managers for a GitHub App owned by the organization, the app managers can also redeliver webhooks.


Navigate to your GitHub Marketplace listing page.


Next to the GitHub Marketplace listing for which you want to redeliver webhooks, click Manage listing.


In the sidebar, click Webhook.


Under "Recent deliveries", all deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed. If webhooks are not active, the "Recent Deliveries" section will not be present.
Click the delivery GUID for the delivery that you want to redeliver.



Click Redeliver.


Redelivering GitHub Sponsors webhooks
Only the owner of the sponsored account can redeliver sponsorship webhooks for that account.


In the upper-right corner of any page, click your profile photo, then click Your sponsors.


Next to the account for which you want to redeliver webhooks, click Dashboard.


In the sidebar, click Webhooks.


In the list of webhooks, click the URL of the webhook you'd like to redeliver. If you do not have a webhook configured, no webhooks will be listed.



Under "Recent deliveries", all deliveries from the past 3 days will be listed. If this webhook has not been delivered within the past 3 days, no deliveries will be listed. If webhooks are not active, the "Recent Deliveries" section will not be present.
Click the delivery GUID for the delivery that you want to redeliver.



Click Redeliver.\n\n\n\nWebhooks/Testing and troubleshooting webhooks/Test webhooksTesting webhooksLearn how to test your webhooks and your code that handles webhook deliveries.In this articleAbout testing webhooksTesting webhook deliveryTesting webhook code locallyAbout testing webhooks
You can test webhook delivery. This will let you verify that GitHub sends a webhook delivery in response to an event that you expect to trigger a webhook delivery.
You can also test your code that handles webhook deliveries by using your computer or codespace as a local server and forwarding webhook deliveries to your local server. This will let you develop and debug your code without deploying your code to your production server.
Testing webhook delivery
You can trigger a webhook event and verify that GitHub sent a webhook delivery.


Trigger your webhook. For example, if you are testing a repository webhook that is subscribed to the issues event, open an issue in the repository where the webhook is configured.
You can also redeliver a previous webhook delivery. For more information, see Redelivering webhooks.
If you are using an organization or repository webhook, you can also use the REST API to trigger the ping event for your webhook. If you are using a repository webhook and your webhook is subscribed to the push event, you can use the REST API to trigger a test push event for your webhook. For more information, see REST API endpoints for repository webhooks and REST API endpoints for organization webhooks.


Check GitHub to verify that a webhook delivery was sent. For information about how to do this for each webhook type, see Viewing webhook deliveries.


If a webhook delivery was not sent, or if a webhook delivery was sent but GitHub indicates that the delivery failed, refer to the troubleshooting guide to help diagnose the problem. For more information, see Troubleshooting webhooks.
Testing webhook code locally
In order to test your webhook code locally on your computer or codespace, you can use a webhook proxy URL to forward webhooks from GitHub to your computer or codespace. You can use your computer or codespace as a local server to receive these forwarded webhooks.
The following sections demonstrate how to use smee.io to provide a webhook proxy URL and forward webhooks.
For specific examples of code and testing steps, see Handling webhook deliveries.
Get a webhook proxy URL

In your browser, navigate to https://smee.io/.
Click Start a new channel.
Copy the full URL under "Webhook Proxy URL". You will use this URL in the following setup steps.

Configure a webhook to use the webhook proxy URL
Configure your webhook to use the webhook proxy URL from above. For more information, see Creating webhooks and Editing webhooks.
Now, GitHub will send webhook deliveries to that URL.
Start a local server
On your computer or codespace, start a local server. The way that you do this depends on how your code to receive webhooks is written. For examples, see Handling webhook deliveries.
You should make sure that your code can run locally. For example, if your code relies on environment variables on your server in production, you should make sure that the environment variables are also available on your local server.
You may also find it useful to add log statements so that you can verify that steps of your code executed as expected.
Keep your local server running while you test out your webhook.
Forward webhooks


If you don't already have smee-client installed, run the following command in your terminal:
Shellnpm install --global smee-client
npm install --global smee-client



To receive forwarded webhooks from smee.io, run the following command in your terminal. Replace WEBHOOK_PROXY_URL with your webhook proxy URL from earlier. Replace PATH with the path or route that your server will handle. Replace PORT with the port where your local server is listening.
Shellsmee --url WEBHOOK_PROXY_URL --path /PATH --port PORT
smee --url WEBHOOK_PROXY_URL --path /PATH --port PORT

You should see output that looks like this, with the WEBHOOK_PROXY_URL, PORT, and PATH placeholders replaced with the values you specified:
ShellForwarding WEBHOOK_PROXY_URL to http://127.0.0.1:PORT/PATH
Connected WEBHOOK_PROXY_URL
Forwarding WEBHOOK_PROXY_URL to http://127.0.0.1:PORT/PATH
Connected WEBHOOK_PROXY_URL

Now, when your webhook proxy URL (smee.io URL) receives a webhook delivery from GitHub, smee will forward the webhook delivery to your local server.


Keep this running while you test out your webhook. When you want to stop forwarding webhooks, enter Ctrl+C.


At this point, you should have both your local server running and the smee forwarding running.
Trigger a webhook delivery
Trigger your webhook. For example, if you are testing a repository webhook that is subscribed to the issues event, open an issue in the repository where the webhook is configured.
You can also redeliver a previous webhook delivery. For more information, see Redelivering webhooks.
Verify delivery
You can verify that GitHub sent a webhook delivery, that smee received and forwarded the delivery, and that your local server processed the webhook delivery.
Verify that GitHub sent a delivery
Check GitHub to verify that a webhook delivery was sent. For more information, see Viewing webhook deliveries.
If a webhook delivery was not sent, or if a webhook delivery was sent but GitHub indicates that the delivery failed, refer to the troubleshooting guide to help diagnose the problem. For more information, see Troubleshooting webhooks.
Verify that smee received your webhook delivery
Navigate to your webhook proxy URL on smee.io. You should see an event that corresponds to the event that you triggered or redelivered. This indicates that GitHub successfully sent a webhook delivery to the payload URL that you specified.
If you don't see your webhook delivery on smee.io, verify that your webhook is using your webhook proxy URL (smee.io URL).
Verify that smee forwarded your webhook delivery
In the terminal window where you ran smee --url WEBHOOK_PROXY_URL --path /PATH --port PORT, you should see something like POST http://127.0.0.1:3000/webhook - 202. This indicates that smee successfully forwarded your webhook to your local server.
If you don't see this, make sure that both the smee client and your local server are running. You should have these processes running in two separate terminal windows.
You should also check for errors in the terminal windows where you are running the smee client and your local server. The specific errors depend on how your code to receive webhooks is written. For examples, see Handling webhook deliveries.
Verify that your local server processed the webhook delivery
At this point, you have verified that GitHub sent a webhook delivery and that smee forwarded the delivery to your local server. Now, you should verify that your code processed the webhook delivery as expected. The way that you do this depends on how your code to receive webhooks is written. For examples, see Handling webhook deliveries.\n\n\n\nWebhooks/Testing and troubleshooting webhooks/Troubleshoot webhooksTroubleshooting webhooksLearn how to diagnose and resolve common errors for webhooks.In this articleMissing webhook deliveriesCannot have more than 20 webhooksURL host localhost is not supportedFailed to connect to hostFailed to connect to networkTimed outPeer certificate cannot be authenticated with given CA certificatesInvalid HTTP responseWebhooks deliveries are out of orderWebhook deliveries are not immediateFailed signature verificationMissing webhook deliveries
If you are not receiving the webhook deliveries that you expect, you should identify the point at which the delivery is missing.


Trigger an event that you expect to result in a webhook delivery. For example, if your webhook is a repository webhook that is subscribed to the issues event, you can open an issue on that repository.


Look at the recent deliveries log for your webhook. For information about how to do this for each webhook type, see Viewing webhook deliveries.
If the recent deliveries log does not include a delivery that corresponds to the webhook event that you triggered in the previous step, then GitHub did not attempt a delivery. To identify the cause:


Wait a few minutes, and then check again. Webhook deliveries can take a few minutes to appear.


Make sure that you triggered an event in the location where your webhook is configured. For example, if your webhook is a repository webhook, make sure that you triggered the event in the same repository where your webhook is configured.


Make sure that your webhook is subscribed to the event that you triggered. For example, if you expect a webhook delivery when you open an issue, make sure your webhook is subscribed to the issues event.


Make sure that your webhook is active. For more information, see Disabling webhooks.


Make sure that your webhook is not impacted by OAuth app access restrictions. If your webhook was created by an OAuth app on behalf of a user who authorized the OAuth app, the webhook will be automatically disabled if it is an organization or repository webhook for an organization that has restricted access by the OAuth app. For more information, see About OAuth app access restrictions.


Check whether your event may have hit a documented limit. For example, if you push more than three tags at once, the push event will not be triggered for that push. For more information about documented limits for each event, see Webhook events and payloads.


Check the status of webhooks at githubstatus.com.


If the recent deliveries log indicates that there was an error with the delivery, then GitHub attempted delivery but the delivery was unsuccessful. This is typically due to a problem with your server. You can refer to the sections below to help resolve the specific error.


Look at the logs for your server. The information in the logs depends on the code that your server runs to handle webhook deliveries. To help you diagnose problems on your server, you may want to add additional log statements to your code.


Cannot have more than 20 webhooks
You can create up to 20  repository or organization webhooks for each event type. If you attempt to create more, you will receive an error stating that you cannot have more than 20 webhooks.
If you require more than 20 webhooks, you can run a proxy that receives webhooks from GitHub and forwards them to an unlimited number of destination URLs.
URL host localhost is not supported
You cannot use localhost or 127.0.0.1 as a webhook URL.
To deliver webhooks to your local server for testing, you can use a webhook forwarding service. For more information, see Testing webhooks or visit https://smee.io/.
Failed to connect to host
The failed to connect to host error occurs when GitHub attempts a webhook delivery but could not resolve the webhook's URL to an IP address.
To check whether a host name resolves to an IP address, you can use nslookup. For example, if your payload URL is https://octodex.github.com/webhooks, you can run nslookup octodex.github.com. If the host name could not be resolved to an IP address, the nslookup command will indicate that the server can't find the host name.
Failed to connect to network
The failed to connect to network error indicates that your server refused the connection when GitHub attempted to deliver a webhook.
You should make sure that your server allows connections from GitHub's IP addresses. You can use the GET /meta endpoint to find the current list of GitHub's IP addresses. For more information, see REST API endpoints for meta data. GitHub occasionally makes changes to its IP addresses, so you should update your IP allow list periodically.
Timed out
The timed out error indicates that GitHub did not receive a response from your server within 10 seconds of delivering a webhook.
Your server should respond with a 2xx response within 10 seconds of receiving a webhook delivery. If your server takes longer than that to respond, then GitHub terminates the connection and considers the delivery a failure.
In order to respond in a timely manner, you may want to set up a queue to process webhook payloads asynchronously. Your server can respond when it receives the webhook, and then process the payload in the background without blocking future webhook deliveries. For example, you can use services like Hookdeck or libraries like Resque (Ruby), RQ (Python), or RabbitMQ.
Peer certificate cannot be authenticated with given CA certificates
This error indicates that there is a problem related to your server's certificates. The most common problems are:

Your server is using a self-signed certificate.
Your server is not sending the full certificate chain when the connection is established.

To help diagnose the problem, you can use the SSL server test from SSL Labs. This service can only work with the default port for HTTPS (port 443) and can only work with servers that are accessible from the Internet.
You can also use openssl to help diagnose the problem. To do so, run openssl s_client -connect HOST:PORT in a terminal. Replace HOST with your server's host name and PORT with the port. For example, openssl s_client -connect example.com:443. To identify problems, look for verify error in the output.
Invalid HTTP response
The invalid HTTP response error occurs when your server returns a 4xx or 5xx status in response to a webhook delivery from GitHub.
You should configure your server to return a 2xx status. If your server returns a 4xx or 5xx status, GitHub will record the delivery as a failure.
Webhooks deliveries are out of order
GitHub may deliver webhooks in a different order than the order in which the events took place. If you need to know when the event occurred relative to another event, you should use the timestamps that are included in the delivery payload.
Webhook deliveries are not immediate
Webhook deliveries can take a few minutes to be delivered and to appear in the recent deliveries log. Before concluding that your webhook delivery failed, wait a few minutes and then check again.
If your account experiences a surge in webhook deliveries, GitHub may temporarily throttle the rate of deliveries to your account. If your webhook deliveries are slowed down by GitHub, the throttled_at property for each affected delivery shows the timestamp when delivery was throttled. You can check for this using the REST API, see List deliveries for a repository webhook.
To avoid delays, subscribe only to the webhook events that are necessary for your account, reducing the frequency of deliveries. See “Best practices for using webhooks.”
Failed signature verification
You should use a webhook secret and the X-Hub-Signature-256 header to verify that a webhook delivery is from GitHub. For more information, see Validating webhook deliveries.
If you are sure that the payload is from GitHub but the signature verification fails:

Make sure that you have configured a secret for your webhook. The X-Hub-Signature-256 header will not be present if you have not configured a secret for your webhook. For more information about configuring a secret for your webhook, see Editing webhooks.
Make sure you are using the correct header. GitHub recommends that you use the X-Hub-Signature-256 header, which uses the HMAC-SHA256 algorithm. The X-Hub-Signature header uses the HMAC-SHA1 algorithm and is only included for legacy purposes.
Make sure that you are using the correct algorithm. If you are using the X-Hub-Signature-256 header, you should use the HMAC-SHA256 algorithm.
Make sure you are using the correct webhook secret. If you don't know the value of your webhook secret, you can update your webhook's secret. For more information, see Editing webhooks.
Make sure that the payload and headers are not modified before verification. For example, if you use a proxy or load balancer, make sure that the proxy or load balancer does not modify the payload or headers.
If your language and server implementation specifies a character encoding, ensure that you handle the payload as UTF-8. Webhook payloads can contain unicode characters.\n\n\n\nWebhooks/Testing and troubleshooting webhooks/Test with the CLIUsing the GitHub CLI to forward webhooks for testingYou can use the GitHub CLI to test webhooks in your development environment without the complexity of port forwarding or third-party tools.In this articleAbout receiving webhooks with GitHub CLIReceiving webhooks with GitHub CLIAbout receiving webhooks with GitHub CLI
When you make changes to your integration code, running the code in a local environment lets you test and iterate quickly without deploying the code. You can use GitHub CLI to forward webhooks to your local environment.
Webhook forwarding in the GitHub CLI only works with repository and organization webhooks. If you want to test other types of webhooks locally, you'll need to do this manually. For more information, see Testing webhooks.
Warning

Webhook forwarding is only designed for use during testing and development. It is not supported for use in production environments for handling live webhooks.

Receiving webhooks with GitHub CLI
Note

To learn more about GitHub CLI, see About GitHub CLI.



To install the GitHub CLI extension to enable webhook forwarding, use the extension install subcommand.
gh extension install cli/gh-webhook



If you want to forward organization webhooks, add the admin:org_hook scope to your GitHub CLI login so you have the required permissions.
gh auth refresh --scopes admin:org_hook



Start your application locally, and take a note of the URL where it's expecting to receive webhooks. This guide assumes that your application is listening for webhook events at http://localhost:3000/webhook.


To set up webhooks to be delivered to your application, run the webhook forward subcommand. Replace REPOSITORY with the name of your repository. For example, monalisa/octocat. Replace EVENTS with a comma-separated list of the events that you want to receive. For example, issues,pull_request. Replace URL with the local URL where your application expects to receive webhooks. For example, "http://localhost:3000/webhook". To listen for organization webhooks instead of repository webhooks, replace the --repo flag with the --org flag. For example --org="octo-org".
gh webhook forward --repo=REPOSITORY --events=EVENTS --url=URL



Leave the command running in the background. It will receive all of the specified events for the specified repository and forward them to your webhook handler running at the specified URL.
Note

Only one person can use webhook forwarding at a time for each repository and organization. If you try to set up webhook forwarding and someone else is already working with that organization or repository, you'll receive a Hook already exists error.\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\nWebhooks/Webhook events & payloadsWebhook events and payloadsLearn about when each webhook event occurs and what the payload contains.In this articleAbout webhook events and payloadsbranch_protection_configurationbranch_protection_rulecheck_runcheck_suitecode_scanning_alertcommit_commentcreatecustom_propertycustom_property_valuesdeletedependabot_alertdeploy_keydeploymentdeployment_protection_ruledeployment_reviewdeployment_statusdiscussiondiscussion_commentforkgithub_app_authorizationgolluminstallationinstallation_repositoriesinstallation_targetissue_commentissueslabelmarketplace_purchasemembermembershipmerge_groupmetamilestoneorg_blockorganizationpackagepage_buildpersonal_access_token_requestpingproject_cardprojectproject_columnprojects_v2projects_v2_itemprojects_v2_status_updatepublicpull_requestpull_request_review_commentpull_request_reviewpull_request_review_threadpushregistry_packagereleaserepository_advisoryrepositoryrepository_dispatchrepository_importrepository_rulesetrepository_vulnerability_alertsecret_scanning_alertsecret_scanning_alert_locationsecret_scanning_scansecurity_advisorysecurity_and_analysissponsorshipstarstatussub_issuesteam_addteamwatchworkflow_dispatchworkflow_jobworkflow_runAbout webhook events and payloads
You can create webhooks that subscribe to the events listed on this page. To limit the number of HTTP requests to your server, you should only subscribe to the specific events that you plan on handling. For more information, see Creating webhooks.
Each webhook event on this page includes a description of the webhook properties for that event. If the event has multiple actions, the properties corresponding to each action are included.
Each event is only available to specific types of webhooks. For example, an organization webhook can subscribe to the team event, but a repository webhook cannot. The description of each webhook event lists the availability for that event. For more information, see Types of webhooks.
Payload cap
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, on a create event if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Delivery headers
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:

X-GitHub-Hook-ID: The unique identifier of the webhook.
X-GitHub-Event: The name of the event that triggered the delivery.
X-GitHub-Delivery: A globally unique identifier (GUID) to identify the event.
X-Hub-Signature: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-1 hash function and the secret as the HMAC key. X-Hub-Signature is provided for compatibility with existing integrations. We recommend that you use the more secure X-Hub-Signature-256 instead.
X-Hub-Signature-256: This header is sent if the webhook is configured with a secret. This is the HMAC hex digest of the request body, and is generated using the SHA-256 hash function and the secret as the HMAC key. For more information, see Validating webhook deliveries.
User-Agent: This header will always have the prefix GitHub-Hookshot/.
X-GitHub-Hook-Installation-Target-Type: The type of resource where the webhook was created.
X-GitHub-Hook-Installation-Target-ID: The unique identifier of the resource where the webhook was created.

To see what each header might look like in a webhook payload, see Example webhook delivery.
Example webhook delivery
You can choose to have payloads delivered in JSON format (application/json) or as URL-encoded data (x-www-form-urlencoded). Following is an example of a webhook POST request that uses the JSON format.
> POST /payload HTTP/1.1

> X-GitHub-Delivery: 72d3162e-cc78-11e3-81ab-4c9367dc0958
> X-Hub-Signature: sha1=7d38cdd689735b008b3c702edd92eea23791c5f6
> X-Hub-Signature-256: sha256=d57c68ca6f92289e6987922ff26938930f6e66a2d161ef06abdf1859230aa23c
> User-Agent: GitHub-Hookshot/044aadd
> Content-Type: application/json
> Content-Length: 6615
> X-GitHub-Event: issues
> X-GitHub-Hook-ID: 292430182
> X-GitHub-Hook-Installation-Target-ID: 79929171
> X-GitHub-Hook-Installation-Target-Type: repository

> {
>   "action": "opened",
>   "issue": {
>     "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
>     "number": 1347,
>     ...
>   },
>   "repository" : {
>     "id": 1296269,
>     "full_name": "octocat/Hello-World",
>     "owner": {
>       "login": "octocat",
>       "id": 1,
>       ...
>     },
>     ...
>   },
>   "sender": {
>     "login": "octocat",
>     "id": 1,
>     ...
>   }
> }
branch_protection_configurationThis event occurs when there is a change to branch protection configurations for a repository.
For more information, see "About protected branches."
For information about using the APIs to manage branch protection rules, see "Branch protection rule" in the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_configurationRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_configurationAction type: disabledAll branch protections were disabled for a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: disabled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.branch_protection_ruleThis event occurs when there is activity relating to branch protection rules. For more information, see "About protected branches." For information about the APIs to manage branch protection rules, see the GraphQL documentation or "Branch protection" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for branch_protection_ruleRepositoriesOrganizationsGitHub AppsWebhook payload object for branch_protection_ruleAction type: createdA branch protection rule was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.rule object RequiredThe branch protection rule. Includes a name and all the branch protection settings applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build lists are arrays of strings.Properties of rulesender object RequiredA GitHub user.check_runThis event occurs when there is activity relating to a check run. For information about check runs, see "Getting started with the Checks API." For information about the APIs to manage check runs, see the GraphQL API documentation or "Check Runs" in the REST API documentation.
For activity relating to check suites, use the check-suite event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" repository permission. To receive the rerequested and requested_action event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the created and completed event types in repositories.
Note

The API only looks for pushes in the repository where the check run was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_runRepositoriesOrganizationsGitHub AppsWebhook payload object for check_runAction type: completedA check run was completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string Value: completed check_run object RequiredA check performed on the code of a given code changeProperties of check_runinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.check_suiteThis event occurs when there is activity relating to a check suite. For information about check suites, see "Getting started with the Checks API." For information about the APIs to manage check suites, see the GraphQL API documentation or "Check Suites" in the REST API documentation.
For activity relating to check runs, use the check_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Checks" permission. To receive the requested and rerequested event types, the app must have at least write-level access for the "Checks" permission. GitHub Apps with write-level access for the "Checks" permission are automatically subscribed to this webhook event.
Repository and organization webhooks only receive payloads for the completed event types in repositories.
Note

The API only looks for pushes in the repository where the check suite was created. Pushes to a branch in a forked repository are not detected and return an empty pull_requests array and a null value for head_branch.
Availability for check_suiteRepositoriesOrganizationsGitHub AppsWebhook payload object for check_suiteAction type: completedAll check runs in a check suite have completed, and a conclusion is available.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed check_suite object RequiredThe check_suite.Properties of check_suiteenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.code_scanning_alertThis event occurs when there is activity relating to code scanning alerts in a repository. For more information, see "About code scanning" and "About code scanning alerts." For information about the API to manage code scanning, see "Code scanning" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Code scanning alerts" repository permission.Availability for code_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for code_scanning_alertAction type: appeared_in_branchA previously created code scanning alert appeared in another branch. This can happen when a branch is merged into or created from a branch with a pre-existing code scanning alert.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: appeared_in_branch alert object RequiredThe code scanning alert involved in the event.Properties of alertcommit_oid string RequiredThe commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string RequiredThe Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was triggered by the sender and this value will be empty.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.commit_commentThis event occurs when there is activity relating to commit comments. For more information about commit comments, see "Commenting on a pull request." For information about the APIs to manage commit comments, see the GraphQL API documentation or "Commit comments" in the REST API documentation.
For activity relating to comments on pull request reviews, use the pull_request_review_comment event. For activity relating to issue comments, use the issue_comment event. For activity relating to discussion comments, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for commit_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for commit_commentSomeone commented on a commit.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action performed. Can be created.Value: created comment object RequiredThe commit comment resource.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.createThis event occurs when a Git branch or tag is created.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Notes:

This event will not occur when more than three tags are created at once.
Payloads are capped at 25 MB. If an event generates a larger payload, GitHub will not deliver a payload for that webhook event. This may happen, for example, if many branches or tags are pushed at once. We suggest monitoring your payload size to ensure delivery.
Availability for createRepositoriesOrganizationsGitHub AppsWebhook payload object for createWebhook request body parametersName, Type, Descriptiondescription string or null RequiredThe repository's current description.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."master_branch string RequiredThe name of the repository's default branch (usually main).organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object created in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.custom_propertyThis event occurs when there is activity relating to a custom property.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_propertyEnterprisesOrganizationsGitHub AppsWebhook payload object for custom_propertyAction type: createdA new custom property was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created definition object RequiredCustom property defined on an organizationProperties of definitionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.custom_property_valuesThis event occurs when there is activity relating to custom property values for a repository.
For more information, see "Managing custom properties for repositories in your organization". For information about the APIs to manage custom properties for a repository, see "Custom properties" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Custom properties" organization permission.Availability for custom_property_valuesRepositoriesOrganizationsGitHub AppsWebhook payload object for custom_property_valuesThe custom property values of a repository were updated.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: updated enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.new_property_values array of objects RequiredThe new custom property values for the repository.Properties of new_property_valuesold_property_values array of objects RequiredThe old custom property values for the repository.Properties of old_property_valuesdeleteThis event occurs when a Git branch or tag is deleted. To subscribe to all pushes to a repository, including
branch and tag deletions, use the push webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

This event will not occur when more than three tags are deleted at once.
Availability for deleteRepositoriesOrganizationsGitHub AppsWebhook payload object for deleteWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher_type string RequiredThe pusher type for the event. Can be either user or a deploy key.ref string RequiredThe git ref resource.ref_type string RequiredThe type of Git ref object deleted in the repository.Can be one of: tag, branch repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.dependabot_alertThis event occurs when there is activity relating to Dependabot alerts.
For more information about Dependabot alerts, see "About Dependabot alerts." For information about the API to manage Dependabot alerts, see "Dependabot alerts" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Dependabot alerts" repository permission.
Note

Webhook events for Dependabot alerts are currently in public preview and subject to change.
Availability for dependabot_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for dependabot_alertAction type: auto_dismissedA Dependabot alert was automatically closed by a Dependabot auto-triage rule.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: auto_dismissed alert object RequiredA Dependabot alert.Properties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploy_keyThis event occurs when there is activity relating to deploy keys. For more information, see "Managing deploy keys." For information about the APIs to manage deploy keys, see the GraphQL API documentation or "Deploy keys" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploy_keyRepositoriesOrganizationsGitHub AppsWebhook payload object for deploy_keyAction type: createdA deploy key was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."key object RequiredThe deploy key resource.Properties of keyorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.deploymentThis event occurs when there is activity relating to deployments. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment status, use the deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deploymentRepositoriesOrganizationsGitHub AppsWebhook payload object for deploymentA deployment was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created deployment object RequiredThe deployment.Properties of deploymententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object or null RequiredProperties of workflow_rundeployment_protection_ruleThis event occurs when there is activity relating to deployment protection rules. For more information, see "Using environments for deployment." For information about the API to manage deployment protection rules, see the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_protection_ruleGitHub AppsWebhook payload object for deployment_protection_ruleA deployment protection rule was requested for an environment.Webhook request body parametersName, Type, Descriptionaction string Value: requested environment string The name of the environment that has the deployment protection rule.event string The event that triggered the deployment protection rule.deployment_callback_url string The URL to review the deployment protection rule.deployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentpull_requests array of objects Properties of pull_requestsrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."sender object A GitHub user.deployment_reviewThis event occurs when there is activity relating to deployment reviews. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation or deployment status, use the deployment or deployment_status event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.Availability for deployment_reviewGitHub AppsWebhook payload object for deployment_reviewAction type: approvedA deployment review was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved approver object Properties of approvercomment string enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.reviewers array of objects Properties of reviewerssender object RequiredA GitHub user.since string Requiredworkflow_job_run object Properties of workflow_job_runworkflow_job_runs array of objects Properties of workflow_job_runsworkflow_run object or null RequiredProperties of workflow_rundeployment_statusThis event occurs when there is activity relating to deployment statuses. For more information, see "About deployments." For information about the APIs to manage deployments, see the GraphQL API documentation or "Deployments" in the REST API documentation.
For activity relating to deployment creation, use the deployment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Deployments" repository permission.
Note

A webhook event is not fired for deployment statuses with an inactive state.
Availability for deployment_statusRepositoriesOrganizationsGitHub AppsWebhook payload object for deployment_statusA new deployment status was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created check_run object or null Properties of check_rundeployment object RequiredThe deployment.Properties of deploymentdeployment_status object RequiredThe deployment status.Properties of deployment_statusenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null Properties of workflowworkflow_run object or null Properties of workflow_rundiscussionThis event occurs when there is activity relating to a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a comment on a discussion, use the discussion_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussionRepositoriesOrganizationsGitHub AppsWebhook payload object for discussionAction type: answeredA comment on the discussion was marked as the answer.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: answered answer object RequiredProperties of answerdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.discussion_commentThis event occurs when there is activity relating to a comment on a discussion. For more information about discussions, see "GitHub Discussions." For information about the API to manage discussions, see the GraphQL documentation.
For activity relating to a discussion as opposed to comments on a discussion, use the discussion event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Discussions" repository permission.
Note

Webhook events for GitHub Discussions are currently in public preview and subject to change.
Availability for discussion_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for discussion_commentAction type: createdA comment on a discussion was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredProperties of commentdiscussion object RequiredA Discussion in a repository.Properties of discussionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.forkThis event occurs when someone forks a repository. For more information, see "Fork a repo." For information about the API to manage forks, see "Forks" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for forkEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for forkWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forkee object RequiredThe created repository resource.Properties of forkeeinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.github_app_authorizationThis event occurs when a user revokes their authorization of a GitHub App. For more information, see "About apps." For information about the API to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.
A GitHub App receives this webhook by default and cannot unsubscribe from this event.
Anyone can revoke their authorization of a GitHub App from their GitHub account settings page. Revoking the authorization of a GitHub App does not uninstall the GitHub App. You should program your GitHub App so that when it receives this webhook, it stops calling the API on behalf of the person who revoked the token. If your GitHub App continues to use a revoked access token, it will receive the 401 Bad Credentials error. For details about requests with a user access token, which require GitHub App authorization, see "Authenticating with a GitHub App on behalf of a user."Availability for github_app_authorizationGitHub AppsWebhook payload object for github_app_authorizationSomeone revoked their authorization of a GitHub App.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: revoked sender object RequiredA GitHub user.gollumThis event occurs when someone creates or updates a wiki page. For more information, see "About wikis."
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for gollumRepositoriesOrganizationsGitHub AppsWebhook payload object for gollumWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pages array of objects RequiredThe pages that were updated.Properties of pagesrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.installationThis event occurs when there is activity relating to a GitHub App installation. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installationGitHub AppsWebhook payload object for installationAction type: createdSomeone installed a GitHub App on a user or organization account.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories array of objects An array of repository objects that the installation can access.Properties of repositoriesrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.requester object or null Properties of requestersender object RequiredA GitHub user.installation_repositoriesThis event occurs when there is activity relating to which repositories a GitHub App installation can access. All GitHub Apps receive this event by default. You cannot manually subscribe to this event.
For more information about GitHub Apps, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_repositoriesGitHub AppsWebhook payload object for installation_repositoriesAction type: addedA GitHub App installation was granted access to one or more repositories.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredInstallationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repositories_added array of objects RequiredAn array of repository objects, which were added to the installation.Properties of repositories_addedrepositories_removed array of objects RequiredAn array of repository objects, which were removed from the installation.Properties of repositories_removedrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_selection string RequiredDescribe whether all repositories have been selected or there's a selection involvedCan be one of: all, selected requester object or null RequiredProperties of requestersender object RequiredA GitHub user.installation_targetThis event occurs when there is activity relating to the user or organization account that a GitHub App is installed on. For more information, see "About apps." For information about the APIs to manage GitHub Apps, see the GraphQL API documentation or "Apps" in the REST API documentation.Availability for installation_targetGitHub AppsWebhook payload object for installation_targetSomebody renamed the user or organization account that a GitHub App is installed on.Webhook request body parametersName, Type, Descriptionaccount object RequiredProperties of accountaction string RequiredValue: renamed changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.target_type string Requiredissue_commentThis event occurs when there is activity relating to a comment on an issue or pull request. For more information about issues and pull requests, see "About issues" and "About pull requests." For information about the APIs to manage issue comments, see the GraphQL documentation or "Issue comments" in the REST API documentation.
For activity relating to an issue as opposed to comments on an issue, use the issue event. For activity related to pull request reviews or pull request review comments, use the pull_request_review or pull_request_review_comment events. For more information about the different types of pull request comments, see "Working with comments."
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issue_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for issue_commentAction type: createdA comment on an issue or pull request was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue the comment belongs to.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.issuesThis event occurs when there is activity relating to an issue. For more information about issues, see "About issues." For information about the APIs to manage issues, see the GraphQL documentation or "Issues" in the REST API documentation.
For activity relating to a comment on an issue, use the issue_comment event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permission.Availability for issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for issuesAction type: assignedAn issue was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredThe action that was performed.Value: assigned assignee object or null Properties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."issue object RequiredThe issue itself.Properties of issueorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.labelThis event occurs when there is activity relating to labels. For more information, see "Managing labels." For information about the APIs to manage labels, see the GraphQL documentation or "Labels" in the REST API documentation.
If you want to receive an event when a label is added to or removed from an issue, pull request, or discussion, use the labeled or unlabeled action type for the issues, pull_request, or discussion events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for labelRepositoriesOrganizationsGitHub AppsWebhook payload object for labelAction type: createdA label was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."label object RequiredProperties of labelorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.marketplace_purchaseThis event occurs when there is activity relating to a GitHub Marketplace purchase. For more information, see "GitHub Marketplace." For information about the APIs to manage GitHub Marketplace listings, see the GraphQL documentation or "GitHub Marketplace" in the REST API documentation.Availability for marketplace_purchaseGitHub MarketplaceWebhook payload object for marketplace_purchaseAction type: cancelledSomeone cancelled a GitHub Marketplace plan, and the last billing cycle has ended. The change will take effect on the account immediately.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled effective_date string Requiredenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."marketplace_purchase object RequiredProperties of marketplace_purchaseorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.previous_marketplace_purchase object Properties of previous_marketplace_purchaserepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.memberThis event occurs when there is activity relating to collaborators in a repository. For more information, see "Adding outside collaborators to repositories in your organization." For more information about the API to manage repository collaborators, see the GraphQL API documentation or "Collaborators" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for memberEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for memberAction type: addedA GitHub user accepted an invitation to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added changes object Properties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.membershipThis event occurs when there is activity relating to team membership. For more information, see "About teams." For more information about the APIs to manage team memberships, see the GraphQL API documentation or "Team members" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for membershipOrganizationsEnterprisesGitHub AppsWebhook payload object for membershipAction type: addedAn organization member was added to a team.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."member object or null RequiredProperties of memberorganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.scope string RequiredThe scope of the membership. Currently, can only be team.Value: team sender object or null Requiredteam object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teammerge_groupThis event occurs when there is activity relating to a merge group in a merge queue. For more information, see "Managing a merge queue."
To subscribe to this event, a GitHub App must have at least read-level access for the "Merge queues" repository permission.Availability for merge_groupGitHub AppsWebhook payload object for merge_groupAction type: checks_requestedStatus checks were requested for a merge group. This happens when a merge group is created or added to by the merge queue because a pull request was queued.
When you receive this event, you should perform checks on the head SHA and report status back using check runs or commit statuses.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: checks_requested installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."merge_group object RequiredA group of pull requests that the merge queue has grouped together to be merged.Properties of merge_grouporganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.metaThis event occurs when there is activity relating to a webhook itself.
To subscribe to this event, a GitHub App must have at least read-level access for the "Meta" app permission.Availability for metaGitHub MarketplaceEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for metaThe webhook was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."hook object RequiredThe modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.Properties of hookhook_id integer RequiredThe id of the modified webhook.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.milestoneThis event occurs when there is activity relating to milestones. For more information, see "About milestones." For information about the APIs to manage milestones, see the GraphQL documentation or "Milestones" in the REST API documentation.
If you want to receive an event when an issue or pull request is added to or removed from a milestone, use the milestoned or demilestoned action type for the issues or pull_request events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" or "Pull requests" repository permissions.Availability for milestoneRepositoriesOrganizationsGitHub AppsWebhook payload object for milestoneAction type: closedA milestone was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."milestone object RequiredA collection of related issues and pull requests.Properties of milestoneorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.org_blockThis event occurs when organization owners or moderators block or unblock a non-member from collaborating on the organization's repositories. For more information, see "Blocking a user from your organization." For information about the APIs to manage blocked users, see the GraphQL documentation or "Blocking users" in the REST API documentation.
If you want to receive an event when members are added or removed from an organization, use the organization event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" organization permission.Availability for org_blockOrganizationsEnterprisesGitHub AppsWebhook payload object for org_blockAction type: blockedA user was blocked from the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: blocked blocked_user object or null RequiredProperties of blocked_userenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.organizationThis event occurs when there is activity relating to an organization and its members. For more information, see "About organizations." For information about the APIs to manage organizations, see the GraphQL documentation or "Organizations" in the REST API documentation.
If you want to receive an event when a non-member is blocked or unblocked from an organization, use the org_block event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for organizationOrganizationsEnterprisesGitHub AppsWebhook payload object for organizationAction type: deletedAn organization was deleted.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: deleted enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."membership object The membership between the user and the organization. Not present when the action is member_invited.Properties of membershiporganization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.Availability for packageRepositoriesOrganizationsGitHub AppsWebhook payload object for packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.package object RequiredInformation about the package.Properties of packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.page_buildThis event occurs when there is an attempted build of a GitHub Pages site. This event occurs regardless of whether the build is successful. For more information, see "Configuring a publishing source for your GitHub Pages site." For information about the API to manage GitHub Pages, see "Pages" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pages" repository permission.Availability for page_buildRepositoriesOrganizationsGitHub AppsWebhook payload object for page_buildWebhook request body parametersName, Type, Descriptionbuild object RequiredThe List GitHub Pages builds itself.Properties of buildenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.personal_access_token_requestThis event occurs when there is activity relating to a request for a fine-grained personal access token to access resources that belong to a resource owner that requires approval for token access. For more information, see "Creating a personal access token."
To subscribe to this event, a GitHub App must have at least read-level access for the "Personal access token requests" organization permission.Availability for personal_access_token_requestGitHub AppsOrganizationsWebhook payload object for personal_access_token_requestAction type: approvedA fine-grained personal access token request was approved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: approved personal_access_token_request object RequiredDetails of a Personal Access Token Request.Properties of personal_access_token_requestenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object RequiredA GitHub user.installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."pingThis event occurs when you create a new webhook. The ping event is a confirmation from GitHub that you configured the webhook correctly.Availability for pingRepositoriesOrganizationsGitHub AppsEnterprisesGitHub MarketplaceWebhook payload object for pingWebhook request body parametersName, Type, Descriptionhook object The webhook that is being pingedProperties of hookhook_id integer The ID of the webhook that triggered the ping.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.zen string Random string of GitHub zen.project_cardThis event occurs when there is activity relating to a card on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a column on a project (classic), use the project and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_cardRepositoriesOrganizationsGitHub AppsWebhook payload object for project_cardAction type: convertedA note in a project (classic) was converted to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: converted changes object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_card object RequiredProperties of project_cardrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.projectThis event occurs when there is activity relating to a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a card or column on a project (classic), use the project_card and project_column event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for projectRepositoriesOrganizationsGitHub AppsWebhook payload object for projectAction type: closedA project (classic) was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project object RequiredProperties of projectrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.project_columnThis event occurs when there is activity relating to a column on a project (classic). For more information, see "About projects (classic)." For information about the API to manage classic projects, see the GraphQL API documentation or "Projects (classic)" in the REST API documentation.
For activity relating to a project (classic) or a card on a project (classic), use the project and project_card event.
This event relates to projects (classic) only. For activity relating to the new Projects experience, use the projects_v2 event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" repository or organization permission.Availability for project_columnRepositoriesOrganizationsGitHub AppsWebhook payload object for project_columnAction type: createdA column was added to a project (classic).Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.project_column object RequiredProperties of project_columnrepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.projects_v2This event occurs when there is activity relating to an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a item on a project, use the projects_v2_item event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2OrganizationsWebhook payload object for projects_v2Action type: closedA project in the organization was closed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: closed installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2 object RequiredA projects v2 projectProperties of projects_v2sender object RequiredA GitHub user.projects_v2_itemThis event occurs when there is activity relating to an item on an organization-level project. For more information, see "About Projects." For information about the Projects API, see the GraphQL documentation.
For activity relating to a project (instead of an item on a project), use the projects_v2 event. For activity relating to Projects (classic), use the project, project_card, and project_column events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

Webhook events for projects are currently in public preview and subject to change. To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_itemOrganizationsWebhook payload object for projects_v2_itemAction type: archivedAn item on an organization project was archived. For more information, see "Archiving items from your project."Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived changes object RequiredProperties of changesinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_item object RequiredAn item belonging to a projectProperties of projects_v2_itemsender object RequiredA GitHub user.projects_v2_status_updateThis event occurs when there is activity relating to a status update on an organization-level project. For more information, see "About Projects."
For activity relating to a project, use the projects_v2 event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Projects" organization permission.
Note

To share feedback about projects webhooks with GitHub, see the Projects webhook feedback discussion.
Availability for projects_v2_status_updateOrganizationsWebhook payload object for projects_v2_status_updateAction type: createdA status update was added to a project in the organization.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.projects_v2_status_update object RequiredAn status update belonging to a projectProperties of projects_v2_status_updatesender object RequiredA GitHub user.publicThis event occurs when repository visibility changes from private to public. For more information, see "Setting repository visibility."
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for publicRepositoriesOrganizationsGitHub AppsWebhook payload object for publicWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_requestThis event occurs when there is activity on a pull request. For more information, see "About pull requests." For information about the APIs to manage pull requests, see the GraphQL API documentation or "Pulls" in the REST API documentation.
For activity related to pull request reviews, pull request review comments, pull request comments, or pull request review threads, use the pull_request_review, pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_requestRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_requestAction type: assignedA pull request was assigned to a user.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: assigned assignee object or null RequiredProperties of assigneeenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."number integer RequiredThe pull request number.organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_review_commentThis event occurs when there is activity relating to a pull request review comment. A pull request review comment is a comment on a pull request's diff. For more information, see "Commenting on a pull request." For information about the APIs to manage pull request review comments, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request reviews, pull request comments, or pull request review threads, use the pull_request_review, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_commentRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_commentAction type: createdA comment on a pull request diff was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created comment object RequiredThe comment itself.Properties of commententerprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.pull_request_reviewThis event occurs when there is activity relating to a pull request review. A pull request review is a group of pull request review comments in addition to a body comment and a state. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request reviews" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request review threads, use the pull_request_review_comment, issue_comment, or pull_request_review_thread events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_reviewRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_reviewAction type: dismissedA review on a pull request was dismissed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: dismissed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.review object RequiredThe review that was affected.Properties of reviewsender object RequiredA GitHub user.pull_request_review_threadThis event occurs when there is activity relating to a comment thread on a pull request. For more information, see "About pull request reviews." For information about the APIs to manage pull request reviews, see the GraphQL API documentation or "Pull request review comments" in the REST API documentation.
For activity related to pull request review comments, pull request comments, or pull request reviews, use the pull_request_review_comment, issue_comment, or pull_request_review events instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Pull requests" repository permission.Availability for pull_request_review_threadRepositoriesOrganizationsGitHub AppsWebhook payload object for pull_request_review_threadAction type: resolvedA comment thread on a pull request was marked as resolved.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: resolved enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pull_request object RequiredProperties of pull_requestrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.thread object RequiredProperties of threadpushThis event occurs when there is a push to a repository branch. This includes when a commit is pushed, when a commit tag is pushed,
when a branch is deleted, when a tag is deleted, or when a repository is created from a template. To subscribe to only branch
and tag deletions, use the delete webhook event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.
Note

Events will not be created if more than 5000 branches are pushed at once. Events will not be created for tags when more than three tags are pushed at once.
Availability for pushRepositoriesOrganizationsGitHub AppsWebhook payload object for pushWebhook request body parametersName, Type, Descriptionafter string RequiredThe SHA of the most recent commit on ref after the push.base_ref string or null Requiredbefore string RequiredThe SHA of the most recent commit on ref before the push.commits array of objects RequiredAn array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the compare between the before commit and the after commit.) The array includes a maximum of 2048 commits. If necessary, you can use the Commits API to fetch additional commits.Properties of commitscompare string RequiredURL that shows the changes in this ref update, from the before commit to the after commit. For a newly created ref that is directly based on the default branch, this is the comparison between the head of the default branch and the after commit. Otherwise, this shows all commits until the after commit.created boolean RequiredWhether this push created the ref.deleted boolean RequiredWhether this push deleted the ref.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."forced boolean RequiredWhether this push was a force push of the ref.head_commit object or null RequiredProperties of head_commitinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.pusher object RequiredMetaproperties for Git author/committer information.Properties of pusherref string RequiredThe full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.repository object RequiredA git repositorysender object A GitHub user.registry_packageThis event occurs when there is activity relating to GitHub Packages. For more information, see "Introduction to GitHub Packages." For information about the APIs to manage GitHub Packages, see the GraphQL API documentation or "Packages" in the REST API documentation.
To install this event on a GitHub App, the app must have at least read-level access for the "Packages" repository permission.
Note

GitHub recommends that you use the newer package event instead.
Availability for registry_packageRepositoriesOrganizationsGitHub AppsWebhook payload object for registry_packageAction type: publishedA package was published to a registry.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.registry_package object RequiredProperties of registry_packagerepository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.releaseThis event occurs when there is activity relating to releases. For more information, see "About releases." For information about the APIs to manage releases, see the GraphQL API documentation or "Releases" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for releaseRepositoriesOrganizationsGitHub AppsWebhook payload object for releaseAction type: createdA draft was saved, or a release or pre-release was published without previously being saved as a draft.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.release object RequiredThe release object.Properties of releaserepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_advisoryThis event occurs when there is activity relating to a repository security advisory. For more information about repository security advisories, see "About GitHub Security Advisories for repositories."
To subscribe to this event, a GitHub App must have at least read-level access for the "Repository security advisories" permission.Availability for repository_advisoryRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_advisoryAction type: publishedA repository security advisory was published.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_advisory object RequiredA repository security advisory.Properties of repository_advisorysender object A GitHub user.repositoryThis event occurs when there is activity relating to repositories. For more information, see "About repositories." For information about the APIs to manage repositories, see the GraphQL documentation or "Repositories" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for repositoryEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for repositoryAction type: archivedA repository was archived.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: archived enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_dispatchThis event occurs when a GitHub App sends a POST request to /repos/{owner}/{repo}/dispatches. For more information, see the REST API documentation for creating a repository dispatch event. In the payload, the action will be the event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for repository_dispatchGitHub AppsWebhook payload object for repository_dispatchWebhook request body parametersName, Type, Descriptionaction string RequiredThe event_type that was specified in the POST /repos/{owner}/{repo}/dispatches request body.branch string Requiredclient_payload object or null RequiredThe client_payload that was specified in the POST /repos/{owner}/{repo}/dispatches request body.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object RequiredThe GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.repository_importThis event occurs when a repository is imported to GitHub. For more information, see "Importing a repository with GitHub Importer." For more information about the API to manage imports, see the REST API documentation.Availability for repository_importRepositoriesOrganizationsWebhook payload object for repository_importWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.status string RequiredCan be one of: success, cancelled, failure repository_rulesetThis event occurs when there is activity relating to repository rulesets.
For more information about repository rulesets, see "Managing rulesets."
For more information on managing rulesets via the APIs, see Repository ruleset in the GraphQL documentation or "Repository rules" and "Organization rules in the REST API documentation."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository or organization permission.Availability for repository_rulesetRepositoriesOrganizationsGitHub AppsWebhook payload object for repository_rulesetAction type: createdA repository ruleset was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.repository_ruleset object RequiredA set of rules to apply when specified conditions are met.Properties of repository_rulesetsender object RequiredA GitHub user.repository_vulnerability_alertThis event occurs when there is activity relating to a security vulnerability alert in a repository.
Warning

Closing down notice: This event is closing down. Use the dependabot_alert event instead.
Availability for repository_vulnerability_alertRepositoriesOrganizationsWebhook payload object for repository_vulnerability_alertAction type: createA repository vulnerability alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: create alert object RequiredThe security alert of the vulnerable dependency.Properties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_alertThis event occurs when there is activity relating to a secret scanning alert. For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alert locations, use the secret_scanning_alert_location event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alertRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alertAction type: createdA secret scanning alert was created.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created alert object RequiredProperties of alertenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.secret_scanning_alert_locationThis event occurs when there is activity relating to the locations of a secret in a secret scanning alert.
For more information about secret scanning, see "About secret scanning." For information about the API to manage secret scanning alerts, see "Secret scanning" in the REST API documentation.
For activity relating to secret scanning alerts, use the secret_scanning_alert event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_alert_locationRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_alert_locationA new instance of a previously detected secret was detected in a repository, and the location of the secret was added to the existing alert.Webhook request body parametersName, Type, Descriptionaction string Value: created alert object RequiredProperties of alertinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."location object RequiredProperties of locationorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.secret_scanning_scanThis event occurs when secret scanning completes certain scans on a repository. For more information about secret scanning, see "About secret scanning."
Scans can originate from multiple events such as updates to a custom pattern, a push to a repository, or updates
to patterns from partners. For more information on custom patterns, see "About custom patterns."
To subscribe to this event, a GitHub App must have at least read-level access for the "Secret scanning alerts" repository permission.Availability for secret_scanning_scanRepositoriesOrganizationsGitHub AppsWebhook payload object for secret_scanning_scanA secret scanning scan was completed.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed type string RequiredWhat type of scan was completedCan be one of: backfill, custom-pattern-backfill, pattern-version-backfill source string RequiredWhat type of content was scannedCan be one of: git, issues, pull-requests, discussions, wiki started_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.completed_at string RequiredThe time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.secret_types array of strings or null List of patterns that were updated. This will be empty for normal backfill scans or custom pattern updatescustom_pattern_name string or null If the scan was triggered by a custom pattern update, this will be the name of the pattern that was updatedcustom_pattern_scope string or null If the scan was triggered by a custom pattern update, this will be the scope of the pattern that was updatedCan be one of: repository, organization, enterprise, null repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.sender object A GitHub user.security_advisoryThis event occurs when there is activity relating to a global security advisory that was reviewed by GitHub. A GitHub-reviewed global security advisory provides information about security vulnerabilities or malware that have been mapped to packages in ecosystems we support. For more information about global security advisories, see "About global security advisories." For information about the API to manage security advisories, see the REST API documentation or the GraphQL documentation.
GitHub Dependabot alerts are also powered by the security advisory dataset. For more information, see "About Dependabot alerts."Availability for security_advisoryGitHub AppsWebhook payload object for security_advisoryAction type: publishedA security advisory was published to the GitHub community.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: published enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.security_advisory object RequiredThe details of the security advisory, including summary, description, and severity.Properties of security_advisorysender object A GitHub user.security_and_analysisThis event occurs when code security and analysis features are enabled or disabled for a repository. For more information, see "GitHub security features."
To subscribe to this event, a GitHub App must have at least read-level access for the "Administration" repository permission.Availability for security_and_analysisRepositoriesOrganizationsGitHub AppsWebhook payload object for security_and_analysisWebhook request body parametersName, Type, Descriptionchanges object RequiredProperties of changesenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredFull Repositorysender object A GitHub user.sponsorshipThis event occurs when there is activity relating to a sponsorship listing. For more information, see "About GitHub Sponsors." For information about the API to manage sponsors, see the GraphQL documentation.
You can only create a sponsorship webhook on GitHub.com. For more information, see "Configuring webhooks for events in your sponsored account."Availability for sponsorshipSponsored accountsWebhook payload object for sponsorshipAction type: cancelledA sponsorship was cancelled and the last billing cycle has ended.
This event is only sent when a recurring (monthly) sponsorship is cancelled; it is not sent for one-time sponsorships.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: cancelled enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sponsorship object RequiredProperties of sponsorshipstarThis event occurs when there is activity relating to repository stars. For more information about stars, see "Saving repositories with stars." For information about the APIs to manage stars, see the GraphQL documentation or "Starring" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for starRepositoriesOrganizationsGitHub AppsWebhook payload object for starAction type: createdSomeone starred a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: created enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.starred_at string or null RequiredThe time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for the deleted action.statusThis event occurs when the status of a Git commit changes. For example, commits can be marked as error, failure, pending, or success. For more information, see "About status checks." For information about the APIs to manage commit statuses, see the GraphQL documentation or "Commit statuses" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Commit statuses" repository permission.Availability for statusRepositoriesOrganizationsGitHub AppsWebhook payload object for statusWebhook request body parametersName, Type, Descriptionavatar_url string or null branches array of objects RequiredAn array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.Properties of branchescommit object RequiredProperties of commitcontext string Requiredcreated_at string Requireddescription string or null RequiredThe optional human-readable description added to the status.enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."id integer RequiredThe unique identifier of the status.installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."name string Requiredorganization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.sha string RequiredThe Commit SHA.state string RequiredThe new state. Can be pending, success, failure, or error.Can be one of: pending, success, failure, error target_url string or null RequiredThe optional link added to the status.updated_at string Requiredsub_issuesThis event occurs when there is activity relating to sub-issues.
For activity relating to issues more generally, use the issues event instead.
To subscribe to this event, a GitHub App must have at least read-level access for the "Issues" repository permissions.Availability for sub_issuesRepositoriesOrganizationsGitHub AppsWebhook payload object for sub_issuesAction type: parent_issue_addedA parent issue was added to an issue.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: parent_issue_added parent_issue_id number RequiredThe ID of the parent issue.parent_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of parent_issueparent_issue_repo object RequiredA repository on GitHub.Properties of parent_issue_reposub_issue_id number RequiredThe ID of the sub-issue.sub_issue object RequiredIssues are a great way to keep track of tasks, enhancements, and bugs for your projects.Properties of sub_issueinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object The repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object A GitHub user.team_addThis event occurs when a team is added to a repository.
For more information, see "Managing teams and people with access to your repository."
For activity relating to teams, see the teams event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for team_addRepositoriesOrganizationsGitHub AppsWebhook payload object for team_addWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamteamThis event occurs when there is activity relating to teams in an organization.
For more information, see "About teams."
To subscribe to this event, a GitHub App must have at least read-level access for the "Members" organization permission.Availability for teamOrganizationsEnterprisesGitHub AppsWebhook payload object for teamAction type: added_to_repositoryA team was granted access to a repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: added_to_repository enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object RequiredA GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object A git repositorysender object A GitHub user.team object RequiredGroups of organization members that gives permissions on specified repositories.Properties of teamwatchThis event occurs when there is activity relating to watching, or subscribing to, a repository. For more information about watching, see "Managing your subscriptions." For information about the APIs to manage watching, see "Watching" in the REST API documentation.
To subscribe to this event, a GitHub App must have at least read-level access for the "Metadata" repository permission.Availability for watchRepositoriesOrganizationsGitHub AppsWebhook payload object for watchSomeone started watching the repository.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: started enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_dispatchThis event occurs when a GitHub Actions workflow is manually triggered. For more information, see "Manually running a workflow."
For activity relating to workflow runs, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Contents" repository permission.Availability for workflow_dispatchGitHub AppsWebhook payload object for workflow_dispatchWebhook request body parametersName, Type, Descriptionenterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."inputs object or null Requiredinstallation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.ref string Requiredrepository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow string Requiredworkflow_jobThis event occurs when there is activity relating to a job in a GitHub Actions workflow. For more information, see "Using jobs in a workflow." For information about the API to manage workflow jobs, see "Workflow jobs" in the REST API documentation.
For activity relating to a workflow run instead of a job in a workflow run, use the workflow_run event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_jobEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_jobAction type: completedA job in a workflow run finished. This event occurs when a job in a workflow is completed, regardless of whether the job was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow_job object RequiredProperties of workflow_jobdeployment object A request for a specific ref(branch,sha,tag) to be deployedProperties of deploymentworkflow_runThis event occurs when there is activity relating to a run of a GitHub Actions workflow. For more information, see "About workflows." For information about the APIs to manage workflow runs, see the GraphQL documentation or "Workflow runs" in the REST API documentation.
For activity relating to a job in a workflow run, use the workflow_job event.
To subscribe to this event, a GitHub App must have at least read-level access for the "Actions" repository permission.Availability for workflow_runEnterprisesRepositoriesOrganizationsGitHub AppsWebhook payload object for workflow_runAction type: completedA workflow run finished. This event occurs when a workflow run is completed, regardless of whether the workflow was successful or unsuccessful.Webhook request body parametersName, Type, Descriptionaction string RequiredValue: completed enterprise object An enterprise on GitHub. Webhook payloads contain the enterprise property when the webhook is configured
on an enterprise account or an organization that's part of an enterprise account. For more information,
see "About enterprise accounts."installation object The GitHub App installation. Webhook payloads contain the installation property when the event is configured
for and sent to a GitHub App. For more information,
see "Using webhooks with GitHub Apps."organization object A GitHub organization. Webhook payloads contain the organization property when the webhook is configured for an
organization, or when the event occurs from activity in a repository owned by an organization.repository object RequiredThe repository on GitHub where the event occurred. Webhook payloads contain the repository property
when the event occurs from activity in a repository.sender object RequiredA GitHub user.workflow object or null RequiredProperties of workflowworkflow_run object RequiredProperties of workflow_run\n\n\n\n