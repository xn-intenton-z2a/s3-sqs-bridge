./README.md
==== Content of ./README.md ====
# tansu-sqs-bridge

`tansu-sqs-bridge` Tansu SQS Bridge for integrating Kafka and AWS SQS/Lambda/Postgres projections.

Tansu SQS Bridge is an open source bridge between a Tansu Kafka‑compatible broker and AWS SQS. This lightweight solution includes:

- A Dockerized Node.js tansu-consumer-to-sqs that listens to Tansu messages and forwards them to an SQS queue.
- A Lambda function that logs messages from SQS.
- A Lambda function that listens to GitHub event messages and creates projections of GitHub resources, storing them in a PostgresDB table for use by other Lambdas.
- All AWS infrastructure is provisioned using AWS CDK (Java, CDK 2.x).

## Features

- **Lightweight & Always On:** Consumer runs in AWS App Runner with minimal CPU/memory.
- **SQS & Lambda Integration:** Uses SQS for near‑zero idle cost with event‐driven Lambdas.
- **Projections Store:** GitHub events update a PostgresDB table to provide up‑to‑date projections.

## Table of Contents

- [Architecture](#architecture)
- [Installation](#installation)
- [Usage](#usage)
- [Examples](#examples)
- [Testing](#testing)
- [Deployment](#deployment)
- [Contributing](#contributing)
- [License](#license)

## Architecture

The solution consists of four main parts:

1. **tansu-consumer-to-sqs Container:**  
   A Dockerized Node.js application (in `src/lib/main.js`) that listens to Tansu on a Kafka‑compatible port and forwards messages to an SQS queue.

2. **sqs-to-lambda-logger Lambda:**  
   A Node.js Lambda function (in `src/lib/main.js`) triggered by the SQS queue and logs incoming messages.

3. **sqs-to-lambda-github-projection Lambda:**  
   A Node.js Lambda (in `src/lib/main.js`) that listens to the SQS queue to build projections of he latest state of GitHub resources in a PostgresDB table.

4. **AWS Infrastructure:**  
   An AWS CDK stack (in the `cdk/` directory) that provisions:
  - An SQS queues for Kafka messages.
  - Two Lambda functions (Logging and GitHub projection).
  - A PostgresDB table to store GitHub projections.
  - An App Runner service to host the tansu-consumer-to-sqs container.

## Installation

### Prerequisites

- [Docker](https://www.docker.com/get-started)
- [Node.js v16+](https://nodejs.org/)
- [AWS CLI](https://aws.amazon.com/cli/) (configured with proper permissions)
- [Java JDK 11+](https://openjdk.java.net/)
- [Apache Maven](https://maven.apache.org/)
- [AWS CDK 2.x](https://docs.aws.amazon.com/cdk/v2/guide/home.html)

### Clone the Repository

```bash
git clone https://github.com/your-username/tansu-sqs-bridge.git
cd tansu-sqs-bridge
```

### Install Node.js Dependencies

```bash
npm install
```

## Usage

### Running the Consumer Locally

Set the environment variables and start the tansuConsumerToSqs:

```bash
ENV BROKER_URL=your-broker:9092
ENV TOPIC_NAME=test
ENV CONSUMER_GROUP=tansu-sqs-bridge-group
ENV SQS_QUEUE_URL=https://sqs.region.amazonaws.com/123456789012/tansu-sqs-bridge-queue
ENV PGHOST=your-db-host
ENV PGUSER=your-db-user
ENV PGPASSWORD=your-db-password
ENV PGDATABASE=your-db-name
npm run tansu-consumer-to-sqs
```

### Running the Lambda Functions Locally

You can test the Lambda functions (each logs its events):

```bash
npm run sqs-to-lambda-logger      # Logging Lambda
npm run sqs-to-lambda-github-projection # GitHub Projection Lambda
```

### Running Tests

Run all tests using Jest:

```bash
npm test
```

## Examples

### Example Kafka Message

Using the Apache Kafka CLI:

```bash
echo "Hello, Tansu!" | kafka-console-producer --bootstrap-server localhost:9092 --topic test
```

The tansu-consumer-to-sqs forwards the message to SQS and the Lambda logs it.

### Example GitHub Event Message

Simulate a GitHub event (JSON format) being sent to the SQS queue:

```json
{
  "resourceType": "repository",
  "resourceId": "tansu-sqs-bridge",
  "state": {
    "stars": 285,
    "forks": 6,
    "openIssues": 14
  }
}
```
The GitHub Projection Lambda processes this event and updates the PostgresDB table.

### Deploying the AWS Infrastructure

From the `cdk/` directory:

```bash
cd cdk
./mvnw clean package
cdk deploy
```

This deploys the SQS queues, Lambda functions, PostgresDB table, and App Runner service.

## Contributing

We welcome contributions! Please review our [CONTRIBUTING.md](./CONTRIBUTING.md) for guidelines on how to contribute effectively.

## License

Released under the MIT License (see [LICENSE](./LICENSE)).
./CONTRIBUTING.md
==== Content of ./CONTRIBUTING.md ====
# tansu-sqs-bridge

`tansu-sqs-bridge` Tansu SQS Bridge for integrating Kafka and AWS SQS/Lambda/Postgres projections.

## Mission Statement

Tansu SQS Bridge is an open source bridge between a Tansu Kafka‑compatible broker and AWS SQS. This lightweight solution includes:

- A Dockerized Node.js tansuConsumerToSqs that listens to Tansu messages and forwards them to an SQS queue.
- A Lambda function that processes Tansu messages from SQS.
- A new Lambda function that listens to GitHub event messages from a separate SQS queue and creates projections of GitHub resources, storing them in a PostgresDB table for use by other Lambdas.
- All AWS infrastructure is provisioned using AWS CDK (Java, CDK 2.x).

## Guidelines

- **Code Quality:**  
  Write modern, maintainable JavaScript using Node 20 and ESM. Consider edge cases when handling container lifecycle events.

- **Testing:**  
  Robust testing is essential—please add unit and integration tests for all new features.

- **Commit Messages:**  
  Use clear, descriptive commit messages that summarize your changes effectively.

- **Collaboration:**  
  Engage actively in GitHub discussions, issues, and PR reviews. Your feedback helps us continually refine tansu-sqs-bridge.

## Agentic contribution house choice options (programmatically parsed): START

Workflow schedule: schedule-1

## Issue House Choice Options

repository specific activities:
- Create, vary or extend as many library functions as you can that deliver the spirit of this CONTRIBUTING.md Update the Change Log in README.md (or say what was checked).

generic activities:
- Update the source file by applying the Mission Statement to prune any "drift" from the source file. Update the Change Log in README.md (or say what was checked).
- Create, vary or extend as many features in the source file as you can inline with the Mission Statement. Update the Change Log in README.md (or say what was checked).
  #- Find anything that might be a "simulated" or "demo" implementation and switch to a real implementation. Update the Change Log in README.md (or say what was checked).
  #- Consider alternate code paths that could be explicitly handled to improve the range of supported behaviours. Update the Change Log in README.md (or say what was checked).
  #- Look for code that could be simplified using a library and introduce that library. Update the Change Log in README.md (or say what was checked).

undocumented chores:
#- Look for any duplicated code that could be usefully abstracted out to become shared code and implement that abstraction.
- Refresh the README, consulting the guidance in CONTRIBUTING.md while retaining any relevant content and pruning irrelevant content.
  #- Dry-run any examples in comments or the README against the current code and if they are not accurate or if they could cover more features, update the docs or code to be accurate.
- Bring test coverage up as close to 100% as possible, have single layer mocked tests and deeper tests mocking at the external resource (e.g. file system or network).
  #- Ensure the main function so that it generates some demo output without an over the wire call, and hint a CLI switch that will do the real call.

## Agentic contribution house choice options (programmatically parsed): END

### Deploying the AWS Infrastructure

From the `cdk/` directory:

```bash
cd cdk
mvn clean package
cdk deploy
```

This deploys the SQS queue, Lambda functions, PostgresDB table, and App Runner service.

## Contributing

We welcome contributions! Please review our [CONTRIBUTING.md](./CONTRIBUTING.md) for guidelines on how to contribute effectively.

## License

Released under the MIT License (see [LICENSE](./LICENSE)).
./package.json
==== Content of ./package.json ====
{
  "name": "@xn-intenton-z2a/tansu-sqs-bridge",
  "version": "0.1.0",
  "description": "Tansu SQS Bridge for integrating Kafka and AWS SQS/Lambda/Postgres projections.",
  "type": "module",
  "main": "src/lib/main.js",
  "scripts": {
    "build": "echo 'Nothing to build'",
    "formatting": "prettier --check .",
    "formatting-fix": "prettier --write .",
    "linting": "eslint .",
    "linting-json": "eslint --format=@microsoft/eslint-formatter-sarif .",
    "linting-fix": "eslint --fix .",
    "update-to-minor": "npx ncu --upgrade --enginesNode --target minor --verbose --install always",
    "update-to-greatest": "npx ncu --upgrade --enginesNode --target greatest --verbose --install always --reject 'alpha'",
    "test": "vitest",
    "test:unit": "vitest --coverage",
    "start": "node src/lib/main.js",
    "diagnostics": "node src/lib/main.js --diagnostics",
    "sqs-to-lambda-logger": "node src/lib/main.js --sqs-to-lambda-logger",
    "sqs-to-lambda-github-projection": "node src/lib/main.js --sqs-to-lambda-github-projection",
    "tansu-consumer-to-sqs": "node src/lib/main.js --tansu-consumer-to-sqs"
  },
  "keywords": [
    "kafka",
    "sqs",
    "lambda",
    "postgres",
    "aws"
  ],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "@aws-sdk/client-dynamodb": "^3.307.0",
    "@aws-sdk/client-s3": "^3.307.0",
    "@aws-sdk/client-sqs": "^3.307.0",
    "dotenv": "^16.4.7",
    "kafkajs": "^2.2.4",
    "openai": "^4.85.4",
    "pg": "^8.10.0",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@microsoft/eslint-formatter-sarif": "^3.1.0",
    "aws-cdk": "^2.1002.0",
    "eslint": "^9.19.0",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^10.0.2",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.3",
    "eslint-plugin-promise": "^7.2.1",
    "eslint-plugin-react": "^7.37.4",
    "eslint-plugin-security": "^3.0.1",
    "eslint-plugin-sonarjs": "^3.0.2",
    "npm-check-updates": "^17.1.15",
    "prettier": "^3.5.2",
    "vitest": "^3.0.7"
  },
  "overrides": {
    "rimraf": "^4.0.0",
    "glob": "^9.3.0",
    "@humanwhocodes/config-array": "^0.13.0",
    "@humanwhocodes/object-schema": "^2.0.3"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "files": [
    "package.json"
  ],
  "publishConfig": {
    "registry": "https://npm.pkg.github.com"
  }
}
./vitest.config.js
==== Content of ./vitest.config.js ====
import { defineConfig } from "vitest/config";

export default defineConfig({
  resolve: {
    alias: {
      "@dist": "/dist",
      "@src": "/src",
      "@tests": "/tests",
    },
  },
  test: {
    environment: "node",
    include: ["tests/unit/*.test.js"],
    coverage: {
      provider: "v8",
      reportsDirectory: "./coverage",
      reporter: ["text", "json", "html"],
      include: ["src/**/*.js"],
      exclude: ["**/dist/**", "**/entrypoint/**", "**/tests/**", "**/node_modules/**", "src/index.js", "**/exports/**"],
      threshold: {
        statements: 85,
        branches: 80,
        functions: 75,
        lines: 85,
        perFile: {
          statements: 70,
          branches: 60,
          functions: 40,
          lines: 70,
        },
      },
    },
  },
});
./jsconfig.json
==== Content of ./jsconfig.json ====
{
  "compilerOptions": {
    "baseUrl": ".",
    "// Also make path changes in vitest.config.js": "",
    "paths": {
      "@dist/*": ["dist/*"],
      "@src/*": ["src/*"],
      "@tests/*": ["tests/*"]
    }
  }
}
./eslint.config.js
==== Content of ./eslint.config.js ====
import js from "@eslint/js";
import google from "eslint-config-google";
import eslintPluginPrettierRecommended from "eslint-plugin-prettier/recommended";
import globals from "globals";
import promise from "eslint-plugin-promise";
import security from "eslint-plugin-security";
import sonarjs from "eslint-plugin-sonarjs";
import react from "eslint-plugin-react";
import importPlugin from "eslint-plugin-import";

const modifiedGoogleConfig = { ...google, rules: { ...google.rules } };
delete modifiedGoogleConfig.rules["valid-jsdoc"];
delete modifiedGoogleConfig.rules["require-jsdoc"];

/** @type {import('eslint').Linter.FlatConfig[]} */
export default [
  js.configs.recommended,
  modifiedGoogleConfig,
  eslintPluginPrettierRecommended,
  {
    plugins: {
      promise,
      security,
      sonarjs,
      react,
      import: importPlugin,
    },
    languageOptions: {
      ecmaVersion: 2023,
      sourceType: "module",
      globals: {
        ...globals.node,
      },
    },
    rules: {
      "prettier/prettier": "error",
      ...promise.configs.recommended.rules,
      ...sonarjs.configs.recommended.rules,
      "sonarjs/os-command": "off",

      // Formatting and organisation
      "no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
      "no-extra-semi": 2,
      "object-curly-newline": ["error", { consistent: true }],
      "array-element-newline": ["error", "consistent", { multiline: true, minItems: 10 }],
      "import/newline-after-import": ["error", { count: 1 }],
      "camelcase": "off",

      // ESM import rules
      "import/no-amd": "error",
      "import/no-commonjs": "error",
      "import/no-import-module-exports": "error",
      "import/no-cycle": "error",
      "import/no-dynamic-require": "error",
      "import/no-self-import": "off",
      "import/no-unresolved": "off",
      "import/no-useless-path-segments": "error",
      "import/no-duplicates": "error",
      "sonarjs/fixme-tag": "warn",
    },
  },
  {
    files: ["**/*.js"],
    ignores: ["**/tests/**/*.js", "**/*.test.js", "eslint.config.js"],
    rules: {
      ...security.configs.recommended.rules,
      "security/detect-non-literal-fs-filename": "off",
      "security/detect-non-literal-regexp": "off",
      "security/detect-object-injection": "off",
    },
  },
  {
    settings: {
      react: {
        version: "18",
      },
    },
  },
  {
    ignores: ["build/", "coverage/", "dist/", "exports/", "node_modules/", "eslint.config.js"],
  },
];
./.prettierrc
==== Content of ./.prettierrc ====
{
  "singleQuote": false,
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 2,
  "useTabs": false,
  "quoteProps": "consistent",
  "overrides": [
    {
      "files": ".prettierrc",
      "options": { "parser": "json" }
    }
  ]
}
./LICENSE
==== Content of ./LICENSE ====
MIT License

Copyright (c) 2025 intentïon

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
./.prettierrc
==== Content of ./.prettierrc ====
{
  "singleQuote": false,
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 2,
  "useTabs": false,
  "quoteProps": "consistent",
  "overrides": [
    {
      "files": ".prettierrc",
      "options": { "parser": "json" }
    }
  ]
}
==== Content of Dockerfile ==== ; -exec cat Dockerfile ;
