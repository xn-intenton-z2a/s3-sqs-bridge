# .github/workflows/ci-deploy.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: ci-deploy
concurrency: agentic-lib-deploy-${{ inputs.environment || 'ci' }}
run-name: "ci deploy [${{ github.ref_name }}] to [${{ inputs.environment || 'ci' }}]"

on:
  #push:
  #  branches:
  #    # When publishing from a branch, add branch name here, e,g, 'beta'
  #    - main
  #  paths:
  #    - '**/*.sh'
  #    - '**/*.js'
  #    - '**/*.json'
  #    - '**/*.yml'
  #    - '**/*.properties'
  #    - '!intentions/**'
  #    - '!conversations/**'
  #    - '!exports/**'
  #    - '!programs/**'
  #    - '!results/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'ci'
        type: choice
        options:
          - ci
          - prod
  workflow_run:
    workflows:
      - seed-repository
    types:
      - completed
    secrets:
      PERSONAL_ACCESS_TOKEN:
        required: false
      CHATGPT_API_SECRET_KEY:
        required: true
  schedule:
    - cron: '22 */12 */7 * *' # schedule-1
    #- cron: '22 */12 * * *' # schedule-2
    #- cron: '22 */3 * * *' # schedule-3
    #- cron: '22 */3 * * *' # schedule-4

env:
  environment: ${{ inputs.environment || 'ci' }}
  npmAuthOrganisation: ${{ vars.npmAuthOrganisation || '@xn-intenton-z2a' }}
  s3BucketUrl: ${{ vars.s3BucketUrl || 's3://agentic-lib-telemetry-bucket/events/' }}
  s3WebsiteBucketUrl: ${{ vars.s3WebsiteBucketUrl || 's3://agentic-lib-public-website-stats-bucket/' }}
  iamActionsRoleArn: ${{ vars.iamActionsRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-github-actions-role' }}
  iamStatsBucketWriterRoleArn: ${{ vars.iamStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-deployment-role' }}
  iamPublicWebsiteStatsBucketWriterRoleArn: ${{ vars.iamPublicWebsiteStatsBucketWriterRoleArn || 'arn:aws:iam::541134664601:role/agentic-lib-public-website-stats-bucket-writer-role' }}

jobs:
  agentic-lib:
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-agent-config.yml@6.9.4'
    with:
      configPath: ${{ vars.configPath || '.github/agents/agentic-lib.yml' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  npm-test-and-run-main:
    needs:
      - agentic-lib
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up ~/.npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - run: npm ci || npm install

      - name: test
        id: test
        shell: bash
        run: 'npm test'

      - name: main
        id: main
        shell: bash
        run: timeout 5m ${{ needs.agentic-lib.outputs.mainScript }}

  mvn-package-cdk-synth:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up ~/.npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - run: npm ci || npm install

      - name: mvn
        if: steps.mvn.outputs.pomXmlExists == 'true'
        id: mvn
        shell: bash
        run: |
          if [ -f pom.xml ]; then
            pomXmlExists='true'
          else
            pomXmlExists='false'
          fi
          echo "pomXmlExists=${pomXmlExists?}" | tee -a "${GITHUB_OUTPUT?}"

      - uses: actions/setup-java@v4
        if: steps.mvn.outputs.pomXmlExists == 'true'
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'
          server-password: PERSONAL_ACCESS_TOKEN
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: download-dependencies
        id: download-dependencies
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: ./mvnw --batch-mode --quiet dependency:go-offline > /dev/null 2>&1
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: package
        id: package
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: ./mvnw clean package
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: synth
        id: synth
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: npx cdk synth --strict --validation --no-staging
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  deploy:
    needs:
      - npm-test-and-run-main
      - mvn-package-cdk-synth
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'ci' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up ~/.npmrc
        if: ${{ env.npmAuthOrganisation != '' }}
        shell: bash
        run: |
          echo "${{ env.npmAuthOrganisation }}:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - run: npm ci || npm install

      - name: test
        id: test
        shell: bash
        run: npm test

      - name: mvn
        id: mvn
        shell: bash
        run: |
          if [ -f pom.xml ]; then
            pomXmlExists='true'
          else
            pomXmlExists='false'
          fi
          echo "pomXmlExists=${pomXmlExists?}" | tee -a "${GITHUB_OUTPUT?}"

      #- run: npm install -g aws-cdk

      - name: Configure AWS Credentials
        if: steps.mvn.outputs.pomXmlExists == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::541134664601:role/agentic-lib-github-actions-role
          role-chaining: false
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws sts get-caller-identity --region eu-west-2
        if: steps.mvn.outputs.pomXmlExists == 'true'

      - name: Configure AWS Credentials
        if: steps.mvn.outputs.pomXmlExists == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::541134664601:role/agentic-lib-deployment-role
          role-chaining: true
          aws-region: eu-west-2
          audience: sts.amazonaws.com
          role-skip-session-tagging: true
          output-credentials: true
          retry-max-attempts: 3

      - run: aws s3 ls --region eu-west-2
        if: steps.mvn.outputs.pomXmlExists == 'true'

      - uses: actions/setup-java@v4
        if: steps.mvn.outputs.pomXmlExists == 'true'
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'
          server-password: PERSONAL_ACCESS_TOKEN
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: download-dependencies
        id: download-dependencies
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: ./mvnw --batch-mode --quiet dependency:go-offline > /dev/null 2>&1
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: package
        id: package
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: ./mvnw clean package
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Log built files
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: |
          echo "ls -lh target/:"
          ls -lh target/
          echo "du -h target/:"
          du -h target/

      - name: set-jar-path
        id: jar-path
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: |
          jarPath=$(mvn help:evaluate --quiet --define expression=project.build.directory --define forceStdout)
          jarFilename=$(mvn help:evaluate --quiet --define expression=project.build.finalName --define forceStdout)
          echo "jarFilepath=${jarPath?}/${jarFilename?}.jar" | tee -a "${GITHUB_OUTPUT?}"

      - name: stacks
        id: stacks
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: |
          synth=$(jq -r '.synthStacks' cdk.json | sed 's/WebStack-dev/WebStack-${{ inputs.environment || 'ci' }}/g')
          deploy=$(jq -r '.deployStacks' cdk.json | sed 's/WebStack-dev/WebStack-${{ inputs.environment || 'ci' }}/g')
          echo "deploy=${deploy?}" | tee -a "${GITHUB_OUTPUT?}"
          echo "synth=${synth?}" | tee -a "${GITHUB_OUTPUT?}"

      - name: log environment and repository variables
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: |
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          echo "ENV_NAME: ${{ inputs.environment || 'ci' }}"
          echo "USE_EXISTING_HOSTED_ZONE: ${{ vars.USE_EXISTING_HOSTED_ZONE || 'true' }}"
          echo "USE_EXISTING_CERTIFICATE: ${{ vars.USE_EXISTING_CERTIFICATE || 'true' }}"
          echo "CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED || 'false' }}"
          echo "HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}"
          echo "HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}"
          echo "CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}"
          echo "SUB_DOMAIN_NAME: ${{ vars.SUB_DOMAIN_NAME || 'web' }}"
          echo "LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}"
          echo "LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}"

      - name: synth
        id: synth
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: ${{ steps.stacks.outputs.synth }}
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ENV_NAME: ${{ inputs.environment || 'ci' }}
          USE_EXISTING_HOSTED_ZONE: ${{ vars.USE_EXISTING_HOSTED_ZONE || 'true' }}
          USE_EXISTING_CERTIFICATE: ${{ vars.USE_EXISTING_CERTIFICATE || 'true' }}
          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED || 'false' }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          SUB_DOMAIN_NAME: ${{ vars.SUB_DOMAIN_NAME || 'web' }}
          LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}

      - name: Log generated stacks
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: |
          jq '.' cdk.out/tree.json

      - name: Upload tree.json as artifact
        if: steps.mvn.outputs.pomXmlExists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cdk-tree-json
          path: cdk.out/tree.json
          retention-days: 7

      - name: deploy
        id: deploy
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: ${{ steps.stacks.outputs.deploy }}
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ENV_NAME: ${{ inputs.environment || 'ci' }}
          USE_EXISTING_HOSTED_ZONE: ${{ vars.USE_EXISTING_HOSTED_ZONE || 'true' }}
          USE_EXISTING_CERTIFICATE: ${{ vars.USE_EXISTING_CERTIFICATE || 'true' }}
          CLOUD_TRAIL_ENABLED: ${{ vars.AWS_CLOUD_TRAIL_ENABLED || 'false' }}
          HOSTED_ZONE_NAME: ${{ vars.AWS_HOSTED_ZONE_NAME }}
          HOSTED_ZONE_ID: ${{ vars.AWS_HOSTED_ZONE_ID }}
          CERTIFICATE_ARN: ${{ vars.AWS_CERTIFICATE_ARN }}
          SUB_DOMAIN_NAME: ${{ vars.SUB_DOMAIN_NAME || 'web' }}
          LOG_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
          LOG_GZIPPED_S3_OBJECT_EVENT_HANDLER_SOURCE: ${{ steps.jar-path.outputs.jarFilepath }}
