# .github/workflows/utils-reset-sandbox.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: reset-sandbox
concurrency: reset-sandbox
run-name: "reset sandbox"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 7 */7 * *' # schedule-1
    #- cron: '0 7 */7 * *' # schedule-2
    #- cron: '0 0 * * *' # schedule-3
    #- cron: '0 0 * * *' # schedule-4

env:
  gitUserEmail: 'action@github.com'
  gitUserName: 'GitHub Actions[bot]'

jobs:

  agentic-lib:
    uses: 'xn-intenton-z2a/agentic-lib/.github/workflows/wfr-agent-config.yml@main'
    with:
      configPath: ${{ vars.configPath || '.github/agents/agentic-lib.yml' }}
    secrets:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  delete-sandbox:
    needs:
      - agentic-lib
    if: ${{ needs.agentic-lib.outputs.sandboxReset == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Delete sandbox files
        run: |
          rm -rvf '${{ needs.agentic-lib.outputs.sandboxPath }}'
          echo "Sandbox files deleted."

      - name: Commit and push
        id: commit
        continue-on-error: true
        run: |
          git config --local user.email '${{ env.gitUserEmail }}'
          git config --local user.name '${{ env.gitUserName }}'
          git status -v
          git add -v --all
          git diff
          git commit -m 'Reset sandbox' --allow-empty
          git push -v
          git status -v

  delete-branches:
    needs:
      - agentic-lib
    if: ${{ needs.agentic-lib.outputs.sandboxReset == 'true' }}
    runs-on: ubuntu-latest
    env:
      branchPrefix: 'agentic-lib-'
      gitUserEmail: 'action@github.com'
      gitUserName: 'GitHub Actions[bot]'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: |
          git fetch --all
          git branch -r

      - name: delete branches matching ${{ env.branchPrefix }}
        id: determine
        uses: actions/github-script@v7
        env:
          attemptsPerBranch: ${{ needs.agentic-lib.outputs.attemptsPerBranch }}
        with:
          script: |
            const gitUserEmail = process.env.gitUserEmail;
            const gitUserName = process.env.gitUserName;
            const { execSync } = require('child_process');
            const prefix = process.env.branchPrefix || "agentic-lib-";

            let branch;
            core.info("Schedule event detected. Scanning for matching branches.");
            const branchesResp = await github.rest.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const matchingBranches = branchesResp.data
              .filter(b => new RegExp(`^${prefix}`).test(b.name))
              .map(b => b.name);
            core.info(`Matching branches: ${matchingBranches}`);

            // Check if any of the matching branches have a PR open
            const openPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
            });

            // Close any open PRs for the matching branches
            for (const pr of openPRs.data) {
              if (matchingBranches.includes(pr.head.ref)) {
                core.info(`Reset sandbox: Closing PR #${pr.number} for branch ${pr.head.ref}`);
                await github.rest.pulls.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  state: 'closed',
                });
              }
            }
            
            // Delete the branches
            for (const branch of matchingBranches) {
              core.info(`Reset sandbox: Deleting branch ${branch}`);
              try {
                execSync(`git push origin --delete ${branch}`, { stdio: 'inherit' });
                core.info(`Deleted branch ${branch}`);
              } catch (error) {
                core.error(`Failed to delete branch ${branch}: ${error.message}`);
              }
            }

    outputs:
      branch: ${{ steps.determine.outputs.branch }}

  cleanup-issues:
    needs:
      - agentic-lib
    if: ${{ needs.agentic-lib.outputs.sandboxReset == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Redact old GitHub issues and delete their comments
        uses: actions/github-script@v7
        with:
          script: |
            // Set retention period (in days)
            const retentionDays = 0;
            const cutoffDate = new Date(Date.now() - retentionDays * 24 * 60 * 60 * 1000);
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const perPage = 100;

            console.log(`Closing issues not updated in the last ${retentionDays} days (before ${cutoffDate.toISOString()})...`);

            let page = 1;
            while (true) {
              const issuesResponse = await github.rest.issues.listForRepo({
                owner,
                repo,
                state: 'all',
                per_page: perPage,
                state: 'open',
                page
              });
              const issues = issuesResponse.data;
              if (!issues || issues.length === 0) break;
              for (const issue of issues) {
                // Skip pull requests
                if (issue.pull_request) continue;
                const updatedAt = new Date(issue.updated_at);
                if (updatedAt < cutoffDate) {
                  try {
                    // Close the issue
                    await github.rest.issues.update({
                      owner,
                      repo,
                      issue_number: issue.number,
                      state: 'closed',
                    });
                    core.info(`Closed issue #${issue.number} (${issue.title})`);
                  } catch (error) {
                    console.error(`Failed to close issue #${issue.number}: ${error.message}`);
                  }
                }
              }
              page++;
            }
