# .github/workflows/test.yml
#
# This file is part of the example suite for `agentic-lib` see: https://github.com/xn-intenton-z2a/agentic-lib
# This file is licensed under the MIT License. For details, see LICENSE-MIT

name: Tests
run-name: 'Tests [${{ github.ref_name }}] [${{ github.event.head_commit.message }}]'

on:
  push:
    paths:
      - '**/*.sh'
      - '**/*.java'
      - '**/*.js'
      - '**/*.json'
      - '**/*.yml'
      - '**/pom.xml'
      - '**/*.properties'
      - '!exports/**'
  workflow_dispatch:
  workflow_run:
    workflows:
      - "Automerge"
    types:
      - completed
  schedule:
    - cron: '45 */6 * * *' # schedule-1
    #- cron: '45 */4 * * *' # schedule-2
    #- cron: '0 * * * *' # schedule-3


jobs:

  npm-test:
    name: 'npm test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up ~/.npmrc
        run: |
          echo "@xn-intenton-z2a:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - run: npm ci

      - run: npm test

  npm-unit-test:
    name: 'npm unit test with coverage'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up ~/.npmrc
        run: |
          echo "@xn-intenton-z2a:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - run: npm ci

      - run: npm run test:unit

  npm-build-test-and-run-main:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up ~/.npmrc
        run: |
          echo "@xn-intenton-z2a:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - run: npm ci

      - name: build
        id: build
        shell: bash
        run: 'npm run build'

      - name: test
        id: test
        shell: bash
        run: 'npm test'

      - name: main
        id: main
        shell: bash
        run: timeout 5m ${{ vars.MAIN_SCRIPT || 'npm run start' }}

  mvn-package-cdk-synth:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Set up ~/.npmrc
        run: |
          echo "@xn-intenton-z2a:registry=https://npm.pkg.github.com" >> ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - run: npm ci

      - name: mvn
        id: mvn
        shell: bash
        run: |
          if [ -f pom.xml ]; then
            pomXmlExists='true'
          else
            pomXmlExists='false'
          fi
          echo "pomXmlExists=${pomXmlExists?}" | tee -a "${GITHUB_OUTPUT?}"

      - uses: actions/setup-java@v4
        if: steps.mvn.outputs.pomXmlExists == 'true'
        with:
          distribution: 'corretto'
          java-version: 21
          cache: 'maven'
          server-password: PERSONAL_ACCESS_TOKEN
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: check
        id: check
        run: cat ~/.m2/settings.xml
        if: steps.mvn.outputs.pomXmlExists == 'true'

      - name: package
        id: package
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: ./mvnw clean package
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: synth
        id: synth
        if: steps.mvn.outputs.pomXmlExists == 'true'
        shell: bash
        run: npx cdk synth --strict --validation --no-staging --trace
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
